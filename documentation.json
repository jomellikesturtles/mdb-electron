{
    "pipes": [
        {
            "name": "CommaSpacePipe",
            "id": "pipe-CommaSpacePipe-5509e9a2318e94a3a51617af0ad6ff8f195a18a930b179d9883791cb1a0be74a74174542f9befd5961c8340accd5635eb570a65f9bd3b08d70855c541d9c84f8",
            "file": "src/app/shared/pipes/mdb-pipes.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Separates array items with comma and space.</p>\n",
            "rawdescription": "\n\nSeparates array items with comma and space.\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "commaSpace",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { STRING_REGEX_TMDB_RUNTIME } from '../constants';\nimport GeneralUtil from '@utils/general.util';\n\n/**\n * Gets the release year from string with format `00 Month 0000`.\n * @param value date string with format `00 Month 0000`\n * @returns year with `YYYY` format\n */\n@Pipe({ name: 'releaseYear' })\nexport class ReleaseYearPipe implements PipeTransform {\n  constructor() { }\n  transform(value: string): string {\n    return GeneralUtil.getYear(value)\n  }\n}\n\n/**\n * Separates array items with comma and space.\n * @param value list of value\n * @returns string representation of the original value separated with comma and space\n */\n@Pipe({ name: 'commaSpace' })\nexport class CommaSpacePipe implements PipeTransform {\n  transform(value: string[]): string {\n    return value.join(', ')\n  }\n}\n\n/**\n * Displays the runtime into readable understandable display.\n * @param value original value. `000` or `000 min` format`\n * @returns `00 hours 00 minutes` format\n */\n@Pipe({ name: 'runtimeDisplay' })\nexport class RuntimeDisplayPipe implements PipeTransform {\n  transform(value: string | number): string {\n    let toReturn = ''\n    if (typeof value === 'number') {\n      const RUNTIME_HOUR = Math.floor(value / 60)\n      const VALUE_REMAINDER = (value % 60)\n      if (RUNTIME_HOUR === 1) {\n        toReturn += `${RUNTIME_HOUR} hour`\n      } else if (RUNTIME_HOUR >= 2) {\n        toReturn += `${RUNTIME_HOUR} hours`\n      }\n      if (VALUE_REMAINDER !== 0) {\n        if (VALUE_REMAINDER === 1) {\n          toReturn += ` ${VALUE_REMAINDER} minutes`\n        } else {\n          toReturn += ` ${VALUE_REMAINDER} minutes`\n        }\n      }\n    } else if (typeof value === 'string') {\n      const REGEX_TMDB_RUNTIME = new RegExp(STRING_REGEX_TMDB_RUNTIME, `gi`)\n      const REGEX_RESULTS = REGEX_TMDB_RUNTIME.exec(value)\n      if (value !== 'N/A') {\n        if (REGEX_RESULTS != null) {\n          const runtimeHour = Math.floor(parseInt(value, 10) / 60)\n          const integerValue = parseInt(value, 10)\n          const valueRemainder = integerValue % 60\n          if (runtimeHour === 1) {\n            toReturn += `${runtimeHour} hour`\n          } else if (runtimeHour >= 2) {\n            toReturn += `${runtimeHour} hours`\n          }\n          if (valueRemainder !== 0) {\n            if (valueRemainder === 1) {\n              toReturn += ` ${valueRemainder} minutes`\n            } else {\n              toReturn += ` ${valueRemainder} minute`\n            }\n          }\n        }\n      }\n    }\n\n    return toReturn\n  }\n}\n\n/**\n * Convert seconds to HH:MM:SS format\n * @param value seconds\n */\n@Pipe({ name: 'toHHMMSS' })\nexport class HHMMSSPipe implements PipeTransform {\n  constructor() { }\n  transform(value: number): string {\n    return GeneralUtil.convertToHHMMSS(value);\n  }\n}\n"
        },
        {
            "name": "GenrePipe",
            "id": "pipe-GenrePipe-5b3d37bc561645a622d73253bbd925dd6decb09736f681441efb339b55a9a82fba65b836212d3f68aae4ac3a1ffa938960a89c7f2fc0f1b8049a69d9f85ced6e",
            "file": "src/app/shared/components/preview/preview.component.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Converts genre code into its genre name equivalent.</p>\n",
            "rawdescription": "\n\nConverts genre code into its genre name equivalent.\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "genreCode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 323,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "genreCode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "genre",
            "sourceCode": "import { Component, OnInit, AfterViewInit, OnDestroy, Pipe, PipeTransform, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { DataService } from '@services/data.service';\nimport { GenreCodes } from '@models/interfaces';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { MovieService } from '@services/movie/movie.service';\nimport { UserDataService } from '@services/user-data/user-data.service';\nimport { WatchedService } from '@services/watched.service';\nimport { MDBMovie } from '@models/mdb-movie.model';\nimport GeneralUtil from '@utils/general.util';\nimport { TMDB_FULL_MOVIE_DETAILS } from 'app/mock-data-movie-details';\n\n@Component({\n  selector: 'app-preview',\n  templateUrl: './preview.component.html',\n  styleUrls: ['./preview.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PreviewComponent implements OnInit, OnDestroy, AfterViewInit {\n\n  constructor(\n    private dataService: DataService,\n    private watchedService: WatchedService,\n    private router: Router,\n    private activatedRoute: ActivatedRoute,\n    private userDataService: UserDataService,\n    private cdr: ChangeDetectorRef,\n    private movieService: MovieService,\n    private domSanitizer: DomSanitizer,\n  ) { }\n\n  previewMovie: MDBMovie\n  clipSrc = null\n  youtubeUrl = ''\n  player;\n  globalPlayerApiScript\n  hasAlreadySelected: boolean;\n  isYTReady = false\n  hasInitialSelected = false\n  isHide = true\n  playedTmdbId = 0\n  isMute = false\n  isYTPlaying = false\n  hasTrailerClip = false\n  isAvailable = false\n  procBookmark = false\n  procWatched = false\n  procHighlight = false\n  showPreviewOverlayContext = false\n  isTrailerOnly = false;\n\n  ngOnInit() {\n    this.frameReady()\n  }\n\n  ngAfterViewInit(): void {\n\n    // this.dataService.previewMovie.subscribe((e: MDBMovie) => {\n    //   console.log('PREVIEWMOVIE:', e)\n      this.getVideoClip(new MDBMovie(TMDB_FULL_MOVIE_DETAILS))\n      this.showPreviewOverlayContext = this.router.url.includes('/details/') ? false : true\n      this.cdr.detectChanges()\n    // })\n  }\n\n  ngOnDestroy() {\n    this.removeYoutube()\n  }\n\n  frameReady() {\n    (window as any).onYouTubeIframeAPIReady = () => {\n      this.player = new (window as any).YT.Player('player', {\n        height: '100%',\n        width: '100%',\n        events: {\n          onReady: (event: any) => this.onPlayerReady(event),\n          onStateChange: (event: any) => this.onPlayerStateChange(event)\n        },\n        playerVars: {\n          autoplay: 0,\n          controls: 0,\n          modestbranding: 1,\n          rel: 1,\n          showInfo: 0,\n          disablekb: 1\n        }\n      });\n    }\n  }\n\n  onPlayerReady(event) {\n    event.target.cueVideoById({\n      videoId: this.youtubeUrl\n    });\n    event.target.playVideo();\n  }\n\n  /**\n   * Detects the state change of trailer player (YouTube)\n   * @param event\n   */\n  onPlayerStateChange(event) {\n    /**\n     * -1 (unstarted)\n     * 0 (ended)\n     * 1 (playing)\n     * 2 (paused)\n     * 3 (buffering)\n     * 5 (video cued).\n     * YT.PlayerState.ENDED\n     * YT.PlayerState.PLAYING\n     * YT.PlayerState.PAUSED\n     * YT.PlayerState.BUFFERING\n     * YT.PlayerState.CUED\n     */\n    console.log('onPlayerStateChange: ', event.data);\n    if (event.data === 1) {\n      this.isYTReady = true\n      this.isYTPlaying = true\n    }\n    if (event.data === -1 || event.data === 5 || event.data === 0) {\n      this.isYTReady = false\n      this.isYTPlaying = false\n    }\n    if (event.data === 2) {\n      const root = this\n      console.log('paused')\n      // setTimeout(() => {\n      //   root.player.playVideo()\n      //   console.log('settoplay')\n      // }, 3000);\n    }\n    this.cdr.detectChanges()\n\n  }\n\n  /**\n   * TODO: Simplify component code. Transfer codes to the service.\n   * Performs actions for selected movie.\n   * @param movie the selected movie\n   */\n  async getVideoClip(movie: MDBMovie) {\n    this.previewMovie = movie\n    this.isHide = false\n    if (movie.tmdbId === this.playedTmdbId) {\n      return\n    }\n    this.playedTmdbId = this.previewMovie.tmdbId\n    this.hasInitialSelected = true\n    let videoId = ''\n    const results = []\n    let title = this.previewMovie.title.toLowerCase()\n    const query = `${this.previewMovie.title} ${this.getYear(this.previewMovie.releaseDate)}`\n    title = title.replace(/[.…]+/g, '')\n\n    let theRes = await this.movieService.getRelatedClips(this.previewMovie.tmdbId).toPromise()\n\n    if (theRes.results.length === 0) {\n      this.clipSrc = null\n      return\n    }\n\n    theRes = theRes.results.find(e => e.type.toLowerCase() === 'trailer')\n    if (theRes) {\n      this.hasTrailerClip = true\n      theRes = theRes.key\n    } else {\n      this.clipSrc = null\n      this.hasTrailerClip = false\n      return\n    }\n    // const index = Math.round(Math.random() * (theRes.results.length - 1))\n    // theRes = theRes.results[index].key\n    // this.movieService.getRandomVideoClip(query).subscribe(data => {\n    // data.forEach(element => {\n    //   const snipTitle = $.parseHTML(element.snippet.title.toLowerCase())[0].textContent\n    //   if ((snipTitle.indexOf(title) >= 0) && ((snipTitle.indexOf('scene') >= 0) || (snipTitle.indexOf('trailer') >= 0) || (snipTitle.indexOf('movie clip') >= 0)) && (snipTitle.indexOf('behind the scene') === -1)) {\n    //     results.push({ title: snipTitle, videoId: element.id.videoId })\n    //   }\n    // })\n    // // HiN6Ag5-DrU?VQ=HD720\n    // const index = Math.round(Math.random() * (results.length - 1))\n    // console.log('clips list length: ', results.length, ' clip index: ', index, results[index]);\n\n    videoId = theRes\n    // videoId = results[index].videoId\n    this.clipSrc = this.domSanitizer.bypassSecurityTrustResourceUrl(`https://www.youtube.com/embed/${videoId}?VQ=HD720&autoplay=1&rel=1&controls=0&disablekb=1&fs=0&modestbranding=1`)\n    this.clipSrc = `https://www.youtube.com/embed/${videoId}?VQ=HD720&autoplay=1&rel=1&controls=0&disablekb=1&fs=0&modestbranding=1`\n    this.youtubeUrl = videoId\n    console.log('CLIPSRC', this.clipSrc)\n    // if results[index].snippet.channelTitle  === 'Movieclips' ---- cut the video by 30seconds\n    if (!this.hasAlreadySelected) {\n      this.generateYoutube()\n      this.hasAlreadySelected = true\n    }\n\n    const root = this\n    setTimeout(() => {\n      // root.setVideo(videoId)\n      this.cdr.detectChanges()\n    }, 5000)\n    // })\n  }\n\n  setVideo(videoId: string) {\n    this.player.loadVideoById(videoId);\n    // this.player.cueVideoByUrl(videoId);\n  }\n\n  /**\n   * Creates youtube html script.\n   */\n  generateYoutube(): void {\n    const doc = (window as any).document;\n    const playerApiScript = doc.createElement('script');\n    playerApiScript.type = 'text/javascript';\n    playerApiScript.src = 'https://www.youtube.com/iframe_api';\n    this.globalPlayerApiScript = playerApiScript\n    doc.body.appendChild(this.globalPlayerApiScript);\n  }\n\n  removeYoutube() {\n    const doc = (window as any).document;\n    if (this.globalPlayerApiScript) {\n      doc.body.removeChild(this.globalPlayerApiScript)\n      this.globalPlayerApiScript = null\n    }\n  }\n\n  async toggleBookmark(): Promise<any> {\n    this.procBookmark = true\n    let bmDoc\n    bmDoc = await this.userDataService.toggleBookmark(this.previewMovie)\n    console.log('BOOKMARKADD/remove:', bmDoc)\n    this.procBookmark = false\n    // this.cdr.detectChanges()\n  }\n\n  async toggleWatched() {\n    this.procWatched = true\n    let wDocId\n    wDocId = await this.watchedService.toggleWatched(this.previewMovie)\n    console.log('WATCHEDADD/remove:', wDocId)\n    this.procBookmark = false\n    // this.cdr.detectChanges()\n  }\n\n  toggleMute() {\n    if (this.isMute) {\n      this.player.setVolume(100)\n      this.isMute = false\n    } else {\n      this.player.setVolume(0)\n      this.isMute = true\n    }\n  }\n  /**\n   * Goes to detail of the selected movie.\n   * @param movie the movie selected\n   */\n  goToMovie(id: any) {\n    const highlightedId = id;\n    this.dataService.updateHighlightedMovie(highlightedId);\n    this.router.navigate([`/details/${highlightedId}`], { relativeTo: this.activatedRoute });\n    this.isHide = true\n    this.onHidePlayer()\n  }\n\n  /**\n   * Gets the year.\n   * @param releaseDate release date with format YYYY-MM-DD\n   */\n  getYear(releaseDate: string) {\n    return GeneralUtil.getYear(releaseDate)\n  }\n\n  /**\n   * Discovers movies based from criteria.\n   * @param type type of discovery. (year, certification, genre)\n   * @param id value to discover\n   */\n  goToDiscover(type: string, id: string, name?: string) {\n    this.dataService.updateDiscoverQuery({ type: type, value: id, name: name })\n    this.router.navigate([`/discover`], { relativeTo: this.activatedRoute });\n    this.isHide = true\n    this.onHidePlayer()\n  }\n\n  playPreview() {\n    this.player.playVideo();\n  }\n\n  stopPreview() {\n    if (this.player) {\n      this.player.stopVideo();\n    }\n  }\n\n  onHidePlayer() {\n    console.log(this.player)\n    this.isHide = true\n    this.clipSrc = null\n    this.stopPreview()\n  }\n\n  playMovie() {\n\n  }\n\n}\n\n/**\n * Converts genre code into its genre name equivalent.\n * @param genreCode genre code origin\n * @returns genre name\n */\n@Pipe({ name: 'genre' })\nexport class GenrePipe implements PipeTransform {\n  constructor() { }\n  transform(genreCode: number): string {\n    return GenreCodes[genreCode]\n  }\n}\n"
        },
        {
            "name": "HHMMSSPipe",
            "id": "pipe-HHMMSSPipe-5509e9a2318e94a3a51617af0ad6ff8f195a18a930b179d9883791cb1a0be74a74174542f9befd5961c8340accd5635eb570a65f9bd3b08d70855c541d9c84f8",
            "file": "src/app/shared/pipes/mdb-pipes.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Convert seconds to HH:MM:SS format</p>\n",
            "rawdescription": "\n\nConvert seconds to HH:MM:SS format\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "toHHMMSS",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { STRING_REGEX_TMDB_RUNTIME } from '../constants';\nimport GeneralUtil from '@utils/general.util';\n\n/**\n * Gets the release year from string with format `00 Month 0000`.\n * @param value date string with format `00 Month 0000`\n * @returns year with `YYYY` format\n */\n@Pipe({ name: 'releaseYear' })\nexport class ReleaseYearPipe implements PipeTransform {\n  constructor() { }\n  transform(value: string): string {\n    return GeneralUtil.getYear(value)\n  }\n}\n\n/**\n * Separates array items with comma and space.\n * @param value list of value\n * @returns string representation of the original value separated with comma and space\n */\n@Pipe({ name: 'commaSpace' })\nexport class CommaSpacePipe implements PipeTransform {\n  transform(value: string[]): string {\n    return value.join(', ')\n  }\n}\n\n/**\n * Displays the runtime into readable understandable display.\n * @param value original value. `000` or `000 min` format`\n * @returns `00 hours 00 minutes` format\n */\n@Pipe({ name: 'runtimeDisplay' })\nexport class RuntimeDisplayPipe implements PipeTransform {\n  transform(value: string | number): string {\n    let toReturn = ''\n    if (typeof value === 'number') {\n      const RUNTIME_HOUR = Math.floor(value / 60)\n      const VALUE_REMAINDER = (value % 60)\n      if (RUNTIME_HOUR === 1) {\n        toReturn += `${RUNTIME_HOUR} hour`\n      } else if (RUNTIME_HOUR >= 2) {\n        toReturn += `${RUNTIME_HOUR} hours`\n      }\n      if (VALUE_REMAINDER !== 0) {\n        if (VALUE_REMAINDER === 1) {\n          toReturn += ` ${VALUE_REMAINDER} minutes`\n        } else {\n          toReturn += ` ${VALUE_REMAINDER} minutes`\n        }\n      }\n    } else if (typeof value === 'string') {\n      const REGEX_TMDB_RUNTIME = new RegExp(STRING_REGEX_TMDB_RUNTIME, `gi`)\n      const REGEX_RESULTS = REGEX_TMDB_RUNTIME.exec(value)\n      if (value !== 'N/A') {\n        if (REGEX_RESULTS != null) {\n          const runtimeHour = Math.floor(parseInt(value, 10) / 60)\n          const integerValue = parseInt(value, 10)\n          const valueRemainder = integerValue % 60\n          if (runtimeHour === 1) {\n            toReturn += `${runtimeHour} hour`\n          } else if (runtimeHour >= 2) {\n            toReturn += `${runtimeHour} hours`\n          }\n          if (valueRemainder !== 0) {\n            if (valueRemainder === 1) {\n              toReturn += ` ${valueRemainder} minutes`\n            } else {\n              toReturn += ` ${valueRemainder} minute`\n            }\n          }\n        }\n      }\n    }\n\n    return toReturn\n  }\n}\n\n/**\n * Convert seconds to HH:MM:SS format\n * @param value seconds\n */\n@Pipe({ name: 'toHHMMSS' })\nexport class HHMMSSPipe implements PipeTransform {\n  constructor() { }\n  transform(value: number): string {\n    return GeneralUtil.convertToHHMMSS(value);\n  }\n}\n"
        },
        {
            "name": "MagnetPipe",
            "id": "pipe-MagnetPipe-ffdae8c6dcdc6f4c1cd2626447395ec09eec4424cc4d9ebcfa801e6692736cf8489a8c4f40b54ba81cfdc1167a0c50059e9fc7dd5fdffd2c568d8b6880ad636c",
            "file": "src/app/services/torrent/torrent.service.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 251,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "magnet",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Observable, of, Subscriber, forkJoin } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { MDBTorrent, ITPBTorrent } from '@models/interfaces'\nimport { IpcService } from '@services/ipc.service'\nimport { DomSanitizer } from '@angular/platform-browser'\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { STRING_REGEX_IMDB_ID } from '../../shared/constants';\nimport { IYTSSingleQuery, YTSTorrent } from '@models/yts-torrent.model';\nimport { CacheService } from '../cache.service';\nimport GeneralUtil from '@utils/general.util';\n\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TorrentService {\n\n  constructor(\n    private http: HttpClient,\n    private ipcService: IpcService,\n    private cacheService: CacheService,\n    private sanitizer: DomSanitizer) { }\n\n  trackers = [`udp://glotorrents.pw:6969/announce`,\n    `udp://tracker.opentrackr.org:1337/announce`,\n    `udp://torrent.gresille.org:80/announce`,\n    `udp://tracker.openbittorrent.com:80`,\n    `udp://tracker.coppersurfer.tk:6969`,\n    `udp://tracker.leechers-paradise.org:6969`,\n    `udp://p4p.arenabg.ch:1337`,\n    `udp://tracker.internetwarriors.net:1337`]\n  fileName = 'torrent_dump_full.csv'\n  testFileName = 'torrent_dump_mini.csv'\n  assetsDirectory = '../assets/'\n  fileLine: string[]\n  torrentsInfo = []\n  displayedTorrentsInfo = []\n  ytsUrl = 'https://yts.mx/api/v2/list_movies.json'\n  ytsUrl2 = 'https://yts.am/api/v2/list_movies.json'\n\n\n  /**\n   * Gets torrent from online.\n   */\n  getTorrentsOnline(imdbId: string): Observable<IYTSSingleQuery | null> {\n    // tt2015381 - guardians of the galaxy\n    return this.cacheService.get(imdbId + '_YT', this.torrentsOnline(imdbId))\n  }\n  /**\n   * Searches torrents offline\n   * @param val imdb or title\n   * @param year year\n   */\n  async getTorrentsOffline(val: string, year: string | number) {\n    // this.ipcService.call(this.ipcService.IPCCommand.SearchTorrent, [val, year])\n  }\n\n  /**\n   * TODO: add checking for online source connnection.\n   * @param val `[title, year]`\n   */\n  getTorrents(query: string, year?: string | number): Observable<any> {\n    let result\n    const REGEX_IMDB_ID = new RegExp(STRING_REGEX_IMDB_ID, `gi`);\n    if (typeof query === 'string' && query.trim().match(REGEX_IMDB_ID)) {\n      result = this.getTorrentsOnline(query);\n    } else {\n      result = this.getTorrentsOffline(query, year);\n    }\n    // this.sanitize(result)\n    return result\n  }\n\n  searchTorrentsByQuery(val: string): Observable<any> {\n    console.log('insearchtorentsquery')\n    val = 'tt0499549'\n    const url = `${this.ytsUrl}?query_term=${val}`\n    // let result = this.http.get<any>(url).pipe(\n    //   tap(_ => this.log(`searched torrents for ${val}`)),\n    //   catchError(this.handleError<any>('search torrents fail')))\n    const result = this.http.get<any>(url).pipe(map(response => response))\n    // console.log('result: ', JSON.parse(result.))\n    console.log('result: ', result)\n    return result\n  }\n\n  /**\n   * Sanitizes magnet link\n   * @param torrent Torrent object\n   */\n  sanitize(torrent: MDBTorrent) {\n    let val\n    if (torrent.hash.length !== 40) {\n      val = this.getMagnetLinkWithImproperHash(torrent.hash, torrent.name);\n    } else {\n      val = this.getMagnetLinkWithProperHash(torrent.hash);\n    }\n    return this.sanitizer.bypassSecurityTrustUrl(val);\n  }\n\n  getMagnetLinkWithProperHash(hash: string) {\n    const base = `magnet:?xt=urn:btih:${hash}`\n    return base\n  }\n\n  // test value: hKhdWMQTrHqcPpmm4oDz+tlixWQ=;\"Passengers.2016.1080p.Bluray.x265.10bit-z97\"\n  getMagnetLinkWithImproperHash(base64: string, name: string) {\n    let base = 'magnet:?xt=urn:btih:' + this.getInfoHash(base64);\n    let withname = base + '&dn=' + this.urlencode(name);\n    // if (bestTrackers.length > 4){\n    //     for (let c = 0; c < 5; c++) {\n    //         withname = withname + '&tr=' + urlencode(bestTrackers[c].announce)\n    //     }\n    // } else {\n    //     if (allTrackers.length > 0) {\n    //         let i = allTrackers.length > 4 ? 5 : allTrackers.length;\n    //         allTrackers.sort(function(a, b){return 0.5 - Math.random()});\n    //         for (let c = 0; c < i; c++) {\n    //             withname = withname + '&tr=' + urlencode(allTrackers[c])\n    //         }\n    //     } else {\n    //         popMsg('No trackers were found. Magnet link won\\'t contain any trackers. Try updating trackers', 'warning');\n    //     }\n    //     if (!bestTrackers.length > 0){\n    //         popMsg('Keep in mind that if you double-click on the torrent before download, app will select 5 best trackers for the magnet link', 'info');\n    //     }\n    // }\n    return withname;\n  }\n\n  getInfoHash(base64: string) {\n    let raw = atob(base64);\n    let HEX = '';\n    for (let i = 0; i < raw.length; i++) {\n      let _hex = raw.charCodeAt(i).toString(16)\n      HEX += (_hex.length == 2 ? _hex : '0' + _hex);\n    }\n    return HEX.toUpperCase();\n  }\n\n  urlencode(text: string) {\n    return encodeURIComponent(text).replace(/!/g, '%21')\n      .replace(/'/g, '%27')\n      .replace(/\\(/g, '%28')\n      .replace(/\\)/g, '%29')\n      .replace(/\\*/g, '%2A')\n      .replace(/%20/g, '+');\n  }\n\n  /**\n   * Converts trrents to MDB torrent regardless of source. ie thepiratebay, yts\n   */\n  mapTorrent(rawTorrent: ITPBTorrent | YTSTorrent): MDBTorrent {\n    let newTorrent = new MDBTorrent()\n    // check yts properties first\n    newTorrent.hash = rawTorrent.hash\n    newTorrent.sizeBytes = rawTorrent.hasOwnProperty('size_bytes') ? rawTorrent['size_bytes'] : rawTorrent['sizeBytes']\n    newTorrent.size = rawTorrent.hasOwnProperty('size') ? rawTorrent['size'] :\n    GeneralUtil.prettyBytes(rawTorrent['sizeBytes'])\n    newTorrent.name = rawTorrent.hasOwnProperty('name') ? rawTorrent['name'] : null\n    newTorrent.dateUploaded = rawTorrent.hasOwnProperty('date_uploaded') ? rawTorrent['date_uploaded'] : rawTorrent['added']\n    newTorrent.dateUploadedUnix = rawTorrent.hasOwnProperty('date_uploaded_unix') ? rawTorrent['date_uploaded_unix'] : (new Date(rawTorrent['added']).getTime() / 1000)\n    newTorrent.magnetLink = this.getMagnetLinkWithProperHash(rawTorrent.hash)\n    newTorrent.isYts = rawTorrent.hasOwnProperty('url') ? true : false\n    newTorrent.url = rawTorrent.hasOwnProperty('url') ? rawTorrent['url'] : this.getMagnetLinkWithProperHash(rawTorrent.hash)\n    newTorrent.quality = rawTorrent.hasOwnProperty('quality') ? rawTorrent['quality'] : 'unknown'\n    newTorrent.seeds = rawTorrent.hasOwnProperty('seeds') ? rawTorrent['seeds'] : null\n    newTorrent.peers = rawTorrent.hasOwnProperty('peers') ? rawTorrent['peers'] : null\n    return newTorrent;\n  }\n\n  mapTorrentsList(rawTorrents: YTSTorrent[] | ITPBTorrent[]): MDBTorrent[] {\n    let torrents: (ITPBTorrent | YTSTorrent)[] = []\n    if (rawTorrents.hasOwnProperty('@meta') && rawTorrents['data'].count > 0) {  // if yts and has count\n      torrents = rawTorrents['data'].movies[0].torrents // assuming there is only 1 movie or is searched with ID\n    } else if (rawTorrents.length > 0) {\n      torrents = rawTorrents\n    }\n    let newTorrents = []\n    torrents.forEach((torrent: ITPBTorrent | YTSTorrent) => {\n      newTorrents.push(this.mapTorrent(torrent))\n    })\n    return newTorrents;\n  }\n\n  /**\n   * Gets the straming link with Hash.\n   * @param hash hash\n   * @returns streaming url\n   */\n  getStreamLink(hash: String): Observable<any> {\n    // tt2015381 - guardians of the galaxy\n    let url = `http://localhost:3000/getStreamLink/${hash}`\n\n    return this.http.get<string>(url).pipe(tap(_ => this.log('')),\n      catchError(this.handleError<any>('getStreamLink')))\n  }\n\n  private torrentsOnline(imdbId: string): Observable<IYTSSingleQuery | null>  {\n    let url = `${this.ytsUrl}?query_term=${imdbId}`\n    return this.http.get<IYTSSingleQuery>(url)\n  }\n\n  /**\n   * Error handler.\n   * @param operation the operation\n   * @param result result\n   */\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n      console.error(error); // log to console instead\n      this.log(`${operation} failed: ${error.message}`);\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n\n  private log(message: string) {\n    console.log(`TorrentService: ${message} `);\n  }\n}\n\n@Pipe({ name: 'simplifySize' })\nexport class SimplifySizePipe implements PipeTransform {\n  transform(value: number): string {\n    console.log('topipe value: ', value)\n    let output = '';\n    if (value < 1000) {\n      output = value.toFixed(2).toString() + 'bytes';\n    } else if (value >= 1000 && value < 1000000) {\n      value = value / 1000;\n      output = value.toFixed(2).toString() + 'kB';\n    } else if (value >= 1000000 && value < 1000000000) {\n      value = value / 1000000;\n      output = value.toFixed(2).toString() + 'MB';\n    } else if (value >= 100000000) {\n      value = value / 1000000000;\n      output = value.toFixed(2).toString() + 'GB';\n    }\n    return output;\n  }\n}\n\n@Pipe({ name: 'magnet' })\nexport class MagnetPipe implements PipeTransform {\n  transform(value: string): string {\n    let output = '';\n    // let output = 'magnet';\n    // let client = '?xt=urn:btih';\n    let hash = value;\n    let fileName = '&dn=';\n    output += hash;\n\n    return output;\n  }\n}\n// magnet:?xt=urn:btih:TORRENT_HASH&dn=Url+Encoded+Movie+Name&tr=http://track.one:1234/announce&tr=udp://track.two:80\n// BE046ED20B048C4FB86E15838DD69DADB27C5E8A\n// 13-2010\n// &tr=http://track.one:1234/announce&tr=udp://track.two:80\n// magnet:?xt=urn:btih:BE046ED20B048C4FB86E15838DD69DADB27C5E8A&dn=13-2010&tr=http://track.one:1234/announce&tr=udp://track.two:80\n"
        },
        {
            "name": "ReleaseYearPipe",
            "id": "pipe-ReleaseYearPipe-5509e9a2318e94a3a51617af0ad6ff8f195a18a930b179d9883791cb1a0be74a74174542f9befd5961c8340accd5635eb570a65f9bd3b08d70855c541d9c84f8",
            "file": "src/app/shared/pipes/mdb-pipes.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Gets the release year from string with format <code>00 Month 0000</code>.</p>\n",
            "rawdescription": "\n\nGets the release year from string with format `00 Month 0000`.\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "releaseYear",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { STRING_REGEX_TMDB_RUNTIME } from '../constants';\nimport GeneralUtil from '@utils/general.util';\n\n/**\n * Gets the release year from string with format `00 Month 0000`.\n * @param value date string with format `00 Month 0000`\n * @returns year with `YYYY` format\n */\n@Pipe({ name: 'releaseYear' })\nexport class ReleaseYearPipe implements PipeTransform {\n  constructor() { }\n  transform(value: string): string {\n    return GeneralUtil.getYear(value)\n  }\n}\n\n/**\n * Separates array items with comma and space.\n * @param value list of value\n * @returns string representation of the original value separated with comma and space\n */\n@Pipe({ name: 'commaSpace' })\nexport class CommaSpacePipe implements PipeTransform {\n  transform(value: string[]): string {\n    return value.join(', ')\n  }\n}\n\n/**\n * Displays the runtime into readable understandable display.\n * @param value original value. `000` or `000 min` format`\n * @returns `00 hours 00 minutes` format\n */\n@Pipe({ name: 'runtimeDisplay' })\nexport class RuntimeDisplayPipe implements PipeTransform {\n  transform(value: string | number): string {\n    let toReturn = ''\n    if (typeof value === 'number') {\n      const RUNTIME_HOUR = Math.floor(value / 60)\n      const VALUE_REMAINDER = (value % 60)\n      if (RUNTIME_HOUR === 1) {\n        toReturn += `${RUNTIME_HOUR} hour`\n      } else if (RUNTIME_HOUR >= 2) {\n        toReturn += `${RUNTIME_HOUR} hours`\n      }\n      if (VALUE_REMAINDER !== 0) {\n        if (VALUE_REMAINDER === 1) {\n          toReturn += ` ${VALUE_REMAINDER} minutes`\n        } else {\n          toReturn += ` ${VALUE_REMAINDER} minutes`\n        }\n      }\n    } else if (typeof value === 'string') {\n      const REGEX_TMDB_RUNTIME = new RegExp(STRING_REGEX_TMDB_RUNTIME, `gi`)\n      const REGEX_RESULTS = REGEX_TMDB_RUNTIME.exec(value)\n      if (value !== 'N/A') {\n        if (REGEX_RESULTS != null) {\n          const runtimeHour = Math.floor(parseInt(value, 10) / 60)\n          const integerValue = parseInt(value, 10)\n          const valueRemainder = integerValue % 60\n          if (runtimeHour === 1) {\n            toReturn += `${runtimeHour} hour`\n          } else if (runtimeHour >= 2) {\n            toReturn += `${runtimeHour} hours`\n          }\n          if (valueRemainder !== 0) {\n            if (valueRemainder === 1) {\n              toReturn += ` ${valueRemainder} minutes`\n            } else {\n              toReturn += ` ${valueRemainder} minute`\n            }\n          }\n        }\n      }\n    }\n\n    return toReturn\n  }\n}\n\n/**\n * Convert seconds to HH:MM:SS format\n * @param value seconds\n */\n@Pipe({ name: 'toHHMMSS' })\nexport class HHMMSSPipe implements PipeTransform {\n  constructor() { }\n  transform(value: number): string {\n    return GeneralUtil.convertToHHMMSS(value);\n  }\n}\n"
        },
        {
            "name": "RuntimeDisplayPipe",
            "id": "pipe-RuntimeDisplayPipe-5509e9a2318e94a3a51617af0ad6ff8f195a18a930b179d9883791cb1a0be74a74174542f9befd5961c8340accd5635eb570a65f9bd3b08d70855c541d9c84f8",
            "file": "src/app/shared/pipes/mdb-pipes.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Displays the runtime into readable understandable display.</p>\n",
            "rawdescription": "\n\nDisplays the runtime into readable understandable display.\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "runtimeDisplay",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { STRING_REGEX_TMDB_RUNTIME } from '../constants';\nimport GeneralUtil from '@utils/general.util';\n\n/**\n * Gets the release year from string with format `00 Month 0000`.\n * @param value date string with format `00 Month 0000`\n * @returns year with `YYYY` format\n */\n@Pipe({ name: 'releaseYear' })\nexport class ReleaseYearPipe implements PipeTransform {\n  constructor() { }\n  transform(value: string): string {\n    return GeneralUtil.getYear(value)\n  }\n}\n\n/**\n * Separates array items with comma and space.\n * @param value list of value\n * @returns string representation of the original value separated with comma and space\n */\n@Pipe({ name: 'commaSpace' })\nexport class CommaSpacePipe implements PipeTransform {\n  transform(value: string[]): string {\n    return value.join(', ')\n  }\n}\n\n/**\n * Displays the runtime into readable understandable display.\n * @param value original value. `000` or `000 min` format`\n * @returns `00 hours 00 minutes` format\n */\n@Pipe({ name: 'runtimeDisplay' })\nexport class RuntimeDisplayPipe implements PipeTransform {\n  transform(value: string | number): string {\n    let toReturn = ''\n    if (typeof value === 'number') {\n      const RUNTIME_HOUR = Math.floor(value / 60)\n      const VALUE_REMAINDER = (value % 60)\n      if (RUNTIME_HOUR === 1) {\n        toReturn += `${RUNTIME_HOUR} hour`\n      } else if (RUNTIME_HOUR >= 2) {\n        toReturn += `${RUNTIME_HOUR} hours`\n      }\n      if (VALUE_REMAINDER !== 0) {\n        if (VALUE_REMAINDER === 1) {\n          toReturn += ` ${VALUE_REMAINDER} minutes`\n        } else {\n          toReturn += ` ${VALUE_REMAINDER} minutes`\n        }\n      }\n    } else if (typeof value === 'string') {\n      const REGEX_TMDB_RUNTIME = new RegExp(STRING_REGEX_TMDB_RUNTIME, `gi`)\n      const REGEX_RESULTS = REGEX_TMDB_RUNTIME.exec(value)\n      if (value !== 'N/A') {\n        if (REGEX_RESULTS != null) {\n          const runtimeHour = Math.floor(parseInt(value, 10) / 60)\n          const integerValue = parseInt(value, 10)\n          const valueRemainder = integerValue % 60\n          if (runtimeHour === 1) {\n            toReturn += `${runtimeHour} hour`\n          } else if (runtimeHour >= 2) {\n            toReturn += `${runtimeHour} hours`\n          }\n          if (valueRemainder !== 0) {\n            if (valueRemainder === 1) {\n              toReturn += ` ${valueRemainder} minutes`\n            } else {\n              toReturn += ` ${valueRemainder} minute`\n            }\n          }\n        }\n      }\n    }\n\n    return toReturn\n  }\n}\n\n/**\n * Convert seconds to HH:MM:SS format\n * @param value seconds\n */\n@Pipe({ name: 'toHHMMSS' })\nexport class HHMMSSPipe implements PipeTransform {\n  constructor() { }\n  transform(value: number): string {\n    return GeneralUtil.convertToHHMMSS(value);\n  }\n}\n"
        },
        {
            "name": "SimplifySizePipe",
            "id": "pipe-SimplifySizePipe-ffdae8c6dcdc6f4c1cd2626447395ec09eec4424cc4d9ebcfa801e6692736cf8489a8c4f40b54ba81cfdc1167a0c50059e9fc7dd5fdffd2c568d8b6880ad636c",
            "file": "src/app/services/torrent/torrent.service.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 230,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "simplifySize",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Observable, of, Subscriber, forkJoin } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { MDBTorrent, ITPBTorrent } from '@models/interfaces'\nimport { IpcService } from '@services/ipc.service'\nimport { DomSanitizer } from '@angular/platform-browser'\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { STRING_REGEX_IMDB_ID } from '../../shared/constants';\nimport { IYTSSingleQuery, YTSTorrent } from '@models/yts-torrent.model';\nimport { CacheService } from '../cache.service';\nimport GeneralUtil from '@utils/general.util';\n\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TorrentService {\n\n  constructor(\n    private http: HttpClient,\n    private ipcService: IpcService,\n    private cacheService: CacheService,\n    private sanitizer: DomSanitizer) { }\n\n  trackers = [`udp://glotorrents.pw:6969/announce`,\n    `udp://tracker.opentrackr.org:1337/announce`,\n    `udp://torrent.gresille.org:80/announce`,\n    `udp://tracker.openbittorrent.com:80`,\n    `udp://tracker.coppersurfer.tk:6969`,\n    `udp://tracker.leechers-paradise.org:6969`,\n    `udp://p4p.arenabg.ch:1337`,\n    `udp://tracker.internetwarriors.net:1337`]\n  fileName = 'torrent_dump_full.csv'\n  testFileName = 'torrent_dump_mini.csv'\n  assetsDirectory = '../assets/'\n  fileLine: string[]\n  torrentsInfo = []\n  displayedTorrentsInfo = []\n  ytsUrl = 'https://yts.mx/api/v2/list_movies.json'\n  ytsUrl2 = 'https://yts.am/api/v2/list_movies.json'\n\n\n  /**\n   * Gets torrent from online.\n   */\n  getTorrentsOnline(imdbId: string): Observable<IYTSSingleQuery | null> {\n    // tt2015381 - guardians of the galaxy\n    return this.cacheService.get(imdbId + '_YT', this.torrentsOnline(imdbId))\n  }\n  /**\n   * Searches torrents offline\n   * @param val imdb or title\n   * @param year year\n   */\n  async getTorrentsOffline(val: string, year: string | number) {\n    // this.ipcService.call(this.ipcService.IPCCommand.SearchTorrent, [val, year])\n  }\n\n  /**\n   * TODO: add checking for online source connnection.\n   * @param val `[title, year]`\n   */\n  getTorrents(query: string, year?: string | number): Observable<any> {\n    let result\n    const REGEX_IMDB_ID = new RegExp(STRING_REGEX_IMDB_ID, `gi`);\n    if (typeof query === 'string' && query.trim().match(REGEX_IMDB_ID)) {\n      result = this.getTorrentsOnline(query);\n    } else {\n      result = this.getTorrentsOffline(query, year);\n    }\n    // this.sanitize(result)\n    return result\n  }\n\n  searchTorrentsByQuery(val: string): Observable<any> {\n    console.log('insearchtorentsquery')\n    val = 'tt0499549'\n    const url = `${this.ytsUrl}?query_term=${val}`\n    // let result = this.http.get<any>(url).pipe(\n    //   tap(_ => this.log(`searched torrents for ${val}`)),\n    //   catchError(this.handleError<any>('search torrents fail')))\n    const result = this.http.get<any>(url).pipe(map(response => response))\n    // console.log('result: ', JSON.parse(result.))\n    console.log('result: ', result)\n    return result\n  }\n\n  /**\n   * Sanitizes magnet link\n   * @param torrent Torrent object\n   */\n  sanitize(torrent: MDBTorrent) {\n    let val\n    if (torrent.hash.length !== 40) {\n      val = this.getMagnetLinkWithImproperHash(torrent.hash, torrent.name);\n    } else {\n      val = this.getMagnetLinkWithProperHash(torrent.hash);\n    }\n    return this.sanitizer.bypassSecurityTrustUrl(val);\n  }\n\n  getMagnetLinkWithProperHash(hash: string) {\n    const base = `magnet:?xt=urn:btih:${hash}`\n    return base\n  }\n\n  // test value: hKhdWMQTrHqcPpmm4oDz+tlixWQ=;\"Passengers.2016.1080p.Bluray.x265.10bit-z97\"\n  getMagnetLinkWithImproperHash(base64: string, name: string) {\n    let base = 'magnet:?xt=urn:btih:' + this.getInfoHash(base64);\n    let withname = base + '&dn=' + this.urlencode(name);\n    // if (bestTrackers.length > 4){\n    //     for (let c = 0; c < 5; c++) {\n    //         withname = withname + '&tr=' + urlencode(bestTrackers[c].announce)\n    //     }\n    // } else {\n    //     if (allTrackers.length > 0) {\n    //         let i = allTrackers.length > 4 ? 5 : allTrackers.length;\n    //         allTrackers.sort(function(a, b){return 0.5 - Math.random()});\n    //         for (let c = 0; c < i; c++) {\n    //             withname = withname + '&tr=' + urlencode(allTrackers[c])\n    //         }\n    //     } else {\n    //         popMsg('No trackers were found. Magnet link won\\'t contain any trackers. Try updating trackers', 'warning');\n    //     }\n    //     if (!bestTrackers.length > 0){\n    //         popMsg('Keep in mind that if you double-click on the torrent before download, app will select 5 best trackers for the magnet link', 'info');\n    //     }\n    // }\n    return withname;\n  }\n\n  getInfoHash(base64: string) {\n    let raw = atob(base64);\n    let HEX = '';\n    for (let i = 0; i < raw.length; i++) {\n      let _hex = raw.charCodeAt(i).toString(16)\n      HEX += (_hex.length == 2 ? _hex : '0' + _hex);\n    }\n    return HEX.toUpperCase();\n  }\n\n  urlencode(text: string) {\n    return encodeURIComponent(text).replace(/!/g, '%21')\n      .replace(/'/g, '%27')\n      .replace(/\\(/g, '%28')\n      .replace(/\\)/g, '%29')\n      .replace(/\\*/g, '%2A')\n      .replace(/%20/g, '+');\n  }\n\n  /**\n   * Converts trrents to MDB torrent regardless of source. ie thepiratebay, yts\n   */\n  mapTorrent(rawTorrent: ITPBTorrent | YTSTorrent): MDBTorrent {\n    let newTorrent = new MDBTorrent()\n    // check yts properties first\n    newTorrent.hash = rawTorrent.hash\n    newTorrent.sizeBytes = rawTorrent.hasOwnProperty('size_bytes') ? rawTorrent['size_bytes'] : rawTorrent['sizeBytes']\n    newTorrent.size = rawTorrent.hasOwnProperty('size') ? rawTorrent['size'] :\n    GeneralUtil.prettyBytes(rawTorrent['sizeBytes'])\n    newTorrent.name = rawTorrent.hasOwnProperty('name') ? rawTorrent['name'] : null\n    newTorrent.dateUploaded = rawTorrent.hasOwnProperty('date_uploaded') ? rawTorrent['date_uploaded'] : rawTorrent['added']\n    newTorrent.dateUploadedUnix = rawTorrent.hasOwnProperty('date_uploaded_unix') ? rawTorrent['date_uploaded_unix'] : (new Date(rawTorrent['added']).getTime() / 1000)\n    newTorrent.magnetLink = this.getMagnetLinkWithProperHash(rawTorrent.hash)\n    newTorrent.isYts = rawTorrent.hasOwnProperty('url') ? true : false\n    newTorrent.url = rawTorrent.hasOwnProperty('url') ? rawTorrent['url'] : this.getMagnetLinkWithProperHash(rawTorrent.hash)\n    newTorrent.quality = rawTorrent.hasOwnProperty('quality') ? rawTorrent['quality'] : 'unknown'\n    newTorrent.seeds = rawTorrent.hasOwnProperty('seeds') ? rawTorrent['seeds'] : null\n    newTorrent.peers = rawTorrent.hasOwnProperty('peers') ? rawTorrent['peers'] : null\n    return newTorrent;\n  }\n\n  mapTorrentsList(rawTorrents: YTSTorrent[] | ITPBTorrent[]): MDBTorrent[] {\n    let torrents: (ITPBTorrent | YTSTorrent)[] = []\n    if (rawTorrents.hasOwnProperty('@meta') && rawTorrents['data'].count > 0) {  // if yts and has count\n      torrents = rawTorrents['data'].movies[0].torrents // assuming there is only 1 movie or is searched with ID\n    } else if (rawTorrents.length > 0) {\n      torrents = rawTorrents\n    }\n    let newTorrents = []\n    torrents.forEach((torrent: ITPBTorrent | YTSTorrent) => {\n      newTorrents.push(this.mapTorrent(torrent))\n    })\n    return newTorrents;\n  }\n\n  /**\n   * Gets the straming link with Hash.\n   * @param hash hash\n   * @returns streaming url\n   */\n  getStreamLink(hash: String): Observable<any> {\n    // tt2015381 - guardians of the galaxy\n    let url = `http://localhost:3000/getStreamLink/${hash}`\n\n    return this.http.get<string>(url).pipe(tap(_ => this.log('')),\n      catchError(this.handleError<any>('getStreamLink')))\n  }\n\n  private torrentsOnline(imdbId: string): Observable<IYTSSingleQuery | null>  {\n    let url = `${this.ytsUrl}?query_term=${imdbId}`\n    return this.http.get<IYTSSingleQuery>(url)\n  }\n\n  /**\n   * Error handler.\n   * @param operation the operation\n   * @param result result\n   */\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n      console.error(error); // log to console instead\n      this.log(`${operation} failed: ${error.message}`);\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n\n  private log(message: string) {\n    console.log(`TorrentService: ${message} `);\n  }\n}\n\n@Pipe({ name: 'simplifySize' })\nexport class SimplifySizePipe implements PipeTransform {\n  transform(value: number): string {\n    console.log('topipe value: ', value)\n    let output = '';\n    if (value < 1000) {\n      output = value.toFixed(2).toString() + 'bytes';\n    } else if (value >= 1000 && value < 1000000) {\n      value = value / 1000;\n      output = value.toFixed(2).toString() + 'kB';\n    } else if (value >= 1000000 && value < 1000000000) {\n      value = value / 1000000;\n      output = value.toFixed(2).toString() + 'MB';\n    } else if (value >= 100000000) {\n      value = value / 1000000000;\n      output = value.toFixed(2).toString() + 'GB';\n    }\n    return output;\n  }\n}\n\n@Pipe({ name: 'magnet' })\nexport class MagnetPipe implements PipeTransform {\n  transform(value: string): string {\n    let output = '';\n    // let output = 'magnet';\n    // let client = '?xt=urn:btih';\n    let hash = value;\n    let fileName = '&dn=';\n    output += hash;\n\n    return output;\n  }\n}\n// magnet:?xt=urn:btih:TORRENT_HASH&dn=Url+Encoded+Movie+Name&tr=http://track.one:1234/announce&tr=udp://track.two:80\n// BE046ED20B048C4FB86E15838DD69DADB27C5E8A\n// 13-2010\n// &tr=http://track.one:1234/announce&tr=udp://track.two:80\n// magnet:?xt=urn:btih:BE046ED20B048C4FB86E15838DD69DADB27C5E8A&dn=13-2010&tr=http://track.one:1234/announce&tr=udp://track.two:80\n"
        }
    ],
    "interfaces": [
        {
            "name": "Body",
            "id": "interface-Body-88e397b48570501d2155099bb31f9322acc23bd18595d1aca93c37f8404b5193d4990a928e2ef0f2759f3078524d816543be05c53659fcf0f24800e145c77598",
            "file": "src/app/services/ipc.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { environment } from '@environments/environment';\nimport * as IPCRendererChannel from '../../assets/IPCRendererChannel.json';\nimport * as IPCMainChannel from '../../assets/IPCMainChannel.json';\nimport { v4 as uuidv4 } from 'uuid'\nimport { Injectable } from '@angular/core'\nimport { BehaviorSubject, Observable, fromEvent } from 'rxjs'\nimport { ipcRenderer } from 'electron'\nimport { ILibraryInfo } from '@models/interfaces'\nimport { IRawLibrary } from './library.service';\nimport { IWatched } from './watched.service';\nimport { Review } from '@models/review.model';\nimport { IProfileData, ListLinkMovie } from '@models/profile-data.model';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class IpcService {\n\n  libraryMovies = new BehaviorSubject<string[]>([])\n  libraryMovie = new BehaviorSubject<string[]>([])\n  bookmarkChanges = new BehaviorSubject<IBookmarkChanges[]>([])\n  movieIdentified = new BehaviorSubject<any>({ id: 0 })\n  searchList = new BehaviorSubject<any>([])\n  torrentVideo = new BehaviorSubject<string[]>([])\n  preferences = new BehaviorSubject<any>([])\n  streamLink = new BehaviorSubject<any>('')\n  private statsForNerds = new BehaviorSubject<any>({})\n  statsForNerdsSubscribable = this.statsForNerds.asObservable()\n  private ipcRenderer: typeof ipcRenderer\n\n  constructor() {\n    if (environment.runConfig.electron) {\n\n      console.log((window as any).require('electron'))\n\n      this.ipcRenderer = (window as any).require('electron').ipcRenderer\n\n      this.ipcRenderer.on('torrent-video', (event, data: any) => {\n        console.log('event: ', event)\n        console.log('data: ', data)\n        this.torrentVideo.next(data)\n      })\n\n      this.ipcRenderer.on(IPCMainChannel.PREFERENCES_GET_COMPLETE, (event: Electron.IpcRendererEvent, data) => {\n        this.preferences.next(data)\n        console.log('IPCMainChannel.PREFERENCES_COMPLETE ', data)\n      })\n      this.ipcRenderer.on(IPCMainChannel.STREAM_LINK, (event: Electron.IpcRendererEvent, data) => {\n        this.streamLink.next(data)\n        console.log('IPCMainChannel.STREAM_LINK ', data)\n      })\n      this.ipcRenderer.on(IPCMainChannel.STATS, (event: Electron.IpcRendererEvent, data) => {\n        this.statsForNerds.next(data)\n        console.log('IPCMainChannel.STATS ', data)\n      })\n    }\n  }\n\n  async getFiles() {\n    // return new Promise<string[]>((resolve, reject) => {\n    //   this.ipcRenderer.once('library-folders', (event, arg) => {\n    //     resolve(arg);\n    //   });\n    //   this.ipcRenderer.send('retrieve-library-folders');\n    // });\n  }\n\n  /**\n   * Gets the drives in the system.\n   */\n  async getSystemDrives() {\n    // return new Promise<string[]>((resolve, reject) => {\n    //   this.ipcRenderer.once('system-drives', (event, arg) => {\n    //     resolve(arg);\n    //   });\n    // });\n    // this.ipcRenderer.send('get-drives')\n  }\n  /**\n   * Opens the folder\n   * @param data folder directory\n   */\n  openFolder(data: string) {\n    console.log('open', data)\n    // this.ipcRenderer.send('go-to-folder', ['open', data])\n  }\n\n  /**\n   * Ipc renderer that sends command to main renderer to get movies from library db.\n   * @param idList\n   */\n  getMoviesFromLibraryInList(idList: number[]): Promise<any> {\n    const theUuid = uuidv4()\n    this.sendToMain('library', { operation: IpcOperations.FIND_IN_LIST, uuid: theUuid },\n      { idList: idList });\n    return this.listenOnce(`library-${theUuid}`);\n  }\n\n  /**\n   * Paginated, first page.\n   * @param collectionName\n   * @param order\n   * @param size\n   */\n  getMultiplePaginatedFirst(collectionName: string, sort: string, size?: number): Promise<IUserDataPaginated> {\n    const theUuid = uuidv4()\n    this.sendToMain(collectionName, { operation: IpcOperations.GET_BY_PAGE, uuid: theUuid },\n      { sort: sort, size: size, lastVal: 0 });\n    return this.listenOnce(`${collectionName}-${theUuid}`);\n  }\n\n  /**\n   * Paginated, NOT first page.\n   * @param collectionName\n   * @param order\n   * @param limit\n   * @param lastVal\n   */\n  getMultiplePaginated(collectionName: string, sort: string, limit?: number, lastVal?: string | number): Promise<IUserDataPaginated> {\n    const theUuid = uuidv4()\n    this.sendToMain(collectionName, { operation: IpcOperations.GET_BY_PAGE, uuid: theUuid },\n      { sort: sort, limit: limit, lastVal: lastVal });\n    return this.listenOnce(`${collectionName}-${theUuid}`);\n  }\n\n  /**\n   * Ipc renderer that sends command to main renderer to get specified movie from library db.\n   * Replies offline library object(s).\n   * @param arg imdb id or movie title and release year or tmdb id\n   */\n  getMovieFromLibrary(arg): Promise<IRawLibrary> {\n    const theUuid = uuidv4()\n    this.sendToMain('library', { operation: IpcOperations.FIND, uuid: theUuid },\n      { tmdbId: arg });\n    return this.listenOnce(`library-${theUuid}`);\n  }\n\n  // // user services; watchlist/bookmarks, watched\n  getBookmark(data: number) {\n    const theUuid = uuidv4()\n    this.sendToMain('bookmark', { operation: IpcOperations.FIND_ONE, uuid: theUuid },\n      { tmdbId: data })\n    return this.listenOnce(`bookmark-${theUuid}`);\n  }\n\n  getBookmarkInList(idList: number[]): Promise<any> {\n    const theUuid = uuidv4()\n    this.sendToMain('bookmark', {\n      operation: IpcOperations.FIND_IN_LIST,\n      uuid: theUuid\n    }, { idList: idList });\n    return this.listenOnce(`bookmark-${theUuid}`);\n  }\n\n  saveBookmark(data) {\n    const theUuid = uuidv4()\n    this.sendToMain('bookmark', { operation: IpcOperations.SAVE, uuid: theUuid },\n      data);\n    return this.listenOnce(`bookmark-${theUuid}`);\n  }\n\n  removeBookmark(type: string, id: string | number) {\n    const theUuid = uuidv4()\n    this.sendToMain('bookmark', { operation: IpcOperations.REMOVE, uuid: theUuid }, { type: type, id: id });\n    return this.listenOnce(`bookmark-${theUuid}`);\n  }\n\n  // ----- WATCHED\n  getWatched(data: number) {\n    const theUuid = uuidv4()\n    this.sendToMain('watched', { operation: IpcOperations.FIND_ONE, uuid: theUuid },\n      { tmdbId: data })\n    return this.listenOnce(`watched-${theUuid}`);\n  }\n\n  /**\n   * Ipc renderer that sends command to main renderer to get movies from library db.\n   * @param idList\n   */\n  getWatchedInList(idList: number[]): Promise<any> {\n    const theUuid = uuidv4()\n    this.sendToMain('watched', {\n      operation: IpcOperations.FIND_IN_LIST,\n      uuid: theUuid\n    }, { idList: idList });\n    return this.listenOnce(`watched-${theUuid}`);\n  }\n\n  saveWatched(data) {\n    const theUuid = uuidv4()\n    this.sendToMain('watched', { operation: IpcOperations.SAVE, uuid: theUuid }, data);\n    return this.listenOnce(`watched-${theUuid}`);\n  }\n\n  updateWatchedStatus(val: IWatched) {\n    this.ipcRenderer.send('', val)\n  }\n\n  /**\n   * TODO: remove type\n   */\n  removeWatched(type: string, id: string | number) {\n    const theUuid = uuidv4()\n    this.sendToMain('watched', { operation: IpcOperations.REMOVE, uuid: theUuid }, { type: type, id: id });\n    return this.listenOnce(`watched-${theUuid}`);\n  }\n\n\n  // ----- END OF WATCHED\n  /**\n   *\n   * @param id tmdb id\n   */\n  getMovieUserData(id: number): Promise<IProfileData> {\n    const theUuid = uuidv4()\n    this.sendToMain('user-data', {\n      operation: IpcOperations.FIND,\n      uuid: theUuid\n    }, { tmdbId: id });\n    return this.listenOnce(`user-data-${theUuid}`);\n  }\n\n  getMovieUserDataInList(idList: number[]): Promise<IProfileData[]> {\n    const theUuid = uuidv4()\n    this.sendToMain('user-data', {\n      operation: IpcOperations.FIND_IN_LIST,\n      uuid: theUuid\n    }, { idList: idList });\n    return this.listenOnce(`user-data-${theUuid}`)\n  }\n\n  saveFavorite(data) {\n    const theUuid = uuidv4()\n    this.sendToMain('favorite', { operation: IpcOperations.SAVE, uuid: theUuid }, data);\n    return this.listenOnce(`favorite-${theUuid}`);\n  }\n\n  // ----- END OF USER DATA\n  startScanLibrary() {\n\n    this.sendToMain(IPCRendererChannel.SCAN_LIBRARY_START)\n    this.ipcRenderer.on(IPCMainChannel.ScanLibraryResult, e => {\n      console.log(IPCMainChannel.ScanLibraryResult, e)\n    })\n    this.ipcRenderer.once(IPCMainChannel.ScanLibraryComplete, e => {\n      console.log('completscan')\n      this.ipcRenderer.removeListener(IPCMainChannel.ScanLibraryResult, d => { })\n    })\n  }\n\n  stopScanLibrary() {\n    this.sendToMain(IPCRendererChannel.SCAN_LIBRARY_STOP)\n  }\n\n  getPlayTorrent(hash: string): Promise<any> {\n    this.sendToMain(IPCRendererChannel.PLAY_TORRENT, hash)\n    return this.listenOnce(`stream-link`);\n  }\n\n  stopStream() {\n    this.sendToMain(IPCRendererChannel.STOP_STREAM)\n  }\n\n  playOfflineVideo(docId): Promise<any> {\n    this.sendToMain(IPCRendererChannel.PLAY_OFFLINE_VIDEO_STREAM, docId);\n    return this.listenOnce(`stream-link`);\n  }\n\n  getPreferences() {\n\n    this.sendToMain(IPCRendererChannel.PREFERENCES_GET)\n    // this.ipcRenderer.addListener(IPCMainChannel.PREFERENCES_GET_COMPLETE, this.pref)\n\n    // (event, data: any) => {\n    // console.log('IPCMainChannel.PREFERENCES_COMPLETE ', data)\n    // this.pref()\n    // this.preferences.next(data)\n    // this.ipcRenderer.removeListener(IPCMainChannel.PREFERENCES_GET_COMPLETE, e => { })\n    // })\n  }\n\n  savePreferences(val) {\n    this.sendToMain(IPCRendererChannel.PREFERENCES_SET, val)\n    // this.ipcRenderer.on(IPCMainChannel.PREFERENCES_SET_COMPLETE, (event, data: any) => {\n    //   console.log('IPCMainChannel.PREFERENCES_SET_COMPLETE ', data)\n    //   this.preferences.next(data)\n    //   this.ipcRenderer.removeListener(IPCMainChannel.PREFERENCES_SET_COMPLETE, d => { })\n    // })\n  }\n\n  changeSubtitle(): Promise<any> {\n    this.sendToMain(\"get-subtitle\")\n    return this.listenOnce('subtitle-path')\n  }\n\n  minimizeWindow() {\n    this.sendToMain(this.IPCCommand.MinimizeApp)\n  }\n  minimizeRestoreWindow() {\n    this.sendToMain(this.IPCCommand.RestoreApp)\n  }\n  exitApp() {\n    this.sendToMain(this.IPCCommand.ExitApp)\n  }\n\n  private removeListener(channel: string) {\n    console.log('REMOVING LISTENER', channel)\n    this.ipcRenderer.removeListener(channel, d => { })\n  }\n\n  private sendToMain(channel: string, headers?: Headers | string, body?: Body) {\n    try {\n      this.ipcRenderer.send(channel, [headers, body])\n      console.log('sent to ipc... ', channel, [headers, body])\n    } catch {\n      console.log('failed to send Ipc: ', channel, [headers, body])\n    }\n  }\n\n  private listenOnce(channel: string) {\n    return new Promise<any>((resolve, reject) => {\n      try {\n        this.ipcRenderer.once(channel, (event, arg) => {\n          console.log('channel: ', channel, ' arg: ', arg)\n          resolve(arg);\n        });\n      } catch {\n        resolve(null);\n        console.log(`listen ${channel} failed`)\n      }\n    });\n  }\n\n  IPCCommand = IPCRendererChannel['default']\n  IPCChannel = IPCMainChannel['default']\n}\n\ninterface Headers {\n  operation: IpcOperations,\n  uuid: string\n}\n\ninterface Body {\n  tmdbId?: number\n  idList?: number[]\n  [x: string]: any\n}\n\nenum IpcOperations {\n  FIND = 'find',\n  FIND_ONE = 'find-one',\n  FIND_IN_LIST = 'find-in-list',\n  UPDATE = 'update',\n  SAVE = 'save',\n  REMOVE = 'remove',\n  GET_BY_PAGE = 'get-by-page',\n  COUNT = 'count'\n}\nexport interface IBookmarkChanges {\n  change: BookmarkChanges\n}\n\nexport enum BookmarkChanges {\n  UPDATE = 'update',\n  DELETE = 'delete',\n  INSERT = 'insert'\n}\n\nexport interface IBookmark {\n  tmdbId: number,\n  imdbId: string,\n  id: string\n}\n\n\n\ninterface ILibrary {\n  title?: string,\n  year?: number,\n  tmdbId?: number,\n  imdbId?: string,\n  libraryList: ILibraryData[]\n}\n\ninterface ILibraryData {\n  fullFilePath: string,\n  _id: string\n}\n\nexport interface IUserDataPaginated {\n  totalPages: number,\n  totalResults: number,\n  page?: number,\n  results: any[],\n}\n\ninterface SortObject {\n  [x: string]: 1 | -1\n}\n",
            "properties": [
                {
                    "name": "idList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": true,
                    "description": "",
                    "line": 353
                },
                {
                    "name": "tmdbId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 352
                }
            ],
            "indexSignatures": [
                {
                    "id": "index-declaration-88e397b48570501d2155099bb31f9322acc23bd18595d1aca93c37f8404b5193d4990a928e2ef0f2759f3078524d816543be05c53659fcf0f24800e145c77598",
                    "args": [
                        {
                            "name": "x",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "any",
                    "line": 353,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 175,
            "methods": []
        },
        {
            "name": "Bookmark",
            "id": "interface-Bookmark-1864c2d5448e0c9450395f701045f267f35956627df366578c5a166274ffa8e8faf40cc47d8b234217c9f617306668665f329af03586e3cd1f8d89f5686324b7",
            "file": "src/app/models/profile-data.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Review } from \"./review.model\";\n\nexport class IProfileData {\n\n  tmdbId?: number;\n  bookmark?: Bookmark;\n  favorite?: Favorite;\n  watched?: Watched;\n  listLinkMovie?: ListLinkMovie;\n  review?: Review;\n  isBookmark?: boolean;\n  isFavorite?: boolean;\n  library?: any\n  // isBookmark?: boolean;\n}\n\ninterface Bookmark {\n  id: string\n}\ninterface Favorite {\n  id: string\n}\ninterface Watched {\n  id?: string\n  percentage: number\n}\nexport interface ListLinkMovie {\n  id: number\n  listId: number\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "CastElement",
            "id": "interface-CastElement-584d54738f93e2af94202069b5eddb4cab23bb2dfec2ff69f24ebaf881c252f94680b4cd6cec302796817692570a31bedafc5d74fed1cf6488a895dbf372e23d",
            "file": "src/app/models/interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IMdbMovieDetails {\n  awards?: string\n  backgroundPath: string;\n  belongsToCollection?: []\n  boxOffice?: string | number // tmdb:revenue(number)\n  budget?: number\n  country?: string\n  director?: string\n  dvd?: string // dvd release\n  genres?: string[] | string | IGenre[]\n  imdbId?: string\n  imdbRating?: string\n  imdbVotes?: string\n  isAdult?: boolean;\n  isAvailable?: boolean;\n  languages?: string[]\n  libraryInfo?: ILibraryInfo\n  metascore?: string // metacritic score\\\n  originalLanguage?: string // tmdb:\"en\",omdb:\"English\"\n  originalTitle?: string\n  plot?: string // plot or overview\n  popularity?: number\n  posterPath: string\n  production?: string // company; i.e. Walt Disney Pictures\n  rated?: string // rated or certificate\n  ratings?: IRating[]\n  releaseDate?: string // omdb:\"05 May 2017\"; tmdb:\"1999-10-15\"\n  releaseYear?: number | string\n  response: string\n  runtime?: string\n  starring?: string // Actors field in omdb\n  status?: string // released/Post\n  tagline?: string;\n  tmdbId?: number\n  title: string\n  type?: string // movie/tvmovie/series\n  video?: boolean; // unknown\n  // voteAverage: number; // tmdb votes\n  // voteCount: number; // tmdb votes\n  website?: string\n  writer?: string // omdb\n  [propName: string]: any;\n}\n\nexport interface IRating {\n  Source: string\n  Value: string\n}\n\nexport interface LibraryInfo {\n  tmdbId?: null | number | string\n  imdbID?: string\n  title?: string\n  year?: number\n  directoryList?: string[]\n  _id: string\n}\n\nexport interface MovieGenre {\n  id: number\n  code: string\n  description: string\n  isChecked: boolean\n}\n\nexport interface WatchList {\n  id: number\n  movieList: string[]\n}\n\nexport interface ILibraryInfo {\n  tmdbId?: null | number | string\n  imdbID?: string\n  title?: string\n  year?: number\n  directoryList?: string[]\n  _id: string\n}\n\nexport interface ICollection {\n  id: number,\n  name: string\n}\n\nexport interface IProductionCompany {\n  id: number;\n  logo_path: null | string;\n  name: string;\n  origin_country: string;\n}\n\nexport interface IProductionCountry {\n  iso_3166_1: string;\n  name: string;\n}\n\nexport interface ISpokenLanguage {\n  iso_639_1: string;\n  name: string;\n}\n\nexport interface IOmdbMovieDetail {\n  Title: string\n  Year?: string\n  Rated?: string\n  Released?: string // \"05 May 2017\"\n  Runtime?: string\n  Genre?: string\n  Director?: string\n  Writer?: string\n  Actors?: string\n  Plot?: string\n  Language?: string\n  Country?: string\n  Awards?: string\n  Poster?: string\n  Ratings?: IRating[]\n  Metascore?: string\n  imdbRating?: string\n  imdbVotes?: string\n  imdbID: string\n  Type?: string\n  DVD?: string\n  BoxOffice?: string\n  Production?: string\n  Website?: string\n  Response: string\n}\n\nexport interface ITmdbMovieDetail {\n  adult: boolean;\n  backdrop_path: string;\n  belongs_to_collection: null;\n  budget: number;\n  genres: IGenre[];\n  homepage: string;\n  id: number;\n  imdb_id: string;\n  original_language: string;\n  original_title: string;\n  overview: string;\n  popularity: number;\n  poster_path: string;\n  production_companies: IProductionCompany[];\n  production_countries: IProductionCountry[];\n  release_date: string;\n  revenue: number;\n  runtime: number;\n  spoken_languages: ISpokenLanguage[];\n  status: string;\n  tagline: string;\n  title: string;\n  video: boolean;\n  vote_average: number;\n  vote_count: number;\n}\n\nexport interface MdbMovieDetails {\n  adult?: boolean;\n  title: string\n  releaseYear?: string\n  releaseDate?: string\n  rated?: string // rated or certificate\n  runtime?: string\n  genres?: string\n  director?: string\n  writer?: string\n  Actors?: string\n  plot?: string // plot or overview\n  Language?: string\n  Country?: string\n  Awards?: string\n  Poster?: string\n  Ratings?: IRating[]\n  Metascore?: string\n  imdbRating?: string\n  imdbVotes?: string\n  imdbID: string\n  tmdbID: number\n  Type?: string\n  DVD?: string\n  BoxOffice?: string\n  Production?: string\n  website?: string\n  response: string\n  libraryInfo?: ILibraryInfo\n}\n\n// // adult: boolean;\n// //backdrop_path: string;\n// belongs_to_collection: null;\n// // budget: number;\n// genres: Genre[];\n// // homepage: string;\n// // id: number;\n// // imdb_id: string;\n// original_language: string;\n// original_title: string;\n// // overview: string;\n// // popularity: number;\n// // poster_path: string;\n// production_companies: ProductionCompany[];\n// production_countries: ProductionCountry[];\n// // release_date: string;\n// // revenue: number;\n// // runtime: number;\n// spoken_languages: SpokenLanguage[];\n// // status: string;\n// // tagline: string;\n// // title: string;\n// // video: boolean;\n// // vote_average: number;\n// // vote_count: number;\n\nexport interface ITmdbResultObject {\n  page: number;\n  total_results: number;\n  total_pages: number;\n  results: ITmdbResult[];\n}\n\nexport interface ITmdbResult {\n  popularity: number\n  vote_count: number\n  video: boolean\n  poster_path: string\n  id: number\n  adult: boolean\n  backdrop_path: string\n  original_language: string\n  original_title: string\n  genre_ids: number[]\n  title: string\n  vote_average: number\n  overview: string\n  release_date: string\n  isAvailable?: boolean\n  isHighlighted?: boolean\n}\n\nexport interface ILibraryMovie {\n  tmdbId?: number,\n  title: string,\n  year: number,\n  imdbId?: string,\n  directory: string[]\n}\n\nexport interface IGenre {\n  id: number\n  name: string\n}\n\nexport interface Credits {\n  id: number;\n  cast: CastElement[];\n  crew: Crew[];\n}\n\ninterface CastElement {\n  cast_id: number;\n  character: string;\n  credit_id: string;\n  gender: number;\n  id: number;\n  name: string;\n  order: number;\n  profile_path: null | string;\n}\n\ninterface Crew {\n  credit_id: string;\n  department: Department;\n  gender: number;\n  id: number;\n  job: string;\n  name: string;\n  profile_path: null | string;\n}\n\nexport enum Department {\n  Art = 'Art',\n  Camera = 'Camera',\n  CostumeMakeUp = 'Costume & Make-Up',\n  Crew = 'Crew',\n  Directing = 'Directing',\n  Editing = 'Editing',\n  Lighting = 'Lighting',\n  Production = 'Production',\n  Sound = 'Sound',\n  VisualEffects = 'Visual Effects',\n  Writing = 'Writing',\n}\n\nexport class MDBTorrent {\n  id?: string\n  name?: string\n  size?: string\n  hash: string\n  url?: string\n  quality?: string\n  type?: string\n  seeds?: number\n  peers?: number\n  sizeBytes?: number\n  added?: string\n  dateUploaded?: string\n  dateUploadedUnix?: number\n  isYts?: boolean\n  magnetLink?: string\n}\n\nexport class ITPBTorrent {\n  id?: number\n  name?: string\n  hash: string\n  sizeBytes?: number\n  added?: string\n}\n\nexport interface ISearch {\n  page: number\n}\n\nexport enum OmdbParameters {\n  ApiKey = 'apikey',\n  ImdbId = 'i',\n  Title = 't',\n  Type = 'type',\n  Year = 'y',\n  Plot = 'plot',\n  Return = 'r',\n  Callback = 'callback',\n  Version = 'v',\n}\n\nexport enum TmdbParameters {\n  ApiKey = 'api_key',\n  AppendToResponse = 'append_to_response',\n  Language = 'language',\n  Region = 'region',\n  SortBy = 'sort_by',\n  CertificationCountry = 'certification_country',\n  Certification = 'certification',\n  CertificationLess = 'certification.lte',\n  CertificationGreater = 'certification.gte',\n  IncludeAdult = 'include_adult',\n  IncludeVideo = 'include_video',\n  Page = 'page',\n  PrimaryReleaseYear = 'primary_release_year',\n  PrimaryReleaseDateGreater = 'primary_release_date.gte',\n  PrimaryReleaseDateLess = 'primary_release_date.lte',\n  ReleaseDateGreater = 'release_date.gte',\n  ReleaseDateLess = 'release_date.lte',\n  WithReleaseType = 'with_release_type',\n  Year = 'year',\n  VoteCountGreater = 'vote_count.gte',\n  VoteCountLess = 'vote_count.lte',\n  VoteAverageGreater = 'vote_average.gte',\n  VoteAverageLess = 'vote_average.lte',\n  WithCast = 'with_cast',\n  WithCrew = 'with_crew',\n  WithPeople = 'with_people',\n  WithCompanies = 'with_companies',\n  WithGenres = 'with_genres',\n  WithoutGenres = 'without_genres',\n  WithKeywords = 'with_keywords',\n  WithoutKeywords = 'without_keywords',\n  WithRuntimeGreater = 'with_runtime.gte',\n  WithRuntimeLess = 'with_runtime.lte',\n  WithOriginalLanguage = 'with_original_language',\n  WithWatchProviders = 'with_watch_providers',\n  WatchRegion = 'watch_region'\n}\n\nexport enum TmdbSearchMovieParameters {\n  ApiKey = 'api_key',\n  Language = 'language', // Pass a ISO 639 - 1 value to display translated data for the fields that support it. minLength: 2 pattern: ([a - z]{ 2 }) -([A - Z]{ 2 }) default: en - US\n  Query = 'query',\n  Page = 'page', // minimum: 1 maximum: 1000\n  IncludeAdult = 'include_adult',\n  Region = 'region',\n  // Specify a ISO 3166 - 1 code to filter release dates.Must be uppercase. pattern: ^ [A - Z]{ 2 } $\n  Year = 'year',\n  PrimaryReleaseYear = 'primary_release_year'\n}\n\nenum TmdbAppendToResponseParameters {\n  AccountStates = 'account_states',\n  Videos = 'videos',\n  Images = 'images',\n  Credits = 'credits',\n  Changes = 'changes',\n  Translations = 'translations',\n  Similar = 'similar',\n  ExternalIds = 'external_ids',\n  AlternativeTitles = 'alternative_titles',\n  Keywords = 'keywords',\n  Reviews = 'reviews',\n  Recommendations = 'recommendations',\n  ReleaseDates = 'release_dates',\n  Lists = 'lists'\n}\n\nenum TmdbReleaseTypes {\n  PREMIERE = 'Premiere',  // 1\n  THEATRICAL_LIMITED = 'Theatrical(limited)', // 2\n  THEATRICAL = 'Theatrical', // 3\n  DIGITAL = 'Digital', // 4\n  PHYSICAL = 'Physical', // 5\n  TV = 'TV', // 6\n}\n\nexport interface IPersonDetails {\n  birthday: string;\n  known_for_department: string;\n  id: number;\n  movie_credits?: IPersonCredits;\n  tv_credits?: IPersonCredits;\n  combined_credits?: IPersonCredits;\n  homepage?: any;\n  profile_path: string;\n  imdb_id: string;\n  deathday?: any;\n  images?: IImages;\n  external_ids?: IExternalids;\n  name: string;\n  also_known_as: string[];\n  biography: string;\n  adult: boolean;\n  gender: number;\n  place_of_birth: string;\n  popularity: number;\n}\n\nexport interface IPersonCredits {\n  cast: IPersonCastCrew[];\n  crew: IPersonCastCrew[];\n  id?: number;\n}\n\nexport interface IPersonCastCrew {\n  id?: number;\n  original_language: string;\n  episode_count?: number;\n  overview: string;\n  origin_country?: string[];\n  original_name?: string;\n  genre_ids: number[];\n  name?: string;\n  media_type: string;\n  poster_path: null | string;\n  first_air_date?: string;\n  vote_average: number;\n  vote_count: number;\n  character?: string;\n  backdrop_path: null | string;\n  popularity: number;\n  credit_id: string;\n  original_title?: string;\n  video?: boolean;\n  release_date?: string;\n  title?: string;\n  adult?: boolean;\n  department?: string;\n  job?: string;\n}\n\nexport interface IExternalids {\n  id?: number;\n  freebase_id: string;\n  instagram_id: string;\n  tvrage_id: number;\n  twitter_id: string;\n  freebase_mid: string;\n  imdb_id: string;\n  facebook_id: string;\n}\n\nexport interface IImages {\n  id?: number;\n  profiles: IProfile[];\n}\n\nexport interface IProfile {\n  iso_639_1?: any;\n  aspect_ratio: number;\n  vote_count: number;\n  height: number;\n  vote_average: number;\n  file_path: string;\n  width: number;\n}\n\nexport interface ICredits {\n  cast: ICast[];\n  crew: ICrew[];\n}\n\ninterface ICast {\n  poster_path?: string;\n  adult: boolean;\n  backdrop_path?: string;\n  vote_count: number;\n  video: boolean;\n  id: number;\n  media_type?: string;\n  popularity: number;\n  genre_ids: number[];\n  original_language: string;\n  title: string;\n  original_title: string;\n  release_date: string;\n  character: string;\n  vote_average: number;\n  overview: string;\n  credit_id: string;\n}\n\ninterface ICrew {\n  id: number;\n  department: string;\n  original_language: string;\n  original_title: string;\n  job: string;\n  overview: string;\n  genre_ids: number[];\n  video: boolean;\n  episode_count: number\n  media_type?: string;\n  credit_id: string;\n  poster_path?: string;\n  popularity: number;\n  backdrop_path?: string;\n  vote_count: number;\n  title: string;\n  adult: boolean;\n  vote_average: number;\n  release_date: string;\n}\n\nexport interface IUserSavedData {\n  id?: string,\n  title: string,\n  year: number,\n  tmdbId: number,\n}\n\nexport enum GenreCodes {\n  Action = 28,\n  Adventure = 12,\n  Animation = 16,\n  Comedy = 35,\n  Crime = 80,\n  Documentary = 99,\n  Drama = 18,\n  Family = 10751,\n  Fantasy = 14,\n  History = 36,\n  Horror = 27,\n  Music = 10402,\n  Mystery = 9648,\n  Romance = 10749,\n  ScienceFiction = 878,\n  TVMovie = 10770,\n  Thriller = 53,\n  War = 10752,\n  Western = 37,\n  // mdb reserved\n  FilmNoir = 20000,\n  // similar genre: Music id:10402\n  Musical = 20001,\n  News = 20002,\n  RealityTV = 20003,\n  // similar genre: Science Fiction id:878\n  SciFi = 20004,\n  // another media type\n  Short = 20005,\n  Sport = 20006,\n}\n\n\n\n/**\nexport enum Department {\n    Art = \"Art\",\n    Camera = \"Camera\",\n    CostumeMakeUp = \"Costume & Make-Up\",\n    Crew = \"Crew\",\n    Directing = \"Directing\",\n    Editing = \"Editing\",\n    Lighting = \"Lighting\",\n    Production = \"Production\",\n    Sound = \"Sound\",\n    VisualEffects = \"Visual Effects\",\n    Writing = \"Writing\",\n}\n\nexport interface ExternalIDS {\n    imdb_id:      string;\n    facebook_id:  null;\n    instagram_id: null;\n    twitter_id:   null;\n}\n\nexport interface Genre {\n    id:   number;\n    name: string;\n}\n\nexport interface Images {\n    backdrops: any[];\n    posters:   any[];\n}\n\nexport enum OriginalLanguage {\n    En = \"en\",\n    Es = \"es\",\n    Fr = \"fr\",\n}\n\nexport interface ProductionCompany {\n    id:             number;\n    logo_path:      string;\n    name:           string;\n    origin_country: string;\n}\n\nexport interface ProductionCountry {\n    iso_3166_1: string;\n    name:       string;\n}\n\nexport interface Recommendations {\n    page:          number;\n    results:       RecommendationsResult[];\n    total_pages:   number;\n    total_results: number;\n}\n\nexport interface RecommendationsResult {\n    id:                number;\n    video:             boolean;\n    vote_count:        number;\n    vote_average:      number;\n    title:             string;\n    release_date:      string;\n    original_language: OriginalLanguage;\n    original_title:    string;\n    genre_ids:         number[];\n    backdrop_path:     string;\n    adult:             boolean;\n    overview:          string;\n    poster_path:       string;\n    popularity:        number;\n}\n\nexport interface SpokenLanguage {\n    iso_639_1: OriginalLanguage;\n    name:      string;\n}\n\nexport interface Videos {\n    results: VideosResult[];\n}\n\nexport interface VideosResult {\n    id:         string;\n    iso_639_1:  OriginalLanguage;\n    iso_3166_1: string;\n    key:        string;\n    name:       string;\n    site:       string;\n    size:       number;\n    type:       string;\n}\n */\n\n",
            "properties": [
                {
                    "name": "cast_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 262
                },
                {
                    "name": "character",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 263
                },
                {
                    "name": "credit_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 264
                },
                {
                    "name": "gender",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 265
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 266
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 267
                },
                {
                    "name": "order",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 268
                },
                {
                    "name": "profile_path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "null | string",
                    "optional": false,
                    "description": "",
                    "line": 269
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Credits",
            "id": "interface-Credits-584d54738f93e2af94202069b5eddb4cab23bb2dfec2ff69f24ebaf881c252f94680b4cd6cec302796817692570a31bedafc5d74fed1cf6488a895dbf372e23d",
            "file": "src/app/models/interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IMdbMovieDetails {\n  awards?: string\n  backgroundPath: string;\n  belongsToCollection?: []\n  boxOffice?: string | number // tmdb:revenue(number)\n  budget?: number\n  country?: string\n  director?: string\n  dvd?: string // dvd release\n  genres?: string[] | string | IGenre[]\n  imdbId?: string\n  imdbRating?: string\n  imdbVotes?: string\n  isAdult?: boolean;\n  isAvailable?: boolean;\n  languages?: string[]\n  libraryInfo?: ILibraryInfo\n  metascore?: string // metacritic score\\\n  originalLanguage?: string // tmdb:\"en\",omdb:\"English\"\n  originalTitle?: string\n  plot?: string // plot or overview\n  popularity?: number\n  posterPath: string\n  production?: string // company; i.e. Walt Disney Pictures\n  rated?: string // rated or certificate\n  ratings?: IRating[]\n  releaseDate?: string // omdb:\"05 May 2017\"; tmdb:\"1999-10-15\"\n  releaseYear?: number | string\n  response: string\n  runtime?: string\n  starring?: string // Actors field in omdb\n  status?: string // released/Post\n  tagline?: string;\n  tmdbId?: number\n  title: string\n  type?: string // movie/tvmovie/series\n  video?: boolean; // unknown\n  // voteAverage: number; // tmdb votes\n  // voteCount: number; // tmdb votes\n  website?: string\n  writer?: string // omdb\n  [propName: string]: any;\n}\n\nexport interface IRating {\n  Source: string\n  Value: string\n}\n\nexport interface LibraryInfo {\n  tmdbId?: null | number | string\n  imdbID?: string\n  title?: string\n  year?: number\n  directoryList?: string[]\n  _id: string\n}\n\nexport interface MovieGenre {\n  id: number\n  code: string\n  description: string\n  isChecked: boolean\n}\n\nexport interface WatchList {\n  id: number\n  movieList: string[]\n}\n\nexport interface ILibraryInfo {\n  tmdbId?: null | number | string\n  imdbID?: string\n  title?: string\n  year?: number\n  directoryList?: string[]\n  _id: string\n}\n\nexport interface ICollection {\n  id: number,\n  name: string\n}\n\nexport interface IProductionCompany {\n  id: number;\n  logo_path: null | string;\n  name: string;\n  origin_country: string;\n}\n\nexport interface IProductionCountry {\n  iso_3166_1: string;\n  name: string;\n}\n\nexport interface ISpokenLanguage {\n  iso_639_1: string;\n  name: string;\n}\n\nexport interface IOmdbMovieDetail {\n  Title: string\n  Year?: string\n  Rated?: string\n  Released?: string // \"05 May 2017\"\n  Runtime?: string\n  Genre?: string\n  Director?: string\n  Writer?: string\n  Actors?: string\n  Plot?: string\n  Language?: string\n  Country?: string\n  Awards?: string\n  Poster?: string\n  Ratings?: IRating[]\n  Metascore?: string\n  imdbRating?: string\n  imdbVotes?: string\n  imdbID: string\n  Type?: string\n  DVD?: string\n  BoxOffice?: string\n  Production?: string\n  Website?: string\n  Response: string\n}\n\nexport interface ITmdbMovieDetail {\n  adult: boolean;\n  backdrop_path: string;\n  belongs_to_collection: null;\n  budget: number;\n  genres: IGenre[];\n  homepage: string;\n  id: number;\n  imdb_id: string;\n  original_language: string;\n  original_title: string;\n  overview: string;\n  popularity: number;\n  poster_path: string;\n  production_companies: IProductionCompany[];\n  production_countries: IProductionCountry[];\n  release_date: string;\n  revenue: number;\n  runtime: number;\n  spoken_languages: ISpokenLanguage[];\n  status: string;\n  tagline: string;\n  title: string;\n  video: boolean;\n  vote_average: number;\n  vote_count: number;\n}\n\nexport interface MdbMovieDetails {\n  adult?: boolean;\n  title: string\n  releaseYear?: string\n  releaseDate?: string\n  rated?: string // rated or certificate\n  runtime?: string\n  genres?: string\n  director?: string\n  writer?: string\n  Actors?: string\n  plot?: string // plot or overview\n  Language?: string\n  Country?: string\n  Awards?: string\n  Poster?: string\n  Ratings?: IRating[]\n  Metascore?: string\n  imdbRating?: string\n  imdbVotes?: string\n  imdbID: string\n  tmdbID: number\n  Type?: string\n  DVD?: string\n  BoxOffice?: string\n  Production?: string\n  website?: string\n  response: string\n  libraryInfo?: ILibraryInfo\n}\n\n// // adult: boolean;\n// //backdrop_path: string;\n// belongs_to_collection: null;\n// // budget: number;\n// genres: Genre[];\n// // homepage: string;\n// // id: number;\n// // imdb_id: string;\n// original_language: string;\n// original_title: string;\n// // overview: string;\n// // popularity: number;\n// // poster_path: string;\n// production_companies: ProductionCompany[];\n// production_countries: ProductionCountry[];\n// // release_date: string;\n// // revenue: number;\n// // runtime: number;\n// spoken_languages: SpokenLanguage[];\n// // status: string;\n// // tagline: string;\n// // title: string;\n// // video: boolean;\n// // vote_average: number;\n// // vote_count: number;\n\nexport interface ITmdbResultObject {\n  page: number;\n  total_results: number;\n  total_pages: number;\n  results: ITmdbResult[];\n}\n\nexport interface ITmdbResult {\n  popularity: number\n  vote_count: number\n  video: boolean\n  poster_path: string\n  id: number\n  adult: boolean\n  backdrop_path: string\n  original_language: string\n  original_title: string\n  genre_ids: number[]\n  title: string\n  vote_average: number\n  overview: string\n  release_date: string\n  isAvailable?: boolean\n  isHighlighted?: boolean\n}\n\nexport interface ILibraryMovie {\n  tmdbId?: number,\n  title: string,\n  year: number,\n  imdbId?: string,\n  directory: string[]\n}\n\nexport interface IGenre {\n  id: number\n  name: string\n}\n\nexport interface Credits {\n  id: number;\n  cast: CastElement[];\n  crew: Crew[];\n}\n\ninterface CastElement {\n  cast_id: number;\n  character: string;\n  credit_id: string;\n  gender: number;\n  id: number;\n  name: string;\n  order: number;\n  profile_path: null | string;\n}\n\ninterface Crew {\n  credit_id: string;\n  department: Department;\n  gender: number;\n  id: number;\n  job: string;\n  name: string;\n  profile_path: null | string;\n}\n\nexport enum Department {\n  Art = 'Art',\n  Camera = 'Camera',\n  CostumeMakeUp = 'Costume & Make-Up',\n  Crew = 'Crew',\n  Directing = 'Directing',\n  Editing = 'Editing',\n  Lighting = 'Lighting',\n  Production = 'Production',\n  Sound = 'Sound',\n  VisualEffects = 'Visual Effects',\n  Writing = 'Writing',\n}\n\nexport class MDBTorrent {\n  id?: string\n  name?: string\n  size?: string\n  hash: string\n  url?: string\n  quality?: string\n  type?: string\n  seeds?: number\n  peers?: number\n  sizeBytes?: number\n  added?: string\n  dateUploaded?: string\n  dateUploadedUnix?: number\n  isYts?: boolean\n  magnetLink?: string\n}\n\nexport class ITPBTorrent {\n  id?: number\n  name?: string\n  hash: string\n  sizeBytes?: number\n  added?: string\n}\n\nexport interface ISearch {\n  page: number\n}\n\nexport enum OmdbParameters {\n  ApiKey = 'apikey',\n  ImdbId = 'i',\n  Title = 't',\n  Type = 'type',\n  Year = 'y',\n  Plot = 'plot',\n  Return = 'r',\n  Callback = 'callback',\n  Version = 'v',\n}\n\nexport enum TmdbParameters {\n  ApiKey = 'api_key',\n  AppendToResponse = 'append_to_response',\n  Language = 'language',\n  Region = 'region',\n  SortBy = 'sort_by',\n  CertificationCountry = 'certification_country',\n  Certification = 'certification',\n  CertificationLess = 'certification.lte',\n  CertificationGreater = 'certification.gte',\n  IncludeAdult = 'include_adult',\n  IncludeVideo = 'include_video',\n  Page = 'page',\n  PrimaryReleaseYear = 'primary_release_year',\n  PrimaryReleaseDateGreater = 'primary_release_date.gte',\n  PrimaryReleaseDateLess = 'primary_release_date.lte',\n  ReleaseDateGreater = 'release_date.gte',\n  ReleaseDateLess = 'release_date.lte',\n  WithReleaseType = 'with_release_type',\n  Year = 'year',\n  VoteCountGreater = 'vote_count.gte',\n  VoteCountLess = 'vote_count.lte',\n  VoteAverageGreater = 'vote_average.gte',\n  VoteAverageLess = 'vote_average.lte',\n  WithCast = 'with_cast',\n  WithCrew = 'with_crew',\n  WithPeople = 'with_people',\n  WithCompanies = 'with_companies',\n  WithGenres = 'with_genres',\n  WithoutGenres = 'without_genres',\n  WithKeywords = 'with_keywords',\n  WithoutKeywords = 'without_keywords',\n  WithRuntimeGreater = 'with_runtime.gte',\n  WithRuntimeLess = 'with_runtime.lte',\n  WithOriginalLanguage = 'with_original_language',\n  WithWatchProviders = 'with_watch_providers',\n  WatchRegion = 'watch_region'\n}\n\nexport enum TmdbSearchMovieParameters {\n  ApiKey = 'api_key',\n  Language = 'language', // Pass a ISO 639 - 1 value to display translated data for the fields that support it. minLength: 2 pattern: ([a - z]{ 2 }) -([A - Z]{ 2 }) default: en - US\n  Query = 'query',\n  Page = 'page', // minimum: 1 maximum: 1000\n  IncludeAdult = 'include_adult',\n  Region = 'region',\n  // Specify a ISO 3166 - 1 code to filter release dates.Must be uppercase. pattern: ^ [A - Z]{ 2 } $\n  Year = 'year',\n  PrimaryReleaseYear = 'primary_release_year'\n}\n\nenum TmdbAppendToResponseParameters {\n  AccountStates = 'account_states',\n  Videos = 'videos',\n  Images = 'images',\n  Credits = 'credits',\n  Changes = 'changes',\n  Translations = 'translations',\n  Similar = 'similar',\n  ExternalIds = 'external_ids',\n  AlternativeTitles = 'alternative_titles',\n  Keywords = 'keywords',\n  Reviews = 'reviews',\n  Recommendations = 'recommendations',\n  ReleaseDates = 'release_dates',\n  Lists = 'lists'\n}\n\nenum TmdbReleaseTypes {\n  PREMIERE = 'Premiere',  // 1\n  THEATRICAL_LIMITED = 'Theatrical(limited)', // 2\n  THEATRICAL = 'Theatrical', // 3\n  DIGITAL = 'Digital', // 4\n  PHYSICAL = 'Physical', // 5\n  TV = 'TV', // 6\n}\n\nexport interface IPersonDetails {\n  birthday: string;\n  known_for_department: string;\n  id: number;\n  movie_credits?: IPersonCredits;\n  tv_credits?: IPersonCredits;\n  combined_credits?: IPersonCredits;\n  homepage?: any;\n  profile_path: string;\n  imdb_id: string;\n  deathday?: any;\n  images?: IImages;\n  external_ids?: IExternalids;\n  name: string;\n  also_known_as: string[];\n  biography: string;\n  adult: boolean;\n  gender: number;\n  place_of_birth: string;\n  popularity: number;\n}\n\nexport interface IPersonCredits {\n  cast: IPersonCastCrew[];\n  crew: IPersonCastCrew[];\n  id?: number;\n}\n\nexport interface IPersonCastCrew {\n  id?: number;\n  original_language: string;\n  episode_count?: number;\n  overview: string;\n  origin_country?: string[];\n  original_name?: string;\n  genre_ids: number[];\n  name?: string;\n  media_type: string;\n  poster_path: null | string;\n  first_air_date?: string;\n  vote_average: number;\n  vote_count: number;\n  character?: string;\n  backdrop_path: null | string;\n  popularity: number;\n  credit_id: string;\n  original_title?: string;\n  video?: boolean;\n  release_date?: string;\n  title?: string;\n  adult?: boolean;\n  department?: string;\n  job?: string;\n}\n\nexport interface IExternalids {\n  id?: number;\n  freebase_id: string;\n  instagram_id: string;\n  tvrage_id: number;\n  twitter_id: string;\n  freebase_mid: string;\n  imdb_id: string;\n  facebook_id: string;\n}\n\nexport interface IImages {\n  id?: number;\n  profiles: IProfile[];\n}\n\nexport interface IProfile {\n  iso_639_1?: any;\n  aspect_ratio: number;\n  vote_count: number;\n  height: number;\n  vote_average: number;\n  file_path: string;\n  width: number;\n}\n\nexport interface ICredits {\n  cast: ICast[];\n  crew: ICrew[];\n}\n\ninterface ICast {\n  poster_path?: string;\n  adult: boolean;\n  backdrop_path?: string;\n  vote_count: number;\n  video: boolean;\n  id: number;\n  media_type?: string;\n  popularity: number;\n  genre_ids: number[];\n  original_language: string;\n  title: string;\n  original_title: string;\n  release_date: string;\n  character: string;\n  vote_average: number;\n  overview: string;\n  credit_id: string;\n}\n\ninterface ICrew {\n  id: number;\n  department: string;\n  original_language: string;\n  original_title: string;\n  job: string;\n  overview: string;\n  genre_ids: number[];\n  video: boolean;\n  episode_count: number\n  media_type?: string;\n  credit_id: string;\n  poster_path?: string;\n  popularity: number;\n  backdrop_path?: string;\n  vote_count: number;\n  title: string;\n  adult: boolean;\n  vote_average: number;\n  release_date: string;\n}\n\nexport interface IUserSavedData {\n  id?: string,\n  title: string,\n  year: number,\n  tmdbId: number,\n}\n\nexport enum GenreCodes {\n  Action = 28,\n  Adventure = 12,\n  Animation = 16,\n  Comedy = 35,\n  Crime = 80,\n  Documentary = 99,\n  Drama = 18,\n  Family = 10751,\n  Fantasy = 14,\n  History = 36,\n  Horror = 27,\n  Music = 10402,\n  Mystery = 9648,\n  Romance = 10749,\n  ScienceFiction = 878,\n  TVMovie = 10770,\n  Thriller = 53,\n  War = 10752,\n  Western = 37,\n  // mdb reserved\n  FilmNoir = 20000,\n  // similar genre: Music id:10402\n  Musical = 20001,\n  News = 20002,\n  RealityTV = 20003,\n  // similar genre: Science Fiction id:878\n  SciFi = 20004,\n  // another media type\n  Short = 20005,\n  Sport = 20006,\n}\n\n\n\n/**\nexport enum Department {\n    Art = \"Art\",\n    Camera = \"Camera\",\n    CostumeMakeUp = \"Costume & Make-Up\",\n    Crew = \"Crew\",\n    Directing = \"Directing\",\n    Editing = \"Editing\",\n    Lighting = \"Lighting\",\n    Production = \"Production\",\n    Sound = \"Sound\",\n    VisualEffects = \"Visual Effects\",\n    Writing = \"Writing\",\n}\n\nexport interface ExternalIDS {\n    imdb_id:      string;\n    facebook_id:  null;\n    instagram_id: null;\n    twitter_id:   null;\n}\n\nexport interface Genre {\n    id:   number;\n    name: string;\n}\n\nexport interface Images {\n    backdrops: any[];\n    posters:   any[];\n}\n\nexport enum OriginalLanguage {\n    En = \"en\",\n    Es = \"es\",\n    Fr = \"fr\",\n}\n\nexport interface ProductionCompany {\n    id:             number;\n    logo_path:      string;\n    name:           string;\n    origin_country: string;\n}\n\nexport interface ProductionCountry {\n    iso_3166_1: string;\n    name:       string;\n}\n\nexport interface Recommendations {\n    page:          number;\n    results:       RecommendationsResult[];\n    total_pages:   number;\n    total_results: number;\n}\n\nexport interface RecommendationsResult {\n    id:                number;\n    video:             boolean;\n    vote_count:        number;\n    vote_average:      number;\n    title:             string;\n    release_date:      string;\n    original_language: OriginalLanguage;\n    original_title:    string;\n    genre_ids:         number[];\n    backdrop_path:     string;\n    adult:             boolean;\n    overview:          string;\n    poster_path:       string;\n    popularity:        number;\n}\n\nexport interface SpokenLanguage {\n    iso_639_1: OriginalLanguage;\n    name:      string;\n}\n\nexport interface Videos {\n    results: VideosResult[];\n}\n\nexport interface VideosResult {\n    id:         string;\n    iso_639_1:  OriginalLanguage;\n    iso_3166_1: string;\n    key:        string;\n    name:       string;\n    site:       string;\n    size:       number;\n    type:       string;\n}\n */\n\n",
            "properties": [
                {
                    "name": "cast",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CastElement[]",
                    "optional": false,
                    "description": "",
                    "line": 257
                },
                {
                    "name": "crew",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Crew[]",
                    "optional": false,
                    "description": "",
                    "line": 258
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 256
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Crew",
            "id": "interface-Crew-584d54738f93e2af94202069b5eddb4cab23bb2dfec2ff69f24ebaf881c252f94680b4cd6cec302796817692570a31bedafc5d74fed1cf6488a895dbf372e23d",
            "file": "src/app/models/interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IMdbMovieDetails {\n  awards?: string\n  backgroundPath: string;\n  belongsToCollection?: []\n  boxOffice?: string | number // tmdb:revenue(number)\n  budget?: number\n  country?: string\n  director?: string\n  dvd?: string // dvd release\n  genres?: string[] | string | IGenre[]\n  imdbId?: string\n  imdbRating?: string\n  imdbVotes?: string\n  isAdult?: boolean;\n  isAvailable?: boolean;\n  languages?: string[]\n  libraryInfo?: ILibraryInfo\n  metascore?: string // metacritic score\\\n  originalLanguage?: string // tmdb:\"en\",omdb:\"English\"\n  originalTitle?: string\n  plot?: string // plot or overview\n  popularity?: number\n  posterPath: string\n  production?: string // company; i.e. Walt Disney Pictures\n  rated?: string // rated or certificate\n  ratings?: IRating[]\n  releaseDate?: string // omdb:\"05 May 2017\"; tmdb:\"1999-10-15\"\n  releaseYear?: number | string\n  response: string\n  runtime?: string\n  starring?: string // Actors field in omdb\n  status?: string // released/Post\n  tagline?: string;\n  tmdbId?: number\n  title: string\n  type?: string // movie/tvmovie/series\n  video?: boolean; // unknown\n  // voteAverage: number; // tmdb votes\n  // voteCount: number; // tmdb votes\n  website?: string\n  writer?: string // omdb\n  [propName: string]: any;\n}\n\nexport interface IRating {\n  Source: string\n  Value: string\n}\n\nexport interface LibraryInfo {\n  tmdbId?: null | number | string\n  imdbID?: string\n  title?: string\n  year?: number\n  directoryList?: string[]\n  _id: string\n}\n\nexport interface MovieGenre {\n  id: number\n  code: string\n  description: string\n  isChecked: boolean\n}\n\nexport interface WatchList {\n  id: number\n  movieList: string[]\n}\n\nexport interface ILibraryInfo {\n  tmdbId?: null | number | string\n  imdbID?: string\n  title?: string\n  year?: number\n  directoryList?: string[]\n  _id: string\n}\n\nexport interface ICollection {\n  id: number,\n  name: string\n}\n\nexport interface IProductionCompany {\n  id: number;\n  logo_path: null | string;\n  name: string;\n  origin_country: string;\n}\n\nexport interface IProductionCountry {\n  iso_3166_1: string;\n  name: string;\n}\n\nexport interface ISpokenLanguage {\n  iso_639_1: string;\n  name: string;\n}\n\nexport interface IOmdbMovieDetail {\n  Title: string\n  Year?: string\n  Rated?: string\n  Released?: string // \"05 May 2017\"\n  Runtime?: string\n  Genre?: string\n  Director?: string\n  Writer?: string\n  Actors?: string\n  Plot?: string\n  Language?: string\n  Country?: string\n  Awards?: string\n  Poster?: string\n  Ratings?: IRating[]\n  Metascore?: string\n  imdbRating?: string\n  imdbVotes?: string\n  imdbID: string\n  Type?: string\n  DVD?: string\n  BoxOffice?: string\n  Production?: string\n  Website?: string\n  Response: string\n}\n\nexport interface ITmdbMovieDetail {\n  adult: boolean;\n  backdrop_path: string;\n  belongs_to_collection: null;\n  budget: number;\n  genres: IGenre[];\n  homepage: string;\n  id: number;\n  imdb_id: string;\n  original_language: string;\n  original_title: string;\n  overview: string;\n  popularity: number;\n  poster_path: string;\n  production_companies: IProductionCompany[];\n  production_countries: IProductionCountry[];\n  release_date: string;\n  revenue: number;\n  runtime: number;\n  spoken_languages: ISpokenLanguage[];\n  status: string;\n  tagline: string;\n  title: string;\n  video: boolean;\n  vote_average: number;\n  vote_count: number;\n}\n\nexport interface MdbMovieDetails {\n  adult?: boolean;\n  title: string\n  releaseYear?: string\n  releaseDate?: string\n  rated?: string // rated or certificate\n  runtime?: string\n  genres?: string\n  director?: string\n  writer?: string\n  Actors?: string\n  plot?: string // plot or overview\n  Language?: string\n  Country?: string\n  Awards?: string\n  Poster?: string\n  Ratings?: IRating[]\n  Metascore?: string\n  imdbRating?: string\n  imdbVotes?: string\n  imdbID: string\n  tmdbID: number\n  Type?: string\n  DVD?: string\n  BoxOffice?: string\n  Production?: string\n  website?: string\n  response: string\n  libraryInfo?: ILibraryInfo\n}\n\n// // adult: boolean;\n// //backdrop_path: string;\n// belongs_to_collection: null;\n// // budget: number;\n// genres: Genre[];\n// // homepage: string;\n// // id: number;\n// // imdb_id: string;\n// original_language: string;\n// original_title: string;\n// // overview: string;\n// // popularity: number;\n// // poster_path: string;\n// production_companies: ProductionCompany[];\n// production_countries: ProductionCountry[];\n// // release_date: string;\n// // revenue: number;\n// // runtime: number;\n// spoken_languages: SpokenLanguage[];\n// // status: string;\n// // tagline: string;\n// // title: string;\n// // video: boolean;\n// // vote_average: number;\n// // vote_count: number;\n\nexport interface ITmdbResultObject {\n  page: number;\n  total_results: number;\n  total_pages: number;\n  results: ITmdbResult[];\n}\n\nexport interface ITmdbResult {\n  popularity: number\n  vote_count: number\n  video: boolean\n  poster_path: string\n  id: number\n  adult: boolean\n  backdrop_path: string\n  original_language: string\n  original_title: string\n  genre_ids: number[]\n  title: string\n  vote_average: number\n  overview: string\n  release_date: string\n  isAvailable?: boolean\n  isHighlighted?: boolean\n}\n\nexport interface ILibraryMovie {\n  tmdbId?: number,\n  title: string,\n  year: number,\n  imdbId?: string,\n  directory: string[]\n}\n\nexport interface IGenre {\n  id: number\n  name: string\n}\n\nexport interface Credits {\n  id: number;\n  cast: CastElement[];\n  crew: Crew[];\n}\n\ninterface CastElement {\n  cast_id: number;\n  character: string;\n  credit_id: string;\n  gender: number;\n  id: number;\n  name: string;\n  order: number;\n  profile_path: null | string;\n}\n\ninterface Crew {\n  credit_id: string;\n  department: Department;\n  gender: number;\n  id: number;\n  job: string;\n  name: string;\n  profile_path: null | string;\n}\n\nexport enum Department {\n  Art = 'Art',\n  Camera = 'Camera',\n  CostumeMakeUp = 'Costume & Make-Up',\n  Crew = 'Crew',\n  Directing = 'Directing',\n  Editing = 'Editing',\n  Lighting = 'Lighting',\n  Production = 'Production',\n  Sound = 'Sound',\n  VisualEffects = 'Visual Effects',\n  Writing = 'Writing',\n}\n\nexport class MDBTorrent {\n  id?: string\n  name?: string\n  size?: string\n  hash: string\n  url?: string\n  quality?: string\n  type?: string\n  seeds?: number\n  peers?: number\n  sizeBytes?: number\n  added?: string\n  dateUploaded?: string\n  dateUploadedUnix?: number\n  isYts?: boolean\n  magnetLink?: string\n}\n\nexport class ITPBTorrent {\n  id?: number\n  name?: string\n  hash: string\n  sizeBytes?: number\n  added?: string\n}\n\nexport interface ISearch {\n  page: number\n}\n\nexport enum OmdbParameters {\n  ApiKey = 'apikey',\n  ImdbId = 'i',\n  Title = 't',\n  Type = 'type',\n  Year = 'y',\n  Plot = 'plot',\n  Return = 'r',\n  Callback = 'callback',\n  Version = 'v',\n}\n\nexport enum TmdbParameters {\n  ApiKey = 'api_key',\n  AppendToResponse = 'append_to_response',\n  Language = 'language',\n  Region = 'region',\n  SortBy = 'sort_by',\n  CertificationCountry = 'certification_country',\n  Certification = 'certification',\n  CertificationLess = 'certification.lte',\n  CertificationGreater = 'certification.gte',\n  IncludeAdult = 'include_adult',\n  IncludeVideo = 'include_video',\n  Page = 'page',\n  PrimaryReleaseYear = 'primary_release_year',\n  PrimaryReleaseDateGreater = 'primary_release_date.gte',\n  PrimaryReleaseDateLess = 'primary_release_date.lte',\n  ReleaseDateGreater = 'release_date.gte',\n  ReleaseDateLess = 'release_date.lte',\n  WithReleaseType = 'with_release_type',\n  Year = 'year',\n  VoteCountGreater = 'vote_count.gte',\n  VoteCountLess = 'vote_count.lte',\n  VoteAverageGreater = 'vote_average.gte',\n  VoteAverageLess = 'vote_average.lte',\n  WithCast = 'with_cast',\n  WithCrew = 'with_crew',\n  WithPeople = 'with_people',\n  WithCompanies = 'with_companies',\n  WithGenres = 'with_genres',\n  WithoutGenres = 'without_genres',\n  WithKeywords = 'with_keywords',\n  WithoutKeywords = 'without_keywords',\n  WithRuntimeGreater = 'with_runtime.gte',\n  WithRuntimeLess = 'with_runtime.lte',\n  WithOriginalLanguage = 'with_original_language',\n  WithWatchProviders = 'with_watch_providers',\n  WatchRegion = 'watch_region'\n}\n\nexport enum TmdbSearchMovieParameters {\n  ApiKey = 'api_key',\n  Language = 'language', // Pass a ISO 639 - 1 value to display translated data for the fields that support it. minLength: 2 pattern: ([a - z]{ 2 }) -([A - Z]{ 2 }) default: en - US\n  Query = 'query',\n  Page = 'page', // minimum: 1 maximum: 1000\n  IncludeAdult = 'include_adult',\n  Region = 'region',\n  // Specify a ISO 3166 - 1 code to filter release dates.Must be uppercase. pattern: ^ [A - Z]{ 2 } $\n  Year = 'year',\n  PrimaryReleaseYear = 'primary_release_year'\n}\n\nenum TmdbAppendToResponseParameters {\n  AccountStates = 'account_states',\n  Videos = 'videos',\n  Images = 'images',\n  Credits = 'credits',\n  Changes = 'changes',\n  Translations = 'translations',\n  Similar = 'similar',\n  ExternalIds = 'external_ids',\n  AlternativeTitles = 'alternative_titles',\n  Keywords = 'keywords',\n  Reviews = 'reviews',\n  Recommendations = 'recommendations',\n  ReleaseDates = 'release_dates',\n  Lists = 'lists'\n}\n\nenum TmdbReleaseTypes {\n  PREMIERE = 'Premiere',  // 1\n  THEATRICAL_LIMITED = 'Theatrical(limited)', // 2\n  THEATRICAL = 'Theatrical', // 3\n  DIGITAL = 'Digital', // 4\n  PHYSICAL = 'Physical', // 5\n  TV = 'TV', // 6\n}\n\nexport interface IPersonDetails {\n  birthday: string;\n  known_for_department: string;\n  id: number;\n  movie_credits?: IPersonCredits;\n  tv_credits?: IPersonCredits;\n  combined_credits?: IPersonCredits;\n  homepage?: any;\n  profile_path: string;\n  imdb_id: string;\n  deathday?: any;\n  images?: IImages;\n  external_ids?: IExternalids;\n  name: string;\n  also_known_as: string[];\n  biography: string;\n  adult: boolean;\n  gender: number;\n  place_of_birth: string;\n  popularity: number;\n}\n\nexport interface IPersonCredits {\n  cast: IPersonCastCrew[];\n  crew: IPersonCastCrew[];\n  id?: number;\n}\n\nexport interface IPersonCastCrew {\n  id?: number;\n  original_language: string;\n  episode_count?: number;\n  overview: string;\n  origin_country?: string[];\n  original_name?: string;\n  genre_ids: number[];\n  name?: string;\n  media_type: string;\n  poster_path: null | string;\n  first_air_date?: string;\n  vote_average: number;\n  vote_count: number;\n  character?: string;\n  backdrop_path: null | string;\n  popularity: number;\n  credit_id: string;\n  original_title?: string;\n  video?: boolean;\n  release_date?: string;\n  title?: string;\n  adult?: boolean;\n  department?: string;\n  job?: string;\n}\n\nexport interface IExternalids {\n  id?: number;\n  freebase_id: string;\n  instagram_id: string;\n  tvrage_id: number;\n  twitter_id: string;\n  freebase_mid: string;\n  imdb_id: string;\n  facebook_id: string;\n}\n\nexport interface IImages {\n  id?: number;\n  profiles: IProfile[];\n}\n\nexport interface IProfile {\n  iso_639_1?: any;\n  aspect_ratio: number;\n  vote_count: number;\n  height: number;\n  vote_average: number;\n  file_path: string;\n  width: number;\n}\n\nexport interface ICredits {\n  cast: ICast[];\n  crew: ICrew[];\n}\n\ninterface ICast {\n  poster_path?: string;\n  adult: boolean;\n  backdrop_path?: string;\n  vote_count: number;\n  video: boolean;\n  id: number;\n  media_type?: string;\n  popularity: number;\n  genre_ids: number[];\n  original_language: string;\n  title: string;\n  original_title: string;\n  release_date: string;\n  character: string;\n  vote_average: number;\n  overview: string;\n  credit_id: string;\n}\n\ninterface ICrew {\n  id: number;\n  department: string;\n  original_language: string;\n  original_title: string;\n  job: string;\n  overview: string;\n  genre_ids: number[];\n  video: boolean;\n  episode_count: number\n  media_type?: string;\n  credit_id: string;\n  poster_path?: string;\n  popularity: number;\n  backdrop_path?: string;\n  vote_count: number;\n  title: string;\n  adult: boolean;\n  vote_average: number;\n  release_date: string;\n}\n\nexport interface IUserSavedData {\n  id?: string,\n  title: string,\n  year: number,\n  tmdbId: number,\n}\n\nexport enum GenreCodes {\n  Action = 28,\n  Adventure = 12,\n  Animation = 16,\n  Comedy = 35,\n  Crime = 80,\n  Documentary = 99,\n  Drama = 18,\n  Family = 10751,\n  Fantasy = 14,\n  History = 36,\n  Horror = 27,\n  Music = 10402,\n  Mystery = 9648,\n  Romance = 10749,\n  ScienceFiction = 878,\n  TVMovie = 10770,\n  Thriller = 53,\n  War = 10752,\n  Western = 37,\n  // mdb reserved\n  FilmNoir = 20000,\n  // similar genre: Music id:10402\n  Musical = 20001,\n  News = 20002,\n  RealityTV = 20003,\n  // similar genre: Science Fiction id:878\n  SciFi = 20004,\n  // another media type\n  Short = 20005,\n  Sport = 20006,\n}\n\n\n\n/**\nexport enum Department {\n    Art = \"Art\",\n    Camera = \"Camera\",\n    CostumeMakeUp = \"Costume & Make-Up\",\n    Crew = \"Crew\",\n    Directing = \"Directing\",\n    Editing = \"Editing\",\n    Lighting = \"Lighting\",\n    Production = \"Production\",\n    Sound = \"Sound\",\n    VisualEffects = \"Visual Effects\",\n    Writing = \"Writing\",\n}\n\nexport interface ExternalIDS {\n    imdb_id:      string;\n    facebook_id:  null;\n    instagram_id: null;\n    twitter_id:   null;\n}\n\nexport interface Genre {\n    id:   number;\n    name: string;\n}\n\nexport interface Images {\n    backdrops: any[];\n    posters:   any[];\n}\n\nexport enum OriginalLanguage {\n    En = \"en\",\n    Es = \"es\",\n    Fr = \"fr\",\n}\n\nexport interface ProductionCompany {\n    id:             number;\n    logo_path:      string;\n    name:           string;\n    origin_country: string;\n}\n\nexport interface ProductionCountry {\n    iso_3166_1: string;\n    name:       string;\n}\n\nexport interface Recommendations {\n    page:          number;\n    results:       RecommendationsResult[];\n    total_pages:   number;\n    total_results: number;\n}\n\nexport interface RecommendationsResult {\n    id:                number;\n    video:             boolean;\n    vote_count:        number;\n    vote_average:      number;\n    title:             string;\n    release_date:      string;\n    original_language: OriginalLanguage;\n    original_title:    string;\n    genre_ids:         number[];\n    backdrop_path:     string;\n    adult:             boolean;\n    overview:          string;\n    poster_path:       string;\n    popularity:        number;\n}\n\nexport interface SpokenLanguage {\n    iso_639_1: OriginalLanguage;\n    name:      string;\n}\n\nexport interface Videos {\n    results: VideosResult[];\n}\n\nexport interface VideosResult {\n    id:         string;\n    iso_639_1:  OriginalLanguage;\n    iso_3166_1: string;\n    key:        string;\n    name:       string;\n    site:       string;\n    size:       number;\n    type:       string;\n}\n */\n\n",
            "properties": [
                {
                    "name": "credit_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 273
                },
                {
                    "name": "department",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Department",
                    "optional": false,
                    "description": "",
                    "line": 274
                },
                {
                    "name": "gender",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 275
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 276
                },
                {
                    "name": "job",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 277
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 278
                },
                {
                    "name": "profile_path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "null | string",
                    "optional": false,
                    "description": "",
                    "line": 279
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Favorite",
            "id": "interface-Favorite-1864c2d5448e0c9450395f701045f267f35956627df366578c5a166274ffa8e8faf40cc47d8b234217c9f617306668665f329af03586e3cd1f8d89f5686324b7",
            "file": "src/app/models/profile-data.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Review } from \"./review.model\";\n\nexport class IProfileData {\n\n  tmdbId?: number;\n  bookmark?: Bookmark;\n  favorite?: Favorite;\n  watched?: Watched;\n  listLinkMovie?: ListLinkMovie;\n  review?: Review;\n  isBookmark?: boolean;\n  isFavorite?: boolean;\n  library?: any\n  // isBookmark?: boolean;\n}\n\ninterface Bookmark {\n  id: string\n}\ninterface Favorite {\n  id: string\n}\ninterface Watched {\n  id?: string\n  percentage: number\n}\nexport interface ListLinkMovie {\n  id: number\n  listId: number\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "FirebaseData",
            "id": "interface-FirebaseData-f1264c0be8b52549bc2714b6c839883a2863b33eef274f268d169f6e723f52e422665ecd243554a453777a48d3adf0a906d3d2ade094b9d75e9652deec484602",
            "file": "src/app/services/firebase.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { AngularFireAuth } from '@angular/fire/auth'\nimport { AngularFireModule } from '@angular/fire/'\nimport { AngularFirestore, } from '@angular/fire/firestore'\nimport { QueryDocumentSnapshot } from '@angular/fire/firestore/interfaces';\nimport * as firebase from 'firebase';\nimport { IpcService, BookmarkChanges } from './ipc.service';\nimport { RemoveUser } from '../app.actions';\nimport { combineLatest } from 'rxjs';\n@Injectable({\n  providedIn: 'root'\n})\nexport class FirebaseService {\n\n  BOOKMARK = 'BOOKMARK'\n  bookmarkDeleteList = []\n  bookmarkInsertList = []\n  bookmarkUpdateList = []\n  bookmarkList = []\n  procSync = false\n  db = this.angularFirestore.firestore\n  batch\n\n  constructor(\n    private angularFirestore: AngularFirestore,\n    private ipcService: IpcService,\n    private auth: AngularFireAuth,\n    private afm: AngularFireModule,\n  ) { this.db = this.angularFirestore.firestore }\n\n  onSync() {\n\n  }\n\n  /**\n   * Syncs bookmarks to and from cloud then executing batch commit.\n   */\n  synchronizeBookmarks() {\n    // this.ipcService.call(this.ipcService.IPCCommand.GetBookmarkChanges)\n    this.batch = this.db.batch()\n    this.ipcService.bookmarkChanges.subscribe(e => {\n      this.bookmarkInsertList = e.filter((v) => v.change === BookmarkChanges.INSERT)\n      this.bookmarkDeleteList = e.filter((v) => v.change === BookmarkChanges.DELETE)\n      this.bookmarkUpdateList = e.filter((v) => v.change === BookmarkChanges.UPDATE)\n      this.batch = this.db.batch()\n      this.insertItemsToFirestore()\n      this.deleteItemsFromFirestore()\n      this.batch.commit()\n    })\n  }\n\n  getMovieUserData(id: number) {\n    const bookmarkQuery = this.getFromFirestore(CollectionName.Bookmark, FieldName.TmdbId, FirebaseOperator.Equal, id)\n    const watchedQuery = this.getFromFirestore(CollectionName.Watched, FieldName.TmdbId, FirebaseOperator.Equal, id)\n    return new Promise<any>((resolve, reject) => {\n      combineLatest([bookmarkQuery, watchedQuery]).toPromise().then(([val, val2]) => { resolve([val, val2]) })\n    })\n  }\n\n  /**\n   * Gets item from firestore.\n   * @param collection name of collection\n   * @param columnName name of column\n   * @param operator firebase operator\n   * @param value value to compare\n   */\n  getFromFirestore(collectionName: CollectionName, fieldName: FieldName, operator: FirebaseOperator, value: any) {\n    return new Promise(resolve => {\n      this.db.collection(collectionName).where(fieldName, operator, value).get().then((snapshot) => {\n        console.log('SNAPSHOT: ', snapshot);\n        if (!snapshot.empty) {\n          const objectToReturn = snapshot.docs[0].data()\n          objectToReturn['id'] = snapshot.docs[0].id\n          resolve(objectToReturn)\n        } else {\n          resolve(null)\n        }\n      }).catch(err => {\n        console.log('Error getting document', err);\n      });\n    })\n  }\n\n  getUserDataMultiple(idList: any[]): Promise<any> {\n    const bookmarkQuery = this.getFromFirestoreMultiple(CollectionName.Bookmark, FieldName.TmdbId, idList)\n    const watchedQuery = this.getFromFirestoreMultiple(CollectionName.Watched, FieldName.TmdbId, idList)\n    return new Promise<any>((resolve, reject) => {\n      combineLatest([bookmarkQuery, watchedQuery]).toPromise().then((val) => { resolve({ isFirebaseData: true, data: val }) })\n    })\n  }\n\n  getFromFirestoreMultiple(collectionName: CollectionName, fieldName: FieldName, list: any[]): Promise<Array<QueryDocumentSnapshot<any>>> {\n    return new Promise((resolve, reject) => {\n      this.db.collection(collectionName).where(fieldName, FirebaseOperator.In, list).get().then((snapshot: firebase.firestore.QuerySnapshot) => {\n        resolve(snapshot.docs)\n      }).catch(err => {\n        reject(err)\n      })\n    })\n  }\n\n  /**\n   * IN PROGRESS.\n   * @param collectionName name of the collection\n   * @param order order\n   * @param limit the limit\n   * @param lastVal last value of previous page\n   */\n  getFromFirestoreMultiplePaginated(collectionName: CollectionName, order: string, limit?: number, lastVal?: string | number) {\n    const defaultLimit = 20\n\n    return new Promise(resolve => {\n      lastVal = lastVal ? lastVal : 0\n      // this.db.collection(collectionName).startAfter(lastDocId).orderBy(order, 'asc').limit(defaultLimit).get().then(snapshot => {\n      this.db.collection(collectionName).orderBy(order).startAfter(lastVal).limit(defaultLimit).get().then(snapshot => {\n        resolve(snapshot.docs)\n      })\n    })\n  }\n\n  /**\n   * IN PROGRESS.\n   * @param collectionName name of the collection\n   * @param order order\n   * @param limit the limit\n   */\n  getFromFirestoreMultiplePaginatedFirst(collectionName: CollectionName, order: string, limit?: number) {\n    const defaultLimit = 20\n    return new Promise(resolve => {\n      this.db.collection(collectionName).orderBy(order, 'asc').limit(defaultLimit).get().then(snapshot => {\n        resolve(snapshot.docs)\n      })\n    })\n\n  }\n\n  /**\n   * Inserts data into firestore.\n   * @param collection name of the collection\n   * @param data data to insert/add\n   */\n  insertIntoFirestore(collection: CollectionName, data: object) {\n    return new Promise(resolve => {\n      this.db.collection(collection).add(data).then(e => {\n        if (e.id) {\n          resolve(e.id)\n        } else {\n          resolve(null)\n        }\n      })\n    })\n  }\n\n  /**\n   * Deletes a value from firestore\n   * @param collectionName name of collection/column\n   * @param docId doc id to remote\n   */\n  deleteFromFirestore(collectionName: CollectionName, docId: any) {\n    return new Promise(resolve => {\n      this.db.collection(collectionName).doc(docId).delete().then((e) => {\n        console.error('DELETE DOC: ', e);\n        resolve(null)\n      }).catch((error) => {\n        console.error('Error removing document: ', error);\n      });\n    })\n  }\n\n  /**\n   * !NOT WORKING RIGHT NOW\n   * Deletes a value from firestore\n   * @param collectionName name of collection/column\n   * @param tmdbId tmdb id to remote\n   */\n  deleteFromFirestoreByTmdbId(collectionName: CollectionName, tmdbId: number) {\n    return new Promise(resolve => {\n      // this.db.collection(collectionName).doc(docId).delete().then((e) => {\n      //   console.error('DELETE DOC: ', e);\n      resolve(null)\n      // }).catch((error) => {\n      //   console.error('Error removing document: ', error);\n      // });\n    })\n  }\n\n  /**\n   * Inserts data into firestore.\n   * @param collectionName name of the collection\n   * @param data data to insert/add\n   */\n  insertIntoFirestoreMulti(collectionName: CollectionName, data: object[]) {\n    const myBatch = this.db.batch()\n    data.forEach(element => {\n      const bookmarkRef = this.db.collection(collectionName).doc();\n      // myBatch.set(bookmarkRef, element)\n    })\n    // myBatch.commit()\n  }\n\n  insertItemsToFirestore() {\n    this.bookmarkInsertList.forEach(val => {\n      this.db.collection('data').doc().set(val).then().catch()\n    })\n  }\n\n  deleteItemsFromFirestore() {\n    const val = this.bookmarkDeleteList\n    val.forEach(element => {\n      const removeBookmarkRef = this.db.collection('bookmark').where(FieldName.TmdbId, FirebaseOperator.Equal, element.tmdbId).get().then(snapshot => {\n        snapshot.forEach(e => {\n          const ref = this.db.collection('bookmark').doc(e.id)\n          this.batch.delete(ref);\n        })\n      });\n      this.batch.commit()\n    })\n  }\n\n  signIn(emailUsername: string, password: string) {\n    const auth = this.auth.auth.signInWithEmailAndPassword(emailUsername, password).then((e) => {\n\n      console.log(e.additionalUserInfo);\n      console.log(e.credential);\n      console.log(e.operationType);\n      console.log(e.user);\n\n    }).catch((e) => {\n      {\n        if (e.code === 'auth/user-not-found') {\n          // need to login\n        } else if (e.code === 'auth/wrong-password') {\n\n        }\n        console.log('in catch', e);\n      }\n    })\n  }\n\n  signInWithGoogle(provider) {\n    this.auth.auth.signInWithPopup(provider).then((e) => {\n      console.log(e)\n      localStorage.setItem('user', JSON.stringify(e.user))\n      localStorage.setItem('uid', e.user.uid)\n      localStorage.setItem('displayName', e.user.displayName)\n      localStorage.setItem('email', e.user.email)\n    }).catch((e) => {\n      {\n        console.log('in catch', e);\n      }\n    })\n  }\n\n  signUp(emailUsername, password) {\n    return new Promise((resolve, reject) => {\n      this.auth.auth.createUserWithEmailAndPassword(emailUsername, password).then((e) => {\n        resolve(e)\n      }).catch((e) => {\n        reject(e.message)\n      })\n    })\n  }\n\n  signOut() {\n    // return new Promise(resolve => {\n    // this.angularFirestore.\n    // this.afm().\n    this.auth.auth.signOut().then(e => {\n      console.log('SIGNOUT SUCCESS ', e);\n      localStorage.removeItem('user')\n      localStorage.removeItem('uid')\n      localStorage.removeItem('displayName')\n      localStorage.removeItem('email')\n      // this.store.dispatch(new RemoveUser(e))\n      // resolve(e)\n    }).catch(e => {\n      console.log('SIGNOUT CATCH ', e);\n    })\n    // })\n  }\n\n  getEmpty() {\n    this.db.collection('watched').get().then(snapshot => {\n      console.log(' getEmpty():', snapshot.docs);\n      const myBatch = this.db.batch()\n      snapshot.docs.forEach(element => {\n        const bookmarkRef = element.ref\n        const myData = element.data()\n        myData.percentage = 100\n        myBatch.set(bookmarkRef, myData)\n      })\n      myBatch.commit()\n    })\n  }\n\n  countAll(collectionName): Promise<number> {\n    return new Promise((resolve, reject) => {\n      this.db.collection(collectionName).where('tmdbId', FirebaseOperator.GreaterThanEqual, 0).get().then(snapshot => {\n        resolve(snapshot.size)\n      })\n    })\n  }\n\n  getUser(): Promise<any> {\n    return new Promise(resolve => {\n      this.auth.user.subscribe(e => {\n        console.log('the user', e);\n        console.log(e.toJSON())\n        resolve(e)\n      })\n    })\n  }\n\n  uploadToStorage(data) {\n    console.log(data)\n    const storageRef = firebase.storage().ref()\n    storageRef.put(data).then(e => {\n      console.log(e)\n    }).catch(err => {\n      console.log('error', err)\n    })\n  }\n}\n\nexport enum FirebaseOperator {\n  Equal = '==',\n  LessThan = '<',\n  LessThanEqual = '<=',\n  GreaterThan = '>',\n  GreaterThanEqual = '>=',\n  ArrayContains = 'array-contains',\n  In = 'in',\n  ArrayContainsAny = 'array-contains-any'\n  // <, <=, ==, >, >=, array - contains, in, or array - contains - any\n}\n\nexport const FirebaseListMax = 10\n\nexport enum CollectionName {\n  Bookmark = 'bookmark',\n  UserName = '',\n  Watched = 'watched',\n  User = 'user',\n  Config = 'config',\n  Video = 'video',\n  Library = 'library',\n  Favorite = 'favorite'\n}\n\nexport enum FieldName {\n  Bookmark = 'bookmark',\n  Username = 'username',\n  EmailAddress = 'emailAddress',\n  TmdbId = 'tmdbId'\n}\n\nexport interface IBookmark {\n  tmdbId: number,\n  imdbId: string,\n  userId: string,\n  createTs?: Date,\n  updateTs?: Date,\n  change: 'add' | 'delete' | 'update',\n}\nexport interface FirebaseData {\n  data(): void\n  id: string\n  [x: string]: any\n}\n\n/**\n * CHANGES FROM CURRENT MACHINE:\n * 1 bookmarksOrig.db\n * 2 bookmarksTemp.db\n * 3 bookmarksChanges.db\n * copy 1 and make 2\n * all changes apply to 2\n * during sync, create 3, scan diff between 1 and 2 then apply to 3\n * TODO: CHANGES FROM UPSTREAM\n */\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 367
                }
            ],
            "indexSignatures": [
                {
                    "id": "index-declaration-f1264c0be8b52549bc2714b6c839883a2863b33eef274f268d169f6e723f52e422665ecd243554a453777a48d3adf0a906d3d2ade094b9d75e9652deec484602",
                    "args": [
                        {
                            "name": "x",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "any",
                    "line": 367,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 175,
            "methods": [
                {
                    "name": "data",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 366,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ]
        },
        {
            "name": "Headers",
            "id": "interface-Headers-88e397b48570501d2155099bb31f9322acc23bd18595d1aca93c37f8404b5193d4990a928e2ef0f2759f3078524d816543be05c53659fcf0f24800e145c77598",
            "file": "src/app/services/ipc.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { environment } from '@environments/environment';\nimport * as IPCRendererChannel from '../../assets/IPCRendererChannel.json';\nimport * as IPCMainChannel from '../../assets/IPCMainChannel.json';\nimport { v4 as uuidv4 } from 'uuid'\nimport { Injectable } from '@angular/core'\nimport { BehaviorSubject, Observable, fromEvent } from 'rxjs'\nimport { ipcRenderer } from 'electron'\nimport { ILibraryInfo } from '@models/interfaces'\nimport { IRawLibrary } from './library.service';\nimport { IWatched } from './watched.service';\nimport { Review } from '@models/review.model';\nimport { IProfileData, ListLinkMovie } from '@models/profile-data.model';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class IpcService {\n\n  libraryMovies = new BehaviorSubject<string[]>([])\n  libraryMovie = new BehaviorSubject<string[]>([])\n  bookmarkChanges = new BehaviorSubject<IBookmarkChanges[]>([])\n  movieIdentified = new BehaviorSubject<any>({ id: 0 })\n  searchList = new BehaviorSubject<any>([])\n  torrentVideo = new BehaviorSubject<string[]>([])\n  preferences = new BehaviorSubject<any>([])\n  streamLink = new BehaviorSubject<any>('')\n  private statsForNerds = new BehaviorSubject<any>({})\n  statsForNerdsSubscribable = this.statsForNerds.asObservable()\n  private ipcRenderer: typeof ipcRenderer\n\n  constructor() {\n    if (environment.runConfig.electron) {\n\n      console.log((window as any).require('electron'))\n\n      this.ipcRenderer = (window as any).require('electron').ipcRenderer\n\n      this.ipcRenderer.on('torrent-video', (event, data: any) => {\n        console.log('event: ', event)\n        console.log('data: ', data)\n        this.torrentVideo.next(data)\n      })\n\n      this.ipcRenderer.on(IPCMainChannel.PREFERENCES_GET_COMPLETE, (event: Electron.IpcRendererEvent, data) => {\n        this.preferences.next(data)\n        console.log('IPCMainChannel.PREFERENCES_COMPLETE ', data)\n      })\n      this.ipcRenderer.on(IPCMainChannel.STREAM_LINK, (event: Electron.IpcRendererEvent, data) => {\n        this.streamLink.next(data)\n        console.log('IPCMainChannel.STREAM_LINK ', data)\n      })\n      this.ipcRenderer.on(IPCMainChannel.STATS, (event: Electron.IpcRendererEvent, data) => {\n        this.statsForNerds.next(data)\n        console.log('IPCMainChannel.STATS ', data)\n      })\n    }\n  }\n\n  async getFiles() {\n    // return new Promise<string[]>((resolve, reject) => {\n    //   this.ipcRenderer.once('library-folders', (event, arg) => {\n    //     resolve(arg);\n    //   });\n    //   this.ipcRenderer.send('retrieve-library-folders');\n    // });\n  }\n\n  /**\n   * Gets the drives in the system.\n   */\n  async getSystemDrives() {\n    // return new Promise<string[]>((resolve, reject) => {\n    //   this.ipcRenderer.once('system-drives', (event, arg) => {\n    //     resolve(arg);\n    //   });\n    // });\n    // this.ipcRenderer.send('get-drives')\n  }\n  /**\n   * Opens the folder\n   * @param data folder directory\n   */\n  openFolder(data: string) {\n    console.log('open', data)\n    // this.ipcRenderer.send('go-to-folder', ['open', data])\n  }\n\n  /**\n   * Ipc renderer that sends command to main renderer to get movies from library db.\n   * @param idList\n   */\n  getMoviesFromLibraryInList(idList: number[]): Promise<any> {\n    const theUuid = uuidv4()\n    this.sendToMain('library', { operation: IpcOperations.FIND_IN_LIST, uuid: theUuid },\n      { idList: idList });\n    return this.listenOnce(`library-${theUuid}`);\n  }\n\n  /**\n   * Paginated, first page.\n   * @param collectionName\n   * @param order\n   * @param size\n   */\n  getMultiplePaginatedFirst(collectionName: string, sort: string, size?: number): Promise<IUserDataPaginated> {\n    const theUuid = uuidv4()\n    this.sendToMain(collectionName, { operation: IpcOperations.GET_BY_PAGE, uuid: theUuid },\n      { sort: sort, size: size, lastVal: 0 });\n    return this.listenOnce(`${collectionName}-${theUuid}`);\n  }\n\n  /**\n   * Paginated, NOT first page.\n   * @param collectionName\n   * @param order\n   * @param limit\n   * @param lastVal\n   */\n  getMultiplePaginated(collectionName: string, sort: string, limit?: number, lastVal?: string | number): Promise<IUserDataPaginated> {\n    const theUuid = uuidv4()\n    this.sendToMain(collectionName, { operation: IpcOperations.GET_BY_PAGE, uuid: theUuid },\n      { sort: sort, limit: limit, lastVal: lastVal });\n    return this.listenOnce(`${collectionName}-${theUuid}`);\n  }\n\n  /**\n   * Ipc renderer that sends command to main renderer to get specified movie from library db.\n   * Replies offline library object(s).\n   * @param arg imdb id or movie title and release year or tmdb id\n   */\n  getMovieFromLibrary(arg): Promise<IRawLibrary> {\n    const theUuid = uuidv4()\n    this.sendToMain('library', { operation: IpcOperations.FIND, uuid: theUuid },\n      { tmdbId: arg });\n    return this.listenOnce(`library-${theUuid}`);\n  }\n\n  // // user services; watchlist/bookmarks, watched\n  getBookmark(data: number) {\n    const theUuid = uuidv4()\n    this.sendToMain('bookmark', { operation: IpcOperations.FIND_ONE, uuid: theUuid },\n      { tmdbId: data })\n    return this.listenOnce(`bookmark-${theUuid}`);\n  }\n\n  getBookmarkInList(idList: number[]): Promise<any> {\n    const theUuid = uuidv4()\n    this.sendToMain('bookmark', {\n      operation: IpcOperations.FIND_IN_LIST,\n      uuid: theUuid\n    }, { idList: idList });\n    return this.listenOnce(`bookmark-${theUuid}`);\n  }\n\n  saveBookmark(data) {\n    const theUuid = uuidv4()\n    this.sendToMain('bookmark', { operation: IpcOperations.SAVE, uuid: theUuid },\n      data);\n    return this.listenOnce(`bookmark-${theUuid}`);\n  }\n\n  removeBookmark(type: string, id: string | number) {\n    const theUuid = uuidv4()\n    this.sendToMain('bookmark', { operation: IpcOperations.REMOVE, uuid: theUuid }, { type: type, id: id });\n    return this.listenOnce(`bookmark-${theUuid}`);\n  }\n\n  // ----- WATCHED\n  getWatched(data: number) {\n    const theUuid = uuidv4()\n    this.sendToMain('watched', { operation: IpcOperations.FIND_ONE, uuid: theUuid },\n      { tmdbId: data })\n    return this.listenOnce(`watched-${theUuid}`);\n  }\n\n  /**\n   * Ipc renderer that sends command to main renderer to get movies from library db.\n   * @param idList\n   */\n  getWatchedInList(idList: number[]): Promise<any> {\n    const theUuid = uuidv4()\n    this.sendToMain('watched', {\n      operation: IpcOperations.FIND_IN_LIST,\n      uuid: theUuid\n    }, { idList: idList });\n    return this.listenOnce(`watched-${theUuid}`);\n  }\n\n  saveWatched(data) {\n    const theUuid = uuidv4()\n    this.sendToMain('watched', { operation: IpcOperations.SAVE, uuid: theUuid }, data);\n    return this.listenOnce(`watched-${theUuid}`);\n  }\n\n  updateWatchedStatus(val: IWatched) {\n    this.ipcRenderer.send('', val)\n  }\n\n  /**\n   * TODO: remove type\n   */\n  removeWatched(type: string, id: string | number) {\n    const theUuid = uuidv4()\n    this.sendToMain('watched', { operation: IpcOperations.REMOVE, uuid: theUuid }, { type: type, id: id });\n    return this.listenOnce(`watched-${theUuid}`);\n  }\n\n\n  // ----- END OF WATCHED\n  /**\n   *\n   * @param id tmdb id\n   */\n  getMovieUserData(id: number): Promise<IProfileData> {\n    const theUuid = uuidv4()\n    this.sendToMain('user-data', {\n      operation: IpcOperations.FIND,\n      uuid: theUuid\n    }, { tmdbId: id });\n    return this.listenOnce(`user-data-${theUuid}`);\n  }\n\n  getMovieUserDataInList(idList: number[]): Promise<IProfileData[]> {\n    const theUuid = uuidv4()\n    this.sendToMain('user-data', {\n      operation: IpcOperations.FIND_IN_LIST,\n      uuid: theUuid\n    }, { idList: idList });\n    return this.listenOnce(`user-data-${theUuid}`)\n  }\n\n  saveFavorite(data) {\n    const theUuid = uuidv4()\n    this.sendToMain('favorite', { operation: IpcOperations.SAVE, uuid: theUuid }, data);\n    return this.listenOnce(`favorite-${theUuid}`);\n  }\n\n  // ----- END OF USER DATA\n  startScanLibrary() {\n\n    this.sendToMain(IPCRendererChannel.SCAN_LIBRARY_START)\n    this.ipcRenderer.on(IPCMainChannel.ScanLibraryResult, e => {\n      console.log(IPCMainChannel.ScanLibraryResult, e)\n    })\n    this.ipcRenderer.once(IPCMainChannel.ScanLibraryComplete, e => {\n      console.log('completscan')\n      this.ipcRenderer.removeListener(IPCMainChannel.ScanLibraryResult, d => { })\n    })\n  }\n\n  stopScanLibrary() {\n    this.sendToMain(IPCRendererChannel.SCAN_LIBRARY_STOP)\n  }\n\n  getPlayTorrent(hash: string): Promise<any> {\n    this.sendToMain(IPCRendererChannel.PLAY_TORRENT, hash)\n    return this.listenOnce(`stream-link`);\n  }\n\n  stopStream() {\n    this.sendToMain(IPCRendererChannel.STOP_STREAM)\n  }\n\n  playOfflineVideo(docId): Promise<any> {\n    this.sendToMain(IPCRendererChannel.PLAY_OFFLINE_VIDEO_STREAM, docId);\n    return this.listenOnce(`stream-link`);\n  }\n\n  getPreferences() {\n\n    this.sendToMain(IPCRendererChannel.PREFERENCES_GET)\n    // this.ipcRenderer.addListener(IPCMainChannel.PREFERENCES_GET_COMPLETE, this.pref)\n\n    // (event, data: any) => {\n    // console.log('IPCMainChannel.PREFERENCES_COMPLETE ', data)\n    // this.pref()\n    // this.preferences.next(data)\n    // this.ipcRenderer.removeListener(IPCMainChannel.PREFERENCES_GET_COMPLETE, e => { })\n    // })\n  }\n\n  savePreferences(val) {\n    this.sendToMain(IPCRendererChannel.PREFERENCES_SET, val)\n    // this.ipcRenderer.on(IPCMainChannel.PREFERENCES_SET_COMPLETE, (event, data: any) => {\n    //   console.log('IPCMainChannel.PREFERENCES_SET_COMPLETE ', data)\n    //   this.preferences.next(data)\n    //   this.ipcRenderer.removeListener(IPCMainChannel.PREFERENCES_SET_COMPLETE, d => { })\n    // })\n  }\n\n  changeSubtitle(): Promise<any> {\n    this.sendToMain(\"get-subtitle\")\n    return this.listenOnce('subtitle-path')\n  }\n\n  minimizeWindow() {\n    this.sendToMain(this.IPCCommand.MinimizeApp)\n  }\n  minimizeRestoreWindow() {\n    this.sendToMain(this.IPCCommand.RestoreApp)\n  }\n  exitApp() {\n    this.sendToMain(this.IPCCommand.ExitApp)\n  }\n\n  private removeListener(channel: string) {\n    console.log('REMOVING LISTENER', channel)\n    this.ipcRenderer.removeListener(channel, d => { })\n  }\n\n  private sendToMain(channel: string, headers?: Headers | string, body?: Body) {\n    try {\n      this.ipcRenderer.send(channel, [headers, body])\n      console.log('sent to ipc... ', channel, [headers, body])\n    } catch {\n      console.log('failed to send Ipc: ', channel, [headers, body])\n    }\n  }\n\n  private listenOnce(channel: string) {\n    return new Promise<any>((resolve, reject) => {\n      try {\n        this.ipcRenderer.once(channel, (event, arg) => {\n          console.log('channel: ', channel, ' arg: ', arg)\n          resolve(arg);\n        });\n      } catch {\n        resolve(null);\n        console.log(`listen ${channel} failed`)\n      }\n    });\n  }\n\n  IPCCommand = IPCRendererChannel['default']\n  IPCChannel = IPCMainChannel['default']\n}\n\ninterface Headers {\n  operation: IpcOperations,\n  uuid: string\n}\n\ninterface Body {\n  tmdbId?: number\n  idList?: number[]\n  [x: string]: any\n}\n\nenum IpcOperations {\n  FIND = 'find',\n  FIND_ONE = 'find-one',\n  FIND_IN_LIST = 'find-in-list',\n  UPDATE = 'update',\n  SAVE = 'save',\n  REMOVE = 'remove',\n  GET_BY_PAGE = 'get-by-page',\n  COUNT = 'count'\n}\nexport interface IBookmarkChanges {\n  change: BookmarkChanges\n}\n\nexport enum BookmarkChanges {\n  UPDATE = 'update',\n  DELETE = 'delete',\n  INSERT = 'insert'\n}\n\nexport interface IBookmark {\n  tmdbId: number,\n  imdbId: string,\n  id: string\n}\n\n\n\ninterface ILibrary {\n  title?: string,\n  year?: number,\n  tmdbId?: number,\n  imdbId?: string,\n  libraryList: ILibraryData[]\n}\n\ninterface ILibraryData {\n  fullFilePath: string,\n  _id: string\n}\n\nexport interface IUserDataPaginated {\n  totalPages: number,\n  totalResults: number,\n  page?: number,\n  results: any[],\n}\n\ninterface SortObject {\n  [x: string]: 1 | -1\n}\n",
            "properties": [
                {
                    "name": "operation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IpcOperations",
                    "optional": false,
                    "description": "",
                    "line": 347
                },
                {
                    "name": "uuid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 348
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IBookmark",
            "id": "interface-IBookmark-4d3baab43a719a7e64890c2cb33421aeea7cd4449ea56201bb74b07da209afa55488be828fa32b14fca8c2c1f67bfffdb805ef9f3146d54beb7f0a86745079a0",
            "file": "src/app/services/bookmark.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IUserSavedData } from '@models/interfaces';\nimport { environment } from '@environments/environment';\nimport { Injectable } from '@angular/core';\nimport { FirebaseService, FirebaseOperator, CollectionName, FieldName } from './firebase.service'\nimport { IpcService } from './ipc.service'\nimport { Observable } from 'rxjs';\n@Injectable({\n  providedIn: 'root'\n})\nexport class BookmarkService {\n\n  bookmarkObservable = new Observable<any>()\n\n  constructor(\n    private firebaseService: FirebaseService,\n    private ipcService: IpcService) { }\n\n  getBookmark(id) {\n    if (environment.runConfig.firebaseMode) {\n      return this.firebaseService.getFromFirestore(CollectionName.Bookmark, FieldName.TmdbId, FirebaseOperator.Equal, id)\n    } else {\n      // this.ipcService.call(IPCCommand.)\n    }\n  }\n\n  saveBookmark(data: IBookmark): Promise<any> {\n    if (environment.runConfig.firebaseMode) {\n      return this.firebaseService.insertIntoFirestore(CollectionName.Bookmark, data)\n    } else {\n      return this.ipcService.saveBookmark(data)\n    }\n  }\n\n  /**\n   * Removes bookmark.\n   * @param id watched id/_id/tmdbId to remove.\n   */\n  removeBookmark(type: 'id' | 'tmdbId', id: string | number) {\n    if (environment.runConfig.firebaseMode) {\n      return this.firebaseService.deleteFromFirestore(CollectionName.Bookmark, id)\n    } else {\n      return this.ipcService.removeBookmark(type, id)\n    }\n  }\n\n  saveBookmarkMulti(data: object[]) {\n    this.firebaseService.insertIntoFirestoreMulti(CollectionName.Bookmark, data)\n  }\n\n  /**\n   * Gets multiple bookmarks by list of ids.\n   * @param idList list of ids to fetch.\n   */\n  getBookmarksInList(idList: number[]): Promise<firebase.firestore.QuerySnapshot | any> {\n    console.log('getBookmarksInList...', idList);\n    const myFunction = environment.runConfig.firebaseMode ?\n      this.firebaseService.getFromFirestoreMultiple(CollectionName.Bookmark, FieldName.TmdbId, idList) :\n      this.ipcService.getBookmarkInList(idList);\n    return myFunction\n  }\n\n  getBookmarksPaginatedFirstPage(): Promise<any> {\n    const myFunction = environment.runConfig.firebaseMode ?\n      this.firebaseService.getFromFirestoreMultiplePaginatedFirst(CollectionName.Bookmark, FieldName.TmdbId, 20) :\n      this.ipcService.getMultiplePaginatedFirst(CollectionName.Bookmark, FieldName.TmdbId, 20)\n    return myFunction\n  }\n\n  /**\n   * Gets multiple bookmarks.\n   */\n  getBookmarksPaginated(lastVal: string | number): Promise<any> {\n    if (environment.runConfig.firebaseMode) {\n      return this.firebaseService.getFromFirestoreMultiplePaginated(CollectionName.Bookmark, FieldName.TmdbId, 20, lastVal)\n    } else {\n    }\n  }\n\n}\n\nexport interface IBookmark extends IUserSavedData {\n  id?: string,\n  tmdbId: number,\n  imdbId?: string,\n  title: string,\n  year: number,\n  cr8Ts?: number,\n}\n",
            "properties": [
                {
                    "name": "cr8Ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 87
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 82
                },
                {
                    "name": "imdbId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 84
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 85
                },
                {
                    "name": "tmdbId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 83
                },
                {
                    "name": "year",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 86
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "IUserSavedData"
        },
        {
            "name": "IBookmark",
            "id": "interface-IBookmark-f1264c0be8b52549bc2714b6c839883a2863b33eef274f268d169f6e723f52e422665ecd243554a453777a48d3adf0a906d3d2ade094b9d75e9652deec484602-1",
            "file": "src/app/services/firebase.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { AngularFireAuth } from '@angular/fire/auth'\nimport { AngularFireModule } from '@angular/fire/'\nimport { AngularFirestore, } from '@angular/fire/firestore'\nimport { QueryDocumentSnapshot } from '@angular/fire/firestore/interfaces';\nimport * as firebase from 'firebase';\nimport { IpcService, BookmarkChanges } from './ipc.service';\nimport { RemoveUser } from '../app.actions';\nimport { combineLatest } from 'rxjs';\n@Injectable({\n  providedIn: 'root'\n})\nexport class FirebaseService {\n\n  BOOKMARK = 'BOOKMARK'\n  bookmarkDeleteList = []\n  bookmarkInsertList = []\n  bookmarkUpdateList = []\n  bookmarkList = []\n  procSync = false\n  db = this.angularFirestore.firestore\n  batch\n\n  constructor(\n    private angularFirestore: AngularFirestore,\n    private ipcService: IpcService,\n    private auth: AngularFireAuth,\n    private afm: AngularFireModule,\n  ) { this.db = this.angularFirestore.firestore }\n\n  onSync() {\n\n  }\n\n  /**\n   * Syncs bookmarks to and from cloud then executing batch commit.\n   */\n  synchronizeBookmarks() {\n    // this.ipcService.call(this.ipcService.IPCCommand.GetBookmarkChanges)\n    this.batch = this.db.batch()\n    this.ipcService.bookmarkChanges.subscribe(e => {\n      this.bookmarkInsertList = e.filter((v) => v.change === BookmarkChanges.INSERT)\n      this.bookmarkDeleteList = e.filter((v) => v.change === BookmarkChanges.DELETE)\n      this.bookmarkUpdateList = e.filter((v) => v.change === BookmarkChanges.UPDATE)\n      this.batch = this.db.batch()\n      this.insertItemsToFirestore()\n      this.deleteItemsFromFirestore()\n      this.batch.commit()\n    })\n  }\n\n  getMovieUserData(id: number) {\n    const bookmarkQuery = this.getFromFirestore(CollectionName.Bookmark, FieldName.TmdbId, FirebaseOperator.Equal, id)\n    const watchedQuery = this.getFromFirestore(CollectionName.Watched, FieldName.TmdbId, FirebaseOperator.Equal, id)\n    return new Promise<any>((resolve, reject) => {\n      combineLatest([bookmarkQuery, watchedQuery]).toPromise().then(([val, val2]) => { resolve([val, val2]) })\n    })\n  }\n\n  /**\n   * Gets item from firestore.\n   * @param collection name of collection\n   * @param columnName name of column\n   * @param operator firebase operator\n   * @param value value to compare\n   */\n  getFromFirestore(collectionName: CollectionName, fieldName: FieldName, operator: FirebaseOperator, value: any) {\n    return new Promise(resolve => {\n      this.db.collection(collectionName).where(fieldName, operator, value).get().then((snapshot) => {\n        console.log('SNAPSHOT: ', snapshot);\n        if (!snapshot.empty) {\n          const objectToReturn = snapshot.docs[0].data()\n          objectToReturn['id'] = snapshot.docs[0].id\n          resolve(objectToReturn)\n        } else {\n          resolve(null)\n        }\n      }).catch(err => {\n        console.log('Error getting document', err);\n      });\n    })\n  }\n\n  getUserDataMultiple(idList: any[]): Promise<any> {\n    const bookmarkQuery = this.getFromFirestoreMultiple(CollectionName.Bookmark, FieldName.TmdbId, idList)\n    const watchedQuery = this.getFromFirestoreMultiple(CollectionName.Watched, FieldName.TmdbId, idList)\n    return new Promise<any>((resolve, reject) => {\n      combineLatest([bookmarkQuery, watchedQuery]).toPromise().then((val) => { resolve({ isFirebaseData: true, data: val }) })\n    })\n  }\n\n  getFromFirestoreMultiple(collectionName: CollectionName, fieldName: FieldName, list: any[]): Promise<Array<QueryDocumentSnapshot<any>>> {\n    return new Promise((resolve, reject) => {\n      this.db.collection(collectionName).where(fieldName, FirebaseOperator.In, list).get().then((snapshot: firebase.firestore.QuerySnapshot) => {\n        resolve(snapshot.docs)\n      }).catch(err => {\n        reject(err)\n      })\n    })\n  }\n\n  /**\n   * IN PROGRESS.\n   * @param collectionName name of the collection\n   * @param order order\n   * @param limit the limit\n   * @param lastVal last value of previous page\n   */\n  getFromFirestoreMultiplePaginated(collectionName: CollectionName, order: string, limit?: number, lastVal?: string | number) {\n    const defaultLimit = 20\n\n    return new Promise(resolve => {\n      lastVal = lastVal ? lastVal : 0\n      // this.db.collection(collectionName).startAfter(lastDocId).orderBy(order, 'asc').limit(defaultLimit).get().then(snapshot => {\n      this.db.collection(collectionName).orderBy(order).startAfter(lastVal).limit(defaultLimit).get().then(snapshot => {\n        resolve(snapshot.docs)\n      })\n    })\n  }\n\n  /**\n   * IN PROGRESS.\n   * @param collectionName name of the collection\n   * @param order order\n   * @param limit the limit\n   */\n  getFromFirestoreMultiplePaginatedFirst(collectionName: CollectionName, order: string, limit?: number) {\n    const defaultLimit = 20\n    return new Promise(resolve => {\n      this.db.collection(collectionName).orderBy(order, 'asc').limit(defaultLimit).get().then(snapshot => {\n        resolve(snapshot.docs)\n      })\n    })\n\n  }\n\n  /**\n   * Inserts data into firestore.\n   * @param collection name of the collection\n   * @param data data to insert/add\n   */\n  insertIntoFirestore(collection: CollectionName, data: object) {\n    return new Promise(resolve => {\n      this.db.collection(collection).add(data).then(e => {\n        if (e.id) {\n          resolve(e.id)\n        } else {\n          resolve(null)\n        }\n      })\n    })\n  }\n\n  /**\n   * Deletes a value from firestore\n   * @param collectionName name of collection/column\n   * @param docId doc id to remote\n   */\n  deleteFromFirestore(collectionName: CollectionName, docId: any) {\n    return new Promise(resolve => {\n      this.db.collection(collectionName).doc(docId).delete().then((e) => {\n        console.error('DELETE DOC: ', e);\n        resolve(null)\n      }).catch((error) => {\n        console.error('Error removing document: ', error);\n      });\n    })\n  }\n\n  /**\n   * !NOT WORKING RIGHT NOW\n   * Deletes a value from firestore\n   * @param collectionName name of collection/column\n   * @param tmdbId tmdb id to remote\n   */\n  deleteFromFirestoreByTmdbId(collectionName: CollectionName, tmdbId: number) {\n    return new Promise(resolve => {\n      // this.db.collection(collectionName).doc(docId).delete().then((e) => {\n      //   console.error('DELETE DOC: ', e);\n      resolve(null)\n      // }).catch((error) => {\n      //   console.error('Error removing document: ', error);\n      // });\n    })\n  }\n\n  /**\n   * Inserts data into firestore.\n   * @param collectionName name of the collection\n   * @param data data to insert/add\n   */\n  insertIntoFirestoreMulti(collectionName: CollectionName, data: object[]) {\n    const myBatch = this.db.batch()\n    data.forEach(element => {\n      const bookmarkRef = this.db.collection(collectionName).doc();\n      // myBatch.set(bookmarkRef, element)\n    })\n    // myBatch.commit()\n  }\n\n  insertItemsToFirestore() {\n    this.bookmarkInsertList.forEach(val => {\n      this.db.collection('data').doc().set(val).then().catch()\n    })\n  }\n\n  deleteItemsFromFirestore() {\n    const val = this.bookmarkDeleteList\n    val.forEach(element => {\n      const removeBookmarkRef = this.db.collection('bookmark').where(FieldName.TmdbId, FirebaseOperator.Equal, element.tmdbId).get().then(snapshot => {\n        snapshot.forEach(e => {\n          const ref = this.db.collection('bookmark').doc(e.id)\n          this.batch.delete(ref);\n        })\n      });\n      this.batch.commit()\n    })\n  }\n\n  signIn(emailUsername: string, password: string) {\n    const auth = this.auth.auth.signInWithEmailAndPassword(emailUsername, password).then((e) => {\n\n      console.log(e.additionalUserInfo);\n      console.log(e.credential);\n      console.log(e.operationType);\n      console.log(e.user);\n\n    }).catch((e) => {\n      {\n        if (e.code === 'auth/user-not-found') {\n          // need to login\n        } else if (e.code === 'auth/wrong-password') {\n\n        }\n        console.log('in catch', e);\n      }\n    })\n  }\n\n  signInWithGoogle(provider) {\n    this.auth.auth.signInWithPopup(provider).then((e) => {\n      console.log(e)\n      localStorage.setItem('user', JSON.stringify(e.user))\n      localStorage.setItem('uid', e.user.uid)\n      localStorage.setItem('displayName', e.user.displayName)\n      localStorage.setItem('email', e.user.email)\n    }).catch((e) => {\n      {\n        console.log('in catch', e);\n      }\n    })\n  }\n\n  signUp(emailUsername, password) {\n    return new Promise((resolve, reject) => {\n      this.auth.auth.createUserWithEmailAndPassword(emailUsername, password).then((e) => {\n        resolve(e)\n      }).catch((e) => {\n        reject(e.message)\n      })\n    })\n  }\n\n  signOut() {\n    // return new Promise(resolve => {\n    // this.angularFirestore.\n    // this.afm().\n    this.auth.auth.signOut().then(e => {\n      console.log('SIGNOUT SUCCESS ', e);\n      localStorage.removeItem('user')\n      localStorage.removeItem('uid')\n      localStorage.removeItem('displayName')\n      localStorage.removeItem('email')\n      // this.store.dispatch(new RemoveUser(e))\n      // resolve(e)\n    }).catch(e => {\n      console.log('SIGNOUT CATCH ', e);\n    })\n    // })\n  }\n\n  getEmpty() {\n    this.db.collection('watched').get().then(snapshot => {\n      console.log(' getEmpty():', snapshot.docs);\n      const myBatch = this.db.batch()\n      snapshot.docs.forEach(element => {\n        const bookmarkRef = element.ref\n        const myData = element.data()\n        myData.percentage = 100\n        myBatch.set(bookmarkRef, myData)\n      })\n      myBatch.commit()\n    })\n  }\n\n  countAll(collectionName): Promise<number> {\n    return new Promise((resolve, reject) => {\n      this.db.collection(collectionName).where('tmdbId', FirebaseOperator.GreaterThanEqual, 0).get().then(snapshot => {\n        resolve(snapshot.size)\n      })\n    })\n  }\n\n  getUser(): Promise<any> {\n    return new Promise(resolve => {\n      this.auth.user.subscribe(e => {\n        console.log('the user', e);\n        console.log(e.toJSON())\n        resolve(e)\n      })\n    })\n  }\n\n  uploadToStorage(data) {\n    console.log(data)\n    const storageRef = firebase.storage().ref()\n    storageRef.put(data).then(e => {\n      console.log(e)\n    }).catch(err => {\n      console.log('error', err)\n    })\n  }\n}\n\nexport enum FirebaseOperator {\n  Equal = '==',\n  LessThan = '<',\n  LessThanEqual = '<=',\n  GreaterThan = '>',\n  GreaterThanEqual = '>=',\n  ArrayContains = 'array-contains',\n  In = 'in',\n  ArrayContainsAny = 'array-contains-any'\n  // <, <=, ==, >, >=, array - contains, in, or array - contains - any\n}\n\nexport const FirebaseListMax = 10\n\nexport enum CollectionName {\n  Bookmark = 'bookmark',\n  UserName = '',\n  Watched = 'watched',\n  User = 'user',\n  Config = 'config',\n  Video = 'video',\n  Library = 'library',\n  Favorite = 'favorite'\n}\n\nexport enum FieldName {\n  Bookmark = 'bookmark',\n  Username = 'username',\n  EmailAddress = 'emailAddress',\n  TmdbId = 'tmdbId'\n}\n\nexport interface IBookmark {\n  tmdbId: number,\n  imdbId: string,\n  userId: string,\n  createTs?: Date,\n  updateTs?: Date,\n  change: 'add' | 'delete' | 'update',\n}\nexport interface FirebaseData {\n  data(): void\n  id: string\n  [x: string]: any\n}\n\n/**\n * CHANGES FROM CURRENT MACHINE:\n * 1 bookmarksOrig.db\n * 2 bookmarksTemp.db\n * 3 bookmarksChanges.db\n * copy 1 and make 2\n * all changes apply to 2\n * during sync, create 3, scan diff between 1 and 2 then apply to 3\n * TODO: CHANGES FROM UPSTREAM\n */\n",
            "properties": [
                {
                    "name": "change",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"add\" | \"delete\" | \"update\"",
                    "optional": false,
                    "description": "",
                    "line": 363
                },
                {
                    "name": "createTs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 361
                },
                {
                    "name": "imdbId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 359
                },
                {
                    "name": "tmdbId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 358
                },
                {
                    "name": "updateTs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 362
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 360
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "IBookmark-1"
        },
        {
            "name": "IBookmark",
            "id": "interface-IBookmark-88e397b48570501d2155099bb31f9322acc23bd18595d1aca93c37f8404b5193d4990a928e2ef0f2759f3078524d816543be05c53659fcf0f24800e145c77598-2",
            "file": "src/app/services/ipc.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { environment } from '@environments/environment';\nimport * as IPCRendererChannel from '../../assets/IPCRendererChannel.json';\nimport * as IPCMainChannel from '../../assets/IPCMainChannel.json';\nimport { v4 as uuidv4 } from 'uuid'\nimport { Injectable } from '@angular/core'\nimport { BehaviorSubject, Observable, fromEvent } from 'rxjs'\nimport { ipcRenderer } from 'electron'\nimport { ILibraryInfo } from '@models/interfaces'\nimport { IRawLibrary } from './library.service';\nimport { IWatched } from './watched.service';\nimport { Review } from '@models/review.model';\nimport { IProfileData, ListLinkMovie } from '@models/profile-data.model';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class IpcService {\n\n  libraryMovies = new BehaviorSubject<string[]>([])\n  libraryMovie = new BehaviorSubject<string[]>([])\n  bookmarkChanges = new BehaviorSubject<IBookmarkChanges[]>([])\n  movieIdentified = new BehaviorSubject<any>({ id: 0 })\n  searchList = new BehaviorSubject<any>([])\n  torrentVideo = new BehaviorSubject<string[]>([])\n  preferences = new BehaviorSubject<any>([])\n  streamLink = new BehaviorSubject<any>('')\n  private statsForNerds = new BehaviorSubject<any>({})\n  statsForNerdsSubscribable = this.statsForNerds.asObservable()\n  private ipcRenderer: typeof ipcRenderer\n\n  constructor() {\n    if (environment.runConfig.electron) {\n\n      console.log((window as any).require('electron'))\n\n      this.ipcRenderer = (window as any).require('electron').ipcRenderer\n\n      this.ipcRenderer.on('torrent-video', (event, data: any) => {\n        console.log('event: ', event)\n        console.log('data: ', data)\n        this.torrentVideo.next(data)\n      })\n\n      this.ipcRenderer.on(IPCMainChannel.PREFERENCES_GET_COMPLETE, (event: Electron.IpcRendererEvent, data) => {\n        this.preferences.next(data)\n        console.log('IPCMainChannel.PREFERENCES_COMPLETE ', data)\n      })\n      this.ipcRenderer.on(IPCMainChannel.STREAM_LINK, (event: Electron.IpcRendererEvent, data) => {\n        this.streamLink.next(data)\n        console.log('IPCMainChannel.STREAM_LINK ', data)\n      })\n      this.ipcRenderer.on(IPCMainChannel.STATS, (event: Electron.IpcRendererEvent, data) => {\n        this.statsForNerds.next(data)\n        console.log('IPCMainChannel.STATS ', data)\n      })\n    }\n  }\n\n  async getFiles() {\n    // return new Promise<string[]>((resolve, reject) => {\n    //   this.ipcRenderer.once('library-folders', (event, arg) => {\n    //     resolve(arg);\n    //   });\n    //   this.ipcRenderer.send('retrieve-library-folders');\n    // });\n  }\n\n  /**\n   * Gets the drives in the system.\n   */\n  async getSystemDrives() {\n    // return new Promise<string[]>((resolve, reject) => {\n    //   this.ipcRenderer.once('system-drives', (event, arg) => {\n    //     resolve(arg);\n    //   });\n    // });\n    // this.ipcRenderer.send('get-drives')\n  }\n  /**\n   * Opens the folder\n   * @param data folder directory\n   */\n  openFolder(data: string) {\n    console.log('open', data)\n    // this.ipcRenderer.send('go-to-folder', ['open', data])\n  }\n\n  /**\n   * Ipc renderer that sends command to main renderer to get movies from library db.\n   * @param idList\n   */\n  getMoviesFromLibraryInList(idList: number[]): Promise<any> {\n    const theUuid = uuidv4()\n    this.sendToMain('library', { operation: IpcOperations.FIND_IN_LIST, uuid: theUuid },\n      { idList: idList });\n    return this.listenOnce(`library-${theUuid}`);\n  }\n\n  /**\n   * Paginated, first page.\n   * @param collectionName\n   * @param order\n   * @param size\n   */\n  getMultiplePaginatedFirst(collectionName: string, sort: string, size?: number): Promise<IUserDataPaginated> {\n    const theUuid = uuidv4()\n    this.sendToMain(collectionName, { operation: IpcOperations.GET_BY_PAGE, uuid: theUuid },\n      { sort: sort, size: size, lastVal: 0 });\n    return this.listenOnce(`${collectionName}-${theUuid}`);\n  }\n\n  /**\n   * Paginated, NOT first page.\n   * @param collectionName\n   * @param order\n   * @param limit\n   * @param lastVal\n   */\n  getMultiplePaginated(collectionName: string, sort: string, limit?: number, lastVal?: string | number): Promise<IUserDataPaginated> {\n    const theUuid = uuidv4()\n    this.sendToMain(collectionName, { operation: IpcOperations.GET_BY_PAGE, uuid: theUuid },\n      { sort: sort, limit: limit, lastVal: lastVal });\n    return this.listenOnce(`${collectionName}-${theUuid}`);\n  }\n\n  /**\n   * Ipc renderer that sends command to main renderer to get specified movie from library db.\n   * Replies offline library object(s).\n   * @param arg imdb id or movie title and release year or tmdb id\n   */\n  getMovieFromLibrary(arg): Promise<IRawLibrary> {\n    const theUuid = uuidv4()\n    this.sendToMain('library', { operation: IpcOperations.FIND, uuid: theUuid },\n      { tmdbId: arg });\n    return this.listenOnce(`library-${theUuid}`);\n  }\n\n  // // user services; watchlist/bookmarks, watched\n  getBookmark(data: number) {\n    const theUuid = uuidv4()\n    this.sendToMain('bookmark', { operation: IpcOperations.FIND_ONE, uuid: theUuid },\n      { tmdbId: data })\n    return this.listenOnce(`bookmark-${theUuid}`);\n  }\n\n  getBookmarkInList(idList: number[]): Promise<any> {\n    const theUuid = uuidv4()\n    this.sendToMain('bookmark', {\n      operation: IpcOperations.FIND_IN_LIST,\n      uuid: theUuid\n    }, { idList: idList });\n    return this.listenOnce(`bookmark-${theUuid}`);\n  }\n\n  saveBookmark(data) {\n    const theUuid = uuidv4()\n    this.sendToMain('bookmark', { operation: IpcOperations.SAVE, uuid: theUuid },\n      data);\n    return this.listenOnce(`bookmark-${theUuid}`);\n  }\n\n  removeBookmark(type: string, id: string | number) {\n    const theUuid = uuidv4()\n    this.sendToMain('bookmark', { operation: IpcOperations.REMOVE, uuid: theUuid }, { type: type, id: id });\n    return this.listenOnce(`bookmark-${theUuid}`);\n  }\n\n  // ----- WATCHED\n  getWatched(data: number) {\n    const theUuid = uuidv4()\n    this.sendToMain('watched', { operation: IpcOperations.FIND_ONE, uuid: theUuid },\n      { tmdbId: data })\n    return this.listenOnce(`watched-${theUuid}`);\n  }\n\n  /**\n   * Ipc renderer that sends command to main renderer to get movies from library db.\n   * @param idList\n   */\n  getWatchedInList(idList: number[]): Promise<any> {\n    const theUuid = uuidv4()\n    this.sendToMain('watched', {\n      operation: IpcOperations.FIND_IN_LIST,\n      uuid: theUuid\n    }, { idList: idList });\n    return this.listenOnce(`watched-${theUuid}`);\n  }\n\n  saveWatched(data) {\n    const theUuid = uuidv4()\n    this.sendToMain('watched', { operation: IpcOperations.SAVE, uuid: theUuid }, data);\n    return this.listenOnce(`watched-${theUuid}`);\n  }\n\n  updateWatchedStatus(val: IWatched) {\n    this.ipcRenderer.send('', val)\n  }\n\n  /**\n   * TODO: remove type\n   */\n  removeWatched(type: string, id: string | number) {\n    const theUuid = uuidv4()\n    this.sendToMain('watched', { operation: IpcOperations.REMOVE, uuid: theUuid }, { type: type, id: id });\n    return this.listenOnce(`watched-${theUuid}`);\n  }\n\n\n  // ----- END OF WATCHED\n  /**\n   *\n   * @param id tmdb id\n   */\n  getMovieUserData(id: number): Promise<IProfileData> {\n    const theUuid = uuidv4()\n    this.sendToMain('user-data', {\n      operation: IpcOperations.FIND,\n      uuid: theUuid\n    }, { tmdbId: id });\n    return this.listenOnce(`user-data-${theUuid}`);\n  }\n\n  getMovieUserDataInList(idList: number[]): Promise<IProfileData[]> {\n    const theUuid = uuidv4()\n    this.sendToMain('user-data', {\n      operation: IpcOperations.FIND_IN_LIST,\n      uuid: theUuid\n    }, { idList: idList });\n    return this.listenOnce(`user-data-${theUuid}`)\n  }\n\n  saveFavorite(data) {\n    const theUuid = uuidv4()\n    this.sendToMain('favorite', { operation: IpcOperations.SAVE, uuid: theUuid }, data);\n    return this.listenOnce(`favorite-${theUuid}`);\n  }\n\n  // ----- END OF USER DATA\n  startScanLibrary() {\n\n    this.sendToMain(IPCRendererChannel.SCAN_LIBRARY_START)\n    this.ipcRenderer.on(IPCMainChannel.ScanLibraryResult, e => {\n      console.log(IPCMainChannel.ScanLibraryResult, e)\n    })\n    this.ipcRenderer.once(IPCMainChannel.ScanLibraryComplete, e => {\n      console.log('completscan')\n      this.ipcRenderer.removeListener(IPCMainChannel.ScanLibraryResult, d => { })\n    })\n  }\n\n  stopScanLibrary() {\n    this.sendToMain(IPCRendererChannel.SCAN_LIBRARY_STOP)\n  }\n\n  getPlayTorrent(hash: string): Promise<any> {\n    this.sendToMain(IPCRendererChannel.PLAY_TORRENT, hash)\n    return this.listenOnce(`stream-link`);\n  }\n\n  stopStream() {\n    this.sendToMain(IPCRendererChannel.STOP_STREAM)\n  }\n\n  playOfflineVideo(docId): Promise<any> {\n    this.sendToMain(IPCRendererChannel.PLAY_OFFLINE_VIDEO_STREAM, docId);\n    return this.listenOnce(`stream-link`);\n  }\n\n  getPreferences() {\n\n    this.sendToMain(IPCRendererChannel.PREFERENCES_GET)\n    // this.ipcRenderer.addListener(IPCMainChannel.PREFERENCES_GET_COMPLETE, this.pref)\n\n    // (event, data: any) => {\n    // console.log('IPCMainChannel.PREFERENCES_COMPLETE ', data)\n    // this.pref()\n    // this.preferences.next(data)\n    // this.ipcRenderer.removeListener(IPCMainChannel.PREFERENCES_GET_COMPLETE, e => { })\n    // })\n  }\n\n  savePreferences(val) {\n    this.sendToMain(IPCRendererChannel.PREFERENCES_SET, val)\n    // this.ipcRenderer.on(IPCMainChannel.PREFERENCES_SET_COMPLETE, (event, data: any) => {\n    //   console.log('IPCMainChannel.PREFERENCES_SET_COMPLETE ', data)\n    //   this.preferences.next(data)\n    //   this.ipcRenderer.removeListener(IPCMainChannel.PREFERENCES_SET_COMPLETE, d => { })\n    // })\n  }\n\n  changeSubtitle(): Promise<any> {\n    this.sendToMain(\"get-subtitle\")\n    return this.listenOnce('subtitle-path')\n  }\n\n  minimizeWindow() {\n    this.sendToMain(this.IPCCommand.MinimizeApp)\n  }\n  minimizeRestoreWindow() {\n    this.sendToMain(this.IPCCommand.RestoreApp)\n  }\n  exitApp() {\n    this.sendToMain(this.IPCCommand.ExitApp)\n  }\n\n  private removeListener(channel: string) {\n    console.log('REMOVING LISTENER', channel)\n    this.ipcRenderer.removeListener(channel, d => { })\n  }\n\n  private sendToMain(channel: string, headers?: Headers | string, body?: Body) {\n    try {\n      this.ipcRenderer.send(channel, [headers, body])\n      console.log('sent to ipc... ', channel, [headers, body])\n    } catch {\n      console.log('failed to send Ipc: ', channel, [headers, body])\n    }\n  }\n\n  private listenOnce(channel: string) {\n    return new Promise<any>((resolve, reject) => {\n      try {\n        this.ipcRenderer.once(channel, (event, arg) => {\n          console.log('channel: ', channel, ' arg: ', arg)\n          resolve(arg);\n        });\n      } catch {\n        resolve(null);\n        console.log(`listen ${channel} failed`)\n      }\n    });\n  }\n\n  IPCCommand = IPCRendererChannel['default']\n  IPCChannel = IPCMainChannel['default']\n}\n\ninterface Headers {\n  operation: IpcOperations,\n  uuid: string\n}\n\ninterface Body {\n  tmdbId?: number\n  idList?: number[]\n  [x: string]: any\n}\n\nenum IpcOperations {\n  FIND = 'find',\n  FIND_ONE = 'find-one',\n  FIND_IN_LIST = 'find-in-list',\n  UPDATE = 'update',\n  SAVE = 'save',\n  REMOVE = 'remove',\n  GET_BY_PAGE = 'get-by-page',\n  COUNT = 'count'\n}\nexport interface IBookmarkChanges {\n  change: BookmarkChanges\n}\n\nexport enum BookmarkChanges {\n  UPDATE = 'update',\n  DELETE = 'delete',\n  INSERT = 'insert'\n}\n\nexport interface IBookmark {\n  tmdbId: number,\n  imdbId: string,\n  id: string\n}\n\n\n\ninterface ILibrary {\n  title?: string,\n  year?: number,\n  tmdbId?: number,\n  imdbId?: string,\n  libraryList: ILibraryData[]\n}\n\ninterface ILibraryData {\n  fullFilePath: string,\n  _id: string\n}\n\nexport interface IUserDataPaginated {\n  totalPages: number,\n  totalResults: number,\n  page?: number,\n  results: any[],\n}\n\ninterface SortObject {\n  [x: string]: 1 | -1\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 380
                },
                {
                    "name": "imdbId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 379
                },
                {
                    "name": "tmdbId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 378
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "IBookmark-2"
        },
        {
            "name": "IBookmarkChanges",
            "id": "interface-IBookmarkChanges-88e397b48570501d2155099bb31f9322acc23bd18595d1aca93c37f8404b5193d4990a928e2ef0f2759f3078524d816543be05c53659fcf0f24800e145c77598",
            "file": "src/app/services/ipc.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { environment } from '@environments/environment';\nimport * as IPCRendererChannel from '../../assets/IPCRendererChannel.json';\nimport * as IPCMainChannel from '../../assets/IPCMainChannel.json';\nimport { v4 as uuidv4 } from 'uuid'\nimport { Injectable } from '@angular/core'\nimport { BehaviorSubject, Observable, fromEvent } from 'rxjs'\nimport { ipcRenderer } from 'electron'\nimport { ILibraryInfo } from '@models/interfaces'\nimport { IRawLibrary } from './library.service';\nimport { IWatched } from './watched.service';\nimport { Review } from '@models/review.model';\nimport { IProfileData, ListLinkMovie } from '@models/profile-data.model';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class IpcService {\n\n  libraryMovies = new BehaviorSubject<string[]>([])\n  libraryMovie = new BehaviorSubject<string[]>([])\n  bookmarkChanges = new BehaviorSubject<IBookmarkChanges[]>([])\n  movieIdentified = new BehaviorSubject<any>({ id: 0 })\n  searchList = new BehaviorSubject<any>([])\n  torrentVideo = new BehaviorSubject<string[]>([])\n  preferences = new BehaviorSubject<any>([])\n  streamLink = new BehaviorSubject<any>('')\n  private statsForNerds = new BehaviorSubject<any>({})\n  statsForNerdsSubscribable = this.statsForNerds.asObservable()\n  private ipcRenderer: typeof ipcRenderer\n\n  constructor() {\n    if (environment.runConfig.electron) {\n\n      console.log((window as any).require('electron'))\n\n      this.ipcRenderer = (window as any).require('electron').ipcRenderer\n\n      this.ipcRenderer.on('torrent-video', (event, data: any) => {\n        console.log('event: ', event)\n        console.log('data: ', data)\n        this.torrentVideo.next(data)\n      })\n\n      this.ipcRenderer.on(IPCMainChannel.PREFERENCES_GET_COMPLETE, (event: Electron.IpcRendererEvent, data) => {\n        this.preferences.next(data)\n        console.log('IPCMainChannel.PREFERENCES_COMPLETE ', data)\n      })\n      this.ipcRenderer.on(IPCMainChannel.STREAM_LINK, (event: Electron.IpcRendererEvent, data) => {\n        this.streamLink.next(data)\n        console.log('IPCMainChannel.STREAM_LINK ', data)\n      })\n      this.ipcRenderer.on(IPCMainChannel.STATS, (event: Electron.IpcRendererEvent, data) => {\n        this.statsForNerds.next(data)\n        console.log('IPCMainChannel.STATS ', data)\n      })\n    }\n  }\n\n  async getFiles() {\n    // return new Promise<string[]>((resolve, reject) => {\n    //   this.ipcRenderer.once('library-folders', (event, arg) => {\n    //     resolve(arg);\n    //   });\n    //   this.ipcRenderer.send('retrieve-library-folders');\n    // });\n  }\n\n  /**\n   * Gets the drives in the system.\n   */\n  async getSystemDrives() {\n    // return new Promise<string[]>((resolve, reject) => {\n    //   this.ipcRenderer.once('system-drives', (event, arg) => {\n    //     resolve(arg);\n    //   });\n    // });\n    // this.ipcRenderer.send('get-drives')\n  }\n  /**\n   * Opens the folder\n   * @param data folder directory\n   */\n  openFolder(data: string) {\n    console.log('open', data)\n    // this.ipcRenderer.send('go-to-folder', ['open', data])\n  }\n\n  /**\n   * Ipc renderer that sends command to main renderer to get movies from library db.\n   * @param idList\n   */\n  getMoviesFromLibraryInList(idList: number[]): Promise<any> {\n    const theUuid = uuidv4()\n    this.sendToMain('library', { operation: IpcOperations.FIND_IN_LIST, uuid: theUuid },\n      { idList: idList });\n    return this.listenOnce(`library-${theUuid}`);\n  }\n\n  /**\n   * Paginated, first page.\n   * @param collectionName\n   * @param order\n   * @param size\n   */\n  getMultiplePaginatedFirst(collectionName: string, sort: string, size?: number): Promise<IUserDataPaginated> {\n    const theUuid = uuidv4()\n    this.sendToMain(collectionName, { operation: IpcOperations.GET_BY_PAGE, uuid: theUuid },\n      { sort: sort, size: size, lastVal: 0 });\n    return this.listenOnce(`${collectionName}-${theUuid}`);\n  }\n\n  /**\n   * Paginated, NOT first page.\n   * @param collectionName\n   * @param order\n   * @param limit\n   * @param lastVal\n   */\n  getMultiplePaginated(collectionName: string, sort: string, limit?: number, lastVal?: string | number): Promise<IUserDataPaginated> {\n    const theUuid = uuidv4()\n    this.sendToMain(collectionName, { operation: IpcOperations.GET_BY_PAGE, uuid: theUuid },\n      { sort: sort, limit: limit, lastVal: lastVal });\n    return this.listenOnce(`${collectionName}-${theUuid}`);\n  }\n\n  /**\n   * Ipc renderer that sends command to main renderer to get specified movie from library db.\n   * Replies offline library object(s).\n   * @param arg imdb id or movie title and release year or tmdb id\n   */\n  getMovieFromLibrary(arg): Promise<IRawLibrary> {\n    const theUuid = uuidv4()\n    this.sendToMain('library', { operation: IpcOperations.FIND, uuid: theUuid },\n      { tmdbId: arg });\n    return this.listenOnce(`library-${theUuid}`);\n  }\n\n  // // user services; watchlist/bookmarks, watched\n  getBookmark(data: number) {\n    const theUuid = uuidv4()\n    this.sendToMain('bookmark', { operation: IpcOperations.FIND_ONE, uuid: theUuid },\n      { tmdbId: data })\n    return this.listenOnce(`bookmark-${theUuid}`);\n  }\n\n  getBookmarkInList(idList: number[]): Promise<any> {\n    const theUuid = uuidv4()\n    this.sendToMain('bookmark', {\n      operation: IpcOperations.FIND_IN_LIST,\n      uuid: theUuid\n    }, { idList: idList });\n    return this.listenOnce(`bookmark-${theUuid}`);\n  }\n\n  saveBookmark(data) {\n    const theUuid = uuidv4()\n    this.sendToMain('bookmark', { operation: IpcOperations.SAVE, uuid: theUuid },\n      data);\n    return this.listenOnce(`bookmark-${theUuid}`);\n  }\n\n  removeBookmark(type: string, id: string | number) {\n    const theUuid = uuidv4()\n    this.sendToMain('bookmark', { operation: IpcOperations.REMOVE, uuid: theUuid }, { type: type, id: id });\n    return this.listenOnce(`bookmark-${theUuid}`);\n  }\n\n  // ----- WATCHED\n  getWatched(data: number) {\n    const theUuid = uuidv4()\n    this.sendToMain('watched', { operation: IpcOperations.FIND_ONE, uuid: theUuid },\n      { tmdbId: data })\n    return this.listenOnce(`watched-${theUuid}`);\n  }\n\n  /**\n   * Ipc renderer that sends command to main renderer to get movies from library db.\n   * @param idList\n   */\n  getWatchedInList(idList: number[]): Promise<any> {\n    const theUuid = uuidv4()\n    this.sendToMain('watched', {\n      operation: IpcOperations.FIND_IN_LIST,\n      uuid: theUuid\n    }, { idList: idList });\n    return this.listenOnce(`watched-${theUuid}`);\n  }\n\n  saveWatched(data) {\n    const theUuid = uuidv4()\n    this.sendToMain('watched', { operation: IpcOperations.SAVE, uuid: theUuid }, data);\n    return this.listenOnce(`watched-${theUuid}`);\n  }\n\n  updateWatchedStatus(val: IWatched) {\n    this.ipcRenderer.send('', val)\n  }\n\n  /**\n   * TODO: remove type\n   */\n  removeWatched(type: string, id: string | number) {\n    const theUuid = uuidv4()\n    this.sendToMain('watched', { operation: IpcOperations.REMOVE, uuid: theUuid }, { type: type, id: id });\n    return this.listenOnce(`watched-${theUuid}`);\n  }\n\n\n  // ----- END OF WATCHED\n  /**\n   *\n   * @param id tmdb id\n   */\n  getMovieUserData(id: number): Promise<IProfileData> {\n    const theUuid = uuidv4()\n    this.sendToMain('user-data', {\n      operation: IpcOperations.FIND,\n      uuid: theUuid\n    }, { tmdbId: id });\n    return this.listenOnce(`user-data-${theUuid}`);\n  }\n\n  getMovieUserDataInList(idList: number[]): Promise<IProfileData[]> {\n    const theUuid = uuidv4()\n    this.sendToMain('user-data', {\n      operation: IpcOperations.FIND_IN_LIST,\n      uuid: theUuid\n    }, { idList: idList });\n    return this.listenOnce(`user-data-${theUuid}`)\n  }\n\n  saveFavorite(data) {\n    const theUuid = uuidv4()\n    this.sendToMain('favorite', { operation: IpcOperations.SAVE, uuid: theUuid }, data);\n    return this.listenOnce(`favorite-${theUuid}`);\n  }\n\n  // ----- END OF USER DATA\n  startScanLibrary() {\n\n    this.sendToMain(IPCRendererChannel.SCAN_LIBRARY_START)\n    this.ipcRenderer.on(IPCMainChannel.ScanLibraryResult, e => {\n      console.log(IPCMainChannel.ScanLibraryResult, e)\n    })\n    this.ipcRenderer.once(IPCMainChannel.ScanLibraryComplete, e => {\n      console.log('completscan')\n      this.ipcRenderer.removeListener(IPCMainChannel.ScanLibraryResult, d => { })\n    })\n  }\n\n  stopScanLibrary() {\n    this.sendToMain(IPCRendererChannel.SCAN_LIBRARY_STOP)\n  }\n\n  getPlayTorrent(hash: string): Promise<any> {\n    this.sendToMain(IPCRendererChannel.PLAY_TORRENT, hash)\n    return this.listenOnce(`stream-link`);\n  }\n\n  stopStream() {\n    this.sendToMain(IPCRendererChannel.STOP_STREAM)\n  }\n\n  playOfflineVideo(docId): Promise<any> {\n    this.sendToMain(IPCRendererChannel.PLAY_OFFLINE_VIDEO_STREAM, docId);\n    return this.listenOnce(`stream-link`);\n  }\n\n  getPreferences() {\n\n    this.sendToMain(IPCRendererChannel.PREFERENCES_GET)\n    // this.ipcRenderer.addListener(IPCMainChannel.PREFERENCES_GET_COMPLETE, this.pref)\n\n    // (event, data: any) => {\n    // console.log('IPCMainChannel.PREFERENCES_COMPLETE ', data)\n    // this.pref()\n    // this.preferences.next(data)\n    // this.ipcRenderer.removeListener(IPCMainChannel.PREFERENCES_GET_COMPLETE, e => { })\n    // })\n  }\n\n  savePreferences(val) {\n    this.sendToMain(IPCRendererChannel.PREFERENCES_SET, val)\n    // this.ipcRenderer.on(IPCMainChannel.PREFERENCES_SET_COMPLETE, (event, data: any) => {\n    //   console.log('IPCMainChannel.PREFERENCES_SET_COMPLETE ', data)\n    //   this.preferences.next(data)\n    //   this.ipcRenderer.removeListener(IPCMainChannel.PREFERENCES_SET_COMPLETE, d => { })\n    // })\n  }\n\n  changeSubtitle(): Promise<any> {\n    this.sendToMain(\"get-subtitle\")\n    return this.listenOnce('subtitle-path')\n  }\n\n  minimizeWindow() {\n    this.sendToMain(this.IPCCommand.MinimizeApp)\n  }\n  minimizeRestoreWindow() {\n    this.sendToMain(this.IPCCommand.RestoreApp)\n  }\n  exitApp() {\n    this.sendToMain(this.IPCCommand.ExitApp)\n  }\n\n  private removeListener(channel: string) {\n    console.log('REMOVING LISTENER', channel)\n    this.ipcRenderer.removeListener(channel, d => { })\n  }\n\n  private sendToMain(channel: string, headers?: Headers | string, body?: Body) {\n    try {\n      this.ipcRenderer.send(channel, [headers, body])\n      console.log('sent to ipc... ', channel, [headers, body])\n    } catch {\n      console.log('failed to send Ipc: ', channel, [headers, body])\n    }\n  }\n\n  private listenOnce(channel: string) {\n    return new Promise<any>((resolve, reject) => {\n      try {\n        this.ipcRenderer.once(channel, (event, arg) => {\n          console.log('channel: ', channel, ' arg: ', arg)\n          resolve(arg);\n        });\n      } catch {\n        resolve(null);\n        console.log(`listen ${channel} failed`)\n      }\n    });\n  }\n\n  IPCCommand = IPCRendererChannel['default']\n  IPCChannel = IPCMainChannel['default']\n}\n\ninterface Headers {\n  operation: IpcOperations,\n  uuid: string\n}\n\ninterface Body {\n  tmdbId?: number\n  idList?: number[]\n  [x: string]: any\n}\n\nenum IpcOperations {\n  FIND = 'find',\n  FIND_ONE = 'find-one',\n  FIND_IN_LIST = 'find-in-list',\n  UPDATE = 'update',\n  SAVE = 'save',\n  REMOVE = 'remove',\n  GET_BY_PAGE = 'get-by-page',\n  COUNT = 'count'\n}\nexport interface IBookmarkChanges {\n  change: BookmarkChanges\n}\n\nexport enum BookmarkChanges {\n  UPDATE = 'update',\n  DELETE = 'delete',\n  INSERT = 'insert'\n}\n\nexport interface IBookmark {\n  tmdbId: number,\n  imdbId: string,\n  id: string\n}\n\n\n\ninterface ILibrary {\n  title?: string,\n  year?: number,\n  tmdbId?: number,\n  imdbId?: string,\n  libraryList: ILibraryData[]\n}\n\ninterface ILibraryData {\n  fullFilePath: string,\n  _id: string\n}\n\nexport interface IUserDataPaginated {\n  totalPages: number,\n  totalResults: number,\n  page?: number,\n  results: any[],\n}\n\ninterface SortObject {\n  [x: string]: 1 | -1\n}\n",
            "properties": [
                {
                    "name": "change",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BookmarkChanges",
                    "optional": false,
                    "description": "",
                    "line": 368
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ICacheContent",
            "id": "interface-ICacheContent-01fee42da407fce23e5b372cd022cc6fd3154e535fd2b3abc642366c5cbcd889c49ba7ae3c1a3420dceab7e02f48caddc502a236638ca2a839b2fb25b3c55081",
            "file": "src/app/services/cache.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Observable, of, Subject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n/**\n * Data sharing service.\n */\nimport { Injectable } from '@angular/core'\nimport { BehaviorSubject } from 'rxjs'\n\ninterface ICacheContent {\n  expiry: number;\n  value: any;\n}\n@Injectable({ providedIn: 'root' })\nexport class CacheService {\n  private cache: Map<string, ICacheContent> = new Map<string, ICacheContent>();\n  private inFlightObservables: Map<string, Subject<any>> = new Map<string, Subject<any>>();\n\n  // readonly DEFAULT_MAX_AGE: number = 900000;\n  readonly DEFAULT_MAX_AGE: number = 43200000; // 12 hours\n  constructor() { }\n\n  get(key: string, fallback?: Observable<any>, maxAge?: number): Observable<any> | Subject<any> {\n\n    if (this.hasValidCachedValue(key)) {\n      // console.log(`Getting from cache: Key - ${key}`);\n      const cacheValue = this.cache.get(key).value;\n      return of(cacheValue);\n    }\n\n    if (!maxAge) {\n      maxAge = this.DEFAULT_MAX_AGE;\n    }\n\n    if (this.inFlightObservables.has(key)) {\n      const inFlight = this.inFlightObservables.get(key);\n      const observersCount = inFlight.observers.length;\n      if (this.isEmpty(observersCount)) {\n        return fallback.pipe(tap((value) => { this.set(key, value, maxAge) }));\n      }\n      return inFlight;\n    } else if (fallback && fallback instanceof Observable) {\n      this.inFlightObservables.set(key, new Subject());\n      // console.log(`Calling api for ${key}`);\n      return fallback.pipe(tap((value) =>  this.set(key, value, maxAge) ));\n    } else {\n      return Observable.throw(`Requested key (${key}) is not available in Cache`);\n    }\n\n  }\n  set(key: string, value: any, maxAge: number = this.DEFAULT_MAX_AGE): void {\n    this.cache.set(key, { value, expiry: Date.now() + maxAge });\n    this.notifyInFlightObservers(key, value);\n  }\n\n\n  isEmpty(obj) {\n    if (obj === null || obj === undefined) {\n      return true;\n    }\n\n    if (Array.isArray(obj)) {\n      return obj.length === 0;\n    }\n\n    switch (typeof(obj)) {\n      case 'object':\n        return Object.keys(obj).length === 0;\n      case 'string':\n        return obj.length === 0;\n      case 'number':\n        return obj === 0;\n      case 'boolean':\n      case 'function':\n      case 'symbol':\n      default:\n        return false;\n    }\n  }\n\n  private notifyInFlightObservers(key: string, value: any): void {\n    if (this.inFlightObservables.has(key)) {\n      const inFlight = this.inFlightObservables.get(key);\n      const observersCount = inFlight.observers.length;\n      if (observersCount) {\n        // console.log(`Notifying ${inFlight.observers.length} flight subscribers for ${key}`);\n        inFlight.next(value);\n      }\n      inFlight.complete();\n      this.inFlightObservables.delete(key);\n    }\n  }\n  private hasValidCachedValue(key: string): boolean {\n    if (this.cache.has(key)) {\n      if (this.cache.get(key).expiry < Date.now()) {\n        this.cache.delete(key);\n        return false;\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "expiry",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ICast",
            "id": "interface-ICast-584d54738f93e2af94202069b5eddb4cab23bb2dfec2ff69f24ebaf881c252f94680b4cd6cec302796817692570a31bedafc5d74fed1cf6488a895dbf372e23d",
            "file": "src/app/models/interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IMdbMovieDetails {\n  awards?: string\n  backgroundPath: string;\n  belongsToCollection?: []\n  boxOffice?: string | number // tmdb:revenue(number)\n  budget?: number\n  country?: string\n  director?: string\n  dvd?: string // dvd release\n  genres?: string[] | string | IGenre[]\n  imdbId?: string\n  imdbRating?: string\n  imdbVotes?: string\n  isAdult?: boolean;\n  isAvailable?: boolean;\n  languages?: string[]\n  libraryInfo?: ILibraryInfo\n  metascore?: string // metacritic score\\\n  originalLanguage?: string // tmdb:\"en\",omdb:\"English\"\n  originalTitle?: string\n  plot?: string // plot or overview\n  popularity?: number\n  posterPath: string\n  production?: string // company; i.e. Walt Disney Pictures\n  rated?: string // rated or certificate\n  ratings?: IRating[]\n  releaseDate?: string // omdb:\"05 May 2017\"; tmdb:\"1999-10-15\"\n  releaseYear?: number | string\n  response: string\n  runtime?: string\n  starring?: string // Actors field in omdb\n  status?: string // released/Post\n  tagline?: string;\n  tmdbId?: number\n  title: string\n  type?: string // movie/tvmovie/series\n  video?: boolean; // unknown\n  // voteAverage: number; // tmdb votes\n  // voteCount: number; // tmdb votes\n  website?: string\n  writer?: string // omdb\n  [propName: string]: any;\n}\n\nexport interface IRating {\n  Source: string\n  Value: string\n}\n\nexport interface LibraryInfo {\n  tmdbId?: null | number | string\n  imdbID?: string\n  title?: string\n  year?: number\n  directoryList?: string[]\n  _id: string\n}\n\nexport interface MovieGenre {\n  id: number\n  code: string\n  description: string\n  isChecked: boolean\n}\n\nexport interface WatchList {\n  id: number\n  movieList: string[]\n}\n\nexport interface ILibraryInfo {\n  tmdbId?: null | number | string\n  imdbID?: string\n  title?: string\n  year?: number\n  directoryList?: string[]\n  _id: string\n}\n\nexport interface ICollection {\n  id: number,\n  name: string\n}\n\nexport interface IProductionCompany {\n  id: number;\n  logo_path: null | string;\n  name: string;\n  origin_country: string;\n}\n\nexport interface IProductionCountry {\n  iso_3166_1: string;\n  name: string;\n}\n\nexport interface ISpokenLanguage {\n  iso_639_1: string;\n  name: string;\n}\n\nexport interface IOmdbMovieDetail {\n  Title: string\n  Year?: string\n  Rated?: string\n  Released?: string // \"05 May 2017\"\n  Runtime?: string\n  Genre?: string\n  Director?: string\n  Writer?: string\n  Actors?: string\n  Plot?: string\n  Language?: string\n  Country?: string\n  Awards?: string\n  Poster?: string\n  Ratings?: IRating[]\n  Metascore?: string\n  imdbRating?: string\n  imdbVotes?: string\n  imdbID: string\n  Type?: string\n  DVD?: string\n  BoxOffice?: string\n  Production?: string\n  Website?: string\n  Response: string\n}\n\nexport interface ITmdbMovieDetail {\n  adult: boolean;\n  backdrop_path: string;\n  belongs_to_collection: null;\n  budget: number;\n  genres: IGenre[];\n  homepage: string;\n  id: number;\n  imdb_id: string;\n  original_language: string;\n  original_title: string;\n  overview: string;\n  popularity: number;\n  poster_path: string;\n  production_companies: IProductionCompany[];\n  production_countries: IProductionCountry[];\n  release_date: string;\n  revenue: number;\n  runtime: number;\n  spoken_languages: ISpokenLanguage[];\n  status: string;\n  tagline: string;\n  title: string;\n  video: boolean;\n  vote_average: number;\n  vote_count: number;\n}\n\nexport interface MdbMovieDetails {\n  adult?: boolean;\n  title: string\n  releaseYear?: string\n  releaseDate?: string\n  rated?: string // rated or certificate\n  runtime?: string\n  genres?: string\n  director?: string\n  writer?: string\n  Actors?: string\n  plot?: string // plot or overview\n  Language?: string\n  Country?: string\n  Awards?: string\n  Poster?: string\n  Ratings?: IRating[]\n  Metascore?: string\n  imdbRating?: string\n  imdbVotes?: string\n  imdbID: string\n  tmdbID: number\n  Type?: string\n  DVD?: string\n  BoxOffice?: string\n  Production?: string\n  website?: string\n  response: string\n  libraryInfo?: ILibraryInfo\n}\n\n// // adult: boolean;\n// //backdrop_path: string;\n// belongs_to_collection: null;\n// // budget: number;\n// genres: Genre[];\n// // homepage: string;\n// // id: number;\n// // imdb_id: string;\n// original_language: string;\n// original_title: string;\n// // overview: string;\n// // popularity: number;\n// // poster_path: string;\n// production_companies: ProductionCompany[];\n// production_countries: ProductionCountry[];\n// // release_date: string;\n// // revenue: number;\n// // runtime: number;\n// spoken_languages: SpokenLanguage[];\n// // status: string;\n// // tagline: string;\n// // title: string;\n// // video: boolean;\n// // vote_average: number;\n// // vote_count: number;\n\nexport interface ITmdbResultObject {\n  page: number;\n  total_results: number;\n  total_pages: number;\n  results: ITmdbResult[];\n}\n\nexport interface ITmdbResult {\n  popularity: number\n  vote_count: number\n  video: boolean\n  poster_path: string\n  id: number\n  adult: boolean\n  backdrop_path: string\n  original_language: string\n  original_title: string\n  genre_ids: number[]\n  title: string\n  vote_average: number\n  overview: string\n  release_date: string\n  isAvailable?: boolean\n  isHighlighted?: boolean\n}\n\nexport interface ILibraryMovie {\n  tmdbId?: number,\n  title: string,\n  year: number,\n  imdbId?: string,\n  directory: string[]\n}\n\nexport interface IGenre {\n  id: number\n  name: string\n}\n\nexport interface Credits {\n  id: number;\n  cast: CastElement[];\n  crew: Crew[];\n}\n\ninterface CastElement {\n  cast_id: number;\n  character: string;\n  credit_id: string;\n  gender: number;\n  id: number;\n  name: string;\n  order: number;\n  profile_path: null | string;\n}\n\ninterface Crew {\n  credit_id: string;\n  department: Department;\n  gender: number;\n  id: number;\n  job: string;\n  name: string;\n  profile_path: null | string;\n}\n\nexport enum Department {\n  Art = 'Art',\n  Camera = 'Camera',\n  CostumeMakeUp = 'Costume & Make-Up',\n  Crew = 'Crew',\n  Directing = 'Directing',\n  Editing = 'Editing',\n  Lighting = 'Lighting',\n  Production = 'Production',\n  Sound = 'Sound',\n  VisualEffects = 'Visual Effects',\n  Writing = 'Writing',\n}\n\nexport class MDBTorrent {\n  id?: string\n  name?: string\n  size?: string\n  hash: string\n  url?: string\n  quality?: string\n  type?: string\n  seeds?: number\n  peers?: number\n  sizeBytes?: number\n  added?: string\n  dateUploaded?: string\n  dateUploadedUnix?: number\n  isYts?: boolean\n  magnetLink?: string\n}\n\nexport class ITPBTorrent {\n  id?: number\n  name?: string\n  hash: string\n  sizeBytes?: number\n  added?: string\n}\n\nexport interface ISearch {\n  page: number\n}\n\nexport enum OmdbParameters {\n  ApiKey = 'apikey',\n  ImdbId = 'i',\n  Title = 't',\n  Type = 'type',\n  Year = 'y',\n  Plot = 'plot',\n  Return = 'r',\n  Callback = 'callback',\n  Version = 'v',\n}\n\nexport enum TmdbParameters {\n  ApiKey = 'api_key',\n  AppendToResponse = 'append_to_response',\n  Language = 'language',\n  Region = 'region',\n  SortBy = 'sort_by',\n  CertificationCountry = 'certification_country',\n  Certification = 'certification',\n  CertificationLess = 'certification.lte',\n  CertificationGreater = 'certification.gte',\n  IncludeAdult = 'include_adult',\n  IncludeVideo = 'include_video',\n  Page = 'page',\n  PrimaryReleaseYear = 'primary_release_year',\n  PrimaryReleaseDateGreater = 'primary_release_date.gte',\n  PrimaryReleaseDateLess = 'primary_release_date.lte',\n  ReleaseDateGreater = 'release_date.gte',\n  ReleaseDateLess = 'release_date.lte',\n  WithReleaseType = 'with_release_type',\n  Year = 'year',\n  VoteCountGreater = 'vote_count.gte',\n  VoteCountLess = 'vote_count.lte',\n  VoteAverageGreater = 'vote_average.gte',\n  VoteAverageLess = 'vote_average.lte',\n  WithCast = 'with_cast',\n  WithCrew = 'with_crew',\n  WithPeople = 'with_people',\n  WithCompanies = 'with_companies',\n  WithGenres = 'with_genres',\n  WithoutGenres = 'without_genres',\n  WithKeywords = 'with_keywords',\n  WithoutKeywords = 'without_keywords',\n  WithRuntimeGreater = 'with_runtime.gte',\n  WithRuntimeLess = 'with_runtime.lte',\n  WithOriginalLanguage = 'with_original_language',\n  WithWatchProviders = 'with_watch_providers',\n  WatchRegion = 'watch_region'\n}\n\nexport enum TmdbSearchMovieParameters {\n  ApiKey = 'api_key',\n  Language = 'language', // Pass a ISO 639 - 1 value to display translated data for the fields that support it. minLength: 2 pattern: ([a - z]{ 2 }) -([A - Z]{ 2 }) default: en - US\n  Query = 'query',\n  Page = 'page', // minimum: 1 maximum: 1000\n  IncludeAdult = 'include_adult',\n  Region = 'region',\n  // Specify a ISO 3166 - 1 code to filter release dates.Must be uppercase. pattern: ^ [A - Z]{ 2 } $\n  Year = 'year',\n  PrimaryReleaseYear = 'primary_release_year'\n}\n\nenum TmdbAppendToResponseParameters {\n  AccountStates = 'account_states',\n  Videos = 'videos',\n  Images = 'images',\n  Credits = 'credits',\n  Changes = 'changes',\n  Translations = 'translations',\n  Similar = 'similar',\n  ExternalIds = 'external_ids',\n  AlternativeTitles = 'alternative_titles',\n  Keywords = 'keywords',\n  Reviews = 'reviews',\n  Recommendations = 'recommendations',\n  ReleaseDates = 'release_dates',\n  Lists = 'lists'\n}\n\nenum TmdbReleaseTypes {\n  PREMIERE = 'Premiere',  // 1\n  THEATRICAL_LIMITED = 'Theatrical(limited)', // 2\n  THEATRICAL = 'Theatrical', // 3\n  DIGITAL = 'Digital', // 4\n  PHYSICAL = 'Physical', // 5\n  TV = 'TV', // 6\n}\n\nexport interface IPersonDetails {\n  birthday: string;\n  known_for_department: string;\n  id: number;\n  movie_credits?: IPersonCredits;\n  tv_credits?: IPersonCredits;\n  combined_credits?: IPersonCredits;\n  homepage?: any;\n  profile_path: string;\n  imdb_id: string;\n  deathday?: any;\n  images?: IImages;\n  external_ids?: IExternalids;\n  name: string;\n  also_known_as: string[];\n  biography: string;\n  adult: boolean;\n  gender: number;\n  place_of_birth: string;\n  popularity: number;\n}\n\nexport interface IPersonCredits {\n  cast: IPersonCastCrew[];\n  crew: IPersonCastCrew[];\n  id?: number;\n}\n\nexport interface IPersonCastCrew {\n  id?: number;\n  original_language: string;\n  episode_count?: number;\n  overview: string;\n  origin_country?: string[];\n  original_name?: string;\n  genre_ids: number[];\n  name?: string;\n  media_type: string;\n  poster_path: null | string;\n  first_air_date?: string;\n  vote_average: number;\n  vote_count: number;\n  character?: string;\n  backdrop_path: null | string;\n  popularity: number;\n  credit_id: string;\n  original_title?: string;\n  video?: boolean;\n  release_date?: string;\n  title?: string;\n  adult?: boolean;\n  department?: string;\n  job?: string;\n}\n\nexport interface IExternalids {\n  id?: number;\n  freebase_id: string;\n  instagram_id: string;\n  tvrage_id: number;\n  twitter_id: string;\n  freebase_mid: string;\n  imdb_id: string;\n  facebook_id: string;\n}\n\nexport interface IImages {\n  id?: number;\n  profiles: IProfile[];\n}\n\nexport interface IProfile {\n  iso_639_1?: any;\n  aspect_ratio: number;\n  vote_count: number;\n  height: number;\n  vote_average: number;\n  file_path: string;\n  width: number;\n}\n\nexport interface ICredits {\n  cast: ICast[];\n  crew: ICrew[];\n}\n\ninterface ICast {\n  poster_path?: string;\n  adult: boolean;\n  backdrop_path?: string;\n  vote_count: number;\n  video: boolean;\n  id: number;\n  media_type?: string;\n  popularity: number;\n  genre_ids: number[];\n  original_language: string;\n  title: string;\n  original_title: string;\n  release_date: string;\n  character: string;\n  vote_average: number;\n  overview: string;\n  credit_id: string;\n}\n\ninterface ICrew {\n  id: number;\n  department: string;\n  original_language: string;\n  original_title: string;\n  job: string;\n  overview: string;\n  genre_ids: number[];\n  video: boolean;\n  episode_count: number\n  media_type?: string;\n  credit_id: string;\n  poster_path?: string;\n  popularity: number;\n  backdrop_path?: string;\n  vote_count: number;\n  title: string;\n  adult: boolean;\n  vote_average: number;\n  release_date: string;\n}\n\nexport interface IUserSavedData {\n  id?: string,\n  title: string,\n  year: number,\n  tmdbId: number,\n}\n\nexport enum GenreCodes {\n  Action = 28,\n  Adventure = 12,\n  Animation = 16,\n  Comedy = 35,\n  Crime = 80,\n  Documentary = 99,\n  Drama = 18,\n  Family = 10751,\n  Fantasy = 14,\n  History = 36,\n  Horror = 27,\n  Music = 10402,\n  Mystery = 9648,\n  Romance = 10749,\n  ScienceFiction = 878,\n  TVMovie = 10770,\n  Thriller = 53,\n  War = 10752,\n  Western = 37,\n  // mdb reserved\n  FilmNoir = 20000,\n  // similar genre: Music id:10402\n  Musical = 20001,\n  News = 20002,\n  RealityTV = 20003,\n  // similar genre: Science Fiction id:878\n  SciFi = 20004,\n  // another media type\n  Short = 20005,\n  Sport = 20006,\n}\n\n\n\n/**\nexport enum Department {\n    Art = \"Art\",\n    Camera = \"Camera\",\n    CostumeMakeUp = \"Costume & Make-Up\",\n    Crew = \"Crew\",\n    Directing = \"Directing\",\n    Editing = \"Editing\",\n    Lighting = \"Lighting\",\n    Production = \"Production\",\n    Sound = \"Sound\",\n    VisualEffects = \"Visual Effects\",\n    Writing = \"Writing\",\n}\n\nexport interface ExternalIDS {\n    imdb_id:      string;\n    facebook_id:  null;\n    instagram_id: null;\n    twitter_id:   null;\n}\n\nexport interface Genre {\n    id:   number;\n    name: string;\n}\n\nexport interface Images {\n    backdrops: any[];\n    posters:   any[];\n}\n\nexport enum OriginalLanguage {\n    En = \"en\",\n    Es = \"es\",\n    Fr = \"fr\",\n}\n\nexport interface ProductionCompany {\n    id:             number;\n    logo_path:      string;\n    name:           string;\n    origin_country: string;\n}\n\nexport interface ProductionCountry {\n    iso_3166_1: string;\n    name:       string;\n}\n\nexport interface Recommendations {\n    page:          number;\n    results:       RecommendationsResult[];\n    total_pages:   number;\n    total_results: number;\n}\n\nexport interface RecommendationsResult {\n    id:                number;\n    video:             boolean;\n    vote_count:        number;\n    vote_average:      number;\n    title:             string;\n    release_date:      string;\n    original_language: OriginalLanguage;\n    original_title:    string;\n    genre_ids:         number[];\n    backdrop_path:     string;\n    adult:             boolean;\n    overview:          string;\n    poster_path:       string;\n    popularity:        number;\n}\n\nexport interface SpokenLanguage {\n    iso_639_1: OriginalLanguage;\n    name:      string;\n}\n\nexport interface Videos {\n    results: VideosResult[];\n}\n\nexport interface VideosResult {\n    id:         string;\n    iso_639_1:  OriginalLanguage;\n    iso_3166_1: string;\n    key:        string;\n    name:       string;\n    site:       string;\n    size:       number;\n    type:       string;\n}\n */\n\n",
            "properties": [
                {
                    "name": "adult",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 503
                },
                {
                    "name": "backdrop_path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 504
                },
                {
                    "name": "character",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 515
                },
                {
                    "name": "credit_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 518
                },
                {
                    "name": "genre_ids",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 510
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 507
                },
                {
                    "name": "media_type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 508
                },
                {
                    "name": "original_language",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 511
                },
                {
                    "name": "original_title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 513
                },
                {
                    "name": "overview",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 517
                },
                {
                    "name": "popularity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 509
                },
                {
                    "name": "poster_path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 502
                },
                {
                    "name": "release_date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 514
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 512
                },
                {
                    "name": "video",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 506
                },
                {
                    "name": "vote_average",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 516
                },
                {
                    "name": "vote_count",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 505
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ICast",
            "id": "interface-ICast-ab3c214285c1bfb717ed3d3b0126b69c830be2c667b8ea1793b5a95dd2f4bb2586d106c6397d01b558a5443d11988665d988e81d61dce2a7c48ca0eb54dacd73-1",
            "file": "src/app/models/mdb-movie.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Department, IRating } from \"./interfaces\"\nimport { TMDB_External_Id } from \"./tmdb-external-id.model\"\nimport { IProfileData } from \"./profile-data.model\"\n\nexport class MDBMovie {\n  mdbId: string\n  imdbId: string\n  tmdbId: number\n  title: string\n  originalTitle: string\n  originalLanguage: string\n  overview: string\n  popularity: number\n  posterPath: string\n  userData: IProfileData\n  backropPath: string\n  credits: ICredits\n  rating: IRating\n  isAdult: boolean\n  vote: IVote\n  releaseDate: string\n  runtime: number // runtme by minutes\n  status: string\n  tagline: string\n  externalIds: TMDB_External_Id\n  genres: any\n  genreIds: number[]\n  // not used much\n  budget: number\n  website: string\n  revenue: number\n  spokenLanguages: any\n  video: boolean\n  // to map further\n  recommendations: any\n  images: any\n  videos: any\n  productionCompanies: any\n  collection: any\n  productionCountries: any\n  releaseDates: any\n\n  constructor(value?: any) {\n    if (value != null) {\n      this.mapToObject(value)\n    }\n  }\n\n  private nestMapper(val: any, ...args) {\n    let toReturn = null\n    try {\n      if (this.getNested(val, args))\n        toReturn = val\n    } catch {\n      toReturn = null\n    }\n    return toReturn\n  }\n\n  getNested(obj, ...args) {\n    return args.reduce((obj, level) => obj && obj[level], obj)\n  }\n  /**\n   * https://stackoverflow.com/questions/47632430/pattern-for-dealing-with-mapping-api-objects-to-ui-model-objects\n   * @param value orig value\n   * @param source tmdb, mdb or omdb\n   */\n  private mapToObject(value: any, source?: string) {\n\n    this.imdbId = value['imdb_id'] || value['imdbId']\n    this.tmdbId = value['id'] || value['tmdbId']\n    this.mdbId = value['tmdbId'] || value['id']\n    this.title = value['title']\n    this.originalTitle = value['original_language'] || value['originalTitle']\n    this.originalLanguage = value['original_title'] || value['originalLanguage']\n    this.overview = value['overview'] || value['plot']\n    this.posterPath = value['poster_path'] || value['posterPath']\n    // this.userData = value['userData'] || value['plot']\n    this.backropPath = value['backdrop_path'] || value['backropPath']\n    this.credits = value['credits']\n    this.rating = value['overview'] || value['plot']\n    this.isAdult = value['adult'] || value['isAdult']\n    this.vote = {\n      voteAverage: value['vote_average'] || this.nestMapper(value, 'vote', 'voteAverage'),\n      voteCount: value['vote_count'] || this.nestMapper(value, 'vote', 'voteCount')\n    }\n    this.releaseDate = value['release_date'] || value['releaseDate']\n    this.runtime = value['runtime']\n    this.status = value['status']\n    this.tagline = value['tagline']\n    this.externalIds = value['external_ids'] || value['externalIds']\n    this.genres = value['genres']\n    this.genreIds = value['genre_ids']\n\n    this.budget = value['budget']\n    this.website = value['homepage'] || value['Website']\n    this.revenue = value['revenue']\n    this.spokenLanguages = value['spoken_languages'] || value['spokenLanguages']\n    this.video = value['video']\n\n    this.recommendations = value['recommendations']\n    this.images = value['images']\n    this.videos = value['videos']\n    this.productionCompanies = value['production_companies'] || value['productionCompanies']\n    this.collection = value['belongs_to_collection'] || value['collection']\n    this.productionCountries = value['production_countries'] || value['productionCountries']\n    this.releaseDates = value['release_dates'] || value['releaseDates']\n\n  }\n}\n\nexport interface ICredits {\n  id: number;\n  cast: ICast[];\n  crew: ICrew[];\n}\n\ninterface ICast {\n  castId: number;\n  character: string;\n  credit_id: string;\n  gender: number;\n  id: number;\n  name: string;\n  order: number;\n  profilePath: null | string;\n}\n\ninterface ICrew {\n  creditId: string;\n  department: Department;\n  gender: number;\n  id: number;\n  job: string;\n  name: string;\n  profilePath: null | string;\n}\n\n\ninterface IVote {\n  voteCount: number\n  voteAverage: number\n}\n",
            "properties": [
                {
                    "name": "castId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 119
                },
                {
                    "name": "character",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 120
                },
                {
                    "name": "credit_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 121
                },
                {
                    "name": "gender",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 122
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 123
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 124
                },
                {
                    "name": "order",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 125
                },
                {
                    "name": "profilePath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "null | string",
                    "optional": false,
                    "description": "",
                    "line": 126
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ICast-1"
        },
        {
            "name": "ICollection",
            "id": "interface-ICollection-584d54738f93e2af94202069b5eddb4cab23bb2dfec2ff69f24ebaf881c252f94680b4cd6cec302796817692570a31bedafc5d74fed1cf6488a895dbf372e23d",
            "file": "src/app/models/interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IMdbMovieDetails {\n  awards?: string\n  backgroundPath: string;\n  belongsToCollection?: []\n  boxOffice?: string | number // tmdb:revenue(number)\n  budget?: number\n  country?: string\n  director?: string\n  dvd?: string // dvd release\n  genres?: string[] | string | IGenre[]\n  imdbId?: string\n  imdbRating?: string\n  imdbVotes?: string\n  isAdult?: boolean;\n  isAvailable?: boolean;\n  languages?: string[]\n  libraryInfo?: ILibraryInfo\n  metascore?: string // metacritic score\\\n  originalLanguage?: string // tmdb:\"en\",omdb:\"English\"\n  originalTitle?: string\n  plot?: string // plot or overview\n  popularity?: number\n  posterPath: string\n  production?: string // company; i.e. Walt Disney Pictures\n  rated?: string // rated or certificate\n  ratings?: IRating[]\n  releaseDate?: string // omdb:\"05 May 2017\"; tmdb:\"1999-10-15\"\n  releaseYear?: number | string\n  response: string\n  runtime?: string\n  starring?: string // Actors field in omdb\n  status?: string // released/Post\n  tagline?: string;\n  tmdbId?: number\n  title: string\n  type?: string // movie/tvmovie/series\n  video?: boolean; // unknown\n  // voteAverage: number; // tmdb votes\n  // voteCount: number; // tmdb votes\n  website?: string\n  writer?: string // omdb\n  [propName: string]: any;\n}\n\nexport interface IRating {\n  Source: string\n  Value: string\n}\n\nexport interface LibraryInfo {\n  tmdbId?: null | number | string\n  imdbID?: string\n  title?: string\n  year?: number\n  directoryList?: string[]\n  _id: string\n}\n\nexport interface MovieGenre {\n  id: number\n  code: string\n  description: string\n  isChecked: boolean\n}\n\nexport interface WatchList {\n  id: number\n  movieList: string[]\n}\n\nexport interface ILibraryInfo {\n  tmdbId?: null | number | string\n  imdbID?: string\n  title?: string\n  year?: number\n  directoryList?: string[]\n  _id: string\n}\n\nexport interface ICollection {\n  id: number,\n  name: string\n}\n\nexport interface IProductionCompany {\n  id: number;\n  logo_path: null | string;\n  name: string;\n  origin_country: string;\n}\n\nexport interface IProductionCountry {\n  iso_3166_1: string;\n  name: string;\n}\n\nexport interface ISpokenLanguage {\n  iso_639_1: string;\n  name: string;\n}\n\nexport interface IOmdbMovieDetail {\n  Title: string\n  Year?: string\n  Rated?: string\n  Released?: string // \"05 May 2017\"\n  Runtime?: string\n  Genre?: string\n  Director?: string\n  Writer?: string\n  Actors?: string\n  Plot?: string\n  Language?: string\n  Country?: string\n  Awards?: string\n  Poster?: string\n  Ratings?: IRating[]\n  Metascore?: string\n  imdbRating?: string\n  imdbVotes?: string\n  imdbID: string\n  Type?: string\n  DVD?: string\n  BoxOffice?: string\n  Production?: string\n  Website?: string\n  Response: string\n}\n\nexport interface ITmdbMovieDetail {\n  adult: boolean;\n  backdrop_path: string;\n  belongs_to_collection: null;\n  budget: number;\n  genres: IGenre[];\n  homepage: string;\n  id: number;\n  imdb_id: string;\n  original_language: string;\n  original_title: string;\n  overview: string;\n  popularity: number;\n  poster_path: string;\n  production_companies: IProductionCompany[];\n  production_countries: IProductionCountry[];\n  release_date: string;\n  revenue: number;\n  runtime: number;\n  spoken_languages: ISpokenLanguage[];\n  status: string;\n  tagline: string;\n  title: string;\n  video: boolean;\n  vote_average: number;\n  vote_count: number;\n}\n\nexport interface MdbMovieDetails {\n  adult?: boolean;\n  title: string\n  releaseYear?: string\n  releaseDate?: string\n  rated?: string // rated or certificate\n  runtime?: string\n  genres?: string\n  director?: string\n  writer?: string\n  Actors?: string\n  plot?: string // plot or overview\n  Language?: string\n  Country?: string\n  Awards?: string\n  Poster?: string\n  Ratings?: IRating[]\n  Metascore?: string\n  imdbRating?: string\n  imdbVotes?: string\n  imdbID: string\n  tmdbID: number\n  Type?: string\n  DVD?: string\n  BoxOffice?: string\n  Production?: string\n  website?: string\n  response: string\n  libraryInfo?: ILibraryInfo\n}\n\n// // adult: boolean;\n// //backdrop_path: string;\n// belongs_to_collection: null;\n// // budget: number;\n// genres: Genre[];\n// // homepage: string;\n// // id: number;\n// // imdb_id: string;\n// original_language: string;\n// original_title: string;\n// // overview: string;\n// // popularity: number;\n// // poster_path: string;\n// production_companies: ProductionCompany[];\n// production_countries: ProductionCountry[];\n// // release_date: string;\n// // revenue: number;\n// // runtime: number;\n// spoken_languages: SpokenLanguage[];\n// // status: string;\n// // tagline: string;\n// // title: string;\n// // video: boolean;\n// // vote_average: number;\n// // vote_count: number;\n\nexport interface ITmdbResultObject {\n  page: number;\n  total_results: number;\n  total_pages: number;\n  results: ITmdbResult[];\n}\n\nexport interface ITmdbResult {\n  popularity: number\n  vote_count: number\n  video: boolean\n  poster_path: string\n  id: number\n  adult: boolean\n  backdrop_path: string\n  original_language: string\n  original_title: string\n  genre_ids: number[]\n  title: string\n  vote_average: number\n  overview: string\n  release_date: string\n  isAvailable?: boolean\n  isHighlighted?: boolean\n}\n\nexport interface ILibraryMovie {\n  tmdbId?: number,\n  title: string,\n  year: number,\n  imdbId?: string,\n  directory: string[]\n}\n\nexport interface IGenre {\n  id: number\n  name: string\n}\n\nexport interface Credits {\n  id: number;\n  cast: CastElement[];\n  crew: Crew[];\n}\n\ninterface CastElement {\n  cast_id: number;\n  character: string;\n  credit_id: string;\n  gender: number;\n  id: number;\n  name: string;\n  order: number;\n  profile_path: null | string;\n}\n\ninterface Crew {\n  credit_id: string;\n  department: Department;\n  gender: number;\n  id: number;\n  job: string;\n  name: string;\n  profile_path: null | string;\n}\n\nexport enum Department {\n  Art = 'Art',\n  Camera = 'Camera',\n  CostumeMakeUp = 'Costume & Make-Up',\n  Crew = 'Crew',\n  Directing = 'Directing',\n  Editing = 'Editing',\n  Lighting = 'Lighting',\n  Production = 'Production',\n  Sound = 'Sound',\n  VisualEffects = 'Visual Effects',\n  Writing = 'Writing',\n}\n\nexport class MDBTorrent {\n  id?: string\n  name?: string\n  size?: string\n  hash: string\n  url?: string\n  quality?: string\n  type?: string\n  seeds?: number\n  peers?: number\n  sizeBytes?: number\n  added?: string\n  dateUploaded?: string\n  dateUploadedUnix?: number\n  isYts?: boolean\n  magnetLink?: string\n}\n\nexport class ITPBTorrent {\n  id?: number\n  name?: string\n  hash: string\n  sizeBytes?: number\n  added?: string\n}\n\nexport interface ISearch {\n  page: number\n}\n\nexport enum OmdbParameters {\n  ApiKey = 'apikey',\n  ImdbId = 'i',\n  Title = 't',\n  Type = 'type',\n  Year = 'y',\n  Plot = 'plot',\n  Return = 'r',\n  Callback = 'callback',\n  Version = 'v',\n}\n\nexport enum TmdbParameters {\n  ApiKey = 'api_key',\n  AppendToResponse = 'append_to_response',\n  Language = 'language',\n  Region = 'region',\n  SortBy = 'sort_by',\n  CertificationCountry = 'certification_country',\n  Certification = 'certification',\n  CertificationLess = 'certification.lte',\n  CertificationGreater = 'certification.gte',\n  IncludeAdult = 'include_adult',\n  IncludeVideo = 'include_video',\n  Page = 'page',\n  PrimaryReleaseYear = 'primary_release_year',\n  PrimaryReleaseDateGreater = 'primary_release_date.gte',\n  PrimaryReleaseDateLess = 'primary_release_date.lte',\n  ReleaseDateGreater = 'release_date.gte',\n  ReleaseDateLess = 'release_date.lte',\n  WithReleaseType = 'with_release_type',\n  Year = 'year',\n  VoteCountGreater = 'vote_count.gte',\n  VoteCountLess = 'vote_count.lte',\n  VoteAverageGreater = 'vote_average.gte',\n  VoteAverageLess = 'vote_average.lte',\n  WithCast = 'with_cast',\n  WithCrew = 'with_crew',\n  WithPeople = 'with_people',\n  WithCompanies = 'with_companies',\n  WithGenres = 'with_genres',\n  WithoutGenres = 'without_genres',\n  WithKeywords = 'with_keywords',\n  WithoutKeywords = 'without_keywords',\n  WithRuntimeGreater = 'with_runtime.gte',\n  WithRuntimeLess = 'with_runtime.lte',\n  WithOriginalLanguage = 'with_original_language',\n  WithWatchProviders = 'with_watch_providers',\n  WatchRegion = 'watch_region'\n}\n\nexport enum TmdbSearchMovieParameters {\n  ApiKey = 'api_key',\n  Language = 'language', // Pass a ISO 639 - 1 value to display translated data for the fields that support it. minLength: 2 pattern: ([a - z]{ 2 }) -([A - Z]{ 2 }) default: en - US\n  Query = 'query',\n  Page = 'page', // minimum: 1 maximum: 1000\n  IncludeAdult = 'include_adult',\n  Region = 'region',\n  // Specify a ISO 3166 - 1 code to filter release dates.Must be uppercase. pattern: ^ [A - Z]{ 2 } $\n  Year = 'year',\n  PrimaryReleaseYear = 'primary_release_year'\n}\n\nenum TmdbAppendToResponseParameters {\n  AccountStates = 'account_states',\n  Videos = 'videos',\n  Images = 'images',\n  Credits = 'credits',\n  Changes = 'changes',\n  Translations = 'translations',\n  Similar = 'similar',\n  ExternalIds = 'external_ids',\n  AlternativeTitles = 'alternative_titles',\n  Keywords = 'keywords',\n  Reviews = 'reviews',\n  Recommendations = 'recommendations',\n  ReleaseDates = 'release_dates',\n  Lists = 'lists'\n}\n\nenum TmdbReleaseTypes {\n  PREMIERE = 'Premiere',  // 1\n  THEATRICAL_LIMITED = 'Theatrical(limited)', // 2\n  THEATRICAL = 'Theatrical', // 3\n  DIGITAL = 'Digital', // 4\n  PHYSICAL = 'Physical', // 5\n  TV = 'TV', // 6\n}\n\nexport interface IPersonDetails {\n  birthday: string;\n  known_for_department: string;\n  id: number;\n  movie_credits?: IPersonCredits;\n  tv_credits?: IPersonCredits;\n  combined_credits?: IPersonCredits;\n  homepage?: any;\n  profile_path: string;\n  imdb_id: string;\n  deathday?: any;\n  images?: IImages;\n  external_ids?: IExternalids;\n  name: string;\n  also_known_as: string[];\n  biography: string;\n  adult: boolean;\n  gender: number;\n  place_of_birth: string;\n  popularity: number;\n}\n\nexport interface IPersonCredits {\n  cast: IPersonCastCrew[];\n  crew: IPersonCastCrew[];\n  id?: number;\n}\n\nexport interface IPersonCastCrew {\n  id?: number;\n  original_language: string;\n  episode_count?: number;\n  overview: string;\n  origin_country?: string[];\n  original_name?: string;\n  genre_ids: number[];\n  name?: string;\n  media_type: string;\n  poster_path: null | string;\n  first_air_date?: string;\n  vote_average: number;\n  vote_count: number;\n  character?: string;\n  backdrop_path: null | string;\n  popularity: number;\n  credit_id: string;\n  original_title?: string;\n  video?: boolean;\n  release_date?: string;\n  title?: string;\n  adult?: boolean;\n  department?: string;\n  job?: string;\n}\n\nexport interface IExternalids {\n  id?: number;\n  freebase_id: string;\n  instagram_id: string;\n  tvrage_id: number;\n  twitter_id: string;\n  freebase_mid: string;\n  imdb_id: string;\n  facebook_id: string;\n}\n\nexport interface IImages {\n  id?: number;\n  profiles: IProfile[];\n}\n\nexport interface IProfile {\n  iso_639_1?: any;\n  aspect_ratio: number;\n  vote_count: number;\n  height: number;\n  vote_average: number;\n  file_path: string;\n  width: number;\n}\n\nexport interface ICredits {\n  cast: ICast[];\n  crew: ICrew[];\n}\n\ninterface ICast {\n  poster_path?: string;\n  adult: boolean;\n  backdrop_path?: string;\n  vote_count: number;\n  video: boolean;\n  id: number;\n  media_type?: string;\n  popularity: number;\n  genre_ids: number[];\n  original_language: string;\n  title: string;\n  original_title: string;\n  release_date: string;\n  character: string;\n  vote_average: number;\n  overview: string;\n  credit_id: string;\n}\n\ninterface ICrew {\n  id: number;\n  department: string;\n  original_language: string;\n  original_title: string;\n  job: string;\n  overview: string;\n  genre_ids: number[];\n  video: boolean;\n  episode_count: number\n  media_type?: string;\n  credit_id: string;\n  poster_path?: string;\n  popularity: number;\n  backdrop_path?: string;\n  vote_count: number;\n  title: string;\n  adult: boolean;\n  vote_average: number;\n  release_date: string;\n}\n\nexport interface IUserSavedData {\n  id?: string,\n  title: string,\n  year: number,\n  tmdbId: number,\n}\n\nexport enum GenreCodes {\n  Action = 28,\n  Adventure = 12,\n  Animation = 16,\n  Comedy = 35,\n  Crime = 80,\n  Documentary = 99,\n  Drama = 18,\n  Family = 10751,\n  Fantasy = 14,\n  History = 36,\n  Horror = 27,\n  Music = 10402,\n  Mystery = 9648,\n  Romance = 10749,\n  ScienceFiction = 878,\n  TVMovie = 10770,\n  Thriller = 53,\n  War = 10752,\n  Western = 37,\n  // mdb reserved\n  FilmNoir = 20000,\n  // similar genre: Music id:10402\n  Musical = 20001,\n  News = 20002,\n  RealityTV = 20003,\n  // similar genre: Science Fiction id:878\n  SciFi = 20004,\n  // another media type\n  Short = 20005,\n  Sport = 20006,\n}\n\n\n\n/**\nexport enum Department {\n    Art = \"Art\",\n    Camera = \"Camera\",\n    CostumeMakeUp = \"Costume & Make-Up\",\n    Crew = \"Crew\",\n    Directing = \"Directing\",\n    Editing = \"Editing\",\n    Lighting = \"Lighting\",\n    Production = \"Production\",\n    Sound = \"Sound\",\n    VisualEffects = \"Visual Effects\",\n    Writing = \"Writing\",\n}\n\nexport interface ExternalIDS {\n    imdb_id:      string;\n    facebook_id:  null;\n    instagram_id: null;\n    twitter_id:   null;\n}\n\nexport interface Genre {\n    id:   number;\n    name: string;\n}\n\nexport interface Images {\n    backdrops: any[];\n    posters:   any[];\n}\n\nexport enum OriginalLanguage {\n    En = \"en\",\n    Es = \"es\",\n    Fr = \"fr\",\n}\n\nexport interface ProductionCompany {\n    id:             number;\n    logo_path:      string;\n    name:           string;\n    origin_country: string;\n}\n\nexport interface ProductionCountry {\n    iso_3166_1: string;\n    name:       string;\n}\n\nexport interface Recommendations {\n    page:          number;\n    results:       RecommendationsResult[];\n    total_pages:   number;\n    total_results: number;\n}\n\nexport interface RecommendationsResult {\n    id:                number;\n    video:             boolean;\n    vote_count:        number;\n    vote_average:      number;\n    title:             string;\n    release_date:      string;\n    original_language: OriginalLanguage;\n    original_title:    string;\n    genre_ids:         number[];\n    backdrop_path:     string;\n    adult:             boolean;\n    overview:          string;\n    poster_path:       string;\n    popularity:        number;\n}\n\nexport interface SpokenLanguage {\n    iso_639_1: OriginalLanguage;\n    name:      string;\n}\n\nexport interface Videos {\n    results: VideosResult[];\n}\n\nexport interface VideosResult {\n    id:         string;\n    iso_639_1:  OriginalLanguage;\n    iso_3166_1: string;\n    key:        string;\n    name:       string;\n    site:       string;\n    size:       number;\n    type:       string;\n}\n */\n\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 82
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 83
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ICredits",
            "id": "interface-ICredits-584d54738f93e2af94202069b5eddb4cab23bb2dfec2ff69f24ebaf881c252f94680b4cd6cec302796817692570a31bedafc5d74fed1cf6488a895dbf372e23d",
            "file": "src/app/models/interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IMdbMovieDetails {\n  awards?: string\n  backgroundPath: string;\n  belongsToCollection?: []\n  boxOffice?: string | number // tmdb:revenue(number)\n  budget?: number\n  country?: string\n  director?: string\n  dvd?: string // dvd release\n  genres?: string[] | string | IGenre[]\n  imdbId?: string\n  imdbRating?: string\n  imdbVotes?: string\n  isAdult?: boolean;\n  isAvailable?: boolean;\n  languages?: string[]\n  libraryInfo?: ILibraryInfo\n  metascore?: string // metacritic score\\\n  originalLanguage?: string // tmdb:\"en\",omdb:\"English\"\n  originalTitle?: string\n  plot?: string // plot or overview\n  popularity?: number\n  posterPath: string\n  production?: string // company; i.e. Walt Disney Pictures\n  rated?: string // rated or certificate\n  ratings?: IRating[]\n  releaseDate?: string // omdb:\"05 May 2017\"; tmdb:\"1999-10-15\"\n  releaseYear?: number | string\n  response: string\n  runtime?: string\n  starring?: string // Actors field in omdb\n  status?: string // released/Post\n  tagline?: string;\n  tmdbId?: number\n  title: string\n  type?: string // movie/tvmovie/series\n  video?: boolean; // unknown\n  // voteAverage: number; // tmdb votes\n  // voteCount: number; // tmdb votes\n  website?: string\n  writer?: string // omdb\n  [propName: string]: any;\n}\n\nexport interface IRating {\n  Source: string\n  Value: string\n}\n\nexport interface LibraryInfo {\n  tmdbId?: null | number | string\n  imdbID?: string\n  title?: string\n  year?: number\n  directoryList?: string[]\n  _id: string\n}\n\nexport interface MovieGenre {\n  id: number\n  code: string\n  description: string\n  isChecked: boolean\n}\n\nexport interface WatchList {\n  id: number\n  movieList: string[]\n}\n\nexport interface ILibraryInfo {\n  tmdbId?: null | number | string\n  imdbID?: string\n  title?: string\n  year?: number\n  directoryList?: string[]\n  _id: string\n}\n\nexport interface ICollection {\n  id: number,\n  name: string\n}\n\nexport interface IProductionCompany {\n  id: number;\n  logo_path: null | string;\n  name: string;\n  origin_country: string;\n}\n\nexport interface IProductionCountry {\n  iso_3166_1: string;\n  name: string;\n}\n\nexport interface ISpokenLanguage {\n  iso_639_1: string;\n  name: string;\n}\n\nexport interface IOmdbMovieDetail {\n  Title: string\n  Year?: string\n  Rated?: string\n  Released?: string // \"05 May 2017\"\n  Runtime?: string\n  Genre?: string\n  Director?: string\n  Writer?: string\n  Actors?: string\n  Plot?: string\n  Language?: string\n  Country?: string\n  Awards?: string\n  Poster?: string\n  Ratings?: IRating[]\n  Metascore?: string\n  imdbRating?: string\n  imdbVotes?: string\n  imdbID: string\n  Type?: string\n  DVD?: string\n  BoxOffice?: string\n  Production?: string\n  Website?: string\n  Response: string\n}\n\nexport interface ITmdbMovieDetail {\n  adult: boolean;\n  backdrop_path: string;\n  belongs_to_collection: null;\n  budget: number;\n  genres: IGenre[];\n  homepage: string;\n  id: number;\n  imdb_id: string;\n  original_language: string;\n  original_title: string;\n  overview: string;\n  popularity: number;\n  poster_path: string;\n  production_companies: IProductionCompany[];\n  production_countries: IProductionCountry[];\n  release_date: string;\n  revenue: number;\n  runtime: number;\n  spoken_languages: ISpokenLanguage[];\n  status: string;\n  tagline: string;\n  title: string;\n  video: boolean;\n  vote_average: number;\n  vote_count: number;\n}\n\nexport interface MdbMovieDetails {\n  adult?: boolean;\n  title: string\n  releaseYear?: string\n  releaseDate?: string\n  rated?: string // rated or certificate\n  runtime?: string\n  genres?: string\n  director?: string\n  writer?: string\n  Actors?: string\n  plot?: string // plot or overview\n  Language?: string\n  Country?: string\n  Awards?: string\n  Poster?: string\n  Ratings?: IRating[]\n  Metascore?: string\n  imdbRating?: string\n  imdbVotes?: string\n  imdbID: string\n  tmdbID: number\n  Type?: string\n  DVD?: string\n  BoxOffice?: string\n  Production?: string\n  website?: string\n  response: string\n  libraryInfo?: ILibraryInfo\n}\n\n// // adult: boolean;\n// //backdrop_path: string;\n// belongs_to_collection: null;\n// // budget: number;\n// genres: Genre[];\n// // homepage: string;\n// // id: number;\n// // imdb_id: string;\n// original_language: string;\n// original_title: string;\n// // overview: string;\n// // popularity: number;\n// // poster_path: string;\n// production_companies: ProductionCompany[];\n// production_countries: ProductionCountry[];\n// // release_date: string;\n// // revenue: number;\n// // runtime: number;\n// spoken_languages: SpokenLanguage[];\n// // status: string;\n// // tagline: string;\n// // title: string;\n// // video: boolean;\n// // vote_average: number;\n// // vote_count: number;\n\nexport interface ITmdbResultObject {\n  page: number;\n  total_results: number;\n  total_pages: number;\n  results: ITmdbResult[];\n}\n\nexport interface ITmdbResult {\n  popularity: number\n  vote_count: number\n  video: boolean\n  poster_path: string\n  id: number\n  adult: boolean\n  backdrop_path: string\n  original_language: string\n  original_title: string\n  genre_ids: number[]\n  title: string\n  vote_average: number\n  overview: string\n  release_date: string\n  isAvailable?: boolean\n  isHighlighted?: boolean\n}\n\nexport interface ILibraryMovie {\n  tmdbId?: number,\n  title: string,\n  year: number,\n  imdbId?: string,\n  directory: string[]\n}\n\nexport interface IGenre {\n  id: number\n  name: string\n}\n\nexport interface Credits {\n  id: number;\n  cast: CastElement[];\n  crew: Crew[];\n}\n\ninterface CastElement {\n  cast_id: number;\n  character: string;\n  credit_id: string;\n  gender: number;\n  id: number;\n  name: string;\n  order: number;\n  profile_path: null | string;\n}\n\ninterface Crew {\n  credit_id: string;\n  department: Department;\n  gender: number;\n  id: number;\n  job: string;\n  name: string;\n  profile_path: null | string;\n}\n\nexport enum Department {\n  Art = 'Art',\n  Camera = 'Camera',\n  CostumeMakeUp = 'Costume & Make-Up',\n  Crew = 'Crew',\n  Directing = 'Directing',\n  Editing = 'Editing',\n  Lighting = 'Lighting',\n  Production = 'Production',\n  Sound = 'Sound',\n  VisualEffects = 'Visual Effects',\n  Writing = 'Writing',\n}\n\nexport class MDBTorrent {\n  id?: string\n  name?: string\n  size?: string\n  hash: string\n  url?: string\n  quality?: string\n  type?: string\n  seeds?: number\n  peers?: number\n  sizeBytes?: number\n  added?: string\n  dateUploaded?: string\n  dateUploadedUnix?: number\n  isYts?: boolean\n  magnetLink?: string\n}\n\nexport class ITPBTorrent {\n  id?: number\n  name?: string\n  hash: string\n  sizeBytes?: number\n  added?: string\n}\n\nexport interface ISearch {\n  page: number\n}\n\nexport enum OmdbParameters {\n  ApiKey = 'apikey',\n  ImdbId = 'i',\n  Title = 't',\n  Type = 'type',\n  Year = 'y',\n  Plot = 'plot',\n  Return = 'r',\n  Callback = 'callback',\n  Version = 'v',\n}\n\nexport enum TmdbParameters {\n  ApiKey = 'api_key',\n  AppendToResponse = 'append_to_response',\n  Language = 'language',\n  Region = 'region',\n  SortBy = 'sort_by',\n  CertificationCountry = 'certification_country',\n  Certification = 'certification',\n  CertificationLess = 'certification.lte',\n  CertificationGreater = 'certification.gte',\n  IncludeAdult = 'include_adult',\n  IncludeVideo = 'include_video',\n  Page = 'page',\n  PrimaryReleaseYear = 'primary_release_year',\n  PrimaryReleaseDateGreater = 'primary_release_date.gte',\n  PrimaryReleaseDateLess = 'primary_release_date.lte',\n  ReleaseDateGreater = 'release_date.gte',\n  ReleaseDateLess = 'release_date.lte',\n  WithReleaseType = 'with_release_type',\n  Year = 'year',\n  VoteCountGreater = 'vote_count.gte',\n  VoteCountLess = 'vote_count.lte',\n  VoteAverageGreater = 'vote_average.gte',\n  VoteAverageLess = 'vote_average.lte',\n  WithCast = 'with_cast',\n  WithCrew = 'with_crew',\n  WithPeople = 'with_people',\n  WithCompanies = 'with_companies',\n  WithGenres = 'with_genres',\n  WithoutGenres = 'without_genres',\n  WithKeywords = 'with_keywords',\n  WithoutKeywords = 'without_keywords',\n  WithRuntimeGreater = 'with_runtime.gte',\n  WithRuntimeLess = 'with_runtime.lte',\n  WithOriginalLanguage = 'with_original_language',\n  WithWatchProviders = 'with_watch_providers',\n  WatchRegion = 'watch_region'\n}\n\nexport enum TmdbSearchMovieParameters {\n  ApiKey = 'api_key',\n  Language = 'language', // Pass a ISO 639 - 1 value to display translated data for the fields that support it. minLength: 2 pattern: ([a - z]{ 2 }) -([A - Z]{ 2 }) default: en - US\n  Query = 'query',\n  Page = 'page', // minimum: 1 maximum: 1000\n  IncludeAdult = 'include_adult',\n  Region = 'region',\n  // Specify a ISO 3166 - 1 code to filter release dates.Must be uppercase. pattern: ^ [A - Z]{ 2 } $\n  Year = 'year',\n  PrimaryReleaseYear = 'primary_release_year'\n}\n\nenum TmdbAppendToResponseParameters {\n  AccountStates = 'account_states',\n  Videos = 'videos',\n  Images = 'images',\n  Credits = 'credits',\n  Changes = 'changes',\n  Translations = 'translations',\n  Similar = 'similar',\n  ExternalIds = 'external_ids',\n  AlternativeTitles = 'alternative_titles',\n  Keywords = 'keywords',\n  Reviews = 'reviews',\n  Recommendations = 'recommendations',\n  ReleaseDates = 'release_dates',\n  Lists = 'lists'\n}\n\nenum TmdbReleaseTypes {\n  PREMIERE = 'Premiere',  // 1\n  THEATRICAL_LIMITED = 'Theatrical(limited)', // 2\n  THEATRICAL = 'Theatrical', // 3\n  DIGITAL = 'Digital', // 4\n  PHYSICAL = 'Physical', // 5\n  TV = 'TV', // 6\n}\n\nexport interface IPersonDetails {\n  birthday: string;\n  known_for_department: string;\n  id: number;\n  movie_credits?: IPersonCredits;\n  tv_credits?: IPersonCredits;\n  combined_credits?: IPersonCredits;\n  homepage?: any;\n  profile_path: string;\n  imdb_id: string;\n  deathday?: any;\n  images?: IImages;\n  external_ids?: IExternalids;\n  name: string;\n  also_known_as: string[];\n  biography: string;\n  adult: boolean;\n  gender: number;\n  place_of_birth: string;\n  popularity: number;\n}\n\nexport interface IPersonCredits {\n  cast: IPersonCastCrew[];\n  crew: IPersonCastCrew[];\n  id?: number;\n}\n\nexport interface IPersonCastCrew {\n  id?: number;\n  original_language: string;\n  episode_count?: number;\n  overview: string;\n  origin_country?: string[];\n  original_name?: string;\n  genre_ids: number[];\n  name?: string;\n  media_type: string;\n  poster_path: null | string;\n  first_air_date?: string;\n  vote_average: number;\n  vote_count: number;\n  character?: string;\n  backdrop_path: null | string;\n  popularity: number;\n  credit_id: string;\n  original_title?: string;\n  video?: boolean;\n  release_date?: string;\n  title?: string;\n  adult?: boolean;\n  department?: string;\n  job?: string;\n}\n\nexport interface IExternalids {\n  id?: number;\n  freebase_id: string;\n  instagram_id: string;\n  tvrage_id: number;\n  twitter_id: string;\n  freebase_mid: string;\n  imdb_id: string;\n  facebook_id: string;\n}\n\nexport interface IImages {\n  id?: number;\n  profiles: IProfile[];\n}\n\nexport interface IProfile {\n  iso_639_1?: any;\n  aspect_ratio: number;\n  vote_count: number;\n  height: number;\n  vote_average: number;\n  file_path: string;\n  width: number;\n}\n\nexport interface ICredits {\n  cast: ICast[];\n  crew: ICrew[];\n}\n\ninterface ICast {\n  poster_path?: string;\n  adult: boolean;\n  backdrop_path?: string;\n  vote_count: number;\n  video: boolean;\n  id: number;\n  media_type?: string;\n  popularity: number;\n  genre_ids: number[];\n  original_language: string;\n  title: string;\n  original_title: string;\n  release_date: string;\n  character: string;\n  vote_average: number;\n  overview: string;\n  credit_id: string;\n}\n\ninterface ICrew {\n  id: number;\n  department: string;\n  original_language: string;\n  original_title: string;\n  job: string;\n  overview: string;\n  genre_ids: number[];\n  video: boolean;\n  episode_count: number\n  media_type?: string;\n  credit_id: string;\n  poster_path?: string;\n  popularity: number;\n  backdrop_path?: string;\n  vote_count: number;\n  title: string;\n  adult: boolean;\n  vote_average: number;\n  release_date: string;\n}\n\nexport interface IUserSavedData {\n  id?: string,\n  title: string,\n  year: number,\n  tmdbId: number,\n}\n\nexport enum GenreCodes {\n  Action = 28,\n  Adventure = 12,\n  Animation = 16,\n  Comedy = 35,\n  Crime = 80,\n  Documentary = 99,\n  Drama = 18,\n  Family = 10751,\n  Fantasy = 14,\n  History = 36,\n  Horror = 27,\n  Music = 10402,\n  Mystery = 9648,\n  Romance = 10749,\n  ScienceFiction = 878,\n  TVMovie = 10770,\n  Thriller = 53,\n  War = 10752,\n  Western = 37,\n  // mdb reserved\n  FilmNoir = 20000,\n  // similar genre: Music id:10402\n  Musical = 20001,\n  News = 20002,\n  RealityTV = 20003,\n  // similar genre: Science Fiction id:878\n  SciFi = 20004,\n  // another media type\n  Short = 20005,\n  Sport = 20006,\n}\n\n\n\n/**\nexport enum Department {\n    Art = \"Art\",\n    Camera = \"Camera\",\n    CostumeMakeUp = \"Costume & Make-Up\",\n    Crew = \"Crew\",\n    Directing = \"Directing\",\n    Editing = \"Editing\",\n    Lighting = \"Lighting\",\n    Production = \"Production\",\n    Sound = \"Sound\",\n    VisualEffects = \"Visual Effects\",\n    Writing = \"Writing\",\n}\n\nexport interface ExternalIDS {\n    imdb_id:      string;\n    facebook_id:  null;\n    instagram_id: null;\n    twitter_id:   null;\n}\n\nexport interface Genre {\n    id:   number;\n    name: string;\n}\n\nexport interface Images {\n    backdrops: any[];\n    posters:   any[];\n}\n\nexport enum OriginalLanguage {\n    En = \"en\",\n    Es = \"es\",\n    Fr = \"fr\",\n}\n\nexport interface ProductionCompany {\n    id:             number;\n    logo_path:      string;\n    name:           string;\n    origin_country: string;\n}\n\nexport interface ProductionCountry {\n    iso_3166_1: string;\n    name:       string;\n}\n\nexport interface Recommendations {\n    page:          number;\n    results:       RecommendationsResult[];\n    total_pages:   number;\n    total_results: number;\n}\n\nexport interface RecommendationsResult {\n    id:                number;\n    video:             boolean;\n    vote_count:        number;\n    vote_average:      number;\n    title:             string;\n    release_date:      string;\n    original_language: OriginalLanguage;\n    original_title:    string;\n    genre_ids:         number[];\n    backdrop_path:     string;\n    adult:             boolean;\n    overview:          string;\n    poster_path:       string;\n    popularity:        number;\n}\n\nexport interface SpokenLanguage {\n    iso_639_1: OriginalLanguage;\n    name:      string;\n}\n\nexport interface Videos {\n    results: VideosResult[];\n}\n\nexport interface VideosResult {\n    id:         string;\n    iso_639_1:  OriginalLanguage;\n    iso_3166_1: string;\n    key:        string;\n    name:       string;\n    site:       string;\n    size:       number;\n    type:       string;\n}\n */\n\n",
            "properties": [
                {
                    "name": "cast",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ICast[]",
                    "optional": false,
                    "description": "",
                    "line": 497
                },
                {
                    "name": "crew",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ICrew[]",
                    "optional": false,
                    "description": "",
                    "line": 498
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ICredits",
            "id": "interface-ICredits-ab3c214285c1bfb717ed3d3b0126b69c830be2c667b8ea1793b5a95dd2f4bb2586d106c6397d01b558a5443d11988665d988e81d61dce2a7c48ca0eb54dacd73-1",
            "file": "src/app/models/mdb-movie.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Department, IRating } from \"./interfaces\"\nimport { TMDB_External_Id } from \"./tmdb-external-id.model\"\nimport { IProfileData } from \"./profile-data.model\"\n\nexport class MDBMovie {\n  mdbId: string\n  imdbId: string\n  tmdbId: number\n  title: string\n  originalTitle: string\n  originalLanguage: string\n  overview: string\n  popularity: number\n  posterPath: string\n  userData: IProfileData\n  backropPath: string\n  credits: ICredits\n  rating: IRating\n  isAdult: boolean\n  vote: IVote\n  releaseDate: string\n  runtime: number // runtme by minutes\n  status: string\n  tagline: string\n  externalIds: TMDB_External_Id\n  genres: any\n  genreIds: number[]\n  // not used much\n  budget: number\n  website: string\n  revenue: number\n  spokenLanguages: any\n  video: boolean\n  // to map further\n  recommendations: any\n  images: any\n  videos: any\n  productionCompanies: any\n  collection: any\n  productionCountries: any\n  releaseDates: any\n\n  constructor(value?: any) {\n    if (value != null) {\n      this.mapToObject(value)\n    }\n  }\n\n  private nestMapper(val: any, ...args) {\n    let toReturn = null\n    try {\n      if (this.getNested(val, args))\n        toReturn = val\n    } catch {\n      toReturn = null\n    }\n    return toReturn\n  }\n\n  getNested(obj, ...args) {\n    return args.reduce((obj, level) => obj && obj[level], obj)\n  }\n  /**\n   * https://stackoverflow.com/questions/47632430/pattern-for-dealing-with-mapping-api-objects-to-ui-model-objects\n   * @param value orig value\n   * @param source tmdb, mdb or omdb\n   */\n  private mapToObject(value: any, source?: string) {\n\n    this.imdbId = value['imdb_id'] || value['imdbId']\n    this.tmdbId = value['id'] || value['tmdbId']\n    this.mdbId = value['tmdbId'] || value['id']\n    this.title = value['title']\n    this.originalTitle = value['original_language'] || value['originalTitle']\n    this.originalLanguage = value['original_title'] || value['originalLanguage']\n    this.overview = value['overview'] || value['plot']\n    this.posterPath = value['poster_path'] || value['posterPath']\n    // this.userData = value['userData'] || value['plot']\n    this.backropPath = value['backdrop_path'] || value['backropPath']\n    this.credits = value['credits']\n    this.rating = value['overview'] || value['plot']\n    this.isAdult = value['adult'] || value['isAdult']\n    this.vote = {\n      voteAverage: value['vote_average'] || this.nestMapper(value, 'vote', 'voteAverage'),\n      voteCount: value['vote_count'] || this.nestMapper(value, 'vote', 'voteCount')\n    }\n    this.releaseDate = value['release_date'] || value['releaseDate']\n    this.runtime = value['runtime']\n    this.status = value['status']\n    this.tagline = value['tagline']\n    this.externalIds = value['external_ids'] || value['externalIds']\n    this.genres = value['genres']\n    this.genreIds = value['genre_ids']\n\n    this.budget = value['budget']\n    this.website = value['homepage'] || value['Website']\n    this.revenue = value['revenue']\n    this.spokenLanguages = value['spoken_languages'] || value['spokenLanguages']\n    this.video = value['video']\n\n    this.recommendations = value['recommendations']\n    this.images = value['images']\n    this.videos = value['videos']\n    this.productionCompanies = value['production_companies'] || value['productionCompanies']\n    this.collection = value['belongs_to_collection'] || value['collection']\n    this.productionCountries = value['production_countries'] || value['productionCountries']\n    this.releaseDates = value['release_dates'] || value['releaseDates']\n\n  }\n}\n\nexport interface ICredits {\n  id: number;\n  cast: ICast[];\n  crew: ICrew[];\n}\n\ninterface ICast {\n  castId: number;\n  character: string;\n  credit_id: string;\n  gender: number;\n  id: number;\n  name: string;\n  order: number;\n  profilePath: null | string;\n}\n\ninterface ICrew {\n  creditId: string;\n  department: Department;\n  gender: number;\n  id: number;\n  job: string;\n  name: string;\n  profilePath: null | string;\n}\n\n\ninterface IVote {\n  voteCount: number\n  voteAverage: number\n}\n",
            "properties": [
                {
                    "name": "cast",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ICast[]",
                    "optional": false,
                    "description": "",
                    "line": 114
                },
                {
                    "name": "crew",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ICrew[]",
                    "optional": false,
                    "description": "",
                    "line": 115
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 113
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ICredits-1"
        },
        {
            "name": "ICrew",
            "id": "interface-ICrew-584d54738f93e2af94202069b5eddb4cab23bb2dfec2ff69f24ebaf881c252f94680b4cd6cec302796817692570a31bedafc5d74fed1cf6488a895dbf372e23d",
            "file": "src/app/models/interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IMdbMovieDetails {\n  awards?: string\n  backgroundPath: string;\n  belongsToCollection?: []\n  boxOffice?: string | number // tmdb:revenue(number)\n  budget?: number\n  country?: string\n  director?: string\n  dvd?: string // dvd release\n  genres?: string[] | string | IGenre[]\n  imdbId?: string\n  imdbRating?: string\n  imdbVotes?: string\n  isAdult?: boolean;\n  isAvailable?: boolean;\n  languages?: string[]\n  libraryInfo?: ILibraryInfo\n  metascore?: string // metacritic score\\\n  originalLanguage?: string // tmdb:\"en\",omdb:\"English\"\n  originalTitle?: string\n  plot?: string // plot or overview\n  popularity?: number\n  posterPath: string\n  production?: string // company; i.e. Walt Disney Pictures\n  rated?: string // rated or certificate\n  ratings?: IRating[]\n  releaseDate?: string // omdb:\"05 May 2017\"; tmdb:\"1999-10-15\"\n  releaseYear?: number | string\n  response: string\n  runtime?: string\n  starring?: string // Actors field in omdb\n  status?: string // released/Post\n  tagline?: string;\n  tmdbId?: number\n  title: string\n  type?: string // movie/tvmovie/series\n  video?: boolean; // unknown\n  // voteAverage: number; // tmdb votes\n  // voteCount: number; // tmdb votes\n  website?: string\n  writer?: string // omdb\n  [propName: string]: any;\n}\n\nexport interface IRating {\n  Source: string\n  Value: string\n}\n\nexport interface LibraryInfo {\n  tmdbId?: null | number | string\n  imdbID?: string\n  title?: string\n  year?: number\n  directoryList?: string[]\n  _id: string\n}\n\nexport interface MovieGenre {\n  id: number\n  code: string\n  description: string\n  isChecked: boolean\n}\n\nexport interface WatchList {\n  id: number\n  movieList: string[]\n}\n\nexport interface ILibraryInfo {\n  tmdbId?: null | number | string\n  imdbID?: string\n  title?: string\n  year?: number\n  directoryList?: string[]\n  _id: string\n}\n\nexport interface ICollection {\n  id: number,\n  name: string\n}\n\nexport interface IProductionCompany {\n  id: number;\n  logo_path: null | string;\n  name: string;\n  origin_country: string;\n}\n\nexport interface IProductionCountry {\n  iso_3166_1: string;\n  name: string;\n}\n\nexport interface ISpokenLanguage {\n  iso_639_1: string;\n  name: string;\n}\n\nexport interface IOmdbMovieDetail {\n  Title: string\n  Year?: string\n  Rated?: string\n  Released?: string // \"05 May 2017\"\n  Runtime?: string\n  Genre?: string\n  Director?: string\n  Writer?: string\n  Actors?: string\n  Plot?: string\n  Language?: string\n  Country?: string\n  Awards?: string\n  Poster?: string\n  Ratings?: IRating[]\n  Metascore?: string\n  imdbRating?: string\n  imdbVotes?: string\n  imdbID: string\n  Type?: string\n  DVD?: string\n  BoxOffice?: string\n  Production?: string\n  Website?: string\n  Response: string\n}\n\nexport interface ITmdbMovieDetail {\n  adult: boolean;\n  backdrop_path: string;\n  belongs_to_collection: null;\n  budget: number;\n  genres: IGenre[];\n  homepage: string;\n  id: number;\n  imdb_id: string;\n  original_language: string;\n  original_title: string;\n  overview: string;\n  popularity: number;\n  poster_path: string;\n  production_companies: IProductionCompany[];\n  production_countries: IProductionCountry[];\n  release_date: string;\n  revenue: number;\n  runtime: number;\n  spoken_languages: ISpokenLanguage[];\n  status: string;\n  tagline: string;\n  title: string;\n  video: boolean;\n  vote_average: number;\n  vote_count: number;\n}\n\nexport interface MdbMovieDetails {\n  adult?: boolean;\n  title: string\n  releaseYear?: string\n  releaseDate?: string\n  rated?: string // rated or certificate\n  runtime?: string\n  genres?: string\n  director?: string\n  writer?: string\n  Actors?: string\n  plot?: string // plot or overview\n  Language?: string\n  Country?: string\n  Awards?: string\n  Poster?: string\n  Ratings?: IRating[]\n  Metascore?: string\n  imdbRating?: string\n  imdbVotes?: string\n  imdbID: string\n  tmdbID: number\n  Type?: string\n  DVD?: string\n  BoxOffice?: string\n  Production?: string\n  website?: string\n  response: string\n  libraryInfo?: ILibraryInfo\n}\n\n// // adult: boolean;\n// //backdrop_path: string;\n// belongs_to_collection: null;\n// // budget: number;\n// genres: Genre[];\n// // homepage: string;\n// // id: number;\n// // imdb_id: string;\n// original_language: string;\n// original_title: string;\n// // overview: string;\n// // popularity: number;\n// // poster_path: string;\n// production_companies: ProductionCompany[];\n// production_countries: ProductionCountry[];\n// // release_date: string;\n// // revenue: number;\n// // runtime: number;\n// spoken_languages: SpokenLanguage[];\n// // status: string;\n// // tagline: string;\n// // title: string;\n// // video: boolean;\n// // vote_average: number;\n// // vote_count: number;\n\nexport interface ITmdbResultObject {\n  page: number;\n  total_results: number;\n  total_pages: number;\n  results: ITmdbResult[];\n}\n\nexport interface ITmdbResult {\n  popularity: number\n  vote_count: number\n  video: boolean\n  poster_path: string\n  id: number\n  adult: boolean\n  backdrop_path: string\n  original_language: string\n  original_title: string\n  genre_ids: number[]\n  title: string\n  vote_average: number\n  overview: string\n  release_date: string\n  isAvailable?: boolean\n  isHighlighted?: boolean\n}\n\nexport interface ILibraryMovie {\n  tmdbId?: number,\n  title: string,\n  year: number,\n  imdbId?: string,\n  directory: string[]\n}\n\nexport interface IGenre {\n  id: number\n  name: string\n}\n\nexport interface Credits {\n  id: number;\n  cast: CastElement[];\n  crew: Crew[];\n}\n\ninterface CastElement {\n  cast_id: number;\n  character: string;\n  credit_id: string;\n  gender: number;\n  id: number;\n  name: string;\n  order: number;\n  profile_path: null | string;\n}\n\ninterface Crew {\n  credit_id: string;\n  department: Department;\n  gender: number;\n  id: number;\n  job: string;\n  name: string;\n  profile_path: null | string;\n}\n\nexport enum Department {\n  Art = 'Art',\n  Camera = 'Camera',\n  CostumeMakeUp = 'Costume & Make-Up',\n  Crew = 'Crew',\n  Directing = 'Directing',\n  Editing = 'Editing',\n  Lighting = 'Lighting',\n  Production = 'Production',\n  Sound = 'Sound',\n  VisualEffects = 'Visual Effects',\n  Writing = 'Writing',\n}\n\nexport class MDBTorrent {\n  id?: string\n  name?: string\n  size?: string\n  hash: string\n  url?: string\n  quality?: string\n  type?: string\n  seeds?: number\n  peers?: number\n  sizeBytes?: number\n  added?: string\n  dateUploaded?: string\n  dateUploadedUnix?: number\n  isYts?: boolean\n  magnetLink?: string\n}\n\nexport class ITPBTorrent {\n  id?: number\n  name?: string\n  hash: string\n  sizeBytes?: number\n  added?: string\n}\n\nexport interface ISearch {\n  page: number\n}\n\nexport enum OmdbParameters {\n  ApiKey = 'apikey',\n  ImdbId = 'i',\n  Title = 't',\n  Type = 'type',\n  Year = 'y',\n  Plot = 'plot',\n  Return = 'r',\n  Callback = 'callback',\n  Version = 'v',\n}\n\nexport enum TmdbParameters {\n  ApiKey = 'api_key',\n  AppendToResponse = 'append_to_response',\n  Language = 'language',\n  Region = 'region',\n  SortBy = 'sort_by',\n  CertificationCountry = 'certification_country',\n  Certification = 'certification',\n  CertificationLess = 'certification.lte',\n  CertificationGreater = 'certification.gte',\n  IncludeAdult = 'include_adult',\n  IncludeVideo = 'include_video',\n  Page = 'page',\n  PrimaryReleaseYear = 'primary_release_year',\n  PrimaryReleaseDateGreater = 'primary_release_date.gte',\n  PrimaryReleaseDateLess = 'primary_release_date.lte',\n  ReleaseDateGreater = 'release_date.gte',\n  ReleaseDateLess = 'release_date.lte',\n  WithReleaseType = 'with_release_type',\n  Year = 'year',\n  VoteCountGreater = 'vote_count.gte',\n  VoteCountLess = 'vote_count.lte',\n  VoteAverageGreater = 'vote_average.gte',\n  VoteAverageLess = 'vote_average.lte',\n  WithCast = 'with_cast',\n  WithCrew = 'with_crew',\n  WithPeople = 'with_people',\n  WithCompanies = 'with_companies',\n  WithGenres = 'with_genres',\n  WithoutGenres = 'without_genres',\n  WithKeywords = 'with_keywords',\n  WithoutKeywords = 'without_keywords',\n  WithRuntimeGreater = 'with_runtime.gte',\n  WithRuntimeLess = 'with_runtime.lte',\n  WithOriginalLanguage = 'with_original_language',\n  WithWatchProviders = 'with_watch_providers',\n  WatchRegion = 'watch_region'\n}\n\nexport enum TmdbSearchMovieParameters {\n  ApiKey = 'api_key',\n  Language = 'language', // Pass a ISO 639 - 1 value to display translated data for the fields that support it. minLength: 2 pattern: ([a - z]{ 2 }) -([A - Z]{ 2 }) default: en - US\n  Query = 'query',\n  Page = 'page', // minimum: 1 maximum: 1000\n  IncludeAdult = 'include_adult',\n  Region = 'region',\n  // Specify a ISO 3166 - 1 code to filter release dates.Must be uppercase. pattern: ^ [A - Z]{ 2 } $\n  Year = 'year',\n  PrimaryReleaseYear = 'primary_release_year'\n}\n\nenum TmdbAppendToResponseParameters {\n  AccountStates = 'account_states',\n  Videos = 'videos',\n  Images = 'images',\n  Credits = 'credits',\n  Changes = 'changes',\n  Translations = 'translations',\n  Similar = 'similar',\n  ExternalIds = 'external_ids',\n  AlternativeTitles = 'alternative_titles',\n  Keywords = 'keywords',\n  Reviews = 'reviews',\n  Recommendations = 'recommendations',\n  ReleaseDates = 'release_dates',\n  Lists = 'lists'\n}\n\nenum TmdbReleaseTypes {\n  PREMIERE = 'Premiere',  // 1\n  THEATRICAL_LIMITED = 'Theatrical(limited)', // 2\n  THEATRICAL = 'Theatrical', // 3\n  DIGITAL = 'Digital', // 4\n  PHYSICAL = 'Physical', // 5\n  TV = 'TV', // 6\n}\n\nexport interface IPersonDetails {\n  birthday: string;\n  known_for_department: string;\n  id: number;\n  movie_credits?: IPersonCredits;\n  tv_credits?: IPersonCredits;\n  combined_credits?: IPersonCredits;\n  homepage?: any;\n  profile_path: string;\n  imdb_id: string;\n  deathday?: any;\n  images?: IImages;\n  external_ids?: IExternalids;\n  name: string;\n  also_known_as: string[];\n  biography: string;\n  adult: boolean;\n  gender: number;\n  place_of_birth: string;\n  popularity: number;\n}\n\nexport interface IPersonCredits {\n  cast: IPersonCastCrew[];\n  crew: IPersonCastCrew[];\n  id?: number;\n}\n\nexport interface IPersonCastCrew {\n  id?: number;\n  original_language: string;\n  episode_count?: number;\n  overview: string;\n  origin_country?: string[];\n  original_name?: string;\n  genre_ids: number[];\n  name?: string;\n  media_type: string;\n  poster_path: null | string;\n  first_air_date?: string;\n  vote_average: number;\n  vote_count: number;\n  character?: string;\n  backdrop_path: null | string;\n  popularity: number;\n  credit_id: string;\n  original_title?: string;\n  video?: boolean;\n  release_date?: string;\n  title?: string;\n  adult?: boolean;\n  department?: string;\n  job?: string;\n}\n\nexport interface IExternalids {\n  id?: number;\n  freebase_id: string;\n  instagram_id: string;\n  tvrage_id: number;\n  twitter_id: string;\n  freebase_mid: string;\n  imdb_id: string;\n  facebook_id: string;\n}\n\nexport interface IImages {\n  id?: number;\n  profiles: IProfile[];\n}\n\nexport interface IProfile {\n  iso_639_1?: any;\n  aspect_ratio: number;\n  vote_count: number;\n  height: number;\n  vote_average: number;\n  file_path: string;\n  width: number;\n}\n\nexport interface ICredits {\n  cast: ICast[];\n  crew: ICrew[];\n}\n\ninterface ICast {\n  poster_path?: string;\n  adult: boolean;\n  backdrop_path?: string;\n  vote_count: number;\n  video: boolean;\n  id: number;\n  media_type?: string;\n  popularity: number;\n  genre_ids: number[];\n  original_language: string;\n  title: string;\n  original_title: string;\n  release_date: string;\n  character: string;\n  vote_average: number;\n  overview: string;\n  credit_id: string;\n}\n\ninterface ICrew {\n  id: number;\n  department: string;\n  original_language: string;\n  original_title: string;\n  job: string;\n  overview: string;\n  genre_ids: number[];\n  video: boolean;\n  episode_count: number\n  media_type?: string;\n  credit_id: string;\n  poster_path?: string;\n  popularity: number;\n  backdrop_path?: string;\n  vote_count: number;\n  title: string;\n  adult: boolean;\n  vote_average: number;\n  release_date: string;\n}\n\nexport interface IUserSavedData {\n  id?: string,\n  title: string,\n  year: number,\n  tmdbId: number,\n}\n\nexport enum GenreCodes {\n  Action = 28,\n  Adventure = 12,\n  Animation = 16,\n  Comedy = 35,\n  Crime = 80,\n  Documentary = 99,\n  Drama = 18,\n  Family = 10751,\n  Fantasy = 14,\n  History = 36,\n  Horror = 27,\n  Music = 10402,\n  Mystery = 9648,\n  Romance = 10749,\n  ScienceFiction = 878,\n  TVMovie = 10770,\n  Thriller = 53,\n  War = 10752,\n  Western = 37,\n  // mdb reserved\n  FilmNoir = 20000,\n  // similar genre: Music id:10402\n  Musical = 20001,\n  News = 20002,\n  RealityTV = 20003,\n  // similar genre: Science Fiction id:878\n  SciFi = 20004,\n  // another media type\n  Short = 20005,\n  Sport = 20006,\n}\n\n\n\n/**\nexport enum Department {\n    Art = \"Art\",\n    Camera = \"Camera\",\n    CostumeMakeUp = \"Costume & Make-Up\",\n    Crew = \"Crew\",\n    Directing = \"Directing\",\n    Editing = \"Editing\",\n    Lighting = \"Lighting\",\n    Production = \"Production\",\n    Sound = \"Sound\",\n    VisualEffects = \"Visual Effects\",\n    Writing = \"Writing\",\n}\n\nexport interface ExternalIDS {\n    imdb_id:      string;\n    facebook_id:  null;\n    instagram_id: null;\n    twitter_id:   null;\n}\n\nexport interface Genre {\n    id:   number;\n    name: string;\n}\n\nexport interface Images {\n    backdrops: any[];\n    posters:   any[];\n}\n\nexport enum OriginalLanguage {\n    En = \"en\",\n    Es = \"es\",\n    Fr = \"fr\",\n}\n\nexport interface ProductionCompany {\n    id:             number;\n    logo_path:      string;\n    name:           string;\n    origin_country: string;\n}\n\nexport interface ProductionCountry {\n    iso_3166_1: string;\n    name:       string;\n}\n\nexport interface Recommendations {\n    page:          number;\n    results:       RecommendationsResult[];\n    total_pages:   number;\n    total_results: number;\n}\n\nexport interface RecommendationsResult {\n    id:                number;\n    video:             boolean;\n    vote_count:        number;\n    vote_average:      number;\n    title:             string;\n    release_date:      string;\n    original_language: OriginalLanguage;\n    original_title:    string;\n    genre_ids:         number[];\n    backdrop_path:     string;\n    adult:             boolean;\n    overview:          string;\n    poster_path:       string;\n    popularity:        number;\n}\n\nexport interface SpokenLanguage {\n    iso_639_1: OriginalLanguage;\n    name:      string;\n}\n\nexport interface Videos {\n    results: VideosResult[];\n}\n\nexport interface VideosResult {\n    id:         string;\n    iso_639_1:  OriginalLanguage;\n    iso_3166_1: string;\n    key:        string;\n    name:       string;\n    site:       string;\n    size:       number;\n    type:       string;\n}\n */\n\n",
            "properties": [
                {
                    "name": "adult",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 538
                },
                {
                    "name": "backdrop_path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 535
                },
                {
                    "name": "credit_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 532
                },
                {
                    "name": "department",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 523
                },
                {
                    "name": "episode_count",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 530
                },
                {
                    "name": "genre_ids",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 528
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 522
                },
                {
                    "name": "job",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 526
                },
                {
                    "name": "media_type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 531
                },
                {
                    "name": "original_language",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 524
                },
                {
                    "name": "original_title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 525
                },
                {
                    "name": "overview",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 527
                },
                {
                    "name": "popularity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 534
                },
                {
                    "name": "poster_path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 533
                },
                {
                    "name": "release_date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 540
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 537
                },
                {
                    "name": "video",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 529
                },
                {
                    "name": "vote_average",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 539
                },
                {
                    "name": "vote_count",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 536
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ICrew",
            "id": "interface-ICrew-ab3c214285c1bfb717ed3d3b0126b69c830be2c667b8ea1793b5a95dd2f4bb2586d106c6397d01b558a5443d11988665d988e81d61dce2a7c48ca0eb54dacd73-1",
            "file": "src/app/models/mdb-movie.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Department, IRating } from \"./interfaces\"\nimport { TMDB_External_Id } from \"./tmdb-external-id.model\"\nimport { IProfileData } from \"./profile-data.model\"\n\nexport class MDBMovie {\n  mdbId: string\n  imdbId: string\n  tmdbId: number\n  title: string\n  originalTitle: string\n  originalLanguage: string\n  overview: string\n  popularity: number\n  posterPath: string\n  userData: IProfileData\n  backropPath: string\n  credits: ICredits\n  rating: IRating\n  isAdult: boolean\n  vote: IVote\n  releaseDate: string\n  runtime: number // runtme by minutes\n  status: string\n  tagline: string\n  externalIds: TMDB_External_Id\n  genres: any\n  genreIds: number[]\n  // not used much\n  budget: number\n  website: string\n  revenue: number\n  spokenLanguages: any\n  video: boolean\n  // to map further\n  recommendations: any\n  images: any\n  videos: any\n  productionCompanies: any\n  collection: any\n  productionCountries: any\n  releaseDates: any\n\n  constructor(value?: any) {\n    if (value != null) {\n      this.mapToObject(value)\n    }\n  }\n\n  private nestMapper(val: any, ...args) {\n    let toReturn = null\n    try {\n      if (this.getNested(val, args))\n        toReturn = val\n    } catch {\n      toReturn = null\n    }\n    return toReturn\n  }\n\n  getNested(obj, ...args) {\n    return args.reduce((obj, level) => obj && obj[level], obj)\n  }\n  /**\n   * https://stackoverflow.com/questions/47632430/pattern-for-dealing-with-mapping-api-objects-to-ui-model-objects\n   * @param value orig value\n   * @param source tmdb, mdb or omdb\n   */\n  private mapToObject(value: any, source?: string) {\n\n    this.imdbId = value['imdb_id'] || value['imdbId']\n    this.tmdbId = value['id'] || value['tmdbId']\n    this.mdbId = value['tmdbId'] || value['id']\n    this.title = value['title']\n    this.originalTitle = value['original_language'] || value['originalTitle']\n    this.originalLanguage = value['original_title'] || value['originalLanguage']\n    this.overview = value['overview'] || value['plot']\n    this.posterPath = value['poster_path'] || value['posterPath']\n    // this.userData = value['userData'] || value['plot']\n    this.backropPath = value['backdrop_path'] || value['backropPath']\n    this.credits = value['credits']\n    this.rating = value['overview'] || value['plot']\n    this.isAdult = value['adult'] || value['isAdult']\n    this.vote = {\n      voteAverage: value['vote_average'] || this.nestMapper(value, 'vote', 'voteAverage'),\n      voteCount: value['vote_count'] || this.nestMapper(value, 'vote', 'voteCount')\n    }\n    this.releaseDate = value['release_date'] || value['releaseDate']\n    this.runtime = value['runtime']\n    this.status = value['status']\n    this.tagline = value['tagline']\n    this.externalIds = value['external_ids'] || value['externalIds']\n    this.genres = value['genres']\n    this.genreIds = value['genre_ids']\n\n    this.budget = value['budget']\n    this.website = value['homepage'] || value['Website']\n    this.revenue = value['revenue']\n    this.spokenLanguages = value['spoken_languages'] || value['spokenLanguages']\n    this.video = value['video']\n\n    this.recommendations = value['recommendations']\n    this.images = value['images']\n    this.videos = value['videos']\n    this.productionCompanies = value['production_companies'] || value['productionCompanies']\n    this.collection = value['belongs_to_collection'] || value['collection']\n    this.productionCountries = value['production_countries'] || value['productionCountries']\n    this.releaseDates = value['release_dates'] || value['releaseDates']\n\n  }\n}\n\nexport interface ICredits {\n  id: number;\n  cast: ICast[];\n  crew: ICrew[];\n}\n\ninterface ICast {\n  castId: number;\n  character: string;\n  credit_id: string;\n  gender: number;\n  id: number;\n  name: string;\n  order: number;\n  profilePath: null | string;\n}\n\ninterface ICrew {\n  creditId: string;\n  department: Department;\n  gender: number;\n  id: number;\n  job: string;\n  name: string;\n  profilePath: null | string;\n}\n\n\ninterface IVote {\n  voteCount: number\n  voteAverage: number\n}\n",
            "properties": [
                {
                    "name": "creditId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 130
                },
                {
                    "name": "department",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Department",
                    "optional": false,
                    "description": "",
                    "line": 131
                },
                {
                    "name": "gender",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 132
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 133
                },
                {
                    "name": "job",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 134
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 135
                },
                {
                    "name": "profilePath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "null | string",
                    "optional": false,
                    "description": "",
                    "line": 136
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ICrew-1"
        },
        {
            "name": "IExternalids",
            "id": "interface-IExternalids-584d54738f93e2af94202069b5eddb4cab23bb2dfec2ff69f24ebaf881c252f94680b4cd6cec302796817692570a31bedafc5d74fed1cf6488a895dbf372e23d",
            "file": "src/app/models/interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IMdbMovieDetails {\n  awards?: string\n  backgroundPath: string;\n  belongsToCollection?: []\n  boxOffice?: string | number // tmdb:revenue(number)\n  budget?: number\n  country?: string\n  director?: string\n  dvd?: string // dvd release\n  genres?: string[] | string | IGenre[]\n  imdbId?: string\n  imdbRating?: string\n  imdbVotes?: string\n  isAdult?: boolean;\n  isAvailable?: boolean;\n  languages?: string[]\n  libraryInfo?: ILibraryInfo\n  metascore?: string // metacritic score\\\n  originalLanguage?: string // tmdb:\"en\",omdb:\"English\"\n  originalTitle?: string\n  plot?: string // plot or overview\n  popularity?: number\n  posterPath: string\n  production?: string // company; i.e. Walt Disney Pictures\n  rated?: string // rated or certificate\n  ratings?: IRating[]\n  releaseDate?: string // omdb:\"05 May 2017\"; tmdb:\"1999-10-15\"\n  releaseYear?: number | string\n  response: string\n  runtime?: string\n  starring?: string // Actors field in omdb\n  status?: string // released/Post\n  tagline?: string;\n  tmdbId?: number\n  title: string\n  type?: string // movie/tvmovie/series\n  video?: boolean; // unknown\n  // voteAverage: number; // tmdb votes\n  // voteCount: number; // tmdb votes\n  website?: string\n  writer?: string // omdb\n  [propName: string]: any;\n}\n\nexport interface IRating {\n  Source: string\n  Value: string\n}\n\nexport interface LibraryInfo {\n  tmdbId?: null | number | string\n  imdbID?: string\n  title?: string\n  year?: number\n  directoryList?: string[]\n  _id: string\n}\n\nexport interface MovieGenre {\n  id: number\n  code: string\n  description: string\n  isChecked: boolean\n}\n\nexport interface WatchList {\n  id: number\n  movieList: string[]\n}\n\nexport interface ILibraryInfo {\n  tmdbId?: null | number | string\n  imdbID?: string\n  title?: string\n  year?: number\n  directoryList?: string[]\n  _id: string\n}\n\nexport interface ICollection {\n  id: number,\n  name: string\n}\n\nexport interface IProductionCompany {\n  id: number;\n  logo_path: null | string;\n  name: string;\n  origin_country: string;\n}\n\nexport interface IProductionCountry {\n  iso_3166_1: string;\n  name: string;\n}\n\nexport interface ISpokenLanguage {\n  iso_639_1: string;\n  name: string;\n}\n\nexport interface IOmdbMovieDetail {\n  Title: string\n  Year?: string\n  Rated?: string\n  Released?: string // \"05 May 2017\"\n  Runtime?: string\n  Genre?: string\n  Director?: string\n  Writer?: string\n  Actors?: string\n  Plot?: string\n  Language?: string\n  Country?: string\n  Awards?: string\n  Poster?: string\n  Ratings?: IRating[]\n  Metascore?: string\n  imdbRating?: string\n  imdbVotes?: string\n  imdbID: string\n  Type?: string\n  DVD?: string\n  BoxOffice?: string\n  Production?: string\n  Website?: string\n  Response: string\n}\n\nexport interface ITmdbMovieDetail {\n  adult: boolean;\n  backdrop_path: string;\n  belongs_to_collection: null;\n  budget: number;\n  genres: IGenre[];\n  homepage: string;\n  id: number;\n  imdb_id: string;\n  original_language: string;\n  original_title: string;\n  overview: string;\n  popularity: number;\n  poster_path: string;\n  production_companies: IProductionCompany[];\n  production_countries: IProductionCountry[];\n  release_date: string;\n  revenue: number;\n  runtime: number;\n  spoken_languages: ISpokenLanguage[];\n  status: string;\n  tagline: string;\n  title: string;\n  video: boolean;\n  vote_average: number;\n  vote_count: number;\n}\n\nexport interface MdbMovieDetails {\n  adult?: boolean;\n  title: string\n  releaseYear?: string\n  releaseDate?: string\n  rated?: string // rated or certificate\n  runtime?: string\n  genres?: string\n  director?: string\n  writer?: string\n  Actors?: string\n  plot?: string // plot or overview\n  Language?: string\n  Country?: string\n  Awards?: string\n  Poster?: string\n  Ratings?: IRating[]\n  Metascore?: string\n  imdbRating?: string\n  imdbVotes?: string\n  imdbID: string\n  tmdbID: number\n  Type?: string\n  DVD?: string\n  BoxOffice?: string\n  Production?: string\n  website?: string\n  response: string\n  libraryInfo?: ILibraryInfo\n}\n\n// // adult: boolean;\n// //backdrop_path: string;\n// belongs_to_collection: null;\n// // budget: number;\n// genres: Genre[];\n// // homepage: string;\n// // id: number;\n// // imdb_id: string;\n// original_language: string;\n// original_title: string;\n// // overview: string;\n// // popularity: number;\n// // poster_path: string;\n// production_companies: ProductionCompany[];\n// production_countries: ProductionCountry[];\n// // release_date: string;\n// // revenue: number;\n// // runtime: number;\n// spoken_languages: SpokenLanguage[];\n// // status: string;\n// // tagline: string;\n// // title: string;\n// // video: boolean;\n// // vote_average: number;\n// // vote_count: number;\n\nexport interface ITmdbResultObject {\n  page: number;\n  total_results: number;\n  total_pages: number;\n  results: ITmdbResult[];\n}\n\nexport interface ITmdbResult {\n  popularity: number\n  vote_count: number\n  video: boolean\n  poster_path: string\n  id: number\n  adult: boolean\n  backdrop_path: string\n  original_language: string\n  original_title: string\n  genre_ids: number[]\n  title: string\n  vote_average: number\n  overview: string\n  release_date: string\n  isAvailable?: boolean\n  isHighlighted?: boolean\n}\n\nexport interface ILibraryMovie {\n  tmdbId?: number,\n  title: string,\n  year: number,\n  imdbId?: string,\n  directory: string[]\n}\n\nexport interface IGenre {\n  id: number\n  name: string\n}\n\nexport interface Credits {\n  id: number;\n  cast: CastElement[];\n  crew: Crew[];\n}\n\ninterface CastElement {\n  cast_id: number;\n  character: string;\n  credit_id: string;\n  gender: number;\n  id: number;\n  name: string;\n  order: number;\n  profile_path: null | string;\n}\n\ninterface Crew {\n  credit_id: string;\n  department: Department;\n  gender: number;\n  id: number;\n  job: string;\n  name: string;\n  profile_path: null | string;\n}\n\nexport enum Department {\n  Art = 'Art',\n  Camera = 'Camera',\n  CostumeMakeUp = 'Costume & Make-Up',\n  Crew = 'Crew',\n  Directing = 'Directing',\n  Editing = 'Editing',\n  Lighting = 'Lighting',\n  Production = 'Production',\n  Sound = 'Sound',\n  VisualEffects = 'Visual Effects',\n  Writing = 'Writing',\n}\n\nexport class MDBTorrent {\n  id?: string\n  name?: string\n  size?: string\n  hash: string\n  url?: string\n  quality?: string\n  type?: string\n  seeds?: number\n  peers?: number\n  sizeBytes?: number\n  added?: string\n  dateUploaded?: string\n  dateUploadedUnix?: number\n  isYts?: boolean\n  magnetLink?: string\n}\n\nexport class ITPBTorrent {\n  id?: number\n  name?: string\n  hash: string\n  sizeBytes?: number\n  added?: string\n}\n\nexport interface ISearch {\n  page: number\n}\n\nexport enum OmdbParameters {\n  ApiKey = 'apikey',\n  ImdbId = 'i',\n  Title = 't',\n  Type = 'type',\n  Year = 'y',\n  Plot = 'plot',\n  Return = 'r',\n  Callback = 'callback',\n  Version = 'v',\n}\n\nexport enum TmdbParameters {\n  ApiKey = 'api_key',\n  AppendToResponse = 'append_to_response',\n  Language = 'language',\n  Region = 'region',\n  SortBy = 'sort_by',\n  CertificationCountry = 'certification_country',\n  Certification = 'certification',\n  CertificationLess = 'certification.lte',\n  CertificationGreater = 'certification.gte',\n  IncludeAdult = 'include_adult',\n  IncludeVideo = 'include_video',\n  Page = 'page',\n  PrimaryReleaseYear = 'primary_release_year',\n  PrimaryReleaseDateGreater = 'primary_release_date.gte',\n  PrimaryReleaseDateLess = 'primary_release_date.lte',\n  ReleaseDateGreater = 'release_date.gte',\n  ReleaseDateLess = 'release_date.lte',\n  WithReleaseType = 'with_release_type',\n  Year = 'year',\n  VoteCountGreater = 'vote_count.gte',\n  VoteCountLess = 'vote_count.lte',\n  VoteAverageGreater = 'vote_average.gte',\n  VoteAverageLess = 'vote_average.lte',\n  WithCast = 'with_cast',\n  WithCrew = 'with_crew',\n  WithPeople = 'with_people',\n  WithCompanies = 'with_companies',\n  WithGenres = 'with_genres',\n  WithoutGenres = 'without_genres',\n  WithKeywords = 'with_keywords',\n  WithoutKeywords = 'without_keywords',\n  WithRuntimeGreater = 'with_runtime.gte',\n  WithRuntimeLess = 'with_runtime.lte',\n  WithOriginalLanguage = 'with_original_language',\n  WithWatchProviders = 'with_watch_providers',\n  WatchRegion = 'watch_region'\n}\n\nexport enum TmdbSearchMovieParameters {\n  ApiKey = 'api_key',\n  Language = 'language', // Pass a ISO 639 - 1 value to display translated data for the fields that support it. minLength: 2 pattern: ([a - z]{ 2 }) -([A - Z]{ 2 }) default: en - US\n  Query = 'query',\n  Page = 'page', // minimum: 1 maximum: 1000\n  IncludeAdult = 'include_adult',\n  Region = 'region',\n  // Specify a ISO 3166 - 1 code to filter release dates.Must be uppercase. pattern: ^ [A - Z]{ 2 } $\n  Year = 'year',\n  PrimaryReleaseYear = 'primary_release_year'\n}\n\nenum TmdbAppendToResponseParameters {\n  AccountStates = 'account_states',\n  Videos = 'videos',\n  Images = 'images',\n  Credits = 'credits',\n  Changes = 'changes',\n  Translations = 'translations',\n  Similar = 'similar',\n  ExternalIds = 'external_ids',\n  AlternativeTitles = 'alternative_titles',\n  Keywords = 'keywords',\n  Reviews = 'reviews',\n  Recommendations = 'recommendations',\n  ReleaseDates = 'release_dates',\n  Lists = 'lists'\n}\n\nenum TmdbReleaseTypes {\n  PREMIERE = 'Premiere',  // 1\n  THEATRICAL_LIMITED = 'Theatrical(limited)', // 2\n  THEATRICAL = 'Theatrical', // 3\n  DIGITAL = 'Digital', // 4\n  PHYSICAL = 'Physical', // 5\n  TV = 'TV', // 6\n}\n\nexport interface IPersonDetails {\n  birthday: string;\n  known_for_department: string;\n  id: number;\n  movie_credits?: IPersonCredits;\n  tv_credits?: IPersonCredits;\n  combined_credits?: IPersonCredits;\n  homepage?: any;\n  profile_path: string;\n  imdb_id: string;\n  deathday?: any;\n  images?: IImages;\n  external_ids?: IExternalids;\n  name: string;\n  also_known_as: string[];\n  biography: string;\n  adult: boolean;\n  gender: number;\n  place_of_birth: string;\n  popularity: number;\n}\n\nexport interface IPersonCredits {\n  cast: IPersonCastCrew[];\n  crew: IPersonCastCrew[];\n  id?: number;\n}\n\nexport interface IPersonCastCrew {\n  id?: number;\n  original_language: string;\n  episode_count?: number;\n  overview: string;\n  origin_country?: string[];\n  original_name?: string;\n  genre_ids: number[];\n  name?: string;\n  media_type: string;\n  poster_path: null | string;\n  first_air_date?: string;\n  vote_average: number;\n  vote_count: number;\n  character?: string;\n  backdrop_path: null | string;\n  popularity: number;\n  credit_id: string;\n  original_title?: string;\n  video?: boolean;\n  release_date?: string;\n  title?: string;\n  adult?: boolean;\n  department?: string;\n  job?: string;\n}\n\nexport interface IExternalids {\n  id?: number;\n  freebase_id: string;\n  instagram_id: string;\n  tvrage_id: number;\n  twitter_id: string;\n  freebase_mid: string;\n  imdb_id: string;\n  facebook_id: string;\n}\n\nexport interface IImages {\n  id?: number;\n  profiles: IProfile[];\n}\n\nexport interface IProfile {\n  iso_639_1?: any;\n  aspect_ratio: number;\n  vote_count: number;\n  height: number;\n  vote_average: number;\n  file_path: string;\n  width: number;\n}\n\nexport interface ICredits {\n  cast: ICast[];\n  crew: ICrew[];\n}\n\ninterface ICast {\n  poster_path?: string;\n  adult: boolean;\n  backdrop_path?: string;\n  vote_count: number;\n  video: boolean;\n  id: number;\n  media_type?: string;\n  popularity: number;\n  genre_ids: number[];\n  original_language: string;\n  title: string;\n  original_title: string;\n  release_date: string;\n  character: string;\n  vote_average: number;\n  overview: string;\n  credit_id: string;\n}\n\ninterface ICrew {\n  id: number;\n  department: string;\n  original_language: string;\n  original_title: string;\n  job: string;\n  overview: string;\n  genre_ids: number[];\n  video: boolean;\n  episode_count: number\n  media_type?: string;\n  credit_id: string;\n  poster_path?: string;\n  popularity: number;\n  backdrop_path?: string;\n  vote_count: number;\n  title: string;\n  adult: boolean;\n  vote_average: number;\n  release_date: string;\n}\n\nexport interface IUserSavedData {\n  id?: string,\n  title: string,\n  year: number,\n  tmdbId: number,\n}\n\nexport enum GenreCodes {\n  Action = 28,\n  Adventure = 12,\n  Animation = 16,\n  Comedy = 35,\n  Crime = 80,\n  Documentary = 99,\n  Drama = 18,\n  Family = 10751,\n  Fantasy = 14,\n  History = 36,\n  Horror = 27,\n  Music = 10402,\n  Mystery = 9648,\n  Romance = 10749,\n  ScienceFiction = 878,\n  TVMovie = 10770,\n  Thriller = 53,\n  War = 10752,\n  Western = 37,\n  // mdb reserved\n  FilmNoir = 20000,\n  // similar genre: Music id:10402\n  Musical = 20001,\n  News = 20002,\n  RealityTV = 20003,\n  // similar genre: Science Fiction id:878\n  SciFi = 20004,\n  // another media type\n  Short = 20005,\n  Sport = 20006,\n}\n\n\n\n/**\nexport enum Department {\n    Art = \"Art\",\n    Camera = \"Camera\",\n    CostumeMakeUp = \"Costume & Make-Up\",\n    Crew = \"Crew\",\n    Directing = \"Directing\",\n    Editing = \"Editing\",\n    Lighting = \"Lighting\",\n    Production = \"Production\",\n    Sound = \"Sound\",\n    VisualEffects = \"Visual Effects\",\n    Writing = \"Writing\",\n}\n\nexport interface ExternalIDS {\n    imdb_id:      string;\n    facebook_id:  null;\n    instagram_id: null;\n    twitter_id:   null;\n}\n\nexport interface Genre {\n    id:   number;\n    name: string;\n}\n\nexport interface Images {\n    backdrops: any[];\n    posters:   any[];\n}\n\nexport enum OriginalLanguage {\n    En = \"en\",\n    Es = \"es\",\n    Fr = \"fr\",\n}\n\nexport interface ProductionCompany {\n    id:             number;\n    logo_path:      string;\n    name:           string;\n    origin_country: string;\n}\n\nexport interface ProductionCountry {\n    iso_3166_1: string;\n    name:       string;\n}\n\nexport interface Recommendations {\n    page:          number;\n    results:       RecommendationsResult[];\n    total_pages:   number;\n    total_results: number;\n}\n\nexport interface RecommendationsResult {\n    id:                number;\n    video:             boolean;\n    vote_count:        number;\n    vote_average:      number;\n    title:             string;\n    release_date:      string;\n    original_language: OriginalLanguage;\n    original_title:    string;\n    genre_ids:         number[];\n    backdrop_path:     string;\n    adult:             boolean;\n    overview:          string;\n    poster_path:       string;\n    popularity:        number;\n}\n\nexport interface SpokenLanguage {\n    iso_639_1: OriginalLanguage;\n    name:      string;\n}\n\nexport interface Videos {\n    results: VideosResult[];\n}\n\nexport interface VideosResult {\n    id:         string;\n    iso_639_1:  OriginalLanguage;\n    iso_3166_1: string;\n    key:        string;\n    name:       string;\n    site:       string;\n    size:       number;\n    type:       string;\n}\n */\n\n",
            "properties": [
                {
                    "name": "facebook_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 478
                },
                {
                    "name": "freebase_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 472
                },
                {
                    "name": "freebase_mid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 476
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 471
                },
                {
                    "name": "imdb_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 477
                },
                {
                    "name": "instagram_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 473
                },
                {
                    "name": "tvrage_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 474
                },
                {
                    "name": "twitter_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 475
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IGenre",
            "id": "interface-IGenre-584d54738f93e2af94202069b5eddb4cab23bb2dfec2ff69f24ebaf881c252f94680b4cd6cec302796817692570a31bedafc5d74fed1cf6488a895dbf372e23d",
            "file": "src/app/models/interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IMdbMovieDetails {\n  awards?: string\n  backgroundPath: string;\n  belongsToCollection?: []\n  boxOffice?: string | number // tmdb:revenue(number)\n  budget?: number\n  country?: string\n  director?: string\n  dvd?: string // dvd release\n  genres?: string[] | string | IGenre[]\n  imdbId?: string\n  imdbRating?: string\n  imdbVotes?: string\n  isAdult?: boolean;\n  isAvailable?: boolean;\n  languages?: string[]\n  libraryInfo?: ILibraryInfo\n  metascore?: string // metacritic score\\\n  originalLanguage?: string // tmdb:\"en\",omdb:\"English\"\n  originalTitle?: string\n  plot?: string // plot or overview\n  popularity?: number\n  posterPath: string\n  production?: string // company; i.e. Walt Disney Pictures\n  rated?: string // rated or certificate\n  ratings?: IRating[]\n  releaseDate?: string // omdb:\"05 May 2017\"; tmdb:\"1999-10-15\"\n  releaseYear?: number | string\n  response: string\n  runtime?: string\n  starring?: string // Actors field in omdb\n  status?: string // released/Post\n  tagline?: string;\n  tmdbId?: number\n  title: string\n  type?: string // movie/tvmovie/series\n  video?: boolean; // unknown\n  // voteAverage: number; // tmdb votes\n  // voteCount: number; // tmdb votes\n  website?: string\n  writer?: string // omdb\n  [propName: string]: any;\n}\n\nexport interface IRating {\n  Source: string\n  Value: string\n}\n\nexport interface LibraryInfo {\n  tmdbId?: null | number | string\n  imdbID?: string\n  title?: string\n  year?: number\n  directoryList?: string[]\n  _id: string\n}\n\nexport interface MovieGenre {\n  id: number\n  code: string\n  description: string\n  isChecked: boolean\n}\n\nexport interface WatchList {\n  id: number\n  movieList: string[]\n}\n\nexport interface ILibraryInfo {\n  tmdbId?: null | number | string\n  imdbID?: string\n  title?: string\n  year?: number\n  directoryList?: string[]\n  _id: string\n}\n\nexport interface ICollection {\n  id: number,\n  name: string\n}\n\nexport interface IProductionCompany {\n  id: number;\n  logo_path: null | string;\n  name: string;\n  origin_country: string;\n}\n\nexport interface IProductionCountry {\n  iso_3166_1: string;\n  name: string;\n}\n\nexport interface ISpokenLanguage {\n  iso_639_1: string;\n  name: string;\n}\n\nexport interface IOmdbMovieDetail {\n  Title: string\n  Year?: string\n  Rated?: string\n  Released?: string // \"05 May 2017\"\n  Runtime?: string\n  Genre?: string\n  Director?: string\n  Writer?: string\n  Actors?: string\n  Plot?: string\n  Language?: string\n  Country?: string\n  Awards?: string\n  Poster?: string\n  Ratings?: IRating[]\n  Metascore?: string\n  imdbRating?: string\n  imdbVotes?: string\n  imdbID: string\n  Type?: string\n  DVD?: string\n  BoxOffice?: string\n  Production?: string\n  Website?: string\n  Response: string\n}\n\nexport interface ITmdbMovieDetail {\n  adult: boolean;\n  backdrop_path: string;\n  belongs_to_collection: null;\n  budget: number;\n  genres: IGenre[];\n  homepage: string;\n  id: number;\n  imdb_id: string;\n  original_language: string;\n  original_title: string;\n  overview: string;\n  popularity: number;\n  poster_path: string;\n  production_companies: IProductionCompany[];\n  production_countries: IProductionCountry[];\n  release_date: string;\n  revenue: number;\n  runtime: number;\n  spoken_languages: ISpokenLanguage[];\n  status: string;\n  tagline: string;\n  title: string;\n  video: boolean;\n  vote_average: number;\n  vote_count: number;\n}\n\nexport interface MdbMovieDetails {\n  adult?: boolean;\n  title: string\n  releaseYear?: string\n  releaseDate?: string\n  rated?: string // rated or certificate\n  runtime?: string\n  genres?: string\n  director?: string\n  writer?: string\n  Actors?: string\n  plot?: string // plot or overview\n  Language?: string\n  Country?: string\n  Awards?: string\n  Poster?: string\n  Ratings?: IRating[]\n  Metascore?: string\n  imdbRating?: string\n  imdbVotes?: string\n  imdbID: string\n  tmdbID: number\n  Type?: string\n  DVD?: string\n  BoxOffice?: string\n  Production?: string\n  website?: string\n  response: string\n  libraryInfo?: ILibraryInfo\n}\n\n// // adult: boolean;\n// //backdrop_path: string;\n// belongs_to_collection: null;\n// // budget: number;\n// genres: Genre[];\n// // homepage: string;\n// // id: number;\n// // imdb_id: string;\n// original_language: string;\n// original_title: string;\n// // overview: string;\n// // popularity: number;\n// // poster_path: string;\n// production_companies: ProductionCompany[];\n// production_countries: ProductionCountry[];\n// // release_date: string;\n// // revenue: number;\n// // runtime: number;\n// spoken_languages: SpokenLanguage[];\n// // status: string;\n// // tagline: string;\n// // title: string;\n// // video: boolean;\n// // vote_average: number;\n// // vote_count: number;\n\nexport interface ITmdbResultObject {\n  page: number;\n  total_results: number;\n  total_pages: number;\n  results: ITmdbResult[];\n}\n\nexport interface ITmdbResult {\n  popularity: number\n  vote_count: number\n  video: boolean\n  poster_path: string\n  id: number\n  adult: boolean\n  backdrop_path: string\n  original_language: string\n  original_title: string\n  genre_ids: number[]\n  title: string\n  vote_average: number\n  overview: string\n  release_date: string\n  isAvailable?: boolean\n  isHighlighted?: boolean\n}\n\nexport interface ILibraryMovie {\n  tmdbId?: number,\n  title: string,\n  year: number,\n  imdbId?: string,\n  directory: string[]\n}\n\nexport interface IGenre {\n  id: number\n  name: string\n}\n\nexport interface Credits {\n  id: number;\n  cast: CastElement[];\n  crew: Crew[];\n}\n\ninterface CastElement {\n  cast_id: number;\n  character: string;\n  credit_id: string;\n  gender: number;\n  id: number;\n  name: string;\n  order: number;\n  profile_path: null | string;\n}\n\ninterface Crew {\n  credit_id: string;\n  department: Department;\n  gender: number;\n  id: number;\n  job: string;\n  name: string;\n  profile_path: null | string;\n}\n\nexport enum Department {\n  Art = 'Art',\n  Camera = 'Camera',\n  CostumeMakeUp = 'Costume & Make-Up',\n  Crew = 'Crew',\n  Directing = 'Directing',\n  Editing = 'Editing',\n  Lighting = 'Lighting',\n  Production = 'Production',\n  Sound = 'Sound',\n  VisualEffects = 'Visual Effects',\n  Writing = 'Writing',\n}\n\nexport class MDBTorrent {\n  id?: string\n  name?: string\n  size?: string\n  hash: string\n  url?: string\n  quality?: string\n  type?: string\n  seeds?: number\n  peers?: number\n  sizeBytes?: number\n  added?: string\n  dateUploaded?: string\n  dateUploadedUnix?: number\n  isYts?: boolean\n  magnetLink?: string\n}\n\nexport class ITPBTorrent {\n  id?: number\n  name?: string\n  hash: string\n  sizeBytes?: number\n  added?: string\n}\n\nexport interface ISearch {\n  page: number\n}\n\nexport enum OmdbParameters {\n  ApiKey = 'apikey',\n  ImdbId = 'i',\n  Title = 't',\n  Type = 'type',\n  Year = 'y',\n  Plot = 'plot',\n  Return = 'r',\n  Callback = 'callback',\n  Version = 'v',\n}\n\nexport enum TmdbParameters {\n  ApiKey = 'api_key',\n  AppendToResponse = 'append_to_response',\n  Language = 'language',\n  Region = 'region',\n  SortBy = 'sort_by',\n  CertificationCountry = 'certification_country',\n  Certification = 'certification',\n  CertificationLess = 'certification.lte',\n  CertificationGreater = 'certification.gte',\n  IncludeAdult = 'include_adult',\n  IncludeVideo = 'include_video',\n  Page = 'page',\n  PrimaryReleaseYear = 'primary_release_year',\n  PrimaryReleaseDateGreater = 'primary_release_date.gte',\n  PrimaryReleaseDateLess = 'primary_release_date.lte',\n  ReleaseDateGreater = 'release_date.gte',\n  ReleaseDateLess = 'release_date.lte',\n  WithReleaseType = 'with_release_type',\n  Year = 'year',\n  VoteCountGreater = 'vote_count.gte',\n  VoteCountLess = 'vote_count.lte',\n  VoteAverageGreater = 'vote_average.gte',\n  VoteAverageLess = 'vote_average.lte',\n  WithCast = 'with_cast',\n  WithCrew = 'with_crew',\n  WithPeople = 'with_people',\n  WithCompanies = 'with_companies',\n  WithGenres = 'with_genres',\n  WithoutGenres = 'without_genres',\n  WithKeywords = 'with_keywords',\n  WithoutKeywords = 'without_keywords',\n  WithRuntimeGreater = 'with_runtime.gte',\n  WithRuntimeLess = 'with_runtime.lte',\n  WithOriginalLanguage = 'with_original_language',\n  WithWatchProviders = 'with_watch_providers',\n  WatchRegion = 'watch_region'\n}\n\nexport enum TmdbSearchMovieParameters {\n  ApiKey = 'api_key',\n  Language = 'language', // Pass a ISO 639 - 1 value to display translated data for the fields that support it. minLength: 2 pattern: ([a - z]{ 2 }) -([A - Z]{ 2 }) default: en - US\n  Query = 'query',\n  Page = 'page', // minimum: 1 maximum: 1000\n  IncludeAdult = 'include_adult',\n  Region = 'region',\n  // Specify a ISO 3166 - 1 code to filter release dates.Must be uppercase. pattern: ^ [A - Z]{ 2 } $\n  Year = 'year',\n  PrimaryReleaseYear = 'primary_release_year'\n}\n\nenum TmdbAppendToResponseParameters {\n  AccountStates = 'account_states',\n  Videos = 'videos',\n  Images = 'images',\n  Credits = 'credits',\n  Changes = 'changes',\n  Translations = 'translations',\n  Similar = 'similar',\n  ExternalIds = 'external_ids',\n  AlternativeTitles = 'alternative_titles',\n  Keywords = 'keywords',\n  Reviews = 'reviews',\n  Recommendations = 'recommendations',\n  ReleaseDates = 'release_dates',\n  Lists = 'lists'\n}\n\nenum TmdbReleaseTypes {\n  PREMIERE = 'Premiere',  // 1\n  THEATRICAL_LIMITED = 'Theatrical(limited)', // 2\n  THEATRICAL = 'Theatrical', // 3\n  DIGITAL = 'Digital', // 4\n  PHYSICAL = 'Physical', // 5\n  TV = 'TV', // 6\n}\n\nexport interface IPersonDetails {\n  birthday: string;\n  known_for_department: string;\n  id: number;\n  movie_credits?: IPersonCredits;\n  tv_credits?: IPersonCredits;\n  combined_credits?: IPersonCredits;\n  homepage?: any;\n  profile_path: string;\n  imdb_id: string;\n  deathday?: any;\n  images?: IImages;\n  external_ids?: IExternalids;\n  name: string;\n  also_known_as: string[];\n  biography: string;\n  adult: boolean;\n  gender: number;\n  place_of_birth: string;\n  popularity: number;\n}\n\nexport interface IPersonCredits {\n  cast: IPersonCastCrew[];\n  crew: IPersonCastCrew[];\n  id?: number;\n}\n\nexport interface IPersonCastCrew {\n  id?: number;\n  original_language: string;\n  episode_count?: number;\n  overview: string;\n  origin_country?: string[];\n  original_name?: string;\n  genre_ids: number[];\n  name?: string;\n  media_type: string;\n  poster_path: null | string;\n  first_air_date?: string;\n  vote_average: number;\n  vote_count: number;\n  character?: string;\n  backdrop_path: null | string;\n  popularity: number;\n  credit_id: string;\n  original_title?: string;\n  video?: boolean;\n  release_date?: string;\n  title?: string;\n  adult?: boolean;\n  department?: string;\n  job?: string;\n}\n\nexport interface IExternalids {\n  id?: number;\n  freebase_id: string;\n  instagram_id: string;\n  tvrage_id: number;\n  twitter_id: string;\n  freebase_mid: string;\n  imdb_id: string;\n  facebook_id: string;\n}\n\nexport interface IImages {\n  id?: number;\n  profiles: IProfile[];\n}\n\nexport interface IProfile {\n  iso_639_1?: any;\n  aspect_ratio: number;\n  vote_count: number;\n  height: number;\n  vote_average: number;\n  file_path: string;\n  width: number;\n}\n\nexport interface ICredits {\n  cast: ICast[];\n  crew: ICrew[];\n}\n\ninterface ICast {\n  poster_path?: string;\n  adult: boolean;\n  backdrop_path?: string;\n  vote_count: number;\n  video: boolean;\n  id: number;\n  media_type?: string;\n  popularity: number;\n  genre_ids: number[];\n  original_language: string;\n  title: string;\n  original_title: string;\n  release_date: string;\n  character: string;\n  vote_average: number;\n  overview: string;\n  credit_id: string;\n}\n\ninterface ICrew {\n  id: number;\n  department: string;\n  original_language: string;\n  original_title: string;\n  job: string;\n  overview: string;\n  genre_ids: number[];\n  video: boolean;\n  episode_count: number\n  media_type?: string;\n  credit_id: string;\n  poster_path?: string;\n  popularity: number;\n  backdrop_path?: string;\n  vote_count: number;\n  title: string;\n  adult: boolean;\n  vote_average: number;\n  release_date: string;\n}\n\nexport interface IUserSavedData {\n  id?: string,\n  title: string,\n  year: number,\n  tmdbId: number,\n}\n\nexport enum GenreCodes {\n  Action = 28,\n  Adventure = 12,\n  Animation = 16,\n  Comedy = 35,\n  Crime = 80,\n  Documentary = 99,\n  Drama = 18,\n  Family = 10751,\n  Fantasy = 14,\n  History = 36,\n  Horror = 27,\n  Music = 10402,\n  Mystery = 9648,\n  Romance = 10749,\n  ScienceFiction = 878,\n  TVMovie = 10770,\n  Thriller = 53,\n  War = 10752,\n  Western = 37,\n  // mdb reserved\n  FilmNoir = 20000,\n  // similar genre: Music id:10402\n  Musical = 20001,\n  News = 20002,\n  RealityTV = 20003,\n  // similar genre: Science Fiction id:878\n  SciFi = 20004,\n  // another media type\n  Short = 20005,\n  Sport = 20006,\n}\n\n\n\n/**\nexport enum Department {\n    Art = \"Art\",\n    Camera = \"Camera\",\n    CostumeMakeUp = \"Costume & Make-Up\",\n    Crew = \"Crew\",\n    Directing = \"Directing\",\n    Editing = \"Editing\",\n    Lighting = \"Lighting\",\n    Production = \"Production\",\n    Sound = \"Sound\",\n    VisualEffects = \"Visual Effects\",\n    Writing = \"Writing\",\n}\n\nexport interface ExternalIDS {\n    imdb_id:      string;\n    facebook_id:  null;\n    instagram_id: null;\n    twitter_id:   null;\n}\n\nexport interface Genre {\n    id:   number;\n    name: string;\n}\n\nexport interface Images {\n    backdrops: any[];\n    posters:   any[];\n}\n\nexport enum OriginalLanguage {\n    En = \"en\",\n    Es = \"es\",\n    Fr = \"fr\",\n}\n\nexport interface ProductionCompany {\n    id:             number;\n    logo_path:      string;\n    name:           string;\n    origin_country: string;\n}\n\nexport interface ProductionCountry {\n    iso_3166_1: string;\n    name:       string;\n}\n\nexport interface Recommendations {\n    page:          number;\n    results:       RecommendationsResult[];\n    total_pages:   number;\n    total_results: number;\n}\n\nexport interface RecommendationsResult {\n    id:                number;\n    video:             boolean;\n    vote_count:        number;\n    vote_average:      number;\n    title:             string;\n    release_date:      string;\n    original_language: OriginalLanguage;\n    original_title:    string;\n    genre_ids:         number[];\n    backdrop_path:     string;\n    adult:             boolean;\n    overview:          string;\n    poster_path:       string;\n    popularity:        number;\n}\n\nexport interface SpokenLanguage {\n    iso_639_1: OriginalLanguage;\n    name:      string;\n}\n\nexport interface Videos {\n    results: VideosResult[];\n}\n\nexport interface VideosResult {\n    id:         string;\n    iso_639_1:  OriginalLanguage;\n    iso_3166_1: string;\n    key:        string;\n    name:       string;\n    site:       string;\n    size:       number;\n    type:       string;\n}\n */\n\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 251
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 252
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IHotkeys",
            "id": "interface-IHotkeys-762aab3f13408cf543f5fe806389a08ae4f1e3cd13bf634d1cce11d647e39e349b0a2025d4789d00f83084ebbe025b98dbedd097bcba540fc5f3cd239b0f3d7e",
            "file": "src/app/models/preferences.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IPreferences {\n  isDarkMode: boolean\n  isEnableCache: boolean\n  libraryFolders: string[]\n  torrentSeedRatio: number\n  torrentRatio?: any\n  subtitle: ISubtitlePreferences\n  hotKeys: IHotkeys\n  autoPlayTrailer: boolean\n  playTrailerBeforeShow: boolean\n  playBack: IPlaybackPreferences\n  library: ILibraryPreferences,\n  streamPreferences?: IStreamPreferences\n  isAutoScan: boolean\n  autoScanFrequencyUnit: string\n  autoScanFrequencyValue: number\n}\n\ninterface IStreamPreferences {\n  downloadSpeed: number // in bps\n}\ninterface ILibraryPreferences {\n  libraryPathList: string[]\n  scanFrenquency: IScanFrequency\n}\n\nexport interface IPlaybackPreferences {\n  preferredQuality: Quality\n  preferredMode: 'torrent' | 'offline'\n  repeat: boolean\n  volume: number\n}\n\nexport enum Quality {\n  SD = '720p',\n  HD = '1080p',\n  FHD = '1440p',\n  FourK = '4k'\n}\ninterface IScanFrequency {\n  isScanAutomatically: boolean\n  frequencyUnit: string\n  frequencyValue: number\n}\n\ninterface IHotkeys {\n  playerHotkeys?: any\n\n}\n\nexport interface ISubtitlePreferences {\n  synchronization: number;\n  fontColor: string;\n  fontSize: string;\n  fontOpacity?: number;\n  textShadow: string;\n  fontFamily?: string;\n  backgroundColor: string;\n  backgroundOpacity: string;\n}\n",
            "properties": [
                {
                    "name": "playerHotkeys",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 48
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IImages",
            "id": "interface-IImages-584d54738f93e2af94202069b5eddb4cab23bb2dfec2ff69f24ebaf881c252f94680b4cd6cec302796817692570a31bedafc5d74fed1cf6488a895dbf372e23d",
            "file": "src/app/models/interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IMdbMovieDetails {\n  awards?: string\n  backgroundPath: string;\n  belongsToCollection?: []\n  boxOffice?: string | number // tmdb:revenue(number)\n  budget?: number\n  country?: string\n  director?: string\n  dvd?: string // dvd release\n  genres?: string[] | string | IGenre[]\n  imdbId?: string\n  imdbRating?: string\n  imdbVotes?: string\n  isAdult?: boolean;\n  isAvailable?: boolean;\n  languages?: string[]\n  libraryInfo?: ILibraryInfo\n  metascore?: string // metacritic score\\\n  originalLanguage?: string // tmdb:\"en\",omdb:\"English\"\n  originalTitle?: string\n  plot?: string // plot or overview\n  popularity?: number\n  posterPath: string\n  production?: string // company; i.e. Walt Disney Pictures\n  rated?: string // rated or certificate\n  ratings?: IRating[]\n  releaseDate?: string // omdb:\"05 May 2017\"; tmdb:\"1999-10-15\"\n  releaseYear?: number | string\n  response: string\n  runtime?: string\n  starring?: string // Actors field in omdb\n  status?: string // released/Post\n  tagline?: string;\n  tmdbId?: number\n  title: string\n  type?: string // movie/tvmovie/series\n  video?: boolean; // unknown\n  // voteAverage: number; // tmdb votes\n  // voteCount: number; // tmdb votes\n  website?: string\n  writer?: string // omdb\n  [propName: string]: any;\n}\n\nexport interface IRating {\n  Source: string\n  Value: string\n}\n\nexport interface LibraryInfo {\n  tmdbId?: null | number | string\n  imdbID?: string\n  title?: string\n  year?: number\n  directoryList?: string[]\n  _id: string\n}\n\nexport interface MovieGenre {\n  id: number\n  code: string\n  description: string\n  isChecked: boolean\n}\n\nexport interface WatchList {\n  id: number\n  movieList: string[]\n}\n\nexport interface ILibraryInfo {\n  tmdbId?: null | number | string\n  imdbID?: string\n  title?: string\n  year?: number\n  directoryList?: string[]\n  _id: string\n}\n\nexport interface ICollection {\n  id: number,\n  name: string\n}\n\nexport interface IProductionCompany {\n  id: number;\n  logo_path: null | string;\n  name: string;\n  origin_country: string;\n}\n\nexport interface IProductionCountry {\n  iso_3166_1: string;\n  name: string;\n}\n\nexport interface ISpokenLanguage {\n  iso_639_1: string;\n  name: string;\n}\n\nexport interface IOmdbMovieDetail {\n  Title: string\n  Year?: string\n  Rated?: string\n  Released?: string // \"05 May 2017\"\n  Runtime?: string\n  Genre?: string\n  Director?: string\n  Writer?: string\n  Actors?: string\n  Plot?: string\n  Language?: string\n  Country?: string\n  Awards?: string\n  Poster?: string\n  Ratings?: IRating[]\n  Metascore?: string\n  imdbRating?: string\n  imdbVotes?: string\n  imdbID: string\n  Type?: string\n  DVD?: string\n  BoxOffice?: string\n  Production?: string\n  Website?: string\n  Response: string\n}\n\nexport interface ITmdbMovieDetail {\n  adult: boolean;\n  backdrop_path: string;\n  belongs_to_collection: null;\n  budget: number;\n  genres: IGenre[];\n  homepage: string;\n  id: number;\n  imdb_id: string;\n  original_language: string;\n  original_title: string;\n  overview: string;\n  popularity: number;\n  poster_path: string;\n  production_companies: IProductionCompany[];\n  production_countries: IProductionCountry[];\n  release_date: string;\n  revenue: number;\n  runtime: number;\n  spoken_languages: ISpokenLanguage[];\n  status: string;\n  tagline: string;\n  title: string;\n  video: boolean;\n  vote_average: number;\n  vote_count: number;\n}\n\nexport interface MdbMovieDetails {\n  adult?: boolean;\n  title: string\n  releaseYear?: string\n  releaseDate?: string\n  rated?: string // rated or certificate\n  runtime?: string\n  genres?: string\n  director?: string\n  writer?: string\n  Actors?: string\n  plot?: string // plot or overview\n  Language?: string\n  Country?: string\n  Awards?: string\n  Poster?: string\n  Ratings?: IRating[]\n  Metascore?: string\n  imdbRating?: string\n  imdbVotes?: string\n  imdbID: string\n  tmdbID: number\n  Type?: string\n  DVD?: string\n  BoxOffice?: string\n  Production?: string\n  website?: string\n  response: string\n  libraryInfo?: ILibraryInfo\n}\n\n// // adult: boolean;\n// //backdrop_path: string;\n// belongs_to_collection: null;\n// // budget: number;\n// genres: Genre[];\n// // homepage: string;\n// // id: number;\n// // imdb_id: string;\n// original_language: string;\n// original_title: string;\n// // overview: string;\n// // popularity: number;\n// // poster_path: string;\n// production_companies: ProductionCompany[];\n// production_countries: ProductionCountry[];\n// // release_date: string;\n// // revenue: number;\n// // runtime: number;\n// spoken_languages: SpokenLanguage[];\n// // status: string;\n// // tagline: string;\n// // title: string;\n// // video: boolean;\n// // vote_average: number;\n// // vote_count: number;\n\nexport interface ITmdbResultObject {\n  page: number;\n  total_results: number;\n  total_pages: number;\n  results: ITmdbResult[];\n}\n\nexport interface ITmdbResult {\n  popularity: number\n  vote_count: number\n  video: boolean\n  poster_path: string\n  id: number\n  adult: boolean\n  backdrop_path: string\n  original_language: string\n  original_title: string\n  genre_ids: number[]\n  title: string\n  vote_average: number\n  overview: string\n  release_date: string\n  isAvailable?: boolean\n  isHighlighted?: boolean\n}\n\nexport interface ILibraryMovie {\n  tmdbId?: number,\n  title: string,\n  year: number,\n  imdbId?: string,\n  directory: string[]\n}\n\nexport interface IGenre {\n  id: number\n  name: string\n}\n\nexport interface Credits {\n  id: number;\n  cast: CastElement[];\n  crew: Crew[];\n}\n\ninterface CastElement {\n  cast_id: number;\n  character: string;\n  credit_id: string;\n  gender: number;\n  id: number;\n  name: string;\n  order: number;\n  profile_path: null | string;\n}\n\ninterface Crew {\n  credit_id: string;\n  department: Department;\n  gender: number;\n  id: number;\n  job: string;\n  name: string;\n  profile_path: null | string;\n}\n\nexport enum Department {\n  Art = 'Art',\n  Camera = 'Camera',\n  CostumeMakeUp = 'Costume & Make-Up',\n  Crew = 'Crew',\n  Directing = 'Directing',\n  Editing = 'Editing',\n  Lighting = 'Lighting',\n  Production = 'Production',\n  Sound = 'Sound',\n  VisualEffects = 'Visual Effects',\n  Writing = 'Writing',\n}\n\nexport class MDBTorrent {\n  id?: string\n  name?: string\n  size?: string\n  hash: string\n  url?: string\n  quality?: string\n  type?: string\n  seeds?: number\n  peers?: number\n  sizeBytes?: number\n  added?: string\n  dateUploaded?: string\n  dateUploadedUnix?: number\n  isYts?: boolean\n  magnetLink?: string\n}\n\nexport class ITPBTorrent {\n  id?: number\n  name?: string\n  hash: string\n  sizeBytes?: number\n  added?: string\n}\n\nexport interface ISearch {\n  page: number\n}\n\nexport enum OmdbParameters {\n  ApiKey = 'apikey',\n  ImdbId = 'i',\n  Title = 't',\n  Type = 'type',\n  Year = 'y',\n  Plot = 'plot',\n  Return = 'r',\n  Callback = 'callback',\n  Version = 'v',\n}\n\nexport enum TmdbParameters {\n  ApiKey = 'api_key',\n  AppendToResponse = 'append_to_response',\n  Language = 'language',\n  Region = 'region',\n  SortBy = 'sort_by',\n  CertificationCountry = 'certification_country',\n  Certification = 'certification',\n  CertificationLess = 'certification.lte',\n  CertificationGreater = 'certification.gte',\n  IncludeAdult = 'include_adult',\n  IncludeVideo = 'include_video',\n  Page = 'page',\n  PrimaryReleaseYear = 'primary_release_year',\n  PrimaryReleaseDateGreater = 'primary_release_date.gte',\n  PrimaryReleaseDateLess = 'primary_release_date.lte',\n  ReleaseDateGreater = 'release_date.gte',\n  ReleaseDateLess = 'release_date.lte',\n  WithReleaseType = 'with_release_type',\n  Year = 'year',\n  VoteCountGreater = 'vote_count.gte',\n  VoteCountLess = 'vote_count.lte',\n  VoteAverageGreater = 'vote_average.gte',\n  VoteAverageLess = 'vote_average.lte',\n  WithCast = 'with_cast',\n  WithCrew = 'with_crew',\n  WithPeople = 'with_people',\n  WithCompanies = 'with_companies',\n  WithGenres = 'with_genres',\n  WithoutGenres = 'without_genres',\n  WithKeywords = 'with_keywords',\n  WithoutKeywords = 'without_keywords',\n  WithRuntimeGreater = 'with_runtime.gte',\n  WithRuntimeLess = 'with_runtime.lte',\n  WithOriginalLanguage = 'with_original_language',\n  WithWatchProviders = 'with_watch_providers',\n  WatchRegion = 'watch_region'\n}\n\nexport enum TmdbSearchMovieParameters {\n  ApiKey = 'api_key',\n  Language = 'language', // Pass a ISO 639 - 1 value to display translated data for the fields that support it. minLength: 2 pattern: ([a - z]{ 2 }) -([A - Z]{ 2 }) default: en - US\n  Query = 'query',\n  Page = 'page', // minimum: 1 maximum: 1000\n  IncludeAdult = 'include_adult',\n  Region = 'region',\n  // Specify a ISO 3166 - 1 code to filter release dates.Must be uppercase. pattern: ^ [A - Z]{ 2 } $\n  Year = 'year',\n  PrimaryReleaseYear = 'primary_release_year'\n}\n\nenum TmdbAppendToResponseParameters {\n  AccountStates = 'account_states',\n  Videos = 'videos',\n  Images = 'images',\n  Credits = 'credits',\n  Changes = 'changes',\n  Translations = 'translations',\n  Similar = 'similar',\n  ExternalIds = 'external_ids',\n  AlternativeTitles = 'alternative_titles',\n  Keywords = 'keywords',\n  Reviews = 'reviews',\n  Recommendations = 'recommendations',\n  ReleaseDates = 'release_dates',\n  Lists = 'lists'\n}\n\nenum TmdbReleaseTypes {\n  PREMIERE = 'Premiere',  // 1\n  THEATRICAL_LIMITED = 'Theatrical(limited)', // 2\n  THEATRICAL = 'Theatrical', // 3\n  DIGITAL = 'Digital', // 4\n  PHYSICAL = 'Physical', // 5\n  TV = 'TV', // 6\n}\n\nexport interface IPersonDetails {\n  birthday: string;\n  known_for_department: string;\n  id: number;\n  movie_credits?: IPersonCredits;\n  tv_credits?: IPersonCredits;\n  combined_credits?: IPersonCredits;\n  homepage?: any;\n  profile_path: string;\n  imdb_id: string;\n  deathday?: any;\n  images?: IImages;\n  external_ids?: IExternalids;\n  name: string;\n  also_known_as: string[];\n  biography: string;\n  adult: boolean;\n  gender: number;\n  place_of_birth: string;\n  popularity: number;\n}\n\nexport interface IPersonCredits {\n  cast: IPersonCastCrew[];\n  crew: IPersonCastCrew[];\n  id?: number;\n}\n\nexport interface IPersonCastCrew {\n  id?: number;\n  original_language: string;\n  episode_count?: number;\n  overview: string;\n  origin_country?: string[];\n  original_name?: string;\n  genre_ids: number[];\n  name?: string;\n  media_type: string;\n  poster_path: null | string;\n  first_air_date?: string;\n  vote_average: number;\n  vote_count: number;\n  character?: string;\n  backdrop_path: null | string;\n  popularity: number;\n  credit_id: string;\n  original_title?: string;\n  video?: boolean;\n  release_date?: string;\n  title?: string;\n  adult?: boolean;\n  department?: string;\n  job?: string;\n}\n\nexport interface IExternalids {\n  id?: number;\n  freebase_id: string;\n  instagram_id: string;\n  tvrage_id: number;\n  twitter_id: string;\n  freebase_mid: string;\n  imdb_id: string;\n  facebook_id: string;\n}\n\nexport interface IImages {\n  id?: number;\n  profiles: IProfile[];\n}\n\nexport interface IProfile {\n  iso_639_1?: any;\n  aspect_ratio: number;\n  vote_count: number;\n  height: number;\n  vote_average: number;\n  file_path: string;\n  width: number;\n}\n\nexport interface ICredits {\n  cast: ICast[];\n  crew: ICrew[];\n}\n\ninterface ICast {\n  poster_path?: string;\n  adult: boolean;\n  backdrop_path?: string;\n  vote_count: number;\n  video: boolean;\n  id: number;\n  media_type?: string;\n  popularity: number;\n  genre_ids: number[];\n  original_language: string;\n  title: string;\n  original_title: string;\n  release_date: string;\n  character: string;\n  vote_average: number;\n  overview: string;\n  credit_id: string;\n}\n\ninterface ICrew {\n  id: number;\n  department: string;\n  original_language: string;\n  original_title: string;\n  job: string;\n  overview: string;\n  genre_ids: number[];\n  video: boolean;\n  episode_count: number\n  media_type?: string;\n  credit_id: string;\n  poster_path?: string;\n  popularity: number;\n  backdrop_path?: string;\n  vote_count: number;\n  title: string;\n  adult: boolean;\n  vote_average: number;\n  release_date: string;\n}\n\nexport interface IUserSavedData {\n  id?: string,\n  title: string,\n  year: number,\n  tmdbId: number,\n}\n\nexport enum GenreCodes {\n  Action = 28,\n  Adventure = 12,\n  Animation = 16,\n  Comedy = 35,\n  Crime = 80,\n  Documentary = 99,\n  Drama = 18,\n  Family = 10751,\n  Fantasy = 14,\n  History = 36,\n  Horror = 27,\n  Music = 10402,\n  Mystery = 9648,\n  Romance = 10749,\n  ScienceFiction = 878,\n  TVMovie = 10770,\n  Thriller = 53,\n  War = 10752,\n  Western = 37,\n  // mdb reserved\n  FilmNoir = 20000,\n  // similar genre: Music id:10402\n  Musical = 20001,\n  News = 20002,\n  RealityTV = 20003,\n  // similar genre: Science Fiction id:878\n  SciFi = 20004,\n  // another media type\n  Short = 20005,\n  Sport = 20006,\n}\n\n\n\n/**\nexport enum Department {\n    Art = \"Art\",\n    Camera = \"Camera\",\n    CostumeMakeUp = \"Costume & Make-Up\",\n    Crew = \"Crew\",\n    Directing = \"Directing\",\n    Editing = \"Editing\",\n    Lighting = \"Lighting\",\n    Production = \"Production\",\n    Sound = \"Sound\",\n    VisualEffects = \"Visual Effects\",\n    Writing = \"Writing\",\n}\n\nexport interface ExternalIDS {\n    imdb_id:      string;\n    facebook_id:  null;\n    instagram_id: null;\n    twitter_id:   null;\n}\n\nexport interface Genre {\n    id:   number;\n    name: string;\n}\n\nexport interface Images {\n    backdrops: any[];\n    posters:   any[];\n}\n\nexport enum OriginalLanguage {\n    En = \"en\",\n    Es = \"es\",\n    Fr = \"fr\",\n}\n\nexport interface ProductionCompany {\n    id:             number;\n    logo_path:      string;\n    name:           string;\n    origin_country: string;\n}\n\nexport interface ProductionCountry {\n    iso_3166_1: string;\n    name:       string;\n}\n\nexport interface Recommendations {\n    page:          number;\n    results:       RecommendationsResult[];\n    total_pages:   number;\n    total_results: number;\n}\n\nexport interface RecommendationsResult {\n    id:                number;\n    video:             boolean;\n    vote_count:        number;\n    vote_average:      number;\n    title:             string;\n    release_date:      string;\n    original_language: OriginalLanguage;\n    original_title:    string;\n    genre_ids:         number[];\n    backdrop_path:     string;\n    adult:             boolean;\n    overview:          string;\n    poster_path:       string;\n    popularity:        number;\n}\n\nexport interface SpokenLanguage {\n    iso_639_1: OriginalLanguage;\n    name:      string;\n}\n\nexport interface Videos {\n    results: VideosResult[];\n}\n\nexport interface VideosResult {\n    id:         string;\n    iso_639_1:  OriginalLanguage;\n    iso_3166_1: string;\n    key:        string;\n    name:       string;\n    site:       string;\n    size:       number;\n    type:       string;\n}\n */\n\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 482
                },
                {
                    "name": "profiles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IProfile[]",
                    "optional": false,
                    "description": "",
                    "line": 483
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ILibrary",
            "id": "interface-ILibrary-88e397b48570501d2155099bb31f9322acc23bd18595d1aca93c37f8404b5193d4990a928e2ef0f2759f3078524d816543be05c53659fcf0f24800e145c77598",
            "file": "src/app/services/ipc.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { environment } from '@environments/environment';\nimport * as IPCRendererChannel from '../../assets/IPCRendererChannel.json';\nimport * as IPCMainChannel from '../../assets/IPCMainChannel.json';\nimport { v4 as uuidv4 } from 'uuid'\nimport { Injectable } from '@angular/core'\nimport { BehaviorSubject, Observable, fromEvent } from 'rxjs'\nimport { ipcRenderer } from 'electron'\nimport { ILibraryInfo } from '@models/interfaces'\nimport { IRawLibrary } from './library.service';\nimport { IWatched } from './watched.service';\nimport { Review } from '@models/review.model';\nimport { IProfileData, ListLinkMovie } from '@models/profile-data.model';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class IpcService {\n\n  libraryMovies = new BehaviorSubject<string[]>([])\n  libraryMovie = new BehaviorSubject<string[]>([])\n  bookmarkChanges = new BehaviorSubject<IBookmarkChanges[]>([])\n  movieIdentified = new BehaviorSubject<any>({ id: 0 })\n  searchList = new BehaviorSubject<any>([])\n  torrentVideo = new BehaviorSubject<string[]>([])\n  preferences = new BehaviorSubject<any>([])\n  streamLink = new BehaviorSubject<any>('')\n  private statsForNerds = new BehaviorSubject<any>({})\n  statsForNerdsSubscribable = this.statsForNerds.asObservable()\n  private ipcRenderer: typeof ipcRenderer\n\n  constructor() {\n    if (environment.runConfig.electron) {\n\n      console.log((window as any).require('electron'))\n\n      this.ipcRenderer = (window as any).require('electron').ipcRenderer\n\n      this.ipcRenderer.on('torrent-video', (event, data: any) => {\n        console.log('event: ', event)\n        console.log('data: ', data)\n        this.torrentVideo.next(data)\n      })\n\n      this.ipcRenderer.on(IPCMainChannel.PREFERENCES_GET_COMPLETE, (event: Electron.IpcRendererEvent, data) => {\n        this.preferences.next(data)\n        console.log('IPCMainChannel.PREFERENCES_COMPLETE ', data)\n      })\n      this.ipcRenderer.on(IPCMainChannel.STREAM_LINK, (event: Electron.IpcRendererEvent, data) => {\n        this.streamLink.next(data)\n        console.log('IPCMainChannel.STREAM_LINK ', data)\n      })\n      this.ipcRenderer.on(IPCMainChannel.STATS, (event: Electron.IpcRendererEvent, data) => {\n        this.statsForNerds.next(data)\n        console.log('IPCMainChannel.STATS ', data)\n      })\n    }\n  }\n\n  async getFiles() {\n    // return new Promise<string[]>((resolve, reject) => {\n    //   this.ipcRenderer.once('library-folders', (event, arg) => {\n    //     resolve(arg);\n    //   });\n    //   this.ipcRenderer.send('retrieve-library-folders');\n    // });\n  }\n\n  /**\n   * Gets the drives in the system.\n   */\n  async getSystemDrives() {\n    // return new Promise<string[]>((resolve, reject) => {\n    //   this.ipcRenderer.once('system-drives', (event, arg) => {\n    //     resolve(arg);\n    //   });\n    // });\n    // this.ipcRenderer.send('get-drives')\n  }\n  /**\n   * Opens the folder\n   * @param data folder directory\n   */\n  openFolder(data: string) {\n    console.log('open', data)\n    // this.ipcRenderer.send('go-to-folder', ['open', data])\n  }\n\n  /**\n   * Ipc renderer that sends command to main renderer to get movies from library db.\n   * @param idList\n   */\n  getMoviesFromLibraryInList(idList: number[]): Promise<any> {\n    const theUuid = uuidv4()\n    this.sendToMain('library', { operation: IpcOperations.FIND_IN_LIST, uuid: theUuid },\n      { idList: idList });\n    return this.listenOnce(`library-${theUuid}`);\n  }\n\n  /**\n   * Paginated, first page.\n   * @param collectionName\n   * @param order\n   * @param size\n   */\n  getMultiplePaginatedFirst(collectionName: string, sort: string, size?: number): Promise<IUserDataPaginated> {\n    const theUuid = uuidv4()\n    this.sendToMain(collectionName, { operation: IpcOperations.GET_BY_PAGE, uuid: theUuid },\n      { sort: sort, size: size, lastVal: 0 });\n    return this.listenOnce(`${collectionName}-${theUuid}`);\n  }\n\n  /**\n   * Paginated, NOT first page.\n   * @param collectionName\n   * @param order\n   * @param limit\n   * @param lastVal\n   */\n  getMultiplePaginated(collectionName: string, sort: string, limit?: number, lastVal?: string | number): Promise<IUserDataPaginated> {\n    const theUuid = uuidv4()\n    this.sendToMain(collectionName, { operation: IpcOperations.GET_BY_PAGE, uuid: theUuid },\n      { sort: sort, limit: limit, lastVal: lastVal });\n    return this.listenOnce(`${collectionName}-${theUuid}`);\n  }\n\n  /**\n   * Ipc renderer that sends command to main renderer to get specified movie from library db.\n   * Replies offline library object(s).\n   * @param arg imdb id or movie title and release year or tmdb id\n   */\n  getMovieFromLibrary(arg): Promise<IRawLibrary> {\n    const theUuid = uuidv4()\n    this.sendToMain('library', { operation: IpcOperations.FIND, uuid: theUuid },\n      { tmdbId: arg });\n    return this.listenOnce(`library-${theUuid}`);\n  }\n\n  // // user services; watchlist/bookmarks, watched\n  getBookmark(data: number) {\n    const theUuid = uuidv4()\n    this.sendToMain('bookmark', { operation: IpcOperations.FIND_ONE, uuid: theUuid },\n      { tmdbId: data })\n    return this.listenOnce(`bookmark-${theUuid}`);\n  }\n\n  getBookmarkInList(idList: number[]): Promise<any> {\n    const theUuid = uuidv4()\n    this.sendToMain('bookmark', {\n      operation: IpcOperations.FIND_IN_LIST,\n      uuid: theUuid\n    }, { idList: idList });\n    return this.listenOnce(`bookmark-${theUuid}`);\n  }\n\n  saveBookmark(data) {\n    const theUuid = uuidv4()\n    this.sendToMain('bookmark', { operation: IpcOperations.SAVE, uuid: theUuid },\n      data);\n    return this.listenOnce(`bookmark-${theUuid}`);\n  }\n\n  removeBookmark(type: string, id: string | number) {\n    const theUuid = uuidv4()\n    this.sendToMain('bookmark', { operation: IpcOperations.REMOVE, uuid: theUuid }, { type: type, id: id });\n    return this.listenOnce(`bookmark-${theUuid}`);\n  }\n\n  // ----- WATCHED\n  getWatched(data: number) {\n    const theUuid = uuidv4()\n    this.sendToMain('watched', { operation: IpcOperations.FIND_ONE, uuid: theUuid },\n      { tmdbId: data })\n    return this.listenOnce(`watched-${theUuid}`);\n  }\n\n  /**\n   * Ipc renderer that sends command to main renderer to get movies from library db.\n   * @param idList\n   */\n  getWatchedInList(idList: number[]): Promise<any> {\n    const theUuid = uuidv4()\n    this.sendToMain('watched', {\n      operation: IpcOperations.FIND_IN_LIST,\n      uuid: theUuid\n    }, { idList: idList });\n    return this.listenOnce(`watched-${theUuid}`);\n  }\n\n  saveWatched(data) {\n    const theUuid = uuidv4()\n    this.sendToMain('watched', { operation: IpcOperations.SAVE, uuid: theUuid }, data);\n    return this.listenOnce(`watched-${theUuid}`);\n  }\n\n  updateWatchedStatus(val: IWatched) {\n    this.ipcRenderer.send('', val)\n  }\n\n  /**\n   * TODO: remove type\n   */\n  removeWatched(type: string, id: string | number) {\n    const theUuid = uuidv4()\n    this.sendToMain('watched', { operation: IpcOperations.REMOVE, uuid: theUuid }, { type: type, id: id });\n    return this.listenOnce(`watched-${theUuid}`);\n  }\n\n\n  // ----- END OF WATCHED\n  /**\n   *\n   * @param id tmdb id\n   */\n  getMovieUserData(id: number): Promise<IProfileData> {\n    const theUuid = uuidv4()\n    this.sendToMain('user-data', {\n      operation: IpcOperations.FIND,\n      uuid: theUuid\n    }, { tmdbId: id });\n    return this.listenOnce(`user-data-${theUuid}`);\n  }\n\n  getMovieUserDataInList(idList: number[]): Promise<IProfileData[]> {\n    const theUuid = uuidv4()\n    this.sendToMain('user-data', {\n      operation: IpcOperations.FIND_IN_LIST,\n      uuid: theUuid\n    }, { idList: idList });\n    return this.listenOnce(`user-data-${theUuid}`)\n  }\n\n  saveFavorite(data) {\n    const theUuid = uuidv4()\n    this.sendToMain('favorite', { operation: IpcOperations.SAVE, uuid: theUuid }, data);\n    return this.listenOnce(`favorite-${theUuid}`);\n  }\n\n  // ----- END OF USER DATA\n  startScanLibrary() {\n\n    this.sendToMain(IPCRendererChannel.SCAN_LIBRARY_START)\n    this.ipcRenderer.on(IPCMainChannel.ScanLibraryResult, e => {\n      console.log(IPCMainChannel.ScanLibraryResult, e)\n    })\n    this.ipcRenderer.once(IPCMainChannel.ScanLibraryComplete, e => {\n      console.log('completscan')\n      this.ipcRenderer.removeListener(IPCMainChannel.ScanLibraryResult, d => { })\n    })\n  }\n\n  stopScanLibrary() {\n    this.sendToMain(IPCRendererChannel.SCAN_LIBRARY_STOP)\n  }\n\n  getPlayTorrent(hash: string): Promise<any> {\n    this.sendToMain(IPCRendererChannel.PLAY_TORRENT, hash)\n    return this.listenOnce(`stream-link`);\n  }\n\n  stopStream() {\n    this.sendToMain(IPCRendererChannel.STOP_STREAM)\n  }\n\n  playOfflineVideo(docId): Promise<any> {\n    this.sendToMain(IPCRendererChannel.PLAY_OFFLINE_VIDEO_STREAM, docId);\n    return this.listenOnce(`stream-link`);\n  }\n\n  getPreferences() {\n\n    this.sendToMain(IPCRendererChannel.PREFERENCES_GET)\n    // this.ipcRenderer.addListener(IPCMainChannel.PREFERENCES_GET_COMPLETE, this.pref)\n\n    // (event, data: any) => {\n    // console.log('IPCMainChannel.PREFERENCES_COMPLETE ', data)\n    // this.pref()\n    // this.preferences.next(data)\n    // this.ipcRenderer.removeListener(IPCMainChannel.PREFERENCES_GET_COMPLETE, e => { })\n    // })\n  }\n\n  savePreferences(val) {\n    this.sendToMain(IPCRendererChannel.PREFERENCES_SET, val)\n    // this.ipcRenderer.on(IPCMainChannel.PREFERENCES_SET_COMPLETE, (event, data: any) => {\n    //   console.log('IPCMainChannel.PREFERENCES_SET_COMPLETE ', data)\n    //   this.preferences.next(data)\n    //   this.ipcRenderer.removeListener(IPCMainChannel.PREFERENCES_SET_COMPLETE, d => { })\n    // })\n  }\n\n  changeSubtitle(): Promise<any> {\n    this.sendToMain(\"get-subtitle\")\n    return this.listenOnce('subtitle-path')\n  }\n\n  minimizeWindow() {\n    this.sendToMain(this.IPCCommand.MinimizeApp)\n  }\n  minimizeRestoreWindow() {\n    this.sendToMain(this.IPCCommand.RestoreApp)\n  }\n  exitApp() {\n    this.sendToMain(this.IPCCommand.ExitApp)\n  }\n\n  private removeListener(channel: string) {\n    console.log('REMOVING LISTENER', channel)\n    this.ipcRenderer.removeListener(channel, d => { })\n  }\n\n  private sendToMain(channel: string, headers?: Headers | string, body?: Body) {\n    try {\n      this.ipcRenderer.send(channel, [headers, body])\n      console.log('sent to ipc... ', channel, [headers, body])\n    } catch {\n      console.log('failed to send Ipc: ', channel, [headers, body])\n    }\n  }\n\n  private listenOnce(channel: string) {\n    return new Promise<any>((resolve, reject) => {\n      try {\n        this.ipcRenderer.once(channel, (event, arg) => {\n          console.log('channel: ', channel, ' arg: ', arg)\n          resolve(arg);\n        });\n      } catch {\n        resolve(null);\n        console.log(`listen ${channel} failed`)\n      }\n    });\n  }\n\n  IPCCommand = IPCRendererChannel['default']\n  IPCChannel = IPCMainChannel['default']\n}\n\ninterface Headers {\n  operation: IpcOperations,\n  uuid: string\n}\n\ninterface Body {\n  tmdbId?: number\n  idList?: number[]\n  [x: string]: any\n}\n\nenum IpcOperations {\n  FIND = 'find',\n  FIND_ONE = 'find-one',\n  FIND_IN_LIST = 'find-in-list',\n  UPDATE = 'update',\n  SAVE = 'save',\n  REMOVE = 'remove',\n  GET_BY_PAGE = 'get-by-page',\n  COUNT = 'count'\n}\nexport interface IBookmarkChanges {\n  change: BookmarkChanges\n}\n\nexport enum BookmarkChanges {\n  UPDATE = 'update',\n  DELETE = 'delete',\n  INSERT = 'insert'\n}\n\nexport interface IBookmark {\n  tmdbId: number,\n  imdbId: string,\n  id: string\n}\n\n\n\ninterface ILibrary {\n  title?: string,\n  year?: number,\n  tmdbId?: number,\n  imdbId?: string,\n  libraryList: ILibraryData[]\n}\n\ninterface ILibraryData {\n  fullFilePath: string,\n  _id: string\n}\n\nexport interface IUserDataPaginated {\n  totalPages: number,\n  totalResults: number,\n  page?: number,\n  results: any[],\n}\n\ninterface SortObject {\n  [x: string]: 1 | -1\n}\n",
            "properties": [
                {
                    "name": "imdbId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 389
                },
                {
                    "name": "libraryList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ILibraryData[]",
                    "optional": false,
                    "description": "",
                    "line": 390
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 386
                },
                {
                    "name": "tmdbId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 388
                },
                {
                    "name": "year",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 387
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ILibraryData",
            "id": "interface-ILibraryData-88e397b48570501d2155099bb31f9322acc23bd18595d1aca93c37f8404b5193d4990a928e2ef0f2759f3078524d816543be05c53659fcf0f24800e145c77598",
            "file": "src/app/services/ipc.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { environment } from '@environments/environment';\nimport * as IPCRendererChannel from '../../assets/IPCRendererChannel.json';\nimport * as IPCMainChannel from '../../assets/IPCMainChannel.json';\nimport { v4 as uuidv4 } from 'uuid'\nimport { Injectable } from '@angular/core'\nimport { BehaviorSubject, Observable, fromEvent } from 'rxjs'\nimport { ipcRenderer } from 'electron'\nimport { ILibraryInfo } from '@models/interfaces'\nimport { IRawLibrary } from './library.service';\nimport { IWatched } from './watched.service';\nimport { Review } from '@models/review.model';\nimport { IProfileData, ListLinkMovie } from '@models/profile-data.model';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class IpcService {\n\n  libraryMovies = new BehaviorSubject<string[]>([])\n  libraryMovie = new BehaviorSubject<string[]>([])\n  bookmarkChanges = new BehaviorSubject<IBookmarkChanges[]>([])\n  movieIdentified = new BehaviorSubject<any>({ id: 0 })\n  searchList = new BehaviorSubject<any>([])\n  torrentVideo = new BehaviorSubject<string[]>([])\n  preferences = new BehaviorSubject<any>([])\n  streamLink = new BehaviorSubject<any>('')\n  private statsForNerds = new BehaviorSubject<any>({})\n  statsForNerdsSubscribable = this.statsForNerds.asObservable()\n  private ipcRenderer: typeof ipcRenderer\n\n  constructor() {\n    if (environment.runConfig.electron) {\n\n      console.log((window as any).require('electron'))\n\n      this.ipcRenderer = (window as any).require('electron').ipcRenderer\n\n      this.ipcRenderer.on('torrent-video', (event, data: any) => {\n        console.log('event: ', event)\n        console.log('data: ', data)\n        this.torrentVideo.next(data)\n      })\n\n      this.ipcRenderer.on(IPCMainChannel.PREFERENCES_GET_COMPLETE, (event: Electron.IpcRendererEvent, data) => {\n        this.preferences.next(data)\n        console.log('IPCMainChannel.PREFERENCES_COMPLETE ', data)\n      })\n      this.ipcRenderer.on(IPCMainChannel.STREAM_LINK, (event: Electron.IpcRendererEvent, data) => {\n        this.streamLink.next(data)\n        console.log('IPCMainChannel.STREAM_LINK ', data)\n      })\n      this.ipcRenderer.on(IPCMainChannel.STATS, (event: Electron.IpcRendererEvent, data) => {\n        this.statsForNerds.next(data)\n        console.log('IPCMainChannel.STATS ', data)\n      })\n    }\n  }\n\n  async getFiles() {\n    // return new Promise<string[]>((resolve, reject) => {\n    //   this.ipcRenderer.once('library-folders', (event, arg) => {\n    //     resolve(arg);\n    //   });\n    //   this.ipcRenderer.send('retrieve-library-folders');\n    // });\n  }\n\n  /**\n   * Gets the drives in the system.\n   */\n  async getSystemDrives() {\n    // return new Promise<string[]>((resolve, reject) => {\n    //   this.ipcRenderer.once('system-drives', (event, arg) => {\n    //     resolve(arg);\n    //   });\n    // });\n    // this.ipcRenderer.send('get-drives')\n  }\n  /**\n   * Opens the folder\n   * @param data folder directory\n   */\n  openFolder(data: string) {\n    console.log('open', data)\n    // this.ipcRenderer.send('go-to-folder', ['open', data])\n  }\n\n  /**\n   * Ipc renderer that sends command to main renderer to get movies from library db.\n   * @param idList\n   */\n  getMoviesFromLibraryInList(idList: number[]): Promise<any> {\n    const theUuid = uuidv4()\n    this.sendToMain('library', { operation: IpcOperations.FIND_IN_LIST, uuid: theUuid },\n      { idList: idList });\n    return this.listenOnce(`library-${theUuid}`);\n  }\n\n  /**\n   * Paginated, first page.\n   * @param collectionName\n   * @param order\n   * @param size\n   */\n  getMultiplePaginatedFirst(collectionName: string, sort: string, size?: number): Promise<IUserDataPaginated> {\n    const theUuid = uuidv4()\n    this.sendToMain(collectionName, { operation: IpcOperations.GET_BY_PAGE, uuid: theUuid },\n      { sort: sort, size: size, lastVal: 0 });\n    return this.listenOnce(`${collectionName}-${theUuid}`);\n  }\n\n  /**\n   * Paginated, NOT first page.\n   * @param collectionName\n   * @param order\n   * @param limit\n   * @param lastVal\n   */\n  getMultiplePaginated(collectionName: string, sort: string, limit?: number, lastVal?: string | number): Promise<IUserDataPaginated> {\n    const theUuid = uuidv4()\n    this.sendToMain(collectionName, { operation: IpcOperations.GET_BY_PAGE, uuid: theUuid },\n      { sort: sort, limit: limit, lastVal: lastVal });\n    return this.listenOnce(`${collectionName}-${theUuid}`);\n  }\n\n  /**\n   * Ipc renderer that sends command to main renderer to get specified movie from library db.\n   * Replies offline library object(s).\n   * @param arg imdb id or movie title and release year or tmdb id\n   */\n  getMovieFromLibrary(arg): Promise<IRawLibrary> {\n    const theUuid = uuidv4()\n    this.sendToMain('library', { operation: IpcOperations.FIND, uuid: theUuid },\n      { tmdbId: arg });\n    return this.listenOnce(`library-${theUuid}`);\n  }\n\n  // // user services; watchlist/bookmarks, watched\n  getBookmark(data: number) {\n    const theUuid = uuidv4()\n    this.sendToMain('bookmark', { operation: IpcOperations.FIND_ONE, uuid: theUuid },\n      { tmdbId: data })\n    return this.listenOnce(`bookmark-${theUuid}`);\n  }\n\n  getBookmarkInList(idList: number[]): Promise<any> {\n    const theUuid = uuidv4()\n    this.sendToMain('bookmark', {\n      operation: IpcOperations.FIND_IN_LIST,\n      uuid: theUuid\n    }, { idList: idList });\n    return this.listenOnce(`bookmark-${theUuid}`);\n  }\n\n  saveBookmark(data) {\n    const theUuid = uuidv4()\n    this.sendToMain('bookmark', { operation: IpcOperations.SAVE, uuid: theUuid },\n      data);\n    return this.listenOnce(`bookmark-${theUuid}`);\n  }\n\n  removeBookmark(type: string, id: string | number) {\n    const theUuid = uuidv4()\n    this.sendToMain('bookmark', { operation: IpcOperations.REMOVE, uuid: theUuid }, { type: type, id: id });\n    return this.listenOnce(`bookmark-${theUuid}`);\n  }\n\n  // ----- WATCHED\n  getWatched(data: number) {\n    const theUuid = uuidv4()\n    this.sendToMain('watched', { operation: IpcOperations.FIND_ONE, uuid: theUuid },\n      { tmdbId: data })\n    return this.listenOnce(`watched-${theUuid}`);\n  }\n\n  /**\n   * Ipc renderer that sends command to main renderer to get movies from library db.\n   * @param idList\n   */\n  getWatchedInList(idList: number[]): Promise<any> {\n    const theUuid = uuidv4()\n    this.sendToMain('watched', {\n      operation: IpcOperations.FIND_IN_LIST,\n      uuid: theUuid\n    }, { idList: idList });\n    return this.listenOnce(`watched-${theUuid}`);\n  }\n\n  saveWatched(data) {\n    const theUuid = uuidv4()\n    this.sendToMain('watched', { operation: IpcOperations.SAVE, uuid: theUuid }, data);\n    return this.listenOnce(`watched-${theUuid}`);\n  }\n\n  updateWatchedStatus(val: IWatched) {\n    this.ipcRenderer.send('', val)\n  }\n\n  /**\n   * TODO: remove type\n   */\n  removeWatched(type: string, id: string | number) {\n    const theUuid = uuidv4()\n    this.sendToMain('watched', { operation: IpcOperations.REMOVE, uuid: theUuid }, { type: type, id: id });\n    return this.listenOnce(`watched-${theUuid}`);\n  }\n\n\n  // ----- END OF WATCHED\n  /**\n   *\n   * @param id tmdb id\n   */\n  getMovieUserData(id: number): Promise<IProfileData> {\n    const theUuid = uuidv4()\n    this.sendToMain('user-data', {\n      operation: IpcOperations.FIND,\n      uuid: theUuid\n    }, { tmdbId: id });\n    return this.listenOnce(`user-data-${theUuid}`);\n  }\n\n  getMovieUserDataInList(idList: number[]): Promise<IProfileData[]> {\n    const theUuid = uuidv4()\n    this.sendToMain('user-data', {\n      operation: IpcOperations.FIND_IN_LIST,\n      uuid: theUuid\n    }, { idList: idList });\n    return this.listenOnce(`user-data-${theUuid}`)\n  }\n\n  saveFavorite(data) {\n    const theUuid = uuidv4()\n    this.sendToMain('favorite', { operation: IpcOperations.SAVE, uuid: theUuid }, data);\n    return this.listenOnce(`favorite-${theUuid}`);\n  }\n\n  // ----- END OF USER DATA\n  startScanLibrary() {\n\n    this.sendToMain(IPCRendererChannel.SCAN_LIBRARY_START)\n    this.ipcRenderer.on(IPCMainChannel.ScanLibraryResult, e => {\n      console.log(IPCMainChannel.ScanLibraryResult, e)\n    })\n    this.ipcRenderer.once(IPCMainChannel.ScanLibraryComplete, e => {\n      console.log('completscan')\n      this.ipcRenderer.removeListener(IPCMainChannel.ScanLibraryResult, d => { })\n    })\n  }\n\n  stopScanLibrary() {\n    this.sendToMain(IPCRendererChannel.SCAN_LIBRARY_STOP)\n  }\n\n  getPlayTorrent(hash: string): Promise<any> {\n    this.sendToMain(IPCRendererChannel.PLAY_TORRENT, hash)\n    return this.listenOnce(`stream-link`);\n  }\n\n  stopStream() {\n    this.sendToMain(IPCRendererChannel.STOP_STREAM)\n  }\n\n  playOfflineVideo(docId): Promise<any> {\n    this.sendToMain(IPCRendererChannel.PLAY_OFFLINE_VIDEO_STREAM, docId);\n    return this.listenOnce(`stream-link`);\n  }\n\n  getPreferences() {\n\n    this.sendToMain(IPCRendererChannel.PREFERENCES_GET)\n    // this.ipcRenderer.addListener(IPCMainChannel.PREFERENCES_GET_COMPLETE, this.pref)\n\n    // (event, data: any) => {\n    // console.log('IPCMainChannel.PREFERENCES_COMPLETE ', data)\n    // this.pref()\n    // this.preferences.next(data)\n    // this.ipcRenderer.removeListener(IPCMainChannel.PREFERENCES_GET_COMPLETE, e => { })\n    // })\n  }\n\n  savePreferences(val) {\n    this.sendToMain(IPCRendererChannel.PREFERENCES_SET, val)\n    // this.ipcRenderer.on(IPCMainChannel.PREFERENCES_SET_COMPLETE, (event, data: any) => {\n    //   console.log('IPCMainChannel.PREFERENCES_SET_COMPLETE ', data)\n    //   this.preferences.next(data)\n    //   this.ipcRenderer.removeListener(IPCMainChannel.PREFERENCES_SET_COMPLETE, d => { })\n    // })\n  }\n\n  changeSubtitle(): Promise<any> {\n    this.sendToMain(\"get-subtitle\")\n    return this.listenOnce('subtitle-path')\n  }\n\n  minimizeWindow() {\n    this.sendToMain(this.IPCCommand.MinimizeApp)\n  }\n  minimizeRestoreWindow() {\n    this.sendToMain(this.IPCCommand.RestoreApp)\n  }\n  exitApp() {\n    this.sendToMain(this.IPCCommand.ExitApp)\n  }\n\n  private removeListener(channel: string) {\n    console.log('REMOVING LISTENER', channel)\n    this.ipcRenderer.removeListener(channel, d => { })\n  }\n\n  private sendToMain(channel: string, headers?: Headers | string, body?: Body) {\n    try {\n      this.ipcRenderer.send(channel, [headers, body])\n      console.log('sent to ipc... ', channel, [headers, body])\n    } catch {\n      console.log('failed to send Ipc: ', channel, [headers, body])\n    }\n  }\n\n  private listenOnce(channel: string) {\n    return new Promise<any>((resolve, reject) => {\n      try {\n        this.ipcRenderer.once(channel, (event, arg) => {\n          console.log('channel: ', channel, ' arg: ', arg)\n          resolve(arg);\n        });\n      } catch {\n        resolve(null);\n        console.log(`listen ${channel} failed`)\n      }\n    });\n  }\n\n  IPCCommand = IPCRendererChannel['default']\n  IPCChannel = IPCMainChannel['default']\n}\n\ninterface Headers {\n  operation: IpcOperations,\n  uuid: string\n}\n\ninterface Body {\n  tmdbId?: number\n  idList?: number[]\n  [x: string]: any\n}\n\nenum IpcOperations {\n  FIND = 'find',\n  FIND_ONE = 'find-one',\n  FIND_IN_LIST = 'find-in-list',\n  UPDATE = 'update',\n  SAVE = 'save',\n  REMOVE = 'remove',\n  GET_BY_PAGE = 'get-by-page',\n  COUNT = 'count'\n}\nexport interface IBookmarkChanges {\n  change: BookmarkChanges\n}\n\nexport enum BookmarkChanges {\n  UPDATE = 'update',\n  DELETE = 'delete',\n  INSERT = 'insert'\n}\n\nexport interface IBookmark {\n  tmdbId: number,\n  imdbId: string,\n  id: string\n}\n\n\n\ninterface ILibrary {\n  title?: string,\n  year?: number,\n  tmdbId?: number,\n  imdbId?: string,\n  libraryList: ILibraryData[]\n}\n\ninterface ILibraryData {\n  fullFilePath: string,\n  _id: string\n}\n\nexport interface IUserDataPaginated {\n  totalPages: number,\n  totalResults: number,\n  page?: number,\n  results: any[],\n}\n\ninterface SortObject {\n  [x: string]: 1 | -1\n}\n",
            "properties": [
                {
                    "name": "_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 395
                },
                {
                    "name": "fullFilePath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 394
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ILibraryInfo",
            "id": "interface-ILibraryInfo-584d54738f93e2af94202069b5eddb4cab23bb2dfec2ff69f24ebaf881c252f94680b4cd6cec302796817692570a31bedafc5d74fed1cf6488a895dbf372e23d",
            "file": "src/app/models/interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IMdbMovieDetails {\n  awards?: string\n  backgroundPath: string;\n  belongsToCollection?: []\n  boxOffice?: string | number // tmdb:revenue(number)\n  budget?: number\n  country?: string\n  director?: string\n  dvd?: string // dvd release\n  genres?: string[] | string | IGenre[]\n  imdbId?: string\n  imdbRating?: string\n  imdbVotes?: string\n  isAdult?: boolean;\n  isAvailable?: boolean;\n  languages?: string[]\n  libraryInfo?: ILibraryInfo\n  metascore?: string // metacritic score\\\n  originalLanguage?: string // tmdb:\"en\",omdb:\"English\"\n  originalTitle?: string\n  plot?: string // plot or overview\n  popularity?: number\n  posterPath: string\n  production?: string // company; i.e. Walt Disney Pictures\n  rated?: string // rated or certificate\n  ratings?: IRating[]\n  releaseDate?: string // omdb:\"05 May 2017\"; tmdb:\"1999-10-15\"\n  releaseYear?: number | string\n  response: string\n  runtime?: string\n  starring?: string // Actors field in omdb\n  status?: string // released/Post\n  tagline?: string;\n  tmdbId?: number\n  title: string\n  type?: string // movie/tvmovie/series\n  video?: boolean; // unknown\n  // voteAverage: number; // tmdb votes\n  // voteCount: number; // tmdb votes\n  website?: string\n  writer?: string // omdb\n  [propName: string]: any;\n}\n\nexport interface IRating {\n  Source: string\n  Value: string\n}\n\nexport interface LibraryInfo {\n  tmdbId?: null | number | string\n  imdbID?: string\n  title?: string\n  year?: number\n  directoryList?: string[]\n  _id: string\n}\n\nexport interface MovieGenre {\n  id: number\n  code: string\n  description: string\n  isChecked: boolean\n}\n\nexport interface WatchList {\n  id: number\n  movieList: string[]\n}\n\nexport interface ILibraryInfo {\n  tmdbId?: null | number | string\n  imdbID?: string\n  title?: string\n  year?: number\n  directoryList?: string[]\n  _id: string\n}\n\nexport interface ICollection {\n  id: number,\n  name: string\n}\n\nexport interface IProductionCompany {\n  id: number;\n  logo_path: null | string;\n  name: string;\n  origin_country: string;\n}\n\nexport interface IProductionCountry {\n  iso_3166_1: string;\n  name: string;\n}\n\nexport interface ISpokenLanguage {\n  iso_639_1: string;\n  name: string;\n}\n\nexport interface IOmdbMovieDetail {\n  Title: string\n  Year?: string\n  Rated?: string\n  Released?: string // \"05 May 2017\"\n  Runtime?: string\n  Genre?: string\n  Director?: string\n  Writer?: string\n  Actors?: string\n  Plot?: string\n  Language?: string\n  Country?: string\n  Awards?: string\n  Poster?: string\n  Ratings?: IRating[]\n  Metascore?: string\n  imdbRating?: string\n  imdbVotes?: string\n  imdbID: string\n  Type?: string\n  DVD?: string\n  BoxOffice?: string\n  Production?: string\n  Website?: string\n  Response: string\n}\n\nexport interface ITmdbMovieDetail {\n  adult: boolean;\n  backdrop_path: string;\n  belongs_to_collection: null;\n  budget: number;\n  genres: IGenre[];\n  homepage: string;\n  id: number;\n  imdb_id: string;\n  original_language: string;\n  original_title: string;\n  overview: string;\n  popularity: number;\n  poster_path: string;\n  production_companies: IProductionCompany[];\n  production_countries: IProductionCountry[];\n  release_date: string;\n  revenue: number;\n  runtime: number;\n  spoken_languages: ISpokenLanguage[];\n  status: string;\n  tagline: string;\n  title: string;\n  video: boolean;\n  vote_average: number;\n  vote_count: number;\n}\n\nexport interface MdbMovieDetails {\n  adult?: boolean;\n  title: string\n  releaseYear?: string\n  releaseDate?: string\n  rated?: string // rated or certificate\n  runtime?: string\n  genres?: string\n  director?: string\n  writer?: string\n  Actors?: string\n  plot?: string // plot or overview\n  Language?: string\n  Country?: string\n  Awards?: string\n  Poster?: string\n  Ratings?: IRating[]\n  Metascore?: string\n  imdbRating?: string\n  imdbVotes?: string\n  imdbID: string\n  tmdbID: number\n  Type?: string\n  DVD?: string\n  BoxOffice?: string\n  Production?: string\n  website?: string\n  response: string\n  libraryInfo?: ILibraryInfo\n}\n\n// // adult: boolean;\n// //backdrop_path: string;\n// belongs_to_collection: null;\n// // budget: number;\n// genres: Genre[];\n// // homepage: string;\n// // id: number;\n// // imdb_id: string;\n// original_language: string;\n// original_title: string;\n// // overview: string;\n// // popularity: number;\n// // poster_path: string;\n// production_companies: ProductionCompany[];\n// production_countries: ProductionCountry[];\n// // release_date: string;\n// // revenue: number;\n// // runtime: number;\n// spoken_languages: SpokenLanguage[];\n// // status: string;\n// // tagline: string;\n// // title: string;\n// // video: boolean;\n// // vote_average: number;\n// // vote_count: number;\n\nexport interface ITmdbResultObject {\n  page: number;\n  total_results: number;\n  total_pages: number;\n  results: ITmdbResult[];\n}\n\nexport interface ITmdbResult {\n  popularity: number\n  vote_count: number\n  video: boolean\n  poster_path: string\n  id: number\n  adult: boolean\n  backdrop_path: string\n  original_language: string\n  original_title: string\n  genre_ids: number[]\n  title: string\n  vote_average: number\n  overview: string\n  release_date: string\n  isAvailable?: boolean\n  isHighlighted?: boolean\n}\n\nexport interface ILibraryMovie {\n  tmdbId?: number,\n  title: string,\n  year: number,\n  imdbId?: string,\n  directory: string[]\n}\n\nexport interface IGenre {\n  id: number\n  name: string\n}\n\nexport interface Credits {\n  id: number;\n  cast: CastElement[];\n  crew: Crew[];\n}\n\ninterface CastElement {\n  cast_id: number;\n  character: string;\n  credit_id: string;\n  gender: number;\n  id: number;\n  name: string;\n  order: number;\n  profile_path: null | string;\n}\n\ninterface Crew {\n  credit_id: string;\n  department: Department;\n  gender: number;\n  id: number;\n  job: string;\n  name: string;\n  profile_path: null | string;\n}\n\nexport enum Department {\n  Art = 'Art',\n  Camera = 'Camera',\n  CostumeMakeUp = 'Costume & Make-Up',\n  Crew = 'Crew',\n  Directing = 'Directing',\n  Editing = 'Editing',\n  Lighting = 'Lighting',\n  Production = 'Production',\n  Sound = 'Sound',\n  VisualEffects = 'Visual Effects',\n  Writing = 'Writing',\n}\n\nexport class MDBTorrent {\n  id?: string\n  name?: string\n  size?: string\n  hash: string\n  url?: string\n  quality?: string\n  type?: string\n  seeds?: number\n  peers?: number\n  sizeBytes?: number\n  added?: string\n  dateUploaded?: string\n  dateUploadedUnix?: number\n  isYts?: boolean\n  magnetLink?: string\n}\n\nexport class ITPBTorrent {\n  id?: number\n  name?: string\n  hash: string\n  sizeBytes?: number\n  added?: string\n}\n\nexport interface ISearch {\n  page: number\n}\n\nexport enum OmdbParameters {\n  ApiKey = 'apikey',\n  ImdbId = 'i',\n  Title = 't',\n  Type = 'type',\n  Year = 'y',\n  Plot = 'plot',\n  Return = 'r',\n  Callback = 'callback',\n  Version = 'v',\n}\n\nexport enum TmdbParameters {\n  ApiKey = 'api_key',\n  AppendToResponse = 'append_to_response',\n  Language = 'language',\n  Region = 'region',\n  SortBy = 'sort_by',\n  CertificationCountry = 'certification_country',\n  Certification = 'certification',\n  CertificationLess = 'certification.lte',\n  CertificationGreater = 'certification.gte',\n  IncludeAdult = 'include_adult',\n  IncludeVideo = 'include_video',\n  Page = 'page',\n  PrimaryReleaseYear = 'primary_release_year',\n  PrimaryReleaseDateGreater = 'primary_release_date.gte',\n  PrimaryReleaseDateLess = 'primary_release_date.lte',\n  ReleaseDateGreater = 'release_date.gte',\n  ReleaseDateLess = 'release_date.lte',\n  WithReleaseType = 'with_release_type',\n  Year = 'year',\n  VoteCountGreater = 'vote_count.gte',\n  VoteCountLess = 'vote_count.lte',\n  VoteAverageGreater = 'vote_average.gte',\n  VoteAverageLess = 'vote_average.lte',\n  WithCast = 'with_cast',\n  WithCrew = 'with_crew',\n  WithPeople = 'with_people',\n  WithCompanies = 'with_companies',\n  WithGenres = 'with_genres',\n  WithoutGenres = 'without_genres',\n  WithKeywords = 'with_keywords',\n  WithoutKeywords = 'without_keywords',\n  WithRuntimeGreater = 'with_runtime.gte',\n  WithRuntimeLess = 'with_runtime.lte',\n  WithOriginalLanguage = 'with_original_language',\n  WithWatchProviders = 'with_watch_providers',\n  WatchRegion = 'watch_region'\n}\n\nexport enum TmdbSearchMovieParameters {\n  ApiKey = 'api_key',\n  Language = 'language', // Pass a ISO 639 - 1 value to display translated data for the fields that support it. minLength: 2 pattern: ([a - z]{ 2 }) -([A - Z]{ 2 }) default: en - US\n  Query = 'query',\n  Page = 'page', // minimum: 1 maximum: 1000\n  IncludeAdult = 'include_adult',\n  Region = 'region',\n  // Specify a ISO 3166 - 1 code to filter release dates.Must be uppercase. pattern: ^ [A - Z]{ 2 } $\n  Year = 'year',\n  PrimaryReleaseYear = 'primary_release_year'\n}\n\nenum TmdbAppendToResponseParameters {\n  AccountStates = 'account_states',\n  Videos = 'videos',\n  Images = 'images',\n  Credits = 'credits',\n  Changes = 'changes',\n  Translations = 'translations',\n  Similar = 'similar',\n  ExternalIds = 'external_ids',\n  AlternativeTitles = 'alternative_titles',\n  Keywords = 'keywords',\n  Reviews = 'reviews',\n  Recommendations = 'recommendations',\n  ReleaseDates = 'release_dates',\n  Lists = 'lists'\n}\n\nenum TmdbReleaseTypes {\n  PREMIERE = 'Premiere',  // 1\n  THEATRICAL_LIMITED = 'Theatrical(limited)', // 2\n  THEATRICAL = 'Theatrical', // 3\n  DIGITAL = 'Digital', // 4\n  PHYSICAL = 'Physical', // 5\n  TV = 'TV', // 6\n}\n\nexport interface IPersonDetails {\n  birthday: string;\n  known_for_department: string;\n  id: number;\n  movie_credits?: IPersonCredits;\n  tv_credits?: IPersonCredits;\n  combined_credits?: IPersonCredits;\n  homepage?: any;\n  profile_path: string;\n  imdb_id: string;\n  deathday?: any;\n  images?: IImages;\n  external_ids?: IExternalids;\n  name: string;\n  also_known_as: string[];\n  biography: string;\n  adult: boolean;\n  gender: number;\n  place_of_birth: string;\n  popularity: number;\n}\n\nexport interface IPersonCredits {\n  cast: IPersonCastCrew[];\n  crew: IPersonCastCrew[];\n  id?: number;\n}\n\nexport interface IPersonCastCrew {\n  id?: number;\n  original_language: string;\n  episode_count?: number;\n  overview: string;\n  origin_country?: string[];\n  original_name?: string;\n  genre_ids: number[];\n  name?: string;\n  media_type: string;\n  poster_path: null | string;\n  first_air_date?: string;\n  vote_average: number;\n  vote_count: number;\n  character?: string;\n  backdrop_path: null | string;\n  popularity: number;\n  credit_id: string;\n  original_title?: string;\n  video?: boolean;\n  release_date?: string;\n  title?: string;\n  adult?: boolean;\n  department?: string;\n  job?: string;\n}\n\nexport interface IExternalids {\n  id?: number;\n  freebase_id: string;\n  instagram_id: string;\n  tvrage_id: number;\n  twitter_id: string;\n  freebase_mid: string;\n  imdb_id: string;\n  facebook_id: string;\n}\n\nexport interface IImages {\n  id?: number;\n  profiles: IProfile[];\n}\n\nexport interface IProfile {\n  iso_639_1?: any;\n  aspect_ratio: number;\n  vote_count: number;\n  height: number;\n  vote_average: number;\n  file_path: string;\n  width: number;\n}\n\nexport interface ICredits {\n  cast: ICast[];\n  crew: ICrew[];\n}\n\ninterface ICast {\n  poster_path?: string;\n  adult: boolean;\n  backdrop_path?: string;\n  vote_count: number;\n  video: boolean;\n  id: number;\n  media_type?: string;\n  popularity: number;\n  genre_ids: number[];\n  original_language: string;\n  title: string;\n  original_title: string;\n  release_date: string;\n  character: string;\n  vote_average: number;\n  overview: string;\n  credit_id: string;\n}\n\ninterface ICrew {\n  id: number;\n  department: string;\n  original_language: string;\n  original_title: string;\n  job: string;\n  overview: string;\n  genre_ids: number[];\n  video: boolean;\n  episode_count: number\n  media_type?: string;\n  credit_id: string;\n  poster_path?: string;\n  popularity: number;\n  backdrop_path?: string;\n  vote_count: number;\n  title: string;\n  adult: boolean;\n  vote_average: number;\n  release_date: string;\n}\n\nexport interface IUserSavedData {\n  id?: string,\n  title: string,\n  year: number,\n  tmdbId: number,\n}\n\nexport enum GenreCodes {\n  Action = 28,\n  Adventure = 12,\n  Animation = 16,\n  Comedy = 35,\n  Crime = 80,\n  Documentary = 99,\n  Drama = 18,\n  Family = 10751,\n  Fantasy = 14,\n  History = 36,\n  Horror = 27,\n  Music = 10402,\n  Mystery = 9648,\n  Romance = 10749,\n  ScienceFiction = 878,\n  TVMovie = 10770,\n  Thriller = 53,\n  War = 10752,\n  Western = 37,\n  // mdb reserved\n  FilmNoir = 20000,\n  // similar genre: Music id:10402\n  Musical = 20001,\n  News = 20002,\n  RealityTV = 20003,\n  // similar genre: Science Fiction id:878\n  SciFi = 20004,\n  // another media type\n  Short = 20005,\n  Sport = 20006,\n}\n\n\n\n/**\nexport enum Department {\n    Art = \"Art\",\n    Camera = \"Camera\",\n    CostumeMakeUp = \"Costume & Make-Up\",\n    Crew = \"Crew\",\n    Directing = \"Directing\",\n    Editing = \"Editing\",\n    Lighting = \"Lighting\",\n    Production = \"Production\",\n    Sound = \"Sound\",\n    VisualEffects = \"Visual Effects\",\n    Writing = \"Writing\",\n}\n\nexport interface ExternalIDS {\n    imdb_id:      string;\n    facebook_id:  null;\n    instagram_id: null;\n    twitter_id:   null;\n}\n\nexport interface Genre {\n    id:   number;\n    name: string;\n}\n\nexport interface Images {\n    backdrops: any[];\n    posters:   any[];\n}\n\nexport enum OriginalLanguage {\n    En = \"en\",\n    Es = \"es\",\n    Fr = \"fr\",\n}\n\nexport interface ProductionCompany {\n    id:             number;\n    logo_path:      string;\n    name:           string;\n    origin_country: string;\n}\n\nexport interface ProductionCountry {\n    iso_3166_1: string;\n    name:       string;\n}\n\nexport interface Recommendations {\n    page:          number;\n    results:       RecommendationsResult[];\n    total_pages:   number;\n    total_results: number;\n}\n\nexport interface RecommendationsResult {\n    id:                number;\n    video:             boolean;\n    vote_count:        number;\n    vote_average:      number;\n    title:             string;\n    release_date:      string;\n    original_language: OriginalLanguage;\n    original_title:    string;\n    genre_ids:         number[];\n    backdrop_path:     string;\n    adult:             boolean;\n    overview:          string;\n    poster_path:       string;\n    popularity:        number;\n}\n\nexport interface SpokenLanguage {\n    iso_639_1: OriginalLanguage;\n    name:      string;\n}\n\nexport interface Videos {\n    results: VideosResult[];\n}\n\nexport interface VideosResult {\n    id:         string;\n    iso_639_1:  OriginalLanguage;\n    iso_3166_1: string;\n    key:        string;\n    name:       string;\n    site:       string;\n    size:       number;\n    type:       string;\n}\n */\n\n",
            "properties": [
                {
                    "name": "_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "directoryList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "imdbID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "tmdbId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "null | number | string",
                    "optional": true,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "year",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 76
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ILibraryMovie",
            "id": "interface-ILibraryMovie-584d54738f93e2af94202069b5eddb4cab23bb2dfec2ff69f24ebaf881c252f94680b4cd6cec302796817692570a31bedafc5d74fed1cf6488a895dbf372e23d",
            "file": "src/app/models/interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IMdbMovieDetails {\n  awards?: string\n  backgroundPath: string;\n  belongsToCollection?: []\n  boxOffice?: string | number // tmdb:revenue(number)\n  budget?: number\n  country?: string\n  director?: string\n  dvd?: string // dvd release\n  genres?: string[] | string | IGenre[]\n  imdbId?: string\n  imdbRating?: string\n  imdbVotes?: string\n  isAdult?: boolean;\n  isAvailable?: boolean;\n  languages?: string[]\n  libraryInfo?: ILibraryInfo\n  metascore?: string // metacritic score\\\n  originalLanguage?: string // tmdb:\"en\",omdb:\"English\"\n  originalTitle?: string\n  plot?: string // plot or overview\n  popularity?: number\n  posterPath: string\n  production?: string // company; i.e. Walt Disney Pictures\n  rated?: string // rated or certificate\n  ratings?: IRating[]\n  releaseDate?: string // omdb:\"05 May 2017\"; tmdb:\"1999-10-15\"\n  releaseYear?: number | string\n  response: string\n  runtime?: string\n  starring?: string // Actors field in omdb\n  status?: string // released/Post\n  tagline?: string;\n  tmdbId?: number\n  title: string\n  type?: string // movie/tvmovie/series\n  video?: boolean; // unknown\n  // voteAverage: number; // tmdb votes\n  // voteCount: number; // tmdb votes\n  website?: string\n  writer?: string // omdb\n  [propName: string]: any;\n}\n\nexport interface IRating {\n  Source: string\n  Value: string\n}\n\nexport interface LibraryInfo {\n  tmdbId?: null | number | string\n  imdbID?: string\n  title?: string\n  year?: number\n  directoryList?: string[]\n  _id: string\n}\n\nexport interface MovieGenre {\n  id: number\n  code: string\n  description: string\n  isChecked: boolean\n}\n\nexport interface WatchList {\n  id: number\n  movieList: string[]\n}\n\nexport interface ILibraryInfo {\n  tmdbId?: null | number | string\n  imdbID?: string\n  title?: string\n  year?: number\n  directoryList?: string[]\n  _id: string\n}\n\nexport interface ICollection {\n  id: number,\n  name: string\n}\n\nexport interface IProductionCompany {\n  id: number;\n  logo_path: null | string;\n  name: string;\n  origin_country: string;\n}\n\nexport interface IProductionCountry {\n  iso_3166_1: string;\n  name: string;\n}\n\nexport interface ISpokenLanguage {\n  iso_639_1: string;\n  name: string;\n}\n\nexport interface IOmdbMovieDetail {\n  Title: string\n  Year?: string\n  Rated?: string\n  Released?: string // \"05 May 2017\"\n  Runtime?: string\n  Genre?: string\n  Director?: string\n  Writer?: string\n  Actors?: string\n  Plot?: string\n  Language?: string\n  Country?: string\n  Awards?: string\n  Poster?: string\n  Ratings?: IRating[]\n  Metascore?: string\n  imdbRating?: string\n  imdbVotes?: string\n  imdbID: string\n  Type?: string\n  DVD?: string\n  BoxOffice?: string\n  Production?: string\n  Website?: string\n  Response: string\n}\n\nexport interface ITmdbMovieDetail {\n  adult: boolean;\n  backdrop_path: string;\n  belongs_to_collection: null;\n  budget: number;\n  genres: IGenre[];\n  homepage: string;\n  id: number;\n  imdb_id: string;\n  original_language: string;\n  original_title: string;\n  overview: string;\n  popularity: number;\n  poster_path: string;\n  production_companies: IProductionCompany[];\n  production_countries: IProductionCountry[];\n  release_date: string;\n  revenue: number;\n  runtime: number;\n  spoken_languages: ISpokenLanguage[];\n  status: string;\n  tagline: string;\n  title: string;\n  video: boolean;\n  vote_average: number;\n  vote_count: number;\n}\n\nexport interface MdbMovieDetails {\n  adult?: boolean;\n  title: string\n  releaseYear?: string\n  releaseDate?: string\n  rated?: string // rated or certificate\n  runtime?: string\n  genres?: string\n  director?: string\n  writer?: string\n  Actors?: string\n  plot?: string // plot or overview\n  Language?: string\n  Country?: string\n  Awards?: string\n  Poster?: string\n  Ratings?: IRating[]\n  Metascore?: string\n  imdbRating?: string\n  imdbVotes?: string\n  imdbID: string\n  tmdbID: number\n  Type?: string\n  DVD?: string\n  BoxOffice?: string\n  Production?: string\n  website?: string\n  response: string\n  libraryInfo?: ILibraryInfo\n}\n\n// // adult: boolean;\n// //backdrop_path: string;\n// belongs_to_collection: null;\n// // budget: number;\n// genres: Genre[];\n// // homepage: string;\n// // id: number;\n// // imdb_id: string;\n// original_language: string;\n// original_title: string;\n// // overview: string;\n// // popularity: number;\n// // poster_path: string;\n// production_companies: ProductionCompany[];\n// production_countries: ProductionCountry[];\n// // release_date: string;\n// // revenue: number;\n// // runtime: number;\n// spoken_languages: SpokenLanguage[];\n// // status: string;\n// // tagline: string;\n// // title: string;\n// // video: boolean;\n// // vote_average: number;\n// // vote_count: number;\n\nexport interface ITmdbResultObject {\n  page: number;\n  total_results: number;\n  total_pages: number;\n  results: ITmdbResult[];\n}\n\nexport interface ITmdbResult {\n  popularity: number\n  vote_count: number\n  video: boolean\n  poster_path: string\n  id: number\n  adult: boolean\n  backdrop_path: string\n  original_language: string\n  original_title: string\n  genre_ids: number[]\n  title: string\n  vote_average: number\n  overview: string\n  release_date: string\n  isAvailable?: boolean\n  isHighlighted?: boolean\n}\n\nexport interface ILibraryMovie {\n  tmdbId?: number,\n  title: string,\n  year: number,\n  imdbId?: string,\n  directory: string[]\n}\n\nexport interface IGenre {\n  id: number\n  name: string\n}\n\nexport interface Credits {\n  id: number;\n  cast: CastElement[];\n  crew: Crew[];\n}\n\ninterface CastElement {\n  cast_id: number;\n  character: string;\n  credit_id: string;\n  gender: number;\n  id: number;\n  name: string;\n  order: number;\n  profile_path: null | string;\n}\n\ninterface Crew {\n  credit_id: string;\n  department: Department;\n  gender: number;\n  id: number;\n  job: string;\n  name: string;\n  profile_path: null | string;\n}\n\nexport enum Department {\n  Art = 'Art',\n  Camera = 'Camera',\n  CostumeMakeUp = 'Costume & Make-Up',\n  Crew = 'Crew',\n  Directing = 'Directing',\n  Editing = 'Editing',\n  Lighting = 'Lighting',\n  Production = 'Production',\n  Sound = 'Sound',\n  VisualEffects = 'Visual Effects',\n  Writing = 'Writing',\n}\n\nexport class MDBTorrent {\n  id?: string\n  name?: string\n  size?: string\n  hash: string\n  url?: string\n  quality?: string\n  type?: string\n  seeds?: number\n  peers?: number\n  sizeBytes?: number\n  added?: string\n  dateUploaded?: string\n  dateUploadedUnix?: number\n  isYts?: boolean\n  magnetLink?: string\n}\n\nexport class ITPBTorrent {\n  id?: number\n  name?: string\n  hash: string\n  sizeBytes?: number\n  added?: string\n}\n\nexport interface ISearch {\n  page: number\n}\n\nexport enum OmdbParameters {\n  ApiKey = 'apikey',\n  ImdbId = 'i',\n  Title = 't',\n  Type = 'type',\n  Year = 'y',\n  Plot = 'plot',\n  Return = 'r',\n  Callback = 'callback',\n  Version = 'v',\n}\n\nexport enum TmdbParameters {\n  ApiKey = 'api_key',\n  AppendToResponse = 'append_to_response',\n  Language = 'language',\n  Region = 'region',\n  SortBy = 'sort_by',\n  CertificationCountry = 'certification_country',\n  Certification = 'certification',\n  CertificationLess = 'certification.lte',\n  CertificationGreater = 'certification.gte',\n  IncludeAdult = 'include_adult',\n  IncludeVideo = 'include_video',\n  Page = 'page',\n  PrimaryReleaseYear = 'primary_release_year',\n  PrimaryReleaseDateGreater = 'primary_release_date.gte',\n  PrimaryReleaseDateLess = 'primary_release_date.lte',\n  ReleaseDateGreater = 'release_date.gte',\n  ReleaseDateLess = 'release_date.lte',\n  WithReleaseType = 'with_release_type',\n  Year = 'year',\n  VoteCountGreater = 'vote_count.gte',\n  VoteCountLess = 'vote_count.lte',\n  VoteAverageGreater = 'vote_average.gte',\n  VoteAverageLess = 'vote_average.lte',\n  WithCast = 'with_cast',\n  WithCrew = 'with_crew',\n  WithPeople = 'with_people',\n  WithCompanies = 'with_companies',\n  WithGenres = 'with_genres',\n  WithoutGenres = 'without_genres',\n  WithKeywords = 'with_keywords',\n  WithoutKeywords = 'without_keywords',\n  WithRuntimeGreater = 'with_runtime.gte',\n  WithRuntimeLess = 'with_runtime.lte',\n  WithOriginalLanguage = 'with_original_language',\n  WithWatchProviders = 'with_watch_providers',\n  WatchRegion = 'watch_region'\n}\n\nexport enum TmdbSearchMovieParameters {\n  ApiKey = 'api_key',\n  Language = 'language', // Pass a ISO 639 - 1 value to display translated data for the fields that support it. minLength: 2 pattern: ([a - z]{ 2 }) -([A - Z]{ 2 }) default: en - US\n  Query = 'query',\n  Page = 'page', // minimum: 1 maximum: 1000\n  IncludeAdult = 'include_adult',\n  Region = 'region',\n  // Specify a ISO 3166 - 1 code to filter release dates.Must be uppercase. pattern: ^ [A - Z]{ 2 } $\n  Year = 'year',\n  PrimaryReleaseYear = 'primary_release_year'\n}\n\nenum TmdbAppendToResponseParameters {\n  AccountStates = 'account_states',\n  Videos = 'videos',\n  Images = 'images',\n  Credits = 'credits',\n  Changes = 'changes',\n  Translations = 'translations',\n  Similar = 'similar',\n  ExternalIds = 'external_ids',\n  AlternativeTitles = 'alternative_titles',\n  Keywords = 'keywords',\n  Reviews = 'reviews',\n  Recommendations = 'recommendations',\n  ReleaseDates = 'release_dates',\n  Lists = 'lists'\n}\n\nenum TmdbReleaseTypes {\n  PREMIERE = 'Premiere',  // 1\n  THEATRICAL_LIMITED = 'Theatrical(limited)', // 2\n  THEATRICAL = 'Theatrical', // 3\n  DIGITAL = 'Digital', // 4\n  PHYSICAL = 'Physical', // 5\n  TV = 'TV', // 6\n}\n\nexport interface IPersonDetails {\n  birthday: string;\n  known_for_department: string;\n  id: number;\n  movie_credits?: IPersonCredits;\n  tv_credits?: IPersonCredits;\n  combined_credits?: IPersonCredits;\n  homepage?: any;\n  profile_path: string;\n  imdb_id: string;\n  deathday?: any;\n  images?: IImages;\n  external_ids?: IExternalids;\n  name: string;\n  also_known_as: string[];\n  biography: string;\n  adult: boolean;\n  gender: number;\n  place_of_birth: string;\n  popularity: number;\n}\n\nexport interface IPersonCredits {\n  cast: IPersonCastCrew[];\n  crew: IPersonCastCrew[];\n  id?: number;\n}\n\nexport interface IPersonCastCrew {\n  id?: number;\n  original_language: string;\n  episode_count?: number;\n  overview: string;\n  origin_country?: string[];\n  original_name?: string;\n  genre_ids: number[];\n  name?: string;\n  media_type: string;\n  poster_path: null | string;\n  first_air_date?: string;\n  vote_average: number;\n  vote_count: number;\n  character?: string;\n  backdrop_path: null | string;\n  popularity: number;\n  credit_id: string;\n  original_title?: string;\n  video?: boolean;\n  release_date?: string;\n  title?: string;\n  adult?: boolean;\n  department?: string;\n  job?: string;\n}\n\nexport interface IExternalids {\n  id?: number;\n  freebase_id: string;\n  instagram_id: string;\n  tvrage_id: number;\n  twitter_id: string;\n  freebase_mid: string;\n  imdb_id: string;\n  facebook_id: string;\n}\n\nexport interface IImages {\n  id?: number;\n  profiles: IProfile[];\n}\n\nexport interface IProfile {\n  iso_639_1?: any;\n  aspect_ratio: number;\n  vote_count: number;\n  height: number;\n  vote_average: number;\n  file_path: string;\n  width: number;\n}\n\nexport interface ICredits {\n  cast: ICast[];\n  crew: ICrew[];\n}\n\ninterface ICast {\n  poster_path?: string;\n  adult: boolean;\n  backdrop_path?: string;\n  vote_count: number;\n  video: boolean;\n  id: number;\n  media_type?: string;\n  popularity: number;\n  genre_ids: number[];\n  original_language: string;\n  title: string;\n  original_title: string;\n  release_date: string;\n  character: string;\n  vote_average: number;\n  overview: string;\n  credit_id: string;\n}\n\ninterface ICrew {\n  id: number;\n  department: string;\n  original_language: string;\n  original_title: string;\n  job: string;\n  overview: string;\n  genre_ids: number[];\n  video: boolean;\n  episode_count: number\n  media_type?: string;\n  credit_id: string;\n  poster_path?: string;\n  popularity: number;\n  backdrop_path?: string;\n  vote_count: number;\n  title: string;\n  adult: boolean;\n  vote_average: number;\n  release_date: string;\n}\n\nexport interface IUserSavedData {\n  id?: string,\n  title: string,\n  year: number,\n  tmdbId: number,\n}\n\nexport enum GenreCodes {\n  Action = 28,\n  Adventure = 12,\n  Animation = 16,\n  Comedy = 35,\n  Crime = 80,\n  Documentary = 99,\n  Drama = 18,\n  Family = 10751,\n  Fantasy = 14,\n  History = 36,\n  Horror = 27,\n  Music = 10402,\n  Mystery = 9648,\n  Romance = 10749,\n  ScienceFiction = 878,\n  TVMovie = 10770,\n  Thriller = 53,\n  War = 10752,\n  Western = 37,\n  // mdb reserved\n  FilmNoir = 20000,\n  // similar genre: Music id:10402\n  Musical = 20001,\n  News = 20002,\n  RealityTV = 20003,\n  // similar genre: Science Fiction id:878\n  SciFi = 20004,\n  // another media type\n  Short = 20005,\n  Sport = 20006,\n}\n\n\n\n/**\nexport enum Department {\n    Art = \"Art\",\n    Camera = \"Camera\",\n    CostumeMakeUp = \"Costume & Make-Up\",\n    Crew = \"Crew\",\n    Directing = \"Directing\",\n    Editing = \"Editing\",\n    Lighting = \"Lighting\",\n    Production = \"Production\",\n    Sound = \"Sound\",\n    VisualEffects = \"Visual Effects\",\n    Writing = \"Writing\",\n}\n\nexport interface ExternalIDS {\n    imdb_id:      string;\n    facebook_id:  null;\n    instagram_id: null;\n    twitter_id:   null;\n}\n\nexport interface Genre {\n    id:   number;\n    name: string;\n}\n\nexport interface Images {\n    backdrops: any[];\n    posters:   any[];\n}\n\nexport enum OriginalLanguage {\n    En = \"en\",\n    Es = \"es\",\n    Fr = \"fr\",\n}\n\nexport interface ProductionCompany {\n    id:             number;\n    logo_path:      string;\n    name:           string;\n    origin_country: string;\n}\n\nexport interface ProductionCountry {\n    iso_3166_1: string;\n    name:       string;\n}\n\nexport interface Recommendations {\n    page:          number;\n    results:       RecommendationsResult[];\n    total_pages:   number;\n    total_results: number;\n}\n\nexport interface RecommendationsResult {\n    id:                number;\n    video:             boolean;\n    vote_count:        number;\n    vote_average:      number;\n    title:             string;\n    release_date:      string;\n    original_language: OriginalLanguage;\n    original_title:    string;\n    genre_ids:         number[];\n    backdrop_path:     string;\n    adult:             boolean;\n    overview:          string;\n    poster_path:       string;\n    popularity:        number;\n}\n\nexport interface SpokenLanguage {\n    iso_639_1: OriginalLanguage;\n    name:      string;\n}\n\nexport interface Videos {\n    results: VideosResult[];\n}\n\nexport interface VideosResult {\n    id:         string;\n    iso_639_1:  OriginalLanguage;\n    iso_3166_1: string;\n    key:        string;\n    name:       string;\n    site:       string;\n    size:       number;\n    type:       string;\n}\n */\n\n",
            "properties": [
                {
                    "name": "directory",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 247
                },
                {
                    "name": "imdbId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 246
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 244
                },
                {
                    "name": "tmdbId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 243
                },
                {
                    "name": "year",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 245
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ILibraryPreferences",
            "id": "interface-ILibraryPreferences-762aab3f13408cf543f5fe806389a08ae4f1e3cd13bf634d1cce11d647e39e349b0a2025d4789d00f83084ebbe025b98dbedd097bcba540fc5f3cd239b0f3d7e",
            "file": "src/app/models/preferences.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IPreferences {\n  isDarkMode: boolean\n  isEnableCache: boolean\n  libraryFolders: string[]\n  torrentSeedRatio: number\n  torrentRatio?: any\n  subtitle: ISubtitlePreferences\n  hotKeys: IHotkeys\n  autoPlayTrailer: boolean\n  playTrailerBeforeShow: boolean\n  playBack: IPlaybackPreferences\n  library: ILibraryPreferences,\n  streamPreferences?: IStreamPreferences\n  isAutoScan: boolean\n  autoScanFrequencyUnit: string\n  autoScanFrequencyValue: number\n}\n\ninterface IStreamPreferences {\n  downloadSpeed: number // in bps\n}\ninterface ILibraryPreferences {\n  libraryPathList: string[]\n  scanFrenquency: IScanFrequency\n}\n\nexport interface IPlaybackPreferences {\n  preferredQuality: Quality\n  preferredMode: 'torrent' | 'offline'\n  repeat: boolean\n  volume: number\n}\n\nexport enum Quality {\n  SD = '720p',\n  HD = '1080p',\n  FHD = '1440p',\n  FourK = '4k'\n}\ninterface IScanFrequency {\n  isScanAutomatically: boolean\n  frequencyUnit: string\n  frequencyValue: number\n}\n\ninterface IHotkeys {\n  playerHotkeys?: any\n\n}\n\nexport interface ISubtitlePreferences {\n  synchronization: number;\n  fontColor: string;\n  fontSize: string;\n  fontOpacity?: number;\n  textShadow: string;\n  fontFamily?: string;\n  backgroundColor: string;\n  backgroundOpacity: string;\n}\n",
            "properties": [
                {
                    "name": "libraryPathList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "scanFrenquency",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IScanFrequency",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IMdbMovieDetails",
            "id": "interface-IMdbMovieDetails-584d54738f93e2af94202069b5eddb4cab23bb2dfec2ff69f24ebaf881c252f94680b4cd6cec302796817692570a31bedafc5d74fed1cf6488a895dbf372e23d",
            "file": "src/app/models/interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IMdbMovieDetails {\n  awards?: string\n  backgroundPath: string;\n  belongsToCollection?: []\n  boxOffice?: string | number // tmdb:revenue(number)\n  budget?: number\n  country?: string\n  director?: string\n  dvd?: string // dvd release\n  genres?: string[] | string | IGenre[]\n  imdbId?: string\n  imdbRating?: string\n  imdbVotes?: string\n  isAdult?: boolean;\n  isAvailable?: boolean;\n  languages?: string[]\n  libraryInfo?: ILibraryInfo\n  metascore?: string // metacritic score\\\n  originalLanguage?: string // tmdb:\"en\",omdb:\"English\"\n  originalTitle?: string\n  plot?: string // plot or overview\n  popularity?: number\n  posterPath: string\n  production?: string // company; i.e. Walt Disney Pictures\n  rated?: string // rated or certificate\n  ratings?: IRating[]\n  releaseDate?: string // omdb:\"05 May 2017\"; tmdb:\"1999-10-15\"\n  releaseYear?: number | string\n  response: string\n  runtime?: string\n  starring?: string // Actors field in omdb\n  status?: string // released/Post\n  tagline?: string;\n  tmdbId?: number\n  title: string\n  type?: string // movie/tvmovie/series\n  video?: boolean; // unknown\n  // voteAverage: number; // tmdb votes\n  // voteCount: number; // tmdb votes\n  website?: string\n  writer?: string // omdb\n  [propName: string]: any;\n}\n\nexport interface IRating {\n  Source: string\n  Value: string\n}\n\nexport interface LibraryInfo {\n  tmdbId?: null | number | string\n  imdbID?: string\n  title?: string\n  year?: number\n  directoryList?: string[]\n  _id: string\n}\n\nexport interface MovieGenre {\n  id: number\n  code: string\n  description: string\n  isChecked: boolean\n}\n\nexport interface WatchList {\n  id: number\n  movieList: string[]\n}\n\nexport interface ILibraryInfo {\n  tmdbId?: null | number | string\n  imdbID?: string\n  title?: string\n  year?: number\n  directoryList?: string[]\n  _id: string\n}\n\nexport interface ICollection {\n  id: number,\n  name: string\n}\n\nexport interface IProductionCompany {\n  id: number;\n  logo_path: null | string;\n  name: string;\n  origin_country: string;\n}\n\nexport interface IProductionCountry {\n  iso_3166_1: string;\n  name: string;\n}\n\nexport interface ISpokenLanguage {\n  iso_639_1: string;\n  name: string;\n}\n\nexport interface IOmdbMovieDetail {\n  Title: string\n  Year?: string\n  Rated?: string\n  Released?: string // \"05 May 2017\"\n  Runtime?: string\n  Genre?: string\n  Director?: string\n  Writer?: string\n  Actors?: string\n  Plot?: string\n  Language?: string\n  Country?: string\n  Awards?: string\n  Poster?: string\n  Ratings?: IRating[]\n  Metascore?: string\n  imdbRating?: string\n  imdbVotes?: string\n  imdbID: string\n  Type?: string\n  DVD?: string\n  BoxOffice?: string\n  Production?: string\n  Website?: string\n  Response: string\n}\n\nexport interface ITmdbMovieDetail {\n  adult: boolean;\n  backdrop_path: string;\n  belongs_to_collection: null;\n  budget: number;\n  genres: IGenre[];\n  homepage: string;\n  id: number;\n  imdb_id: string;\n  original_language: string;\n  original_title: string;\n  overview: string;\n  popularity: number;\n  poster_path: string;\n  production_companies: IProductionCompany[];\n  production_countries: IProductionCountry[];\n  release_date: string;\n  revenue: number;\n  runtime: number;\n  spoken_languages: ISpokenLanguage[];\n  status: string;\n  tagline: string;\n  title: string;\n  video: boolean;\n  vote_average: number;\n  vote_count: number;\n}\n\nexport interface MdbMovieDetails {\n  adult?: boolean;\n  title: string\n  releaseYear?: string\n  releaseDate?: string\n  rated?: string // rated or certificate\n  runtime?: string\n  genres?: string\n  director?: string\n  writer?: string\n  Actors?: string\n  plot?: string // plot or overview\n  Language?: string\n  Country?: string\n  Awards?: string\n  Poster?: string\n  Ratings?: IRating[]\n  Metascore?: string\n  imdbRating?: string\n  imdbVotes?: string\n  imdbID: string\n  tmdbID: number\n  Type?: string\n  DVD?: string\n  BoxOffice?: string\n  Production?: string\n  website?: string\n  response: string\n  libraryInfo?: ILibraryInfo\n}\n\n// // adult: boolean;\n// //backdrop_path: string;\n// belongs_to_collection: null;\n// // budget: number;\n// genres: Genre[];\n// // homepage: string;\n// // id: number;\n// // imdb_id: string;\n// original_language: string;\n// original_title: string;\n// // overview: string;\n// // popularity: number;\n// // poster_path: string;\n// production_companies: ProductionCompany[];\n// production_countries: ProductionCountry[];\n// // release_date: string;\n// // revenue: number;\n// // runtime: number;\n// spoken_languages: SpokenLanguage[];\n// // status: string;\n// // tagline: string;\n// // title: string;\n// // video: boolean;\n// // vote_average: number;\n// // vote_count: number;\n\nexport interface ITmdbResultObject {\n  page: number;\n  total_results: number;\n  total_pages: number;\n  results: ITmdbResult[];\n}\n\nexport interface ITmdbResult {\n  popularity: number\n  vote_count: number\n  video: boolean\n  poster_path: string\n  id: number\n  adult: boolean\n  backdrop_path: string\n  original_language: string\n  original_title: string\n  genre_ids: number[]\n  title: string\n  vote_average: number\n  overview: string\n  release_date: string\n  isAvailable?: boolean\n  isHighlighted?: boolean\n}\n\nexport interface ILibraryMovie {\n  tmdbId?: number,\n  title: string,\n  year: number,\n  imdbId?: string,\n  directory: string[]\n}\n\nexport interface IGenre {\n  id: number\n  name: string\n}\n\nexport interface Credits {\n  id: number;\n  cast: CastElement[];\n  crew: Crew[];\n}\n\ninterface CastElement {\n  cast_id: number;\n  character: string;\n  credit_id: string;\n  gender: number;\n  id: number;\n  name: string;\n  order: number;\n  profile_path: null | string;\n}\n\ninterface Crew {\n  credit_id: string;\n  department: Department;\n  gender: number;\n  id: number;\n  job: string;\n  name: string;\n  profile_path: null | string;\n}\n\nexport enum Department {\n  Art = 'Art',\n  Camera = 'Camera',\n  CostumeMakeUp = 'Costume & Make-Up',\n  Crew = 'Crew',\n  Directing = 'Directing',\n  Editing = 'Editing',\n  Lighting = 'Lighting',\n  Production = 'Production',\n  Sound = 'Sound',\n  VisualEffects = 'Visual Effects',\n  Writing = 'Writing',\n}\n\nexport class MDBTorrent {\n  id?: string\n  name?: string\n  size?: string\n  hash: string\n  url?: string\n  quality?: string\n  type?: string\n  seeds?: number\n  peers?: number\n  sizeBytes?: number\n  added?: string\n  dateUploaded?: string\n  dateUploadedUnix?: number\n  isYts?: boolean\n  magnetLink?: string\n}\n\nexport class ITPBTorrent {\n  id?: number\n  name?: string\n  hash: string\n  sizeBytes?: number\n  added?: string\n}\n\nexport interface ISearch {\n  page: number\n}\n\nexport enum OmdbParameters {\n  ApiKey = 'apikey',\n  ImdbId = 'i',\n  Title = 't',\n  Type = 'type',\n  Year = 'y',\n  Plot = 'plot',\n  Return = 'r',\n  Callback = 'callback',\n  Version = 'v',\n}\n\nexport enum TmdbParameters {\n  ApiKey = 'api_key',\n  AppendToResponse = 'append_to_response',\n  Language = 'language',\n  Region = 'region',\n  SortBy = 'sort_by',\n  CertificationCountry = 'certification_country',\n  Certification = 'certification',\n  CertificationLess = 'certification.lte',\n  CertificationGreater = 'certification.gte',\n  IncludeAdult = 'include_adult',\n  IncludeVideo = 'include_video',\n  Page = 'page',\n  PrimaryReleaseYear = 'primary_release_year',\n  PrimaryReleaseDateGreater = 'primary_release_date.gte',\n  PrimaryReleaseDateLess = 'primary_release_date.lte',\n  ReleaseDateGreater = 'release_date.gte',\n  ReleaseDateLess = 'release_date.lte',\n  WithReleaseType = 'with_release_type',\n  Year = 'year',\n  VoteCountGreater = 'vote_count.gte',\n  VoteCountLess = 'vote_count.lte',\n  VoteAverageGreater = 'vote_average.gte',\n  VoteAverageLess = 'vote_average.lte',\n  WithCast = 'with_cast',\n  WithCrew = 'with_crew',\n  WithPeople = 'with_people',\n  WithCompanies = 'with_companies',\n  WithGenres = 'with_genres',\n  WithoutGenres = 'without_genres',\n  WithKeywords = 'with_keywords',\n  WithoutKeywords = 'without_keywords',\n  WithRuntimeGreater = 'with_runtime.gte',\n  WithRuntimeLess = 'with_runtime.lte',\n  WithOriginalLanguage = 'with_original_language',\n  WithWatchProviders = 'with_watch_providers',\n  WatchRegion = 'watch_region'\n}\n\nexport enum TmdbSearchMovieParameters {\n  ApiKey = 'api_key',\n  Language = 'language', // Pass a ISO 639 - 1 value to display translated data for the fields that support it. minLength: 2 pattern: ([a - z]{ 2 }) -([A - Z]{ 2 }) default: en - US\n  Query = 'query',\n  Page = 'page', // minimum: 1 maximum: 1000\n  IncludeAdult = 'include_adult',\n  Region = 'region',\n  // Specify a ISO 3166 - 1 code to filter release dates.Must be uppercase. pattern: ^ [A - Z]{ 2 } $\n  Year = 'year',\n  PrimaryReleaseYear = 'primary_release_year'\n}\n\nenum TmdbAppendToResponseParameters {\n  AccountStates = 'account_states',\n  Videos = 'videos',\n  Images = 'images',\n  Credits = 'credits',\n  Changes = 'changes',\n  Translations = 'translations',\n  Similar = 'similar',\n  ExternalIds = 'external_ids',\n  AlternativeTitles = 'alternative_titles',\n  Keywords = 'keywords',\n  Reviews = 'reviews',\n  Recommendations = 'recommendations',\n  ReleaseDates = 'release_dates',\n  Lists = 'lists'\n}\n\nenum TmdbReleaseTypes {\n  PREMIERE = 'Premiere',  // 1\n  THEATRICAL_LIMITED = 'Theatrical(limited)', // 2\n  THEATRICAL = 'Theatrical', // 3\n  DIGITAL = 'Digital', // 4\n  PHYSICAL = 'Physical', // 5\n  TV = 'TV', // 6\n}\n\nexport interface IPersonDetails {\n  birthday: string;\n  known_for_department: string;\n  id: number;\n  movie_credits?: IPersonCredits;\n  tv_credits?: IPersonCredits;\n  combined_credits?: IPersonCredits;\n  homepage?: any;\n  profile_path: string;\n  imdb_id: string;\n  deathday?: any;\n  images?: IImages;\n  external_ids?: IExternalids;\n  name: string;\n  also_known_as: string[];\n  biography: string;\n  adult: boolean;\n  gender: number;\n  place_of_birth: string;\n  popularity: number;\n}\n\nexport interface IPersonCredits {\n  cast: IPersonCastCrew[];\n  crew: IPersonCastCrew[];\n  id?: number;\n}\n\nexport interface IPersonCastCrew {\n  id?: number;\n  original_language: string;\n  episode_count?: number;\n  overview: string;\n  origin_country?: string[];\n  original_name?: string;\n  genre_ids: number[];\n  name?: string;\n  media_type: string;\n  poster_path: null | string;\n  first_air_date?: string;\n  vote_average: number;\n  vote_count: number;\n  character?: string;\n  backdrop_path: null | string;\n  popularity: number;\n  credit_id: string;\n  original_title?: string;\n  video?: boolean;\n  release_date?: string;\n  title?: string;\n  adult?: boolean;\n  department?: string;\n  job?: string;\n}\n\nexport interface IExternalids {\n  id?: number;\n  freebase_id: string;\n  instagram_id: string;\n  tvrage_id: number;\n  twitter_id: string;\n  freebase_mid: string;\n  imdb_id: string;\n  facebook_id: string;\n}\n\nexport interface IImages {\n  id?: number;\n  profiles: IProfile[];\n}\n\nexport interface IProfile {\n  iso_639_1?: any;\n  aspect_ratio: number;\n  vote_count: number;\n  height: number;\n  vote_average: number;\n  file_path: string;\n  width: number;\n}\n\nexport interface ICredits {\n  cast: ICast[];\n  crew: ICrew[];\n}\n\ninterface ICast {\n  poster_path?: string;\n  adult: boolean;\n  backdrop_path?: string;\n  vote_count: number;\n  video: boolean;\n  id: number;\n  media_type?: string;\n  popularity: number;\n  genre_ids: number[];\n  original_language: string;\n  title: string;\n  original_title: string;\n  release_date: string;\n  character: string;\n  vote_average: number;\n  overview: string;\n  credit_id: string;\n}\n\ninterface ICrew {\n  id: number;\n  department: string;\n  original_language: string;\n  original_title: string;\n  job: string;\n  overview: string;\n  genre_ids: number[];\n  video: boolean;\n  episode_count: number\n  media_type?: string;\n  credit_id: string;\n  poster_path?: string;\n  popularity: number;\n  backdrop_path?: string;\n  vote_count: number;\n  title: string;\n  adult: boolean;\n  vote_average: number;\n  release_date: string;\n}\n\nexport interface IUserSavedData {\n  id?: string,\n  title: string,\n  year: number,\n  tmdbId: number,\n}\n\nexport enum GenreCodes {\n  Action = 28,\n  Adventure = 12,\n  Animation = 16,\n  Comedy = 35,\n  Crime = 80,\n  Documentary = 99,\n  Drama = 18,\n  Family = 10751,\n  Fantasy = 14,\n  History = 36,\n  Horror = 27,\n  Music = 10402,\n  Mystery = 9648,\n  Romance = 10749,\n  ScienceFiction = 878,\n  TVMovie = 10770,\n  Thriller = 53,\n  War = 10752,\n  Western = 37,\n  // mdb reserved\n  FilmNoir = 20000,\n  // similar genre: Music id:10402\n  Musical = 20001,\n  News = 20002,\n  RealityTV = 20003,\n  // similar genre: Science Fiction id:878\n  SciFi = 20004,\n  // another media type\n  Short = 20005,\n  Sport = 20006,\n}\n\n\n\n/**\nexport enum Department {\n    Art = \"Art\",\n    Camera = \"Camera\",\n    CostumeMakeUp = \"Costume & Make-Up\",\n    Crew = \"Crew\",\n    Directing = \"Directing\",\n    Editing = \"Editing\",\n    Lighting = \"Lighting\",\n    Production = \"Production\",\n    Sound = \"Sound\",\n    VisualEffects = \"Visual Effects\",\n    Writing = \"Writing\",\n}\n\nexport interface ExternalIDS {\n    imdb_id:      string;\n    facebook_id:  null;\n    instagram_id: null;\n    twitter_id:   null;\n}\n\nexport interface Genre {\n    id:   number;\n    name: string;\n}\n\nexport interface Images {\n    backdrops: any[];\n    posters:   any[];\n}\n\nexport enum OriginalLanguage {\n    En = \"en\",\n    Es = \"es\",\n    Fr = \"fr\",\n}\n\nexport interface ProductionCompany {\n    id:             number;\n    logo_path:      string;\n    name:           string;\n    origin_country: string;\n}\n\nexport interface ProductionCountry {\n    iso_3166_1: string;\n    name:       string;\n}\n\nexport interface Recommendations {\n    page:          number;\n    results:       RecommendationsResult[];\n    total_pages:   number;\n    total_results: number;\n}\n\nexport interface RecommendationsResult {\n    id:                number;\n    video:             boolean;\n    vote_count:        number;\n    vote_average:      number;\n    title:             string;\n    release_date:      string;\n    original_language: OriginalLanguage;\n    original_title:    string;\n    genre_ids:         number[];\n    backdrop_path:     string;\n    adult:             boolean;\n    overview:          string;\n    poster_path:       string;\n    popularity:        number;\n}\n\nexport interface SpokenLanguage {\n    iso_639_1: OriginalLanguage;\n    name:      string;\n}\n\nexport interface Videos {\n    results: VideosResult[];\n}\n\nexport interface VideosResult {\n    id:         string;\n    iso_639_1:  OriginalLanguage;\n    iso_3166_1: string;\n    key:        string;\n    name:       string;\n    site:       string;\n    size:       number;\n    type:       string;\n}\n */\n\n",
            "properties": [
                {
                    "name": "awards",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "backgroundPath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "belongsToCollection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "boxOffice",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | number",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "budget",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "country",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "director",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "dvd",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "genres",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[] | string | IGenre[]",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "imdbId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "imdbRating",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "imdbVotes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "isAdult",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "isAvailable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "languages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "libraryInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ILibraryInfo",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "metascore",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "originalLanguage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "originalTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "plot",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "popularity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "posterPath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "production",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "rated",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "ratings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IRating[]",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "releaseDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "releaseYear",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | string",
                    "optional": true,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "response",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "runtime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "starring",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "tagline",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "tmdbId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "video",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "website",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "writer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 42
                }
            ],
            "indexSignatures": [
                {
                    "id": "index-declaration-584d54738f93e2af94202069b5eddb4cab23bb2dfec2ff69f24ebaf881c252f94680b4cd6cec302796817692570a31bedafc5d74fed1cf6488a895dbf372e23d",
                    "args": [
                        {
                            "name": "propName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "any",
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 175,
            "methods": []
        },
        {
            "name": "IMovieAndUserData",
            "id": "interface-IMovieAndUserData-6e0f283a4a330bf0f39097261274324b4e4c1f1b842cacc131be8aac057ea7da060527e5c8d57dae522b1d2b33c287adc238fb619459150276db5af0e6f43577",
            "file": "src/app/shared/components/card-list/card-list.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit, Input, OnChanges } from '@angular/core';\nimport { BookmarkService, IBookmark } from '@services/bookmark.service';\nimport { WatchedService, IWatched } from '@services/watched.service';\nimport { LibraryService } from '@services/library.service';\nimport { environment } from '@environments/environment';\nimport { UserDataService } from '@services/user-data/user-data.service';\nimport { IProfileData } from '@models/profile-data.model';\nimport { MDBMovie } from '@models/mdb-movie.model';\nimport ObjectUtil from '@utils/object.utils';\n\n@Component({\n  selector: 'app-card-list',\n  templateUrl: './card-list.component.html',\n  styleUrls: ['./card-list.component.scss']\n})\nexport class CardListComponent implements OnInit, OnChanges {\n\n  @Input() cardWidth: string\n  @Input() displayMode: string = 'd-inline-flex'\n  @Input() listType: string\n  _movieList: MDBMovie[]\n  @Input()\n  set movieList(inputMessage: any[]) {\n    inputMessage.forEach(inputMovie => {\n      this.movieAndUserDataList.push({ movie: inputMovie, userData: null })\n    })\n    this._movieList = inputMessage\n  }\n  get movieList(): any[] {\n    return this._movieList;\n  }\n\n\n  movieAndUserDataList: IMovieAndUserData[] = []\n\n  constructor(\n    private bookmarkService: BookmarkService,\n    private watchedService: WatchedService,\n    private libraryService: LibraryService,\n    private userDataService: UserDataService\n  ) { }\n\n  ngOnInit() {\n    this.renderHighlight()\n    this.getMoviesUserData()\n  }\n\n  ngOnChanges(changes: any): void {\n    console.log('changes',changes)\n    //Called before any other lifecycle hook. Use it to inject dependencies, but avoid any serious work here.\n    //Add '${implements OnChanges}' to the class.\n\n  }\n  /**\n   * Gets the user data like: bookmark, watched, video.\n   */\n  getMoviesUserData() {\n    const idList = this.collectIds()\n    const listLength = idList.length\n    const arr2 = this.createDividedList(idList, listLength)\n\n    // const arr2 = thisidList, listLength)\n    // tslint:disable-next-line:prefer-for-of\n    for (let index = 0; index < arr2.length; index++) {\n      const queryList = arr2[index];\n\n      if (this.listType === 'none') { // all types of user data.\n        this.userDataService.getMovieUserDataInList(queryList).then((docsList: IProfileData[]) => {\n          // if (docs.isFirebaseData && docs.isFirebaseData === true) {\n          //   const localDocs: Array<QueryDocumentSnapshot<any>>[] = docs.data\n          //   if (localDocs[0].length > 0) {\n          //     localDocs[0].forEach(element => {\n          //       const movie = this.movieList.find(e => e.id === element.data().tmdbId)\n          //       movie['bookmark'] = element.data()\n          //       movie['bookmark'].id = element.id\n          //     })\n          //   }\n          //   if (localDocs[1].length > 0) {\n          //     localDocs[1].forEach(element => {\n          //       const movie = this.movieList.find(e => e.id === element.data().tmdbId)\n          //       movie['watched'] = element.data()\n          //       movie['watched'].id = element.id\n          //     })\n          //   }\n          // }\n\n          if (!ObjectUtil.isEmpty(docsList)) {\n            if (environment.runConfig.springMode) {\n              this.movieAndUserDataList.forEach((movieAndUserData: IMovieAndUserData) => {\n                const doc = docsList.find((doc: IProfileData) => movieAndUserData.movie.tmdbId === doc.tmdbId)\n                movieAndUserData.userData = doc\n              })\n            } else {\n              docsList.forEach(data => {\n\n                // validate if works with IPC\n                this.movieAndUserDataList.forEach((movieAndUserData: IMovieAndUserData) => {\n                  const doc = docsList.find((doc: IProfileData) => movieAndUserData.movie.tmdbId === doc.tmdbId)\n                  movieAndUserData.userData = doc\n                })\n              });\n            }\n          }\n        })\n      } else {\n        if (this.listType !== 'bookmark') {\n          this.bookmarkService.getBookmarksInList(queryList).then(docs => {\n            const dataType = 'bookmark'\n            this.curateUserData(dataType, docs)\n          })\n        }\n        if (this.listType !== 'watched') {\n          this.watchedService.getWatchedInList(queryList).then(docs => {\n            const dataType = 'watched'\n            this.curateUserData(dataType, docs)\n          })\n        }\n        if (this.listType !== 'library') {\n          this.libraryService.getMoviesFromLibraryInList(queryList).then(docs => {\n            const dataType = 'library'\n            this.curateUserData(dataType, docs)\n          })\n        }\n      }\n    }\n  }\n\n  /**\n   * Organizes user data and binds them into movie cards.\n   */\n  curateUserData(dataType: string, docs: firebase.firestore.QuerySnapshot | IProfileData[]): void {\n    const dataList = []\n\n    docs.forEach(doc => {\n      const docData = environment.runConfig.firebaseMode ? doc.data() : doc\n      const dTmdbId = docData.tmdbId\n      const dTitle = docData.title\n      const dYear = docData.year\n      let myData\n      switch (dataType) {\n        case 'bookmark':\n          const bm: IBookmark = {\n            id: doc.id ? doc.id : '',\n            tmdbId: dTmdbId ? dTmdbId : 0,\n            title: dTitle ? dTitle : '',\n            year: dYear ? dYear : 0\n          }\n          myData = bm\n          break;\n        case 'watched':\n          const wtchd: IWatched = {\n            id: doc.id ? doc.id : '',\n            tmdbId: dTmdbId ? dTmdbId : 0,\n            title: dTitle ? dTitle : '',\n            year: dYear ? parseInt(dYear, 10) : 0,\n            percentage: docData.percentage ? docData.percentage : 100\n          }\n          myData = wtchd\n          break;\n        case 'video':\n          // const vid: IVideo = {\n          //   id: doc.id ? doc.id : '',\n          //   tmdbId: dTmdbId ? dTmdbId : 0,\n          //   title: dTitle ? dTitle : '',\n          //   year: dYear ? dYear : 0,\n          //   videoUrl: docData.videoUrl ? docData.videoUrl : ''\n          // }\n          const vid = {\n            id: doc.id,\n            tmdbId: docData.tmdbId,\n            videoUrl: docData.fullFilePath\n          }\n          myData = vid\n          break;\n        case 'none':\n          break;\n        default:\n          break;\n      }\n      dataList.push(myData)\n    })\n    this.movieList.forEach(movie => {\n      dataList.forEach(data => {\n        if (data.tmdbId === movie.id) {\n          movie[dataType] = data\n        }\n      });\n    })\n  }\n\n  renderHighlight() {\n    // this.moviesList$.subscribe(moviesResult => {\n    //   console.log('moviesresult: ', moviesResult)\n\n    //   if (moviesResult.change === 'add') {\n    //     this.movieList.forEach(element => {\n    //       if (moviesResult.idChanged === element.id) {\n    //         element.isHighlighted = true\n    //       }\n    //     })\n    //   } else if (moviesResult.change === 'remove') {\n    //     this.movieList.forEach(element => {\n    //       if (moviesResult.idChanged === element.id) {\n    //         element.isHighlighted = false\n    //       }\n    //     })\n    //   } else if (moviesResult.change === 'clear') {\n    //     this.movieList.forEach(element => {\n    //       element.isHighlighted = false\n    //     })\n    //   } else if (moviesResult.change === 'watched') {\n    //     this.movieList.forEach(element => {\n    //       moviesResult.idChanged.forEach(mrId => {\n    //         if (mrId === element.id) {\n    //           // element.isWatched = true\n    //           // element.watchedProgress = \"100%\"\n    //           // this.cdr.detectChanges()\n    //         }\n    //       });\n    //     })\n    //   }\n    // });\n  }\n\n  collectIds() {\n    const idList = []\n    this.movieList.forEach(e => {\n      idList.push(e.id)\n    }); // lodash is not faster than this.\n    return idList\n  }\n\n  /**\n   * Divides a list of Ids\n   * @param idList\n   * @param listLength\n   * @returns list of split list `[[],[]]`\n   */\n  createDividedList(idList: number[], listLength: number) {\n    const toReturn = []\n    let temparray\n    // const chunk = 10; // Firebase's max length in IN query.\n    const chunk = environment.runConfig.firebaseMode ? 10 : 20\n    let a = 0\n    for (let i = 0; i < listLength; i += chunk) {\n      temparray = idList.slice(i, i + chunk);\n      toReturn[a] = temparray\n      a++\n    }\n    return toReturn\n  }\n\n}\n\ninterface IMovieAndUserData {\n  movie: MDBMovie;\n  userData?: IProfileData\n}\n",
            "properties": [
                {
                    "name": "movie",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MDBMovie",
                    "optional": false,
                    "description": "",
                    "line": 256
                },
                {
                    "name": "userData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IProfileData",
                    "optional": true,
                    "description": "",
                    "line": 257
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "INavigation",
            "id": "interface-INavigation-5394148cf0988c3aaed39fcb2e8a4b0d3d3351ad3eb6443bc0ea7b9d653e0f3c9eb899b006f7f86e1309a6d322118203bbfec258ca235e1ff2b19dcd0261dd89",
            "file": "src/app/services/navigation.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NavigationService {\n  // currentPage: string\n  // private root\n  // private previousPages: string[]\n  // private nextPages: string[]\n\n  constructor() { }\n  // constructor(root, location) {\n  //   // console.log(typeof root);\n  //   // console.log(typeof location);\n  // }\n\n  // goToPage(val: string) {\n  //   this.previousPages.push(this.currentPage)\n  //   this.currentPage = val\n  //   this.nextPages = []\n  // }\n\n  // nextPage() {\n  //   this.previousPages.push(this.currentPage)\n  //   // this.currentPage\n  // }\n  // previousPage() { }\n  // getPreviousPagesLength() { return this.previousPages.length }\n  // getNextPagesLength() { return this.nextPages.length }\n}\n\n\n// no use yet.\n\nexport interface INavigation {\n  currentPage: string,\n  // previousPages: string[],\n  // nextPages: string[]\n}\n\nexport class Navigation implements INavigation {\n  currentPage: string\n  private previousPages: string[]\n  private nextPages: string[]\n\n  constructor(root, location) {\n\n  }\n\n  goToPage(val: string) {\n    this.previousPages.push(this.currentPage)\n    this.currentPage = val\n    this.nextPages = []\n  }\n  nextPage() {\n    this.previousPages.push(this.currentPage)\n    // this.currentPage\n  }\n  previousPage() { }\n  getPreviousPagesLength() { return this.previousPages.length }\n  getNextPagesLength() { return this.nextPages.length }\n}\n",
            "properties": [
                {
                    "name": "currentPage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 37
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "INotification",
            "id": "interface-INotification-d96e8bee881de68768193c2f139fdd00eb236e61c7a0d7d7c80d236b2d4f9c6ff53f30a851d0a7c58730449b8e4e63f9f19454f3373692adfa2c0b0e1140f3ee",
            "file": "src/app/services/notification.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IUserSavedData } from '@models/interfaces';\nimport { environment } from '@environments/environment';\nimport { Injectable } from '@angular/core';\nimport { FirebaseService, FirebaseOperator, CollectionName, FieldName } from './firebase.service';\nimport { IpcService } from './ipc.service';\nimport { Observable } from 'rxjs';\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotificationService {\n\n  bookmarkObservable = new Observable<any>();\n\n  constructor(\n    private firebaseService: FirebaseService,\n    private ipcService: IpcService) { }\n\n\n  setNotification(notif: INotification) {\n\n  }\n\n}\nenum NotificationType {\n  ERROR = 'error',\n  INFO = 'info',\n  WARNING = 'warning',\n}\n\nexport interface INotification extends IUserSavedData {\n  type: NotificationType,\n  message: string,\n  description?: string;\n}\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NotificationType",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "IUserSavedData"
        },
        {
            "name": "IOmdbMovieDetail",
            "id": "interface-IOmdbMovieDetail-584d54738f93e2af94202069b5eddb4cab23bb2dfec2ff69f24ebaf881c252f94680b4cd6cec302796817692570a31bedafc5d74fed1cf6488a895dbf372e23d",
            "file": "src/app/models/interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IMdbMovieDetails {\n  awards?: string\n  backgroundPath: string;\n  belongsToCollection?: []\n  boxOffice?: string | number // tmdb:revenue(number)\n  budget?: number\n  country?: string\n  director?: string\n  dvd?: string // dvd release\n  genres?: string[] | string | IGenre[]\n  imdbId?: string\n  imdbRating?: string\n  imdbVotes?: string\n  isAdult?: boolean;\n  isAvailable?: boolean;\n  languages?: string[]\n  libraryInfo?: ILibraryInfo\n  metascore?: string // metacritic score\\\n  originalLanguage?: string // tmdb:\"en\",omdb:\"English\"\n  originalTitle?: string\n  plot?: string // plot or overview\n  popularity?: number\n  posterPath: string\n  production?: string // company; i.e. Walt Disney Pictures\n  rated?: string // rated or certificate\n  ratings?: IRating[]\n  releaseDate?: string // omdb:\"05 May 2017\"; tmdb:\"1999-10-15\"\n  releaseYear?: number | string\n  response: string\n  runtime?: string\n  starring?: string // Actors field in omdb\n  status?: string // released/Post\n  tagline?: string;\n  tmdbId?: number\n  title: string\n  type?: string // movie/tvmovie/series\n  video?: boolean; // unknown\n  // voteAverage: number; // tmdb votes\n  // voteCount: number; // tmdb votes\n  website?: string\n  writer?: string // omdb\n  [propName: string]: any;\n}\n\nexport interface IRating {\n  Source: string\n  Value: string\n}\n\nexport interface LibraryInfo {\n  tmdbId?: null | number | string\n  imdbID?: string\n  title?: string\n  year?: number\n  directoryList?: string[]\n  _id: string\n}\n\nexport interface MovieGenre {\n  id: number\n  code: string\n  description: string\n  isChecked: boolean\n}\n\nexport interface WatchList {\n  id: number\n  movieList: string[]\n}\n\nexport interface ILibraryInfo {\n  tmdbId?: null | number | string\n  imdbID?: string\n  title?: string\n  year?: number\n  directoryList?: string[]\n  _id: string\n}\n\nexport interface ICollection {\n  id: number,\n  name: string\n}\n\nexport interface IProductionCompany {\n  id: number;\n  logo_path: null | string;\n  name: string;\n  origin_country: string;\n}\n\nexport interface IProductionCountry {\n  iso_3166_1: string;\n  name: string;\n}\n\nexport interface ISpokenLanguage {\n  iso_639_1: string;\n  name: string;\n}\n\nexport interface IOmdbMovieDetail {\n  Title: string\n  Year?: string\n  Rated?: string\n  Released?: string // \"05 May 2017\"\n  Runtime?: string\n  Genre?: string\n  Director?: string\n  Writer?: string\n  Actors?: string\n  Plot?: string\n  Language?: string\n  Country?: string\n  Awards?: string\n  Poster?: string\n  Ratings?: IRating[]\n  Metascore?: string\n  imdbRating?: string\n  imdbVotes?: string\n  imdbID: string\n  Type?: string\n  DVD?: string\n  BoxOffice?: string\n  Production?: string\n  Website?: string\n  Response: string\n}\n\nexport interface ITmdbMovieDetail {\n  adult: boolean;\n  backdrop_path: string;\n  belongs_to_collection: null;\n  budget: number;\n  genres: IGenre[];\n  homepage: string;\n  id: number;\n  imdb_id: string;\n  original_language: string;\n  original_title: string;\n  overview: string;\n  popularity: number;\n  poster_path: string;\n  production_companies: IProductionCompany[];\n  production_countries: IProductionCountry[];\n  release_date: string;\n  revenue: number;\n  runtime: number;\n  spoken_languages: ISpokenLanguage[];\n  status: string;\n  tagline: string;\n  title: string;\n  video: boolean;\n  vote_average: number;\n  vote_count: number;\n}\n\nexport interface MdbMovieDetails {\n  adult?: boolean;\n  title: string\n  releaseYear?: string\n  releaseDate?: string\n  rated?: string // rated or certificate\n  runtime?: string\n  genres?: string\n  director?: string\n  writer?: string\n  Actors?: string\n  plot?: string // plot or overview\n  Language?: string\n  Country?: string\n  Awards?: string\n  Poster?: string\n  Ratings?: IRating[]\n  Metascore?: string\n  imdbRating?: string\n  imdbVotes?: string\n  imdbID: string\n  tmdbID: number\n  Type?: string\n  DVD?: string\n  BoxOffice?: string\n  Production?: string\n  website?: string\n  response: string\n  libraryInfo?: ILibraryInfo\n}\n\n// // adult: boolean;\n// //backdrop_path: string;\n// belongs_to_collection: null;\n// // budget: number;\n// genres: Genre[];\n// // homepage: string;\n// // id: number;\n// // imdb_id: string;\n// original_language: string;\n// original_title: string;\n// // overview: string;\n// // popularity: number;\n// // poster_path: string;\n// production_companies: ProductionCompany[];\n// production_countries: ProductionCountry[];\n// // release_date: string;\n// // revenue: number;\n// // runtime: number;\n// spoken_languages: SpokenLanguage[];\n// // status: string;\n// // tagline: string;\n// // title: string;\n// // video: boolean;\n// // vote_average: number;\n// // vote_count: number;\n\nexport interface ITmdbResultObject {\n  page: number;\n  total_results: number;\n  total_pages: number;\n  results: ITmdbResult[];\n}\n\nexport interface ITmdbResult {\n  popularity: number\n  vote_count: number\n  video: boolean\n  poster_path: string\n  id: number\n  adult: boolean\n  backdrop_path: string\n  original_language: string\n  original_title: string\n  genre_ids: number[]\n  title: string\n  vote_average: number\n  overview: string\n  release_date: string\n  isAvailable?: boolean\n  isHighlighted?: boolean\n}\n\nexport interface ILibraryMovie {\n  tmdbId?: number,\n  title: string,\n  year: number,\n  imdbId?: string,\n  directory: string[]\n}\n\nexport interface IGenre {\n  id: number\n  name: string\n}\n\nexport interface Credits {\n  id: number;\n  cast: CastElement[];\n  crew: Crew[];\n}\n\ninterface CastElement {\n  cast_id: number;\n  character: string;\n  credit_id: string;\n  gender: number;\n  id: number;\n  name: string;\n  order: number;\n  profile_path: null | string;\n}\n\ninterface Crew {\n  credit_id: string;\n  department: Department;\n  gender: number;\n  id: number;\n  job: string;\n  name: string;\n  profile_path: null | string;\n}\n\nexport enum Department {\n  Art = 'Art',\n  Camera = 'Camera',\n  CostumeMakeUp = 'Costume & Make-Up',\n  Crew = 'Crew',\n  Directing = 'Directing',\n  Editing = 'Editing',\n  Lighting = 'Lighting',\n  Production = 'Production',\n  Sound = 'Sound',\n  VisualEffects = 'Visual Effects',\n  Writing = 'Writing',\n}\n\nexport class MDBTorrent {\n  id?: string\n  name?: string\n  size?: string\n  hash: string\n  url?: string\n  quality?: string\n  type?: string\n  seeds?: number\n  peers?: number\n  sizeBytes?: number\n  added?: string\n  dateUploaded?: string\n  dateUploadedUnix?: number\n  isYts?: boolean\n  magnetLink?: string\n}\n\nexport class ITPBTorrent {\n  id?: number\n  name?: string\n  hash: string\n  sizeBytes?: number\n  added?: string\n}\n\nexport interface ISearch {\n  page: number\n}\n\nexport enum OmdbParameters {\n  ApiKey = 'apikey',\n  ImdbId = 'i',\n  Title = 't',\n  Type = 'type',\n  Year = 'y',\n  Plot = 'plot',\n  Return = 'r',\n  Callback = 'callback',\n  Version = 'v',\n}\n\nexport enum TmdbParameters {\n  ApiKey = 'api_key',\n  AppendToResponse = 'append_to_response',\n  Language = 'language',\n  Region = 'region',\n  SortBy = 'sort_by',\n  CertificationCountry = 'certification_country',\n  Certification = 'certification',\n  CertificationLess = 'certification.lte',\n  CertificationGreater = 'certification.gte',\n  IncludeAdult = 'include_adult',\n  IncludeVideo = 'include_video',\n  Page = 'page',\n  PrimaryReleaseYear = 'primary_release_year',\n  PrimaryReleaseDateGreater = 'primary_release_date.gte',\n  PrimaryReleaseDateLess = 'primary_release_date.lte',\n  ReleaseDateGreater = 'release_date.gte',\n  ReleaseDateLess = 'release_date.lte',\n  WithReleaseType = 'with_release_type',\n  Year = 'year',\n  VoteCountGreater = 'vote_count.gte',\n  VoteCountLess = 'vote_count.lte',\n  VoteAverageGreater = 'vote_average.gte',\n  VoteAverageLess = 'vote_average.lte',\n  WithCast = 'with_cast',\n  WithCrew = 'with_crew',\n  WithPeople = 'with_people',\n  WithCompanies = 'with_companies',\n  WithGenres = 'with_genres',\n  WithoutGenres = 'without_genres',\n  WithKeywords = 'with_keywords',\n  WithoutKeywords = 'without_keywords',\n  WithRuntimeGreater = 'with_runtime.gte',\n  WithRuntimeLess = 'with_runtime.lte',\n  WithOriginalLanguage = 'with_original_language',\n  WithWatchProviders = 'with_watch_providers',\n  WatchRegion = 'watch_region'\n}\n\nexport enum TmdbSearchMovieParameters {\n  ApiKey = 'api_key',\n  Language = 'language', // Pass a ISO 639 - 1 value to display translated data for the fields that support it. minLength: 2 pattern: ([a - z]{ 2 }) -([A - Z]{ 2 }) default: en - US\n  Query = 'query',\n  Page = 'page', // minimum: 1 maximum: 1000\n  IncludeAdult = 'include_adult',\n  Region = 'region',\n  // Specify a ISO 3166 - 1 code to filter release dates.Must be uppercase. pattern: ^ [A - Z]{ 2 } $\n  Year = 'year',\n  PrimaryReleaseYear = 'primary_release_year'\n}\n\nenum TmdbAppendToResponseParameters {\n  AccountStates = 'account_states',\n  Videos = 'videos',\n  Images = 'images',\n  Credits = 'credits',\n  Changes = 'changes',\n  Translations = 'translations',\n  Similar = 'similar',\n  ExternalIds = 'external_ids',\n  AlternativeTitles = 'alternative_titles',\n  Keywords = 'keywords',\n  Reviews = 'reviews',\n  Recommendations = 'recommendations',\n  ReleaseDates = 'release_dates',\n  Lists = 'lists'\n}\n\nenum TmdbReleaseTypes {\n  PREMIERE = 'Premiere',  // 1\n  THEATRICAL_LIMITED = 'Theatrical(limited)', // 2\n  THEATRICAL = 'Theatrical', // 3\n  DIGITAL = 'Digital', // 4\n  PHYSICAL = 'Physical', // 5\n  TV = 'TV', // 6\n}\n\nexport interface IPersonDetails {\n  birthday: string;\n  known_for_department: string;\n  id: number;\n  movie_credits?: IPersonCredits;\n  tv_credits?: IPersonCredits;\n  combined_credits?: IPersonCredits;\n  homepage?: any;\n  profile_path: string;\n  imdb_id: string;\n  deathday?: any;\n  images?: IImages;\n  external_ids?: IExternalids;\n  name: string;\n  also_known_as: string[];\n  biography: string;\n  adult: boolean;\n  gender: number;\n  place_of_birth: string;\n  popularity: number;\n}\n\nexport interface IPersonCredits {\n  cast: IPersonCastCrew[];\n  crew: IPersonCastCrew[];\n  id?: number;\n}\n\nexport interface IPersonCastCrew {\n  id?: number;\n  original_language: string;\n  episode_count?: number;\n  overview: string;\n  origin_country?: string[];\n  original_name?: string;\n  genre_ids: number[];\n  name?: string;\n  media_type: string;\n  poster_path: null | string;\n  first_air_date?: string;\n  vote_average: number;\n  vote_count: number;\n  character?: string;\n  backdrop_path: null | string;\n  popularity: number;\n  credit_id: string;\n  original_title?: string;\n  video?: boolean;\n  release_date?: string;\n  title?: string;\n  adult?: boolean;\n  department?: string;\n  job?: string;\n}\n\nexport interface IExternalids {\n  id?: number;\n  freebase_id: string;\n  instagram_id: string;\n  tvrage_id: number;\n  twitter_id: string;\n  freebase_mid: string;\n  imdb_id: string;\n  facebook_id: string;\n}\n\nexport interface IImages {\n  id?: number;\n  profiles: IProfile[];\n}\n\nexport interface IProfile {\n  iso_639_1?: any;\n  aspect_ratio: number;\n  vote_count: number;\n  height: number;\n  vote_average: number;\n  file_path: string;\n  width: number;\n}\n\nexport interface ICredits {\n  cast: ICast[];\n  crew: ICrew[];\n}\n\ninterface ICast {\n  poster_path?: string;\n  adult: boolean;\n  backdrop_path?: string;\n  vote_count: number;\n  video: boolean;\n  id: number;\n  media_type?: string;\n  popularity: number;\n  genre_ids: number[];\n  original_language: string;\n  title: string;\n  original_title: string;\n  release_date: string;\n  character: string;\n  vote_average: number;\n  overview: string;\n  credit_id: string;\n}\n\ninterface ICrew {\n  id: number;\n  department: string;\n  original_language: string;\n  original_title: string;\n  job: string;\n  overview: string;\n  genre_ids: number[];\n  video: boolean;\n  episode_count: number\n  media_type?: string;\n  credit_id: string;\n  poster_path?: string;\n  popularity: number;\n  backdrop_path?: string;\n  vote_count: number;\n  title: string;\n  adult: boolean;\n  vote_average: number;\n  release_date: string;\n}\n\nexport interface IUserSavedData {\n  id?: string,\n  title: string,\n  year: number,\n  tmdbId: number,\n}\n\nexport enum GenreCodes {\n  Action = 28,\n  Adventure = 12,\n  Animation = 16,\n  Comedy = 35,\n  Crime = 80,\n  Documentary = 99,\n  Drama = 18,\n  Family = 10751,\n  Fantasy = 14,\n  History = 36,\n  Horror = 27,\n  Music = 10402,\n  Mystery = 9648,\n  Romance = 10749,\n  ScienceFiction = 878,\n  TVMovie = 10770,\n  Thriller = 53,\n  War = 10752,\n  Western = 37,\n  // mdb reserved\n  FilmNoir = 20000,\n  // similar genre: Music id:10402\n  Musical = 20001,\n  News = 20002,\n  RealityTV = 20003,\n  // similar genre: Science Fiction id:878\n  SciFi = 20004,\n  // another media type\n  Short = 20005,\n  Sport = 20006,\n}\n\n\n\n/**\nexport enum Department {\n    Art = \"Art\",\n    Camera = \"Camera\",\n    CostumeMakeUp = \"Costume & Make-Up\",\n    Crew = \"Crew\",\n    Directing = \"Directing\",\n    Editing = \"Editing\",\n    Lighting = \"Lighting\",\n    Production = \"Production\",\n    Sound = \"Sound\",\n    VisualEffects = \"Visual Effects\",\n    Writing = \"Writing\",\n}\n\nexport interface ExternalIDS {\n    imdb_id:      string;\n    facebook_id:  null;\n    instagram_id: null;\n    twitter_id:   null;\n}\n\nexport interface Genre {\n    id:   number;\n    name: string;\n}\n\nexport interface Images {\n    backdrops: any[];\n    posters:   any[];\n}\n\nexport enum OriginalLanguage {\n    En = \"en\",\n    Es = \"es\",\n    Fr = \"fr\",\n}\n\nexport interface ProductionCompany {\n    id:             number;\n    logo_path:      string;\n    name:           string;\n    origin_country: string;\n}\n\nexport interface ProductionCountry {\n    iso_3166_1: string;\n    name:       string;\n}\n\nexport interface Recommendations {\n    page:          number;\n    results:       RecommendationsResult[];\n    total_pages:   number;\n    total_results: number;\n}\n\nexport interface RecommendationsResult {\n    id:                number;\n    video:             boolean;\n    vote_count:        number;\n    vote_average:      number;\n    title:             string;\n    release_date:      string;\n    original_language: OriginalLanguage;\n    original_title:    string;\n    genre_ids:         number[];\n    backdrop_path:     string;\n    adult:             boolean;\n    overview:          string;\n    poster_path:       string;\n    popularity:        number;\n}\n\nexport interface SpokenLanguage {\n    iso_639_1: OriginalLanguage;\n    name:      string;\n}\n\nexport interface Videos {\n    results: VideosResult[];\n}\n\nexport interface VideosResult {\n    id:         string;\n    iso_639_1:  OriginalLanguage;\n    iso_3166_1: string;\n    key:        string;\n    name:       string;\n    site:       string;\n    size:       number;\n    type:       string;\n}\n */\n\n",
            "properties": [
                {
                    "name": "Actors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 112
                },
                {
                    "name": "Awards",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 116
                },
                {
                    "name": "BoxOffice",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 125
                },
                {
                    "name": "Country",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 115
                },
                {
                    "name": "Director",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 110
                },
                {
                    "name": "DVD",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 124
                },
                {
                    "name": "Genre",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 109
                },
                {
                    "name": "imdbID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 122
                },
                {
                    "name": "imdbRating",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 120
                },
                {
                    "name": "imdbVotes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 121
                },
                {
                    "name": "Language",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 114
                },
                {
                    "name": "Metascore",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 119
                },
                {
                    "name": "Plot",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 113
                },
                {
                    "name": "Poster",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 117
                },
                {
                    "name": "Production",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 126
                },
                {
                    "name": "Rated",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 106
                },
                {
                    "name": "Ratings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IRating[]",
                    "optional": true,
                    "description": "",
                    "line": 118
                },
                {
                    "name": "Released",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 107
                },
                {
                    "name": "Response",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 128
                },
                {
                    "name": "Runtime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 108
                },
                {
                    "name": "Title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 104
                },
                {
                    "name": "Type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 123
                },
                {
                    "name": "Website",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 127
                },
                {
                    "name": "Writer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 111
                },
                {
                    "name": "Year",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 105
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IOptionSelections",
            "id": "interface-IOptionSelections-4cc85c82fce747d67bbe0144053da3bcd4a6e5247f406d7194a1367bf61acbcf6a7c430e836b46d0bd987c9c154d50f28c4ca27429d5029ffc8e99665b29d3fc",
            "file": "src/app/shared/components/input-container/input-container.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, ContentChild, EventEmitter, Inject, Input, OnInit, Output, TemplateRef, ViewChild } from '@angular/core';\nimport { AbstractControlOptions, AsyncValidatorFn, FormControl, FormGroup, NgControl, ValidatorFn } from '@angular/forms';\n\n@Component({\n  selector: 'app-input-container',\n  templateUrl: './input-container.component.html',\n  styleUrls: ['./input-container.component.scss'],\n  // providers: [{\n  //   provide: NG_VALUE_ACCESSOR,\n  //   useExisting: forwardRef(() => DefaultValueAccessor),\n  //   multi: true\n  // }]\n})\nexport class InputContainerComponent extends FormControl implements OnInit {\n\n  @ContentChild(TemplateRef, {\n    static: false\n  })\n\n  templateRef: TemplateRef<any>\n\n  @ViewChild('select', { static: false }) select: TemplateRef<any>;\n  @ViewChild('text', { static: false }) text: TemplateRef<any>;\n  @ViewChild('checkbox', { static: false }) checkbox: TemplateRef<any>;\n  @Input() fieldLabel: string\n  @Input() inputType: string = 'text'\n  @Input() defaultVal: string\n  @Input() mdbFormControlName: string\n  @Input() parentForm: FormGroup\n  @Input() optionSelections: IOptionSelections[]\n  @Input() mdbFormGroup: FormGroup\n  @Output() outputEvent = new EventEmitter<any>();\n  @Output() onChange = new EventEmitter<any>();\n  @Output() value = new EventEmitter<any>();\n\n  ngControl: NgControl;\n\n  constructor(\n    @Inject('formState') formState: any = null,\n    @Inject('validatorOrOpts') validatorOrOpts?: ValidatorFn | ValidatorFn[] | AbstractControlOptions | null,\n    @Inject('asyncValidator') asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null\n  ) { super(formState, validatorOrOpts, asyncValidator) }\n\n  ngOnInit() {\n  }\n\n  onChangeFunc(value) {\n\n    // const value = event\n    if (value) {\n      console.log(value)\n      this.onChange.emit(value)\n    }\n    // const value = event.source.value\n    // if (event.source.selected) {\n    //   console.log(value)\n    //   this.onChange.emit(value)\n    // }\n  }\n}\n\ninterface IOptionSelections {\n  value: any,\n  label: string\n}\n",
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 63
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IPersonCastCrew",
            "id": "interface-IPersonCastCrew-584d54738f93e2af94202069b5eddb4cab23bb2dfec2ff69f24ebaf881c252f94680b4cd6cec302796817692570a31bedafc5d74fed1cf6488a895dbf372e23d",
            "file": "src/app/models/interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IMdbMovieDetails {\n  awards?: string\n  backgroundPath: string;\n  belongsToCollection?: []\n  boxOffice?: string | number // tmdb:revenue(number)\n  budget?: number\n  country?: string\n  director?: string\n  dvd?: string // dvd release\n  genres?: string[] | string | IGenre[]\n  imdbId?: string\n  imdbRating?: string\n  imdbVotes?: string\n  isAdult?: boolean;\n  isAvailable?: boolean;\n  languages?: string[]\n  libraryInfo?: ILibraryInfo\n  metascore?: string // metacritic score\\\n  originalLanguage?: string // tmdb:\"en\",omdb:\"English\"\n  originalTitle?: string\n  plot?: string // plot or overview\n  popularity?: number\n  posterPath: string\n  production?: string // company; i.e. Walt Disney Pictures\n  rated?: string // rated or certificate\n  ratings?: IRating[]\n  releaseDate?: string // omdb:\"05 May 2017\"; tmdb:\"1999-10-15\"\n  releaseYear?: number | string\n  response: string\n  runtime?: string\n  starring?: string // Actors field in omdb\n  status?: string // released/Post\n  tagline?: string;\n  tmdbId?: number\n  title: string\n  type?: string // movie/tvmovie/series\n  video?: boolean; // unknown\n  // voteAverage: number; // tmdb votes\n  // voteCount: number; // tmdb votes\n  website?: string\n  writer?: string // omdb\n  [propName: string]: any;\n}\n\nexport interface IRating {\n  Source: string\n  Value: string\n}\n\nexport interface LibraryInfo {\n  tmdbId?: null | number | string\n  imdbID?: string\n  title?: string\n  year?: number\n  directoryList?: string[]\n  _id: string\n}\n\nexport interface MovieGenre {\n  id: number\n  code: string\n  description: string\n  isChecked: boolean\n}\n\nexport interface WatchList {\n  id: number\n  movieList: string[]\n}\n\nexport interface ILibraryInfo {\n  tmdbId?: null | number | string\n  imdbID?: string\n  title?: string\n  year?: number\n  directoryList?: string[]\n  _id: string\n}\n\nexport interface ICollection {\n  id: number,\n  name: string\n}\n\nexport interface IProductionCompany {\n  id: number;\n  logo_path: null | string;\n  name: string;\n  origin_country: string;\n}\n\nexport interface IProductionCountry {\n  iso_3166_1: string;\n  name: string;\n}\n\nexport interface ISpokenLanguage {\n  iso_639_1: string;\n  name: string;\n}\n\nexport interface IOmdbMovieDetail {\n  Title: string\n  Year?: string\n  Rated?: string\n  Released?: string // \"05 May 2017\"\n  Runtime?: string\n  Genre?: string\n  Director?: string\n  Writer?: string\n  Actors?: string\n  Plot?: string\n  Language?: string\n  Country?: string\n  Awards?: string\n  Poster?: string\n  Ratings?: IRating[]\n  Metascore?: string\n  imdbRating?: string\n  imdbVotes?: string\n  imdbID: string\n  Type?: string\n  DVD?: string\n  BoxOffice?: string\n  Production?: string\n  Website?: string\n  Response: string\n}\n\nexport interface ITmdbMovieDetail {\n  adult: boolean;\n  backdrop_path: string;\n  belongs_to_collection: null;\n  budget: number;\n  genres: IGenre[];\n  homepage: string;\n  id: number;\n  imdb_id: string;\n  original_language: string;\n  original_title: string;\n  overview: string;\n  popularity: number;\n  poster_path: string;\n  production_companies: IProductionCompany[];\n  production_countries: IProductionCountry[];\n  release_date: string;\n  revenue: number;\n  runtime: number;\n  spoken_languages: ISpokenLanguage[];\n  status: string;\n  tagline: string;\n  title: string;\n  video: boolean;\n  vote_average: number;\n  vote_count: number;\n}\n\nexport interface MdbMovieDetails {\n  adult?: boolean;\n  title: string\n  releaseYear?: string\n  releaseDate?: string\n  rated?: string // rated or certificate\n  runtime?: string\n  genres?: string\n  director?: string\n  writer?: string\n  Actors?: string\n  plot?: string // plot or overview\n  Language?: string\n  Country?: string\n  Awards?: string\n  Poster?: string\n  Ratings?: IRating[]\n  Metascore?: string\n  imdbRating?: string\n  imdbVotes?: string\n  imdbID: string\n  tmdbID: number\n  Type?: string\n  DVD?: string\n  BoxOffice?: string\n  Production?: string\n  website?: string\n  response: string\n  libraryInfo?: ILibraryInfo\n}\n\n// // adult: boolean;\n// //backdrop_path: string;\n// belongs_to_collection: null;\n// // budget: number;\n// genres: Genre[];\n// // homepage: string;\n// // id: number;\n// // imdb_id: string;\n// original_language: string;\n// original_title: string;\n// // overview: string;\n// // popularity: number;\n// // poster_path: string;\n// production_companies: ProductionCompany[];\n// production_countries: ProductionCountry[];\n// // release_date: string;\n// // revenue: number;\n// // runtime: number;\n// spoken_languages: SpokenLanguage[];\n// // status: string;\n// // tagline: string;\n// // title: string;\n// // video: boolean;\n// // vote_average: number;\n// // vote_count: number;\n\nexport interface ITmdbResultObject {\n  page: number;\n  total_results: number;\n  total_pages: number;\n  results: ITmdbResult[];\n}\n\nexport interface ITmdbResult {\n  popularity: number\n  vote_count: number\n  video: boolean\n  poster_path: string\n  id: number\n  adult: boolean\n  backdrop_path: string\n  original_language: string\n  original_title: string\n  genre_ids: number[]\n  title: string\n  vote_average: number\n  overview: string\n  release_date: string\n  isAvailable?: boolean\n  isHighlighted?: boolean\n}\n\nexport interface ILibraryMovie {\n  tmdbId?: number,\n  title: string,\n  year: number,\n  imdbId?: string,\n  directory: string[]\n}\n\nexport interface IGenre {\n  id: number\n  name: string\n}\n\nexport interface Credits {\n  id: number;\n  cast: CastElement[];\n  crew: Crew[];\n}\n\ninterface CastElement {\n  cast_id: number;\n  character: string;\n  credit_id: string;\n  gender: number;\n  id: number;\n  name: string;\n  order: number;\n  profile_path: null | string;\n}\n\ninterface Crew {\n  credit_id: string;\n  department: Department;\n  gender: number;\n  id: number;\n  job: string;\n  name: string;\n  profile_path: null | string;\n}\n\nexport enum Department {\n  Art = 'Art',\n  Camera = 'Camera',\n  CostumeMakeUp = 'Costume & Make-Up',\n  Crew = 'Crew',\n  Directing = 'Directing',\n  Editing = 'Editing',\n  Lighting = 'Lighting',\n  Production = 'Production',\n  Sound = 'Sound',\n  VisualEffects = 'Visual Effects',\n  Writing = 'Writing',\n}\n\nexport class MDBTorrent {\n  id?: string\n  name?: string\n  size?: string\n  hash: string\n  url?: string\n  quality?: string\n  type?: string\n  seeds?: number\n  peers?: number\n  sizeBytes?: number\n  added?: string\n  dateUploaded?: string\n  dateUploadedUnix?: number\n  isYts?: boolean\n  magnetLink?: string\n}\n\nexport class ITPBTorrent {\n  id?: number\n  name?: string\n  hash: string\n  sizeBytes?: number\n  added?: string\n}\n\nexport interface ISearch {\n  page: number\n}\n\nexport enum OmdbParameters {\n  ApiKey = 'apikey',\n  ImdbId = 'i',\n  Title = 't',\n  Type = 'type',\n  Year = 'y',\n  Plot = 'plot',\n  Return = 'r',\n  Callback = 'callback',\n  Version = 'v',\n}\n\nexport enum TmdbParameters {\n  ApiKey = 'api_key',\n  AppendToResponse = 'append_to_response',\n  Language = 'language',\n  Region = 'region',\n  SortBy = 'sort_by',\n  CertificationCountry = 'certification_country',\n  Certification = 'certification',\n  CertificationLess = 'certification.lte',\n  CertificationGreater = 'certification.gte',\n  IncludeAdult = 'include_adult',\n  IncludeVideo = 'include_video',\n  Page = 'page',\n  PrimaryReleaseYear = 'primary_release_year',\n  PrimaryReleaseDateGreater = 'primary_release_date.gte',\n  PrimaryReleaseDateLess = 'primary_release_date.lte',\n  ReleaseDateGreater = 'release_date.gte',\n  ReleaseDateLess = 'release_date.lte',\n  WithReleaseType = 'with_release_type',\n  Year = 'year',\n  VoteCountGreater = 'vote_count.gte',\n  VoteCountLess = 'vote_count.lte',\n  VoteAverageGreater = 'vote_average.gte',\n  VoteAverageLess = 'vote_average.lte',\n  WithCast = 'with_cast',\n  WithCrew = 'with_crew',\n  WithPeople = 'with_people',\n  WithCompanies = 'with_companies',\n  WithGenres = 'with_genres',\n  WithoutGenres = 'without_genres',\n  WithKeywords = 'with_keywords',\n  WithoutKeywords = 'without_keywords',\n  WithRuntimeGreater = 'with_runtime.gte',\n  WithRuntimeLess = 'with_runtime.lte',\n  WithOriginalLanguage = 'with_original_language',\n  WithWatchProviders = 'with_watch_providers',\n  WatchRegion = 'watch_region'\n}\n\nexport enum TmdbSearchMovieParameters {\n  ApiKey = 'api_key',\n  Language = 'language', // Pass a ISO 639 - 1 value to display translated data for the fields that support it. minLength: 2 pattern: ([a - z]{ 2 }) -([A - Z]{ 2 }) default: en - US\n  Query = 'query',\n  Page = 'page', // minimum: 1 maximum: 1000\n  IncludeAdult = 'include_adult',\n  Region = 'region',\n  // Specify a ISO 3166 - 1 code to filter release dates.Must be uppercase. pattern: ^ [A - Z]{ 2 } $\n  Year = 'year',\n  PrimaryReleaseYear = 'primary_release_year'\n}\n\nenum TmdbAppendToResponseParameters {\n  AccountStates = 'account_states',\n  Videos = 'videos',\n  Images = 'images',\n  Credits = 'credits',\n  Changes = 'changes',\n  Translations = 'translations',\n  Similar = 'similar',\n  ExternalIds = 'external_ids',\n  AlternativeTitles = 'alternative_titles',\n  Keywords = 'keywords',\n  Reviews = 'reviews',\n  Recommendations = 'recommendations',\n  ReleaseDates = 'release_dates',\n  Lists = 'lists'\n}\n\nenum TmdbReleaseTypes {\n  PREMIERE = 'Premiere',  // 1\n  THEATRICAL_LIMITED = 'Theatrical(limited)', // 2\n  THEATRICAL = 'Theatrical', // 3\n  DIGITAL = 'Digital', // 4\n  PHYSICAL = 'Physical', // 5\n  TV = 'TV', // 6\n}\n\nexport interface IPersonDetails {\n  birthday: string;\n  known_for_department: string;\n  id: number;\n  movie_credits?: IPersonCredits;\n  tv_credits?: IPersonCredits;\n  combined_credits?: IPersonCredits;\n  homepage?: any;\n  profile_path: string;\n  imdb_id: string;\n  deathday?: any;\n  images?: IImages;\n  external_ids?: IExternalids;\n  name: string;\n  also_known_as: string[];\n  biography: string;\n  adult: boolean;\n  gender: number;\n  place_of_birth: string;\n  popularity: number;\n}\n\nexport interface IPersonCredits {\n  cast: IPersonCastCrew[];\n  crew: IPersonCastCrew[];\n  id?: number;\n}\n\nexport interface IPersonCastCrew {\n  id?: number;\n  original_language: string;\n  episode_count?: number;\n  overview: string;\n  origin_country?: string[];\n  original_name?: string;\n  genre_ids: number[];\n  name?: string;\n  media_type: string;\n  poster_path: null | string;\n  first_air_date?: string;\n  vote_average: number;\n  vote_count: number;\n  character?: string;\n  backdrop_path: null | string;\n  popularity: number;\n  credit_id: string;\n  original_title?: string;\n  video?: boolean;\n  release_date?: string;\n  title?: string;\n  adult?: boolean;\n  department?: string;\n  job?: string;\n}\n\nexport interface IExternalids {\n  id?: number;\n  freebase_id: string;\n  instagram_id: string;\n  tvrage_id: number;\n  twitter_id: string;\n  freebase_mid: string;\n  imdb_id: string;\n  facebook_id: string;\n}\n\nexport interface IImages {\n  id?: number;\n  profiles: IProfile[];\n}\n\nexport interface IProfile {\n  iso_639_1?: any;\n  aspect_ratio: number;\n  vote_count: number;\n  height: number;\n  vote_average: number;\n  file_path: string;\n  width: number;\n}\n\nexport interface ICredits {\n  cast: ICast[];\n  crew: ICrew[];\n}\n\ninterface ICast {\n  poster_path?: string;\n  adult: boolean;\n  backdrop_path?: string;\n  vote_count: number;\n  video: boolean;\n  id: number;\n  media_type?: string;\n  popularity: number;\n  genre_ids: number[];\n  original_language: string;\n  title: string;\n  original_title: string;\n  release_date: string;\n  character: string;\n  vote_average: number;\n  overview: string;\n  credit_id: string;\n}\n\ninterface ICrew {\n  id: number;\n  department: string;\n  original_language: string;\n  original_title: string;\n  job: string;\n  overview: string;\n  genre_ids: number[];\n  video: boolean;\n  episode_count: number\n  media_type?: string;\n  credit_id: string;\n  poster_path?: string;\n  popularity: number;\n  backdrop_path?: string;\n  vote_count: number;\n  title: string;\n  adult: boolean;\n  vote_average: number;\n  release_date: string;\n}\n\nexport interface IUserSavedData {\n  id?: string,\n  title: string,\n  year: number,\n  tmdbId: number,\n}\n\nexport enum GenreCodes {\n  Action = 28,\n  Adventure = 12,\n  Animation = 16,\n  Comedy = 35,\n  Crime = 80,\n  Documentary = 99,\n  Drama = 18,\n  Family = 10751,\n  Fantasy = 14,\n  History = 36,\n  Horror = 27,\n  Music = 10402,\n  Mystery = 9648,\n  Romance = 10749,\n  ScienceFiction = 878,\n  TVMovie = 10770,\n  Thriller = 53,\n  War = 10752,\n  Western = 37,\n  // mdb reserved\n  FilmNoir = 20000,\n  // similar genre: Music id:10402\n  Musical = 20001,\n  News = 20002,\n  RealityTV = 20003,\n  // similar genre: Science Fiction id:878\n  SciFi = 20004,\n  // another media type\n  Short = 20005,\n  Sport = 20006,\n}\n\n\n\n/**\nexport enum Department {\n    Art = \"Art\",\n    Camera = \"Camera\",\n    CostumeMakeUp = \"Costume & Make-Up\",\n    Crew = \"Crew\",\n    Directing = \"Directing\",\n    Editing = \"Editing\",\n    Lighting = \"Lighting\",\n    Production = \"Production\",\n    Sound = \"Sound\",\n    VisualEffects = \"Visual Effects\",\n    Writing = \"Writing\",\n}\n\nexport interface ExternalIDS {\n    imdb_id:      string;\n    facebook_id:  null;\n    instagram_id: null;\n    twitter_id:   null;\n}\n\nexport interface Genre {\n    id:   number;\n    name: string;\n}\n\nexport interface Images {\n    backdrops: any[];\n    posters:   any[];\n}\n\nexport enum OriginalLanguage {\n    En = \"en\",\n    Es = \"es\",\n    Fr = \"fr\",\n}\n\nexport interface ProductionCompany {\n    id:             number;\n    logo_path:      string;\n    name:           string;\n    origin_country: string;\n}\n\nexport interface ProductionCountry {\n    iso_3166_1: string;\n    name:       string;\n}\n\nexport interface Recommendations {\n    page:          number;\n    results:       RecommendationsResult[];\n    total_pages:   number;\n    total_results: number;\n}\n\nexport interface RecommendationsResult {\n    id:                number;\n    video:             boolean;\n    vote_count:        number;\n    vote_average:      number;\n    title:             string;\n    release_date:      string;\n    original_language: OriginalLanguage;\n    original_title:    string;\n    genre_ids:         number[];\n    backdrop_path:     string;\n    adult:             boolean;\n    overview:          string;\n    poster_path:       string;\n    popularity:        number;\n}\n\nexport interface SpokenLanguage {\n    iso_639_1: OriginalLanguage;\n    name:      string;\n}\n\nexport interface Videos {\n    results: VideosResult[];\n}\n\nexport interface VideosResult {\n    id:         string;\n    iso_639_1:  OriginalLanguage;\n    iso_3166_1: string;\n    key:        string;\n    name:       string;\n    site:       string;\n    size:       number;\n    type:       string;\n}\n */\n\n",
            "properties": [
                {
                    "name": "adult",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 465
                },
                {
                    "name": "backdrop_path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "null | string",
                    "optional": false,
                    "description": "",
                    "line": 458
                },
                {
                    "name": "character",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 457
                },
                {
                    "name": "credit_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 460
                },
                {
                    "name": "department",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 466
                },
                {
                    "name": "episode_count",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 446
                },
                {
                    "name": "first_air_date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 454
                },
                {
                    "name": "genre_ids",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 450
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 444
                },
                {
                    "name": "job",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 467
                },
                {
                    "name": "media_type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 452
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 451
                },
                {
                    "name": "origin_country",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 448
                },
                {
                    "name": "original_language",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 445
                },
                {
                    "name": "original_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 449
                },
                {
                    "name": "original_title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 461
                },
                {
                    "name": "overview",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 447
                },
                {
                    "name": "popularity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 459
                },
                {
                    "name": "poster_path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "null | string",
                    "optional": false,
                    "description": "",
                    "line": 453
                },
                {
                    "name": "release_date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 463
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 464
                },
                {
                    "name": "video",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 462
                },
                {
                    "name": "vote_average",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 455
                },
                {
                    "name": "vote_count",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 456
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IPersonCredits",
            "id": "interface-IPersonCredits-584d54738f93e2af94202069b5eddb4cab23bb2dfec2ff69f24ebaf881c252f94680b4cd6cec302796817692570a31bedafc5d74fed1cf6488a895dbf372e23d",
            "file": "src/app/models/interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IMdbMovieDetails {\n  awards?: string\n  backgroundPath: string;\n  belongsToCollection?: []\n  boxOffice?: string | number // tmdb:revenue(number)\n  budget?: number\n  country?: string\n  director?: string\n  dvd?: string // dvd release\n  genres?: string[] | string | IGenre[]\n  imdbId?: string\n  imdbRating?: string\n  imdbVotes?: string\n  isAdult?: boolean;\n  isAvailable?: boolean;\n  languages?: string[]\n  libraryInfo?: ILibraryInfo\n  metascore?: string // metacritic score\\\n  originalLanguage?: string // tmdb:\"en\",omdb:\"English\"\n  originalTitle?: string\n  plot?: string // plot or overview\n  popularity?: number\n  posterPath: string\n  production?: string // company; i.e. Walt Disney Pictures\n  rated?: string // rated or certificate\n  ratings?: IRating[]\n  releaseDate?: string // omdb:\"05 May 2017\"; tmdb:\"1999-10-15\"\n  releaseYear?: number | string\n  response: string\n  runtime?: string\n  starring?: string // Actors field in omdb\n  status?: string // released/Post\n  tagline?: string;\n  tmdbId?: number\n  title: string\n  type?: string // movie/tvmovie/series\n  video?: boolean; // unknown\n  // voteAverage: number; // tmdb votes\n  // voteCount: number; // tmdb votes\n  website?: string\n  writer?: string // omdb\n  [propName: string]: any;\n}\n\nexport interface IRating {\n  Source: string\n  Value: string\n}\n\nexport interface LibraryInfo {\n  tmdbId?: null | number | string\n  imdbID?: string\n  title?: string\n  year?: number\n  directoryList?: string[]\n  _id: string\n}\n\nexport interface MovieGenre {\n  id: number\n  code: string\n  description: string\n  isChecked: boolean\n}\n\nexport interface WatchList {\n  id: number\n  movieList: string[]\n}\n\nexport interface ILibraryInfo {\n  tmdbId?: null | number | string\n  imdbID?: string\n  title?: string\n  year?: number\n  directoryList?: string[]\n  _id: string\n}\n\nexport interface ICollection {\n  id: number,\n  name: string\n}\n\nexport interface IProductionCompany {\n  id: number;\n  logo_path: null | string;\n  name: string;\n  origin_country: string;\n}\n\nexport interface IProductionCountry {\n  iso_3166_1: string;\n  name: string;\n}\n\nexport interface ISpokenLanguage {\n  iso_639_1: string;\n  name: string;\n}\n\nexport interface IOmdbMovieDetail {\n  Title: string\n  Year?: string\n  Rated?: string\n  Released?: string // \"05 May 2017\"\n  Runtime?: string\n  Genre?: string\n  Director?: string\n  Writer?: string\n  Actors?: string\n  Plot?: string\n  Language?: string\n  Country?: string\n  Awards?: string\n  Poster?: string\n  Ratings?: IRating[]\n  Metascore?: string\n  imdbRating?: string\n  imdbVotes?: string\n  imdbID: string\n  Type?: string\n  DVD?: string\n  BoxOffice?: string\n  Production?: string\n  Website?: string\n  Response: string\n}\n\nexport interface ITmdbMovieDetail {\n  adult: boolean;\n  backdrop_path: string;\n  belongs_to_collection: null;\n  budget: number;\n  genres: IGenre[];\n  homepage: string;\n  id: number;\n  imdb_id: string;\n  original_language: string;\n  original_title: string;\n  overview: string;\n  popularity: number;\n  poster_path: string;\n  production_companies: IProductionCompany[];\n  production_countries: IProductionCountry[];\n  release_date: string;\n  revenue: number;\n  runtime: number;\n  spoken_languages: ISpokenLanguage[];\n  status: string;\n  tagline: string;\n  title: string;\n  video: boolean;\n  vote_average: number;\n  vote_count: number;\n}\n\nexport interface MdbMovieDetails {\n  adult?: boolean;\n  title: string\n  releaseYear?: string\n  releaseDate?: string\n  rated?: string // rated or certificate\n  runtime?: string\n  genres?: string\n  director?: string\n  writer?: string\n  Actors?: string\n  plot?: string // plot or overview\n  Language?: string\n  Country?: string\n  Awards?: string\n  Poster?: string\n  Ratings?: IRating[]\n  Metascore?: string\n  imdbRating?: string\n  imdbVotes?: string\n  imdbID: string\n  tmdbID: number\n  Type?: string\n  DVD?: string\n  BoxOffice?: string\n  Production?: string\n  website?: string\n  response: string\n  libraryInfo?: ILibraryInfo\n}\n\n// // adult: boolean;\n// //backdrop_path: string;\n// belongs_to_collection: null;\n// // budget: number;\n// genres: Genre[];\n// // homepage: string;\n// // id: number;\n// // imdb_id: string;\n// original_language: string;\n// original_title: string;\n// // overview: string;\n// // popularity: number;\n// // poster_path: string;\n// production_companies: ProductionCompany[];\n// production_countries: ProductionCountry[];\n// // release_date: string;\n// // revenue: number;\n// // runtime: number;\n// spoken_languages: SpokenLanguage[];\n// // status: string;\n// // tagline: string;\n// // title: string;\n// // video: boolean;\n// // vote_average: number;\n// // vote_count: number;\n\nexport interface ITmdbResultObject {\n  page: number;\n  total_results: number;\n  total_pages: number;\n  results: ITmdbResult[];\n}\n\nexport interface ITmdbResult {\n  popularity: number\n  vote_count: number\n  video: boolean\n  poster_path: string\n  id: number\n  adult: boolean\n  backdrop_path: string\n  original_language: string\n  original_title: string\n  genre_ids: number[]\n  title: string\n  vote_average: number\n  overview: string\n  release_date: string\n  isAvailable?: boolean\n  isHighlighted?: boolean\n}\n\nexport interface ILibraryMovie {\n  tmdbId?: number,\n  title: string,\n  year: number,\n  imdbId?: string,\n  directory: string[]\n}\n\nexport interface IGenre {\n  id: number\n  name: string\n}\n\nexport interface Credits {\n  id: number;\n  cast: CastElement[];\n  crew: Crew[];\n}\n\ninterface CastElement {\n  cast_id: number;\n  character: string;\n  credit_id: string;\n  gender: number;\n  id: number;\n  name: string;\n  order: number;\n  profile_path: null | string;\n}\n\ninterface Crew {\n  credit_id: string;\n  department: Department;\n  gender: number;\n  id: number;\n  job: string;\n  name: string;\n  profile_path: null | string;\n}\n\nexport enum Department {\n  Art = 'Art',\n  Camera = 'Camera',\n  CostumeMakeUp = 'Costume & Make-Up',\n  Crew = 'Crew',\n  Directing = 'Directing',\n  Editing = 'Editing',\n  Lighting = 'Lighting',\n  Production = 'Production',\n  Sound = 'Sound',\n  VisualEffects = 'Visual Effects',\n  Writing = 'Writing',\n}\n\nexport class MDBTorrent {\n  id?: string\n  name?: string\n  size?: string\n  hash: string\n  url?: string\n  quality?: string\n  type?: string\n  seeds?: number\n  peers?: number\n  sizeBytes?: number\n  added?: string\n  dateUploaded?: string\n  dateUploadedUnix?: number\n  isYts?: boolean\n  magnetLink?: string\n}\n\nexport class ITPBTorrent {\n  id?: number\n  name?: string\n  hash: string\n  sizeBytes?: number\n  added?: string\n}\n\nexport interface ISearch {\n  page: number\n}\n\nexport enum OmdbParameters {\n  ApiKey = 'apikey',\n  ImdbId = 'i',\n  Title = 't',\n  Type = 'type',\n  Year = 'y',\n  Plot = 'plot',\n  Return = 'r',\n  Callback = 'callback',\n  Version = 'v',\n}\n\nexport enum TmdbParameters {\n  ApiKey = 'api_key',\n  AppendToResponse = 'append_to_response',\n  Language = 'language',\n  Region = 'region',\n  SortBy = 'sort_by',\n  CertificationCountry = 'certification_country',\n  Certification = 'certification',\n  CertificationLess = 'certification.lte',\n  CertificationGreater = 'certification.gte',\n  IncludeAdult = 'include_adult',\n  IncludeVideo = 'include_video',\n  Page = 'page',\n  PrimaryReleaseYear = 'primary_release_year',\n  PrimaryReleaseDateGreater = 'primary_release_date.gte',\n  PrimaryReleaseDateLess = 'primary_release_date.lte',\n  ReleaseDateGreater = 'release_date.gte',\n  ReleaseDateLess = 'release_date.lte',\n  WithReleaseType = 'with_release_type',\n  Year = 'year',\n  VoteCountGreater = 'vote_count.gte',\n  VoteCountLess = 'vote_count.lte',\n  VoteAverageGreater = 'vote_average.gte',\n  VoteAverageLess = 'vote_average.lte',\n  WithCast = 'with_cast',\n  WithCrew = 'with_crew',\n  WithPeople = 'with_people',\n  WithCompanies = 'with_companies',\n  WithGenres = 'with_genres',\n  WithoutGenres = 'without_genres',\n  WithKeywords = 'with_keywords',\n  WithoutKeywords = 'without_keywords',\n  WithRuntimeGreater = 'with_runtime.gte',\n  WithRuntimeLess = 'with_runtime.lte',\n  WithOriginalLanguage = 'with_original_language',\n  WithWatchProviders = 'with_watch_providers',\n  WatchRegion = 'watch_region'\n}\n\nexport enum TmdbSearchMovieParameters {\n  ApiKey = 'api_key',\n  Language = 'language', // Pass a ISO 639 - 1 value to display translated data for the fields that support it. minLength: 2 pattern: ([a - z]{ 2 }) -([A - Z]{ 2 }) default: en - US\n  Query = 'query',\n  Page = 'page', // minimum: 1 maximum: 1000\n  IncludeAdult = 'include_adult',\n  Region = 'region',\n  // Specify a ISO 3166 - 1 code to filter release dates.Must be uppercase. pattern: ^ [A - Z]{ 2 } $\n  Year = 'year',\n  PrimaryReleaseYear = 'primary_release_year'\n}\n\nenum TmdbAppendToResponseParameters {\n  AccountStates = 'account_states',\n  Videos = 'videos',\n  Images = 'images',\n  Credits = 'credits',\n  Changes = 'changes',\n  Translations = 'translations',\n  Similar = 'similar',\n  ExternalIds = 'external_ids',\n  AlternativeTitles = 'alternative_titles',\n  Keywords = 'keywords',\n  Reviews = 'reviews',\n  Recommendations = 'recommendations',\n  ReleaseDates = 'release_dates',\n  Lists = 'lists'\n}\n\nenum TmdbReleaseTypes {\n  PREMIERE = 'Premiere',  // 1\n  THEATRICAL_LIMITED = 'Theatrical(limited)', // 2\n  THEATRICAL = 'Theatrical', // 3\n  DIGITAL = 'Digital', // 4\n  PHYSICAL = 'Physical', // 5\n  TV = 'TV', // 6\n}\n\nexport interface IPersonDetails {\n  birthday: string;\n  known_for_department: string;\n  id: number;\n  movie_credits?: IPersonCredits;\n  tv_credits?: IPersonCredits;\n  combined_credits?: IPersonCredits;\n  homepage?: any;\n  profile_path: string;\n  imdb_id: string;\n  deathday?: any;\n  images?: IImages;\n  external_ids?: IExternalids;\n  name: string;\n  also_known_as: string[];\n  biography: string;\n  adult: boolean;\n  gender: number;\n  place_of_birth: string;\n  popularity: number;\n}\n\nexport interface IPersonCredits {\n  cast: IPersonCastCrew[];\n  crew: IPersonCastCrew[];\n  id?: number;\n}\n\nexport interface IPersonCastCrew {\n  id?: number;\n  original_language: string;\n  episode_count?: number;\n  overview: string;\n  origin_country?: string[];\n  original_name?: string;\n  genre_ids: number[];\n  name?: string;\n  media_type: string;\n  poster_path: null | string;\n  first_air_date?: string;\n  vote_average: number;\n  vote_count: number;\n  character?: string;\n  backdrop_path: null | string;\n  popularity: number;\n  credit_id: string;\n  original_title?: string;\n  video?: boolean;\n  release_date?: string;\n  title?: string;\n  adult?: boolean;\n  department?: string;\n  job?: string;\n}\n\nexport interface IExternalids {\n  id?: number;\n  freebase_id: string;\n  instagram_id: string;\n  tvrage_id: number;\n  twitter_id: string;\n  freebase_mid: string;\n  imdb_id: string;\n  facebook_id: string;\n}\n\nexport interface IImages {\n  id?: number;\n  profiles: IProfile[];\n}\n\nexport interface IProfile {\n  iso_639_1?: any;\n  aspect_ratio: number;\n  vote_count: number;\n  height: number;\n  vote_average: number;\n  file_path: string;\n  width: number;\n}\n\nexport interface ICredits {\n  cast: ICast[];\n  crew: ICrew[];\n}\n\ninterface ICast {\n  poster_path?: string;\n  adult: boolean;\n  backdrop_path?: string;\n  vote_count: number;\n  video: boolean;\n  id: number;\n  media_type?: string;\n  popularity: number;\n  genre_ids: number[];\n  original_language: string;\n  title: string;\n  original_title: string;\n  release_date: string;\n  character: string;\n  vote_average: number;\n  overview: string;\n  credit_id: string;\n}\n\ninterface ICrew {\n  id: number;\n  department: string;\n  original_language: string;\n  original_title: string;\n  job: string;\n  overview: string;\n  genre_ids: number[];\n  video: boolean;\n  episode_count: number\n  media_type?: string;\n  credit_id: string;\n  poster_path?: string;\n  popularity: number;\n  backdrop_path?: string;\n  vote_count: number;\n  title: string;\n  adult: boolean;\n  vote_average: number;\n  release_date: string;\n}\n\nexport interface IUserSavedData {\n  id?: string,\n  title: string,\n  year: number,\n  tmdbId: number,\n}\n\nexport enum GenreCodes {\n  Action = 28,\n  Adventure = 12,\n  Animation = 16,\n  Comedy = 35,\n  Crime = 80,\n  Documentary = 99,\n  Drama = 18,\n  Family = 10751,\n  Fantasy = 14,\n  History = 36,\n  Horror = 27,\n  Music = 10402,\n  Mystery = 9648,\n  Romance = 10749,\n  ScienceFiction = 878,\n  TVMovie = 10770,\n  Thriller = 53,\n  War = 10752,\n  Western = 37,\n  // mdb reserved\n  FilmNoir = 20000,\n  // similar genre: Music id:10402\n  Musical = 20001,\n  News = 20002,\n  RealityTV = 20003,\n  // similar genre: Science Fiction id:878\n  SciFi = 20004,\n  // another media type\n  Short = 20005,\n  Sport = 20006,\n}\n\n\n\n/**\nexport enum Department {\n    Art = \"Art\",\n    Camera = \"Camera\",\n    CostumeMakeUp = \"Costume & Make-Up\",\n    Crew = \"Crew\",\n    Directing = \"Directing\",\n    Editing = \"Editing\",\n    Lighting = \"Lighting\",\n    Production = \"Production\",\n    Sound = \"Sound\",\n    VisualEffects = \"Visual Effects\",\n    Writing = \"Writing\",\n}\n\nexport interface ExternalIDS {\n    imdb_id:      string;\n    facebook_id:  null;\n    instagram_id: null;\n    twitter_id:   null;\n}\n\nexport interface Genre {\n    id:   number;\n    name: string;\n}\n\nexport interface Images {\n    backdrops: any[];\n    posters:   any[];\n}\n\nexport enum OriginalLanguage {\n    En = \"en\",\n    Es = \"es\",\n    Fr = \"fr\",\n}\n\nexport interface ProductionCompany {\n    id:             number;\n    logo_path:      string;\n    name:           string;\n    origin_country: string;\n}\n\nexport interface ProductionCountry {\n    iso_3166_1: string;\n    name:       string;\n}\n\nexport interface Recommendations {\n    page:          number;\n    results:       RecommendationsResult[];\n    total_pages:   number;\n    total_results: number;\n}\n\nexport interface RecommendationsResult {\n    id:                number;\n    video:             boolean;\n    vote_count:        number;\n    vote_average:      number;\n    title:             string;\n    release_date:      string;\n    original_language: OriginalLanguage;\n    original_title:    string;\n    genre_ids:         number[];\n    backdrop_path:     string;\n    adult:             boolean;\n    overview:          string;\n    poster_path:       string;\n    popularity:        number;\n}\n\nexport interface SpokenLanguage {\n    iso_639_1: OriginalLanguage;\n    name:      string;\n}\n\nexport interface Videos {\n    results: VideosResult[];\n}\n\nexport interface VideosResult {\n    id:         string;\n    iso_639_1:  OriginalLanguage;\n    iso_3166_1: string;\n    key:        string;\n    name:       string;\n    site:       string;\n    size:       number;\n    type:       string;\n}\n */\n\n",
            "properties": [
                {
                    "name": "cast",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPersonCastCrew[]",
                    "optional": false,
                    "description": "",
                    "line": 438
                },
                {
                    "name": "crew",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPersonCastCrew[]",
                    "optional": false,
                    "description": "",
                    "line": 439
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 440
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IPersonDetails",
            "id": "interface-IPersonDetails-584d54738f93e2af94202069b5eddb4cab23bb2dfec2ff69f24ebaf881c252f94680b4cd6cec302796817692570a31bedafc5d74fed1cf6488a895dbf372e23d",
            "file": "src/app/models/interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IMdbMovieDetails {\n  awards?: string\n  backgroundPath: string;\n  belongsToCollection?: []\n  boxOffice?: string | number // tmdb:revenue(number)\n  budget?: number\n  country?: string\n  director?: string\n  dvd?: string // dvd release\n  genres?: string[] | string | IGenre[]\n  imdbId?: string\n  imdbRating?: string\n  imdbVotes?: string\n  isAdult?: boolean;\n  isAvailable?: boolean;\n  languages?: string[]\n  libraryInfo?: ILibraryInfo\n  metascore?: string // metacritic score\\\n  originalLanguage?: string // tmdb:\"en\",omdb:\"English\"\n  originalTitle?: string\n  plot?: string // plot or overview\n  popularity?: number\n  posterPath: string\n  production?: string // company; i.e. Walt Disney Pictures\n  rated?: string // rated or certificate\n  ratings?: IRating[]\n  releaseDate?: string // omdb:\"05 May 2017\"; tmdb:\"1999-10-15\"\n  releaseYear?: number | string\n  response: string\n  runtime?: string\n  starring?: string // Actors field in omdb\n  status?: string // released/Post\n  tagline?: string;\n  tmdbId?: number\n  title: string\n  type?: string // movie/tvmovie/series\n  video?: boolean; // unknown\n  // voteAverage: number; // tmdb votes\n  // voteCount: number; // tmdb votes\n  website?: string\n  writer?: string // omdb\n  [propName: string]: any;\n}\n\nexport interface IRating {\n  Source: string\n  Value: string\n}\n\nexport interface LibraryInfo {\n  tmdbId?: null | number | string\n  imdbID?: string\n  title?: string\n  year?: number\n  directoryList?: string[]\n  _id: string\n}\n\nexport interface MovieGenre {\n  id: number\n  code: string\n  description: string\n  isChecked: boolean\n}\n\nexport interface WatchList {\n  id: number\n  movieList: string[]\n}\n\nexport interface ILibraryInfo {\n  tmdbId?: null | number | string\n  imdbID?: string\n  title?: string\n  year?: number\n  directoryList?: string[]\n  _id: string\n}\n\nexport interface ICollection {\n  id: number,\n  name: string\n}\n\nexport interface IProductionCompany {\n  id: number;\n  logo_path: null | string;\n  name: string;\n  origin_country: string;\n}\n\nexport interface IProductionCountry {\n  iso_3166_1: string;\n  name: string;\n}\n\nexport interface ISpokenLanguage {\n  iso_639_1: string;\n  name: string;\n}\n\nexport interface IOmdbMovieDetail {\n  Title: string\n  Year?: string\n  Rated?: string\n  Released?: string // \"05 May 2017\"\n  Runtime?: string\n  Genre?: string\n  Director?: string\n  Writer?: string\n  Actors?: string\n  Plot?: string\n  Language?: string\n  Country?: string\n  Awards?: string\n  Poster?: string\n  Ratings?: IRating[]\n  Metascore?: string\n  imdbRating?: string\n  imdbVotes?: string\n  imdbID: string\n  Type?: string\n  DVD?: string\n  BoxOffice?: string\n  Production?: string\n  Website?: string\n  Response: string\n}\n\nexport interface ITmdbMovieDetail {\n  adult: boolean;\n  backdrop_path: string;\n  belongs_to_collection: null;\n  budget: number;\n  genres: IGenre[];\n  homepage: string;\n  id: number;\n  imdb_id: string;\n  original_language: string;\n  original_title: string;\n  overview: string;\n  popularity: number;\n  poster_path: string;\n  production_companies: IProductionCompany[];\n  production_countries: IProductionCountry[];\n  release_date: string;\n  revenue: number;\n  runtime: number;\n  spoken_languages: ISpokenLanguage[];\n  status: string;\n  tagline: string;\n  title: string;\n  video: boolean;\n  vote_average: number;\n  vote_count: number;\n}\n\nexport interface MdbMovieDetails {\n  adult?: boolean;\n  title: string\n  releaseYear?: string\n  releaseDate?: string\n  rated?: string // rated or certificate\n  runtime?: string\n  genres?: string\n  director?: string\n  writer?: string\n  Actors?: string\n  plot?: string // plot or overview\n  Language?: string\n  Country?: string\n  Awards?: string\n  Poster?: string\n  Ratings?: IRating[]\n  Metascore?: string\n  imdbRating?: string\n  imdbVotes?: string\n  imdbID: string\n  tmdbID: number\n  Type?: string\n  DVD?: string\n  BoxOffice?: string\n  Production?: string\n  website?: string\n  response: string\n  libraryInfo?: ILibraryInfo\n}\n\n// // adult: boolean;\n// //backdrop_path: string;\n// belongs_to_collection: null;\n// // budget: number;\n// genres: Genre[];\n// // homepage: string;\n// // id: number;\n// // imdb_id: string;\n// original_language: string;\n// original_title: string;\n// // overview: string;\n// // popularity: number;\n// // poster_path: string;\n// production_companies: ProductionCompany[];\n// production_countries: ProductionCountry[];\n// // release_date: string;\n// // revenue: number;\n// // runtime: number;\n// spoken_languages: SpokenLanguage[];\n// // status: string;\n// // tagline: string;\n// // title: string;\n// // video: boolean;\n// // vote_average: number;\n// // vote_count: number;\n\nexport interface ITmdbResultObject {\n  page: number;\n  total_results: number;\n  total_pages: number;\n  results: ITmdbResult[];\n}\n\nexport interface ITmdbResult {\n  popularity: number\n  vote_count: number\n  video: boolean\n  poster_path: string\n  id: number\n  adult: boolean\n  backdrop_path: string\n  original_language: string\n  original_title: string\n  genre_ids: number[]\n  title: string\n  vote_average: number\n  overview: string\n  release_date: string\n  isAvailable?: boolean\n  isHighlighted?: boolean\n}\n\nexport interface ILibraryMovie {\n  tmdbId?: number,\n  title: string,\n  year: number,\n  imdbId?: string,\n  directory: string[]\n}\n\nexport interface IGenre {\n  id: number\n  name: string\n}\n\nexport interface Credits {\n  id: number;\n  cast: CastElement[];\n  crew: Crew[];\n}\n\ninterface CastElement {\n  cast_id: number;\n  character: string;\n  credit_id: string;\n  gender: number;\n  id: number;\n  name: string;\n  order: number;\n  profile_path: null | string;\n}\n\ninterface Crew {\n  credit_id: string;\n  department: Department;\n  gender: number;\n  id: number;\n  job: string;\n  name: string;\n  profile_path: null | string;\n}\n\nexport enum Department {\n  Art = 'Art',\n  Camera = 'Camera',\n  CostumeMakeUp = 'Costume & Make-Up',\n  Crew = 'Crew',\n  Directing = 'Directing',\n  Editing = 'Editing',\n  Lighting = 'Lighting',\n  Production = 'Production',\n  Sound = 'Sound',\n  VisualEffects = 'Visual Effects',\n  Writing = 'Writing',\n}\n\nexport class MDBTorrent {\n  id?: string\n  name?: string\n  size?: string\n  hash: string\n  url?: string\n  quality?: string\n  type?: string\n  seeds?: number\n  peers?: number\n  sizeBytes?: number\n  added?: string\n  dateUploaded?: string\n  dateUploadedUnix?: number\n  isYts?: boolean\n  magnetLink?: string\n}\n\nexport class ITPBTorrent {\n  id?: number\n  name?: string\n  hash: string\n  sizeBytes?: number\n  added?: string\n}\n\nexport interface ISearch {\n  page: number\n}\n\nexport enum OmdbParameters {\n  ApiKey = 'apikey',\n  ImdbId = 'i',\n  Title = 't',\n  Type = 'type',\n  Year = 'y',\n  Plot = 'plot',\n  Return = 'r',\n  Callback = 'callback',\n  Version = 'v',\n}\n\nexport enum TmdbParameters {\n  ApiKey = 'api_key',\n  AppendToResponse = 'append_to_response',\n  Language = 'language',\n  Region = 'region',\n  SortBy = 'sort_by',\n  CertificationCountry = 'certification_country',\n  Certification = 'certification',\n  CertificationLess = 'certification.lte',\n  CertificationGreater = 'certification.gte',\n  IncludeAdult = 'include_adult',\n  IncludeVideo = 'include_video',\n  Page = 'page',\n  PrimaryReleaseYear = 'primary_release_year',\n  PrimaryReleaseDateGreater = 'primary_release_date.gte',\n  PrimaryReleaseDateLess = 'primary_release_date.lte',\n  ReleaseDateGreater = 'release_date.gte',\n  ReleaseDateLess = 'release_date.lte',\n  WithReleaseType = 'with_release_type',\n  Year = 'year',\n  VoteCountGreater = 'vote_count.gte',\n  VoteCountLess = 'vote_count.lte',\n  VoteAverageGreater = 'vote_average.gte',\n  VoteAverageLess = 'vote_average.lte',\n  WithCast = 'with_cast',\n  WithCrew = 'with_crew',\n  WithPeople = 'with_people',\n  WithCompanies = 'with_companies',\n  WithGenres = 'with_genres',\n  WithoutGenres = 'without_genres',\n  WithKeywords = 'with_keywords',\n  WithoutKeywords = 'without_keywords',\n  WithRuntimeGreater = 'with_runtime.gte',\n  WithRuntimeLess = 'with_runtime.lte',\n  WithOriginalLanguage = 'with_original_language',\n  WithWatchProviders = 'with_watch_providers',\n  WatchRegion = 'watch_region'\n}\n\nexport enum TmdbSearchMovieParameters {\n  ApiKey = 'api_key',\n  Language = 'language', // Pass a ISO 639 - 1 value to display translated data for the fields that support it. minLength: 2 pattern: ([a - z]{ 2 }) -([A - Z]{ 2 }) default: en - US\n  Query = 'query',\n  Page = 'page', // minimum: 1 maximum: 1000\n  IncludeAdult = 'include_adult',\n  Region = 'region',\n  // Specify a ISO 3166 - 1 code to filter release dates.Must be uppercase. pattern: ^ [A - Z]{ 2 } $\n  Year = 'year',\n  PrimaryReleaseYear = 'primary_release_year'\n}\n\nenum TmdbAppendToResponseParameters {\n  AccountStates = 'account_states',\n  Videos = 'videos',\n  Images = 'images',\n  Credits = 'credits',\n  Changes = 'changes',\n  Translations = 'translations',\n  Similar = 'similar',\n  ExternalIds = 'external_ids',\n  AlternativeTitles = 'alternative_titles',\n  Keywords = 'keywords',\n  Reviews = 'reviews',\n  Recommendations = 'recommendations',\n  ReleaseDates = 'release_dates',\n  Lists = 'lists'\n}\n\nenum TmdbReleaseTypes {\n  PREMIERE = 'Premiere',  // 1\n  THEATRICAL_LIMITED = 'Theatrical(limited)', // 2\n  THEATRICAL = 'Theatrical', // 3\n  DIGITAL = 'Digital', // 4\n  PHYSICAL = 'Physical', // 5\n  TV = 'TV', // 6\n}\n\nexport interface IPersonDetails {\n  birthday: string;\n  known_for_department: string;\n  id: number;\n  movie_credits?: IPersonCredits;\n  tv_credits?: IPersonCredits;\n  combined_credits?: IPersonCredits;\n  homepage?: any;\n  profile_path: string;\n  imdb_id: string;\n  deathday?: any;\n  images?: IImages;\n  external_ids?: IExternalids;\n  name: string;\n  also_known_as: string[];\n  biography: string;\n  adult: boolean;\n  gender: number;\n  place_of_birth: string;\n  popularity: number;\n}\n\nexport interface IPersonCredits {\n  cast: IPersonCastCrew[];\n  crew: IPersonCastCrew[];\n  id?: number;\n}\n\nexport interface IPersonCastCrew {\n  id?: number;\n  original_language: string;\n  episode_count?: number;\n  overview: string;\n  origin_country?: string[];\n  original_name?: string;\n  genre_ids: number[];\n  name?: string;\n  media_type: string;\n  poster_path: null | string;\n  first_air_date?: string;\n  vote_average: number;\n  vote_count: number;\n  character?: string;\n  backdrop_path: null | string;\n  popularity: number;\n  credit_id: string;\n  original_title?: string;\n  video?: boolean;\n  release_date?: string;\n  title?: string;\n  adult?: boolean;\n  department?: string;\n  job?: string;\n}\n\nexport interface IExternalids {\n  id?: number;\n  freebase_id: string;\n  instagram_id: string;\n  tvrage_id: number;\n  twitter_id: string;\n  freebase_mid: string;\n  imdb_id: string;\n  facebook_id: string;\n}\n\nexport interface IImages {\n  id?: number;\n  profiles: IProfile[];\n}\n\nexport interface IProfile {\n  iso_639_1?: any;\n  aspect_ratio: number;\n  vote_count: number;\n  height: number;\n  vote_average: number;\n  file_path: string;\n  width: number;\n}\n\nexport interface ICredits {\n  cast: ICast[];\n  crew: ICrew[];\n}\n\ninterface ICast {\n  poster_path?: string;\n  adult: boolean;\n  backdrop_path?: string;\n  vote_count: number;\n  video: boolean;\n  id: number;\n  media_type?: string;\n  popularity: number;\n  genre_ids: number[];\n  original_language: string;\n  title: string;\n  original_title: string;\n  release_date: string;\n  character: string;\n  vote_average: number;\n  overview: string;\n  credit_id: string;\n}\n\ninterface ICrew {\n  id: number;\n  department: string;\n  original_language: string;\n  original_title: string;\n  job: string;\n  overview: string;\n  genre_ids: number[];\n  video: boolean;\n  episode_count: number\n  media_type?: string;\n  credit_id: string;\n  poster_path?: string;\n  popularity: number;\n  backdrop_path?: string;\n  vote_count: number;\n  title: string;\n  adult: boolean;\n  vote_average: number;\n  release_date: string;\n}\n\nexport interface IUserSavedData {\n  id?: string,\n  title: string,\n  year: number,\n  tmdbId: number,\n}\n\nexport enum GenreCodes {\n  Action = 28,\n  Adventure = 12,\n  Animation = 16,\n  Comedy = 35,\n  Crime = 80,\n  Documentary = 99,\n  Drama = 18,\n  Family = 10751,\n  Fantasy = 14,\n  History = 36,\n  Horror = 27,\n  Music = 10402,\n  Mystery = 9648,\n  Romance = 10749,\n  ScienceFiction = 878,\n  TVMovie = 10770,\n  Thriller = 53,\n  War = 10752,\n  Western = 37,\n  // mdb reserved\n  FilmNoir = 20000,\n  // similar genre: Music id:10402\n  Musical = 20001,\n  News = 20002,\n  RealityTV = 20003,\n  // similar genre: Science Fiction id:878\n  SciFi = 20004,\n  // another media type\n  Short = 20005,\n  Sport = 20006,\n}\n\n\n\n/**\nexport enum Department {\n    Art = \"Art\",\n    Camera = \"Camera\",\n    CostumeMakeUp = \"Costume & Make-Up\",\n    Crew = \"Crew\",\n    Directing = \"Directing\",\n    Editing = \"Editing\",\n    Lighting = \"Lighting\",\n    Production = \"Production\",\n    Sound = \"Sound\",\n    VisualEffects = \"Visual Effects\",\n    Writing = \"Writing\",\n}\n\nexport interface ExternalIDS {\n    imdb_id:      string;\n    facebook_id:  null;\n    instagram_id: null;\n    twitter_id:   null;\n}\n\nexport interface Genre {\n    id:   number;\n    name: string;\n}\n\nexport interface Images {\n    backdrops: any[];\n    posters:   any[];\n}\n\nexport enum OriginalLanguage {\n    En = \"en\",\n    Es = \"es\",\n    Fr = \"fr\",\n}\n\nexport interface ProductionCompany {\n    id:             number;\n    logo_path:      string;\n    name:           string;\n    origin_country: string;\n}\n\nexport interface ProductionCountry {\n    iso_3166_1: string;\n    name:       string;\n}\n\nexport interface Recommendations {\n    page:          number;\n    results:       RecommendationsResult[];\n    total_pages:   number;\n    total_results: number;\n}\n\nexport interface RecommendationsResult {\n    id:                number;\n    video:             boolean;\n    vote_count:        number;\n    vote_average:      number;\n    title:             string;\n    release_date:      string;\n    original_language: OriginalLanguage;\n    original_title:    string;\n    genre_ids:         number[];\n    backdrop_path:     string;\n    adult:             boolean;\n    overview:          string;\n    poster_path:       string;\n    popularity:        number;\n}\n\nexport interface SpokenLanguage {\n    iso_639_1: OriginalLanguage;\n    name:      string;\n}\n\nexport interface Videos {\n    results: VideosResult[];\n}\n\nexport interface VideosResult {\n    id:         string;\n    iso_639_1:  OriginalLanguage;\n    iso_3166_1: string;\n    key:        string;\n    name:       string;\n    site:       string;\n    size:       number;\n    type:       string;\n}\n */\n\n",
            "properties": [
                {
                    "name": "adult",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 431
                },
                {
                    "name": "also_known_as",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 429
                },
                {
                    "name": "biography",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 430
                },
                {
                    "name": "birthday",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 416
                },
                {
                    "name": "combined_credits",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPersonCredits",
                    "optional": true,
                    "description": "",
                    "line": 421
                },
                {
                    "name": "deathday",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 425
                },
                {
                    "name": "external_ids",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IExternalids",
                    "optional": true,
                    "description": "",
                    "line": 427
                },
                {
                    "name": "gender",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 432
                },
                {
                    "name": "homepage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 422
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 418
                },
                {
                    "name": "images",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IImages",
                    "optional": true,
                    "description": "",
                    "line": 426
                },
                {
                    "name": "imdb_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 424
                },
                {
                    "name": "known_for_department",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 417
                },
                {
                    "name": "movie_credits",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPersonCredits",
                    "optional": true,
                    "description": "",
                    "line": 419
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 428
                },
                {
                    "name": "place_of_birth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 433
                },
                {
                    "name": "popularity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 434
                },
                {
                    "name": "profile_path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 423
                },
                {
                    "name": "tv_credits",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPersonCredits",
                    "optional": true,
                    "description": "",
                    "line": 420
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IPlaybackPreferences",
            "id": "interface-IPlaybackPreferences-762aab3f13408cf543f5fe806389a08ae4f1e3cd13bf634d1cce11d647e39e349b0a2025d4789d00f83084ebbe025b98dbedd097bcba540fc5f3cd239b0f3d7e",
            "file": "src/app/models/preferences.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IPreferences {\n  isDarkMode: boolean\n  isEnableCache: boolean\n  libraryFolders: string[]\n  torrentSeedRatio: number\n  torrentRatio?: any\n  subtitle: ISubtitlePreferences\n  hotKeys: IHotkeys\n  autoPlayTrailer: boolean\n  playTrailerBeforeShow: boolean\n  playBack: IPlaybackPreferences\n  library: ILibraryPreferences,\n  streamPreferences?: IStreamPreferences\n  isAutoScan: boolean\n  autoScanFrequencyUnit: string\n  autoScanFrequencyValue: number\n}\n\ninterface IStreamPreferences {\n  downloadSpeed: number // in bps\n}\ninterface ILibraryPreferences {\n  libraryPathList: string[]\n  scanFrenquency: IScanFrequency\n}\n\nexport interface IPlaybackPreferences {\n  preferredQuality: Quality\n  preferredMode: 'torrent' | 'offline'\n  repeat: boolean\n  volume: number\n}\n\nexport enum Quality {\n  SD = '720p',\n  HD = '1080p',\n  FHD = '1440p',\n  FourK = '4k'\n}\ninterface IScanFrequency {\n  isScanAutomatically: boolean\n  frequencyUnit: string\n  frequencyValue: number\n}\n\ninterface IHotkeys {\n  playerHotkeys?: any\n\n}\n\nexport interface ISubtitlePreferences {\n  synchronization: number;\n  fontColor: string;\n  fontSize: string;\n  fontOpacity?: number;\n  textShadow: string;\n  fontFamily?: string;\n  backgroundColor: string;\n  backgroundOpacity: string;\n}\n",
            "properties": [
                {
                    "name": "preferredMode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"torrent\" | \"offline\"",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "preferredQuality",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Quality",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "repeat",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "volume",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IPreferences",
            "id": "interface-IPreferences-762aab3f13408cf543f5fe806389a08ae4f1e3cd13bf634d1cce11d647e39e349b0a2025d4789d00f83084ebbe025b98dbedd097bcba540fc5f3cd239b0f3d7e",
            "file": "src/app/models/preferences.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IPreferences {\n  isDarkMode: boolean\n  isEnableCache: boolean\n  libraryFolders: string[]\n  torrentSeedRatio: number\n  torrentRatio?: any\n  subtitle: ISubtitlePreferences\n  hotKeys: IHotkeys\n  autoPlayTrailer: boolean\n  playTrailerBeforeShow: boolean\n  playBack: IPlaybackPreferences\n  library: ILibraryPreferences,\n  streamPreferences?: IStreamPreferences\n  isAutoScan: boolean\n  autoScanFrequencyUnit: string\n  autoScanFrequencyValue: number\n}\n\ninterface IStreamPreferences {\n  downloadSpeed: number // in bps\n}\ninterface ILibraryPreferences {\n  libraryPathList: string[]\n  scanFrenquency: IScanFrequency\n}\n\nexport interface IPlaybackPreferences {\n  preferredQuality: Quality\n  preferredMode: 'torrent' | 'offline'\n  repeat: boolean\n  volume: number\n}\n\nexport enum Quality {\n  SD = '720p',\n  HD = '1080p',\n  FHD = '1440p',\n  FourK = '4k'\n}\ninterface IScanFrequency {\n  isScanAutomatically: boolean\n  frequencyUnit: string\n  frequencyValue: number\n}\n\ninterface IHotkeys {\n  playerHotkeys?: any\n\n}\n\nexport interface ISubtitlePreferences {\n  synchronization: number;\n  fontColor: string;\n  fontSize: string;\n  fontOpacity?: number;\n  textShadow: string;\n  fontFamily?: string;\n  backgroundColor: string;\n  backgroundOpacity: string;\n}\n",
            "properties": [
                {
                    "name": "autoPlayTrailer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "autoScanFrequencyUnit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "autoScanFrequencyValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "hotKeys",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IHotkeys",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "isAutoScan",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "isDarkMode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "isEnableCache",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "library",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ILibraryPreferences",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "libraryFolders",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "playBack",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPlaybackPreferences",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "playTrailerBeforeShow",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "streamPreferences",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IStreamPreferences",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "subtitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ISubtitlePreferences",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "torrentRatio",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "torrentSeedRatio",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IProductionCompany",
            "id": "interface-IProductionCompany-584d54738f93e2af94202069b5eddb4cab23bb2dfec2ff69f24ebaf881c252f94680b4cd6cec302796817692570a31bedafc5d74fed1cf6488a895dbf372e23d",
            "file": "src/app/models/interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IMdbMovieDetails {\n  awards?: string\n  backgroundPath: string;\n  belongsToCollection?: []\n  boxOffice?: string | number // tmdb:revenue(number)\n  budget?: number\n  country?: string\n  director?: string\n  dvd?: string // dvd release\n  genres?: string[] | string | IGenre[]\n  imdbId?: string\n  imdbRating?: string\n  imdbVotes?: string\n  isAdult?: boolean;\n  isAvailable?: boolean;\n  languages?: string[]\n  libraryInfo?: ILibraryInfo\n  metascore?: string // metacritic score\\\n  originalLanguage?: string // tmdb:\"en\",omdb:\"English\"\n  originalTitle?: string\n  plot?: string // plot or overview\n  popularity?: number\n  posterPath: string\n  production?: string // company; i.e. Walt Disney Pictures\n  rated?: string // rated or certificate\n  ratings?: IRating[]\n  releaseDate?: string // omdb:\"05 May 2017\"; tmdb:\"1999-10-15\"\n  releaseYear?: number | string\n  response: string\n  runtime?: string\n  starring?: string // Actors field in omdb\n  status?: string // released/Post\n  tagline?: string;\n  tmdbId?: number\n  title: string\n  type?: string // movie/tvmovie/series\n  video?: boolean; // unknown\n  // voteAverage: number; // tmdb votes\n  // voteCount: number; // tmdb votes\n  website?: string\n  writer?: string // omdb\n  [propName: string]: any;\n}\n\nexport interface IRating {\n  Source: string\n  Value: string\n}\n\nexport interface LibraryInfo {\n  tmdbId?: null | number | string\n  imdbID?: string\n  title?: string\n  year?: number\n  directoryList?: string[]\n  _id: string\n}\n\nexport interface MovieGenre {\n  id: number\n  code: string\n  description: string\n  isChecked: boolean\n}\n\nexport interface WatchList {\n  id: number\n  movieList: string[]\n}\n\nexport interface ILibraryInfo {\n  tmdbId?: null | number | string\n  imdbID?: string\n  title?: string\n  year?: number\n  directoryList?: string[]\n  _id: string\n}\n\nexport interface ICollection {\n  id: number,\n  name: string\n}\n\nexport interface IProductionCompany {\n  id: number;\n  logo_path: null | string;\n  name: string;\n  origin_country: string;\n}\n\nexport interface IProductionCountry {\n  iso_3166_1: string;\n  name: string;\n}\n\nexport interface ISpokenLanguage {\n  iso_639_1: string;\n  name: string;\n}\n\nexport interface IOmdbMovieDetail {\n  Title: string\n  Year?: string\n  Rated?: string\n  Released?: string // \"05 May 2017\"\n  Runtime?: string\n  Genre?: string\n  Director?: string\n  Writer?: string\n  Actors?: string\n  Plot?: string\n  Language?: string\n  Country?: string\n  Awards?: string\n  Poster?: string\n  Ratings?: IRating[]\n  Metascore?: string\n  imdbRating?: string\n  imdbVotes?: string\n  imdbID: string\n  Type?: string\n  DVD?: string\n  BoxOffice?: string\n  Production?: string\n  Website?: string\n  Response: string\n}\n\nexport interface ITmdbMovieDetail {\n  adult: boolean;\n  backdrop_path: string;\n  belongs_to_collection: null;\n  budget: number;\n  genres: IGenre[];\n  homepage: string;\n  id: number;\n  imdb_id: string;\n  original_language: string;\n  original_title: string;\n  overview: string;\n  popularity: number;\n  poster_path: string;\n  production_companies: IProductionCompany[];\n  production_countries: IProductionCountry[];\n  release_date: string;\n  revenue: number;\n  runtime: number;\n  spoken_languages: ISpokenLanguage[];\n  status: string;\n  tagline: string;\n  title: string;\n  video: boolean;\n  vote_average: number;\n  vote_count: number;\n}\n\nexport interface MdbMovieDetails {\n  adult?: boolean;\n  title: string\n  releaseYear?: string\n  releaseDate?: string\n  rated?: string // rated or certificate\n  runtime?: string\n  genres?: string\n  director?: string\n  writer?: string\n  Actors?: string\n  plot?: string // plot or overview\n  Language?: string\n  Country?: string\n  Awards?: string\n  Poster?: string\n  Ratings?: IRating[]\n  Metascore?: string\n  imdbRating?: string\n  imdbVotes?: string\n  imdbID: string\n  tmdbID: number\n  Type?: string\n  DVD?: string\n  BoxOffice?: string\n  Production?: string\n  website?: string\n  response: string\n  libraryInfo?: ILibraryInfo\n}\n\n// // adult: boolean;\n// //backdrop_path: string;\n// belongs_to_collection: null;\n// // budget: number;\n// genres: Genre[];\n// // homepage: string;\n// // id: number;\n// // imdb_id: string;\n// original_language: string;\n// original_title: string;\n// // overview: string;\n// // popularity: number;\n// // poster_path: string;\n// production_companies: ProductionCompany[];\n// production_countries: ProductionCountry[];\n// // release_date: string;\n// // revenue: number;\n// // runtime: number;\n// spoken_languages: SpokenLanguage[];\n// // status: string;\n// // tagline: string;\n// // title: string;\n// // video: boolean;\n// // vote_average: number;\n// // vote_count: number;\n\nexport interface ITmdbResultObject {\n  page: number;\n  total_results: number;\n  total_pages: number;\n  results: ITmdbResult[];\n}\n\nexport interface ITmdbResult {\n  popularity: number\n  vote_count: number\n  video: boolean\n  poster_path: string\n  id: number\n  adult: boolean\n  backdrop_path: string\n  original_language: string\n  original_title: string\n  genre_ids: number[]\n  title: string\n  vote_average: number\n  overview: string\n  release_date: string\n  isAvailable?: boolean\n  isHighlighted?: boolean\n}\n\nexport interface ILibraryMovie {\n  tmdbId?: number,\n  title: string,\n  year: number,\n  imdbId?: string,\n  directory: string[]\n}\n\nexport interface IGenre {\n  id: number\n  name: string\n}\n\nexport interface Credits {\n  id: number;\n  cast: CastElement[];\n  crew: Crew[];\n}\n\ninterface CastElement {\n  cast_id: number;\n  character: string;\n  credit_id: string;\n  gender: number;\n  id: number;\n  name: string;\n  order: number;\n  profile_path: null | string;\n}\n\ninterface Crew {\n  credit_id: string;\n  department: Department;\n  gender: number;\n  id: number;\n  job: string;\n  name: string;\n  profile_path: null | string;\n}\n\nexport enum Department {\n  Art = 'Art',\n  Camera = 'Camera',\n  CostumeMakeUp = 'Costume & Make-Up',\n  Crew = 'Crew',\n  Directing = 'Directing',\n  Editing = 'Editing',\n  Lighting = 'Lighting',\n  Production = 'Production',\n  Sound = 'Sound',\n  VisualEffects = 'Visual Effects',\n  Writing = 'Writing',\n}\n\nexport class MDBTorrent {\n  id?: string\n  name?: string\n  size?: string\n  hash: string\n  url?: string\n  quality?: string\n  type?: string\n  seeds?: number\n  peers?: number\n  sizeBytes?: number\n  added?: string\n  dateUploaded?: string\n  dateUploadedUnix?: number\n  isYts?: boolean\n  magnetLink?: string\n}\n\nexport class ITPBTorrent {\n  id?: number\n  name?: string\n  hash: string\n  sizeBytes?: number\n  added?: string\n}\n\nexport interface ISearch {\n  page: number\n}\n\nexport enum OmdbParameters {\n  ApiKey = 'apikey',\n  ImdbId = 'i',\n  Title = 't',\n  Type = 'type',\n  Year = 'y',\n  Plot = 'plot',\n  Return = 'r',\n  Callback = 'callback',\n  Version = 'v',\n}\n\nexport enum TmdbParameters {\n  ApiKey = 'api_key',\n  AppendToResponse = 'append_to_response',\n  Language = 'language',\n  Region = 'region',\n  SortBy = 'sort_by',\n  CertificationCountry = 'certification_country',\n  Certification = 'certification',\n  CertificationLess = 'certification.lte',\n  CertificationGreater = 'certification.gte',\n  IncludeAdult = 'include_adult',\n  IncludeVideo = 'include_video',\n  Page = 'page',\n  PrimaryReleaseYear = 'primary_release_year',\n  PrimaryReleaseDateGreater = 'primary_release_date.gte',\n  PrimaryReleaseDateLess = 'primary_release_date.lte',\n  ReleaseDateGreater = 'release_date.gte',\n  ReleaseDateLess = 'release_date.lte',\n  WithReleaseType = 'with_release_type',\n  Year = 'year',\n  VoteCountGreater = 'vote_count.gte',\n  VoteCountLess = 'vote_count.lte',\n  VoteAverageGreater = 'vote_average.gte',\n  VoteAverageLess = 'vote_average.lte',\n  WithCast = 'with_cast',\n  WithCrew = 'with_crew',\n  WithPeople = 'with_people',\n  WithCompanies = 'with_companies',\n  WithGenres = 'with_genres',\n  WithoutGenres = 'without_genres',\n  WithKeywords = 'with_keywords',\n  WithoutKeywords = 'without_keywords',\n  WithRuntimeGreater = 'with_runtime.gte',\n  WithRuntimeLess = 'with_runtime.lte',\n  WithOriginalLanguage = 'with_original_language',\n  WithWatchProviders = 'with_watch_providers',\n  WatchRegion = 'watch_region'\n}\n\nexport enum TmdbSearchMovieParameters {\n  ApiKey = 'api_key',\n  Language = 'language', // Pass a ISO 639 - 1 value to display translated data for the fields that support it. minLength: 2 pattern: ([a - z]{ 2 }) -([A - Z]{ 2 }) default: en - US\n  Query = 'query',\n  Page = 'page', // minimum: 1 maximum: 1000\n  IncludeAdult = 'include_adult',\n  Region = 'region',\n  // Specify a ISO 3166 - 1 code to filter release dates.Must be uppercase. pattern: ^ [A - Z]{ 2 } $\n  Year = 'year',\n  PrimaryReleaseYear = 'primary_release_year'\n}\n\nenum TmdbAppendToResponseParameters {\n  AccountStates = 'account_states',\n  Videos = 'videos',\n  Images = 'images',\n  Credits = 'credits',\n  Changes = 'changes',\n  Translations = 'translations',\n  Similar = 'similar',\n  ExternalIds = 'external_ids',\n  AlternativeTitles = 'alternative_titles',\n  Keywords = 'keywords',\n  Reviews = 'reviews',\n  Recommendations = 'recommendations',\n  ReleaseDates = 'release_dates',\n  Lists = 'lists'\n}\n\nenum TmdbReleaseTypes {\n  PREMIERE = 'Premiere',  // 1\n  THEATRICAL_LIMITED = 'Theatrical(limited)', // 2\n  THEATRICAL = 'Theatrical', // 3\n  DIGITAL = 'Digital', // 4\n  PHYSICAL = 'Physical', // 5\n  TV = 'TV', // 6\n}\n\nexport interface IPersonDetails {\n  birthday: string;\n  known_for_department: string;\n  id: number;\n  movie_credits?: IPersonCredits;\n  tv_credits?: IPersonCredits;\n  combined_credits?: IPersonCredits;\n  homepage?: any;\n  profile_path: string;\n  imdb_id: string;\n  deathday?: any;\n  images?: IImages;\n  external_ids?: IExternalids;\n  name: string;\n  also_known_as: string[];\n  biography: string;\n  adult: boolean;\n  gender: number;\n  place_of_birth: string;\n  popularity: number;\n}\n\nexport interface IPersonCredits {\n  cast: IPersonCastCrew[];\n  crew: IPersonCastCrew[];\n  id?: number;\n}\n\nexport interface IPersonCastCrew {\n  id?: number;\n  original_language: string;\n  episode_count?: number;\n  overview: string;\n  origin_country?: string[];\n  original_name?: string;\n  genre_ids: number[];\n  name?: string;\n  media_type: string;\n  poster_path: null | string;\n  first_air_date?: string;\n  vote_average: number;\n  vote_count: number;\n  character?: string;\n  backdrop_path: null | string;\n  popularity: number;\n  credit_id: string;\n  original_title?: string;\n  video?: boolean;\n  release_date?: string;\n  title?: string;\n  adult?: boolean;\n  department?: string;\n  job?: string;\n}\n\nexport interface IExternalids {\n  id?: number;\n  freebase_id: string;\n  instagram_id: string;\n  tvrage_id: number;\n  twitter_id: string;\n  freebase_mid: string;\n  imdb_id: string;\n  facebook_id: string;\n}\n\nexport interface IImages {\n  id?: number;\n  profiles: IProfile[];\n}\n\nexport interface IProfile {\n  iso_639_1?: any;\n  aspect_ratio: number;\n  vote_count: number;\n  height: number;\n  vote_average: number;\n  file_path: string;\n  width: number;\n}\n\nexport interface ICredits {\n  cast: ICast[];\n  crew: ICrew[];\n}\n\ninterface ICast {\n  poster_path?: string;\n  adult: boolean;\n  backdrop_path?: string;\n  vote_count: number;\n  video: boolean;\n  id: number;\n  media_type?: string;\n  popularity: number;\n  genre_ids: number[];\n  original_language: string;\n  title: string;\n  original_title: string;\n  release_date: string;\n  character: string;\n  vote_average: number;\n  overview: string;\n  credit_id: string;\n}\n\ninterface ICrew {\n  id: number;\n  department: string;\n  original_language: string;\n  original_title: string;\n  job: string;\n  overview: string;\n  genre_ids: number[];\n  video: boolean;\n  episode_count: number\n  media_type?: string;\n  credit_id: string;\n  poster_path?: string;\n  popularity: number;\n  backdrop_path?: string;\n  vote_count: number;\n  title: string;\n  adult: boolean;\n  vote_average: number;\n  release_date: string;\n}\n\nexport interface IUserSavedData {\n  id?: string,\n  title: string,\n  year: number,\n  tmdbId: number,\n}\n\nexport enum GenreCodes {\n  Action = 28,\n  Adventure = 12,\n  Animation = 16,\n  Comedy = 35,\n  Crime = 80,\n  Documentary = 99,\n  Drama = 18,\n  Family = 10751,\n  Fantasy = 14,\n  History = 36,\n  Horror = 27,\n  Music = 10402,\n  Mystery = 9648,\n  Romance = 10749,\n  ScienceFiction = 878,\n  TVMovie = 10770,\n  Thriller = 53,\n  War = 10752,\n  Western = 37,\n  // mdb reserved\n  FilmNoir = 20000,\n  // similar genre: Music id:10402\n  Musical = 20001,\n  News = 20002,\n  RealityTV = 20003,\n  // similar genre: Science Fiction id:878\n  SciFi = 20004,\n  // another media type\n  Short = 20005,\n  Sport = 20006,\n}\n\n\n\n/**\nexport enum Department {\n    Art = \"Art\",\n    Camera = \"Camera\",\n    CostumeMakeUp = \"Costume & Make-Up\",\n    Crew = \"Crew\",\n    Directing = \"Directing\",\n    Editing = \"Editing\",\n    Lighting = \"Lighting\",\n    Production = \"Production\",\n    Sound = \"Sound\",\n    VisualEffects = \"Visual Effects\",\n    Writing = \"Writing\",\n}\n\nexport interface ExternalIDS {\n    imdb_id:      string;\n    facebook_id:  null;\n    instagram_id: null;\n    twitter_id:   null;\n}\n\nexport interface Genre {\n    id:   number;\n    name: string;\n}\n\nexport interface Images {\n    backdrops: any[];\n    posters:   any[];\n}\n\nexport enum OriginalLanguage {\n    En = \"en\",\n    Es = \"es\",\n    Fr = \"fr\",\n}\n\nexport interface ProductionCompany {\n    id:             number;\n    logo_path:      string;\n    name:           string;\n    origin_country: string;\n}\n\nexport interface ProductionCountry {\n    iso_3166_1: string;\n    name:       string;\n}\n\nexport interface Recommendations {\n    page:          number;\n    results:       RecommendationsResult[];\n    total_pages:   number;\n    total_results: number;\n}\n\nexport interface RecommendationsResult {\n    id:                number;\n    video:             boolean;\n    vote_count:        number;\n    vote_average:      number;\n    title:             string;\n    release_date:      string;\n    original_language: OriginalLanguage;\n    original_title:    string;\n    genre_ids:         number[];\n    backdrop_path:     string;\n    adult:             boolean;\n    overview:          string;\n    poster_path:       string;\n    popularity:        number;\n}\n\nexport interface SpokenLanguage {\n    iso_639_1: OriginalLanguage;\n    name:      string;\n}\n\nexport interface Videos {\n    results: VideosResult[];\n}\n\nexport interface VideosResult {\n    id:         string;\n    iso_639_1:  OriginalLanguage;\n    iso_3166_1: string;\n    key:        string;\n    name:       string;\n    site:       string;\n    size:       number;\n    type:       string;\n}\n */\n\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 87
                },
                {
                    "name": "logo_path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "null | string",
                    "optional": false,
                    "description": "",
                    "line": 88
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 89
                },
                {
                    "name": "origin_country",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 90
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IProductionCountry",
            "id": "interface-IProductionCountry-584d54738f93e2af94202069b5eddb4cab23bb2dfec2ff69f24ebaf881c252f94680b4cd6cec302796817692570a31bedafc5d74fed1cf6488a895dbf372e23d",
            "file": "src/app/models/interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IMdbMovieDetails {\n  awards?: string\n  backgroundPath: string;\n  belongsToCollection?: []\n  boxOffice?: string | number // tmdb:revenue(number)\n  budget?: number\n  country?: string\n  director?: string\n  dvd?: string // dvd release\n  genres?: string[] | string | IGenre[]\n  imdbId?: string\n  imdbRating?: string\n  imdbVotes?: string\n  isAdult?: boolean;\n  isAvailable?: boolean;\n  languages?: string[]\n  libraryInfo?: ILibraryInfo\n  metascore?: string // metacritic score\\\n  originalLanguage?: string // tmdb:\"en\",omdb:\"English\"\n  originalTitle?: string\n  plot?: string // plot or overview\n  popularity?: number\n  posterPath: string\n  production?: string // company; i.e. Walt Disney Pictures\n  rated?: string // rated or certificate\n  ratings?: IRating[]\n  releaseDate?: string // omdb:\"05 May 2017\"; tmdb:\"1999-10-15\"\n  releaseYear?: number | string\n  response: string\n  runtime?: string\n  starring?: string // Actors field in omdb\n  status?: string // released/Post\n  tagline?: string;\n  tmdbId?: number\n  title: string\n  type?: string // movie/tvmovie/series\n  video?: boolean; // unknown\n  // voteAverage: number; // tmdb votes\n  // voteCount: number; // tmdb votes\n  website?: string\n  writer?: string // omdb\n  [propName: string]: any;\n}\n\nexport interface IRating {\n  Source: string\n  Value: string\n}\n\nexport interface LibraryInfo {\n  tmdbId?: null | number | string\n  imdbID?: string\n  title?: string\n  year?: number\n  directoryList?: string[]\n  _id: string\n}\n\nexport interface MovieGenre {\n  id: number\n  code: string\n  description: string\n  isChecked: boolean\n}\n\nexport interface WatchList {\n  id: number\n  movieList: string[]\n}\n\nexport interface ILibraryInfo {\n  tmdbId?: null | number | string\n  imdbID?: string\n  title?: string\n  year?: number\n  directoryList?: string[]\n  _id: string\n}\n\nexport interface ICollection {\n  id: number,\n  name: string\n}\n\nexport interface IProductionCompany {\n  id: number;\n  logo_path: null | string;\n  name: string;\n  origin_country: string;\n}\n\nexport interface IProductionCountry {\n  iso_3166_1: string;\n  name: string;\n}\n\nexport interface ISpokenLanguage {\n  iso_639_1: string;\n  name: string;\n}\n\nexport interface IOmdbMovieDetail {\n  Title: string\n  Year?: string\n  Rated?: string\n  Released?: string // \"05 May 2017\"\n  Runtime?: string\n  Genre?: string\n  Director?: string\n  Writer?: string\n  Actors?: string\n  Plot?: string\n  Language?: string\n  Country?: string\n  Awards?: string\n  Poster?: string\n  Ratings?: IRating[]\n  Metascore?: string\n  imdbRating?: string\n  imdbVotes?: string\n  imdbID: string\n  Type?: string\n  DVD?: string\n  BoxOffice?: string\n  Production?: string\n  Website?: string\n  Response: string\n}\n\nexport interface ITmdbMovieDetail {\n  adult: boolean;\n  backdrop_path: string;\n  belongs_to_collection: null;\n  budget: number;\n  genres: IGenre[];\n  homepage: string;\n  id: number;\n  imdb_id: string;\n  original_language: string;\n  original_title: string;\n  overview: string;\n  popularity: number;\n  poster_path: string;\n  production_companies: IProductionCompany[];\n  production_countries: IProductionCountry[];\n  release_date: string;\n  revenue: number;\n  runtime: number;\n  spoken_languages: ISpokenLanguage[];\n  status: string;\n  tagline: string;\n  title: string;\n  video: boolean;\n  vote_average: number;\n  vote_count: number;\n}\n\nexport interface MdbMovieDetails {\n  adult?: boolean;\n  title: string\n  releaseYear?: string\n  releaseDate?: string\n  rated?: string // rated or certificate\n  runtime?: string\n  genres?: string\n  director?: string\n  writer?: string\n  Actors?: string\n  plot?: string // plot or overview\n  Language?: string\n  Country?: string\n  Awards?: string\n  Poster?: string\n  Ratings?: IRating[]\n  Metascore?: string\n  imdbRating?: string\n  imdbVotes?: string\n  imdbID: string\n  tmdbID: number\n  Type?: string\n  DVD?: string\n  BoxOffice?: string\n  Production?: string\n  website?: string\n  response: string\n  libraryInfo?: ILibraryInfo\n}\n\n// // adult: boolean;\n// //backdrop_path: string;\n// belongs_to_collection: null;\n// // budget: number;\n// genres: Genre[];\n// // homepage: string;\n// // id: number;\n// // imdb_id: string;\n// original_language: string;\n// original_title: string;\n// // overview: string;\n// // popularity: number;\n// // poster_path: string;\n// production_companies: ProductionCompany[];\n// production_countries: ProductionCountry[];\n// // release_date: string;\n// // revenue: number;\n// // runtime: number;\n// spoken_languages: SpokenLanguage[];\n// // status: string;\n// // tagline: string;\n// // title: string;\n// // video: boolean;\n// // vote_average: number;\n// // vote_count: number;\n\nexport interface ITmdbResultObject {\n  page: number;\n  total_results: number;\n  total_pages: number;\n  results: ITmdbResult[];\n}\n\nexport interface ITmdbResult {\n  popularity: number\n  vote_count: number\n  video: boolean\n  poster_path: string\n  id: number\n  adult: boolean\n  backdrop_path: string\n  original_language: string\n  original_title: string\n  genre_ids: number[]\n  title: string\n  vote_average: number\n  overview: string\n  release_date: string\n  isAvailable?: boolean\n  isHighlighted?: boolean\n}\n\nexport interface ILibraryMovie {\n  tmdbId?: number,\n  title: string,\n  year: number,\n  imdbId?: string,\n  directory: string[]\n}\n\nexport interface IGenre {\n  id: number\n  name: string\n}\n\nexport interface Credits {\n  id: number;\n  cast: CastElement[];\n  crew: Crew[];\n}\n\ninterface CastElement {\n  cast_id: number;\n  character: string;\n  credit_id: string;\n  gender: number;\n  id: number;\n  name: string;\n  order: number;\n  profile_path: null | string;\n}\n\ninterface Crew {\n  credit_id: string;\n  department: Department;\n  gender: number;\n  id: number;\n  job: string;\n  name: string;\n  profile_path: null | string;\n}\n\nexport enum Department {\n  Art = 'Art',\n  Camera = 'Camera',\n  CostumeMakeUp = 'Costume & Make-Up',\n  Crew = 'Crew',\n  Directing = 'Directing',\n  Editing = 'Editing',\n  Lighting = 'Lighting',\n  Production = 'Production',\n  Sound = 'Sound',\n  VisualEffects = 'Visual Effects',\n  Writing = 'Writing',\n}\n\nexport class MDBTorrent {\n  id?: string\n  name?: string\n  size?: string\n  hash: string\n  url?: string\n  quality?: string\n  type?: string\n  seeds?: number\n  peers?: number\n  sizeBytes?: number\n  added?: string\n  dateUploaded?: string\n  dateUploadedUnix?: number\n  isYts?: boolean\n  magnetLink?: string\n}\n\nexport class ITPBTorrent {\n  id?: number\n  name?: string\n  hash: string\n  sizeBytes?: number\n  added?: string\n}\n\nexport interface ISearch {\n  page: number\n}\n\nexport enum OmdbParameters {\n  ApiKey = 'apikey',\n  ImdbId = 'i',\n  Title = 't',\n  Type = 'type',\n  Year = 'y',\n  Plot = 'plot',\n  Return = 'r',\n  Callback = 'callback',\n  Version = 'v',\n}\n\nexport enum TmdbParameters {\n  ApiKey = 'api_key',\n  AppendToResponse = 'append_to_response',\n  Language = 'language',\n  Region = 'region',\n  SortBy = 'sort_by',\n  CertificationCountry = 'certification_country',\n  Certification = 'certification',\n  CertificationLess = 'certification.lte',\n  CertificationGreater = 'certification.gte',\n  IncludeAdult = 'include_adult',\n  IncludeVideo = 'include_video',\n  Page = 'page',\n  PrimaryReleaseYear = 'primary_release_year',\n  PrimaryReleaseDateGreater = 'primary_release_date.gte',\n  PrimaryReleaseDateLess = 'primary_release_date.lte',\n  ReleaseDateGreater = 'release_date.gte',\n  ReleaseDateLess = 'release_date.lte',\n  WithReleaseType = 'with_release_type',\n  Year = 'year',\n  VoteCountGreater = 'vote_count.gte',\n  VoteCountLess = 'vote_count.lte',\n  VoteAverageGreater = 'vote_average.gte',\n  VoteAverageLess = 'vote_average.lte',\n  WithCast = 'with_cast',\n  WithCrew = 'with_crew',\n  WithPeople = 'with_people',\n  WithCompanies = 'with_companies',\n  WithGenres = 'with_genres',\n  WithoutGenres = 'without_genres',\n  WithKeywords = 'with_keywords',\n  WithoutKeywords = 'without_keywords',\n  WithRuntimeGreater = 'with_runtime.gte',\n  WithRuntimeLess = 'with_runtime.lte',\n  WithOriginalLanguage = 'with_original_language',\n  WithWatchProviders = 'with_watch_providers',\n  WatchRegion = 'watch_region'\n}\n\nexport enum TmdbSearchMovieParameters {\n  ApiKey = 'api_key',\n  Language = 'language', // Pass a ISO 639 - 1 value to display translated data for the fields that support it. minLength: 2 pattern: ([a - z]{ 2 }) -([A - Z]{ 2 }) default: en - US\n  Query = 'query',\n  Page = 'page', // minimum: 1 maximum: 1000\n  IncludeAdult = 'include_adult',\n  Region = 'region',\n  // Specify a ISO 3166 - 1 code to filter release dates.Must be uppercase. pattern: ^ [A - Z]{ 2 } $\n  Year = 'year',\n  PrimaryReleaseYear = 'primary_release_year'\n}\n\nenum TmdbAppendToResponseParameters {\n  AccountStates = 'account_states',\n  Videos = 'videos',\n  Images = 'images',\n  Credits = 'credits',\n  Changes = 'changes',\n  Translations = 'translations',\n  Similar = 'similar',\n  ExternalIds = 'external_ids',\n  AlternativeTitles = 'alternative_titles',\n  Keywords = 'keywords',\n  Reviews = 'reviews',\n  Recommendations = 'recommendations',\n  ReleaseDates = 'release_dates',\n  Lists = 'lists'\n}\n\nenum TmdbReleaseTypes {\n  PREMIERE = 'Premiere',  // 1\n  THEATRICAL_LIMITED = 'Theatrical(limited)', // 2\n  THEATRICAL = 'Theatrical', // 3\n  DIGITAL = 'Digital', // 4\n  PHYSICAL = 'Physical', // 5\n  TV = 'TV', // 6\n}\n\nexport interface IPersonDetails {\n  birthday: string;\n  known_for_department: string;\n  id: number;\n  movie_credits?: IPersonCredits;\n  tv_credits?: IPersonCredits;\n  combined_credits?: IPersonCredits;\n  homepage?: any;\n  profile_path: string;\n  imdb_id: string;\n  deathday?: any;\n  images?: IImages;\n  external_ids?: IExternalids;\n  name: string;\n  also_known_as: string[];\n  biography: string;\n  adult: boolean;\n  gender: number;\n  place_of_birth: string;\n  popularity: number;\n}\n\nexport interface IPersonCredits {\n  cast: IPersonCastCrew[];\n  crew: IPersonCastCrew[];\n  id?: number;\n}\n\nexport interface IPersonCastCrew {\n  id?: number;\n  original_language: string;\n  episode_count?: number;\n  overview: string;\n  origin_country?: string[];\n  original_name?: string;\n  genre_ids: number[];\n  name?: string;\n  media_type: string;\n  poster_path: null | string;\n  first_air_date?: string;\n  vote_average: number;\n  vote_count: number;\n  character?: string;\n  backdrop_path: null | string;\n  popularity: number;\n  credit_id: string;\n  original_title?: string;\n  video?: boolean;\n  release_date?: string;\n  title?: string;\n  adult?: boolean;\n  department?: string;\n  job?: string;\n}\n\nexport interface IExternalids {\n  id?: number;\n  freebase_id: string;\n  instagram_id: string;\n  tvrage_id: number;\n  twitter_id: string;\n  freebase_mid: string;\n  imdb_id: string;\n  facebook_id: string;\n}\n\nexport interface IImages {\n  id?: number;\n  profiles: IProfile[];\n}\n\nexport interface IProfile {\n  iso_639_1?: any;\n  aspect_ratio: number;\n  vote_count: number;\n  height: number;\n  vote_average: number;\n  file_path: string;\n  width: number;\n}\n\nexport interface ICredits {\n  cast: ICast[];\n  crew: ICrew[];\n}\n\ninterface ICast {\n  poster_path?: string;\n  adult: boolean;\n  backdrop_path?: string;\n  vote_count: number;\n  video: boolean;\n  id: number;\n  media_type?: string;\n  popularity: number;\n  genre_ids: number[];\n  original_language: string;\n  title: string;\n  original_title: string;\n  release_date: string;\n  character: string;\n  vote_average: number;\n  overview: string;\n  credit_id: string;\n}\n\ninterface ICrew {\n  id: number;\n  department: string;\n  original_language: string;\n  original_title: string;\n  job: string;\n  overview: string;\n  genre_ids: number[];\n  video: boolean;\n  episode_count: number\n  media_type?: string;\n  credit_id: string;\n  poster_path?: string;\n  popularity: number;\n  backdrop_path?: string;\n  vote_count: number;\n  title: string;\n  adult: boolean;\n  vote_average: number;\n  release_date: string;\n}\n\nexport interface IUserSavedData {\n  id?: string,\n  title: string,\n  year: number,\n  tmdbId: number,\n}\n\nexport enum GenreCodes {\n  Action = 28,\n  Adventure = 12,\n  Animation = 16,\n  Comedy = 35,\n  Crime = 80,\n  Documentary = 99,\n  Drama = 18,\n  Family = 10751,\n  Fantasy = 14,\n  History = 36,\n  Horror = 27,\n  Music = 10402,\n  Mystery = 9648,\n  Romance = 10749,\n  ScienceFiction = 878,\n  TVMovie = 10770,\n  Thriller = 53,\n  War = 10752,\n  Western = 37,\n  // mdb reserved\n  FilmNoir = 20000,\n  // similar genre: Music id:10402\n  Musical = 20001,\n  News = 20002,\n  RealityTV = 20003,\n  // similar genre: Science Fiction id:878\n  SciFi = 20004,\n  // another media type\n  Short = 20005,\n  Sport = 20006,\n}\n\n\n\n/**\nexport enum Department {\n    Art = \"Art\",\n    Camera = \"Camera\",\n    CostumeMakeUp = \"Costume & Make-Up\",\n    Crew = \"Crew\",\n    Directing = \"Directing\",\n    Editing = \"Editing\",\n    Lighting = \"Lighting\",\n    Production = \"Production\",\n    Sound = \"Sound\",\n    VisualEffects = \"Visual Effects\",\n    Writing = \"Writing\",\n}\n\nexport interface ExternalIDS {\n    imdb_id:      string;\n    facebook_id:  null;\n    instagram_id: null;\n    twitter_id:   null;\n}\n\nexport interface Genre {\n    id:   number;\n    name: string;\n}\n\nexport interface Images {\n    backdrops: any[];\n    posters:   any[];\n}\n\nexport enum OriginalLanguage {\n    En = \"en\",\n    Es = \"es\",\n    Fr = \"fr\",\n}\n\nexport interface ProductionCompany {\n    id:             number;\n    logo_path:      string;\n    name:           string;\n    origin_country: string;\n}\n\nexport interface ProductionCountry {\n    iso_3166_1: string;\n    name:       string;\n}\n\nexport interface Recommendations {\n    page:          number;\n    results:       RecommendationsResult[];\n    total_pages:   number;\n    total_results: number;\n}\n\nexport interface RecommendationsResult {\n    id:                number;\n    video:             boolean;\n    vote_count:        number;\n    vote_average:      number;\n    title:             string;\n    release_date:      string;\n    original_language: OriginalLanguage;\n    original_title:    string;\n    genre_ids:         number[];\n    backdrop_path:     string;\n    adult:             boolean;\n    overview:          string;\n    poster_path:       string;\n    popularity:        number;\n}\n\nexport interface SpokenLanguage {\n    iso_639_1: OriginalLanguage;\n    name:      string;\n}\n\nexport interface Videos {\n    results: VideosResult[];\n}\n\nexport interface VideosResult {\n    id:         string;\n    iso_639_1:  OriginalLanguage;\n    iso_3166_1: string;\n    key:        string;\n    name:       string;\n    site:       string;\n    size:       number;\n    type:       string;\n}\n */\n\n",
            "properties": [
                {
                    "name": "iso_3166_1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 94
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 95
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IProfile",
            "id": "interface-IProfile-584d54738f93e2af94202069b5eddb4cab23bb2dfec2ff69f24ebaf881c252f94680b4cd6cec302796817692570a31bedafc5d74fed1cf6488a895dbf372e23d",
            "file": "src/app/models/interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IMdbMovieDetails {\n  awards?: string\n  backgroundPath: string;\n  belongsToCollection?: []\n  boxOffice?: string | number // tmdb:revenue(number)\n  budget?: number\n  country?: string\n  director?: string\n  dvd?: string // dvd release\n  genres?: string[] | string | IGenre[]\n  imdbId?: string\n  imdbRating?: string\n  imdbVotes?: string\n  isAdult?: boolean;\n  isAvailable?: boolean;\n  languages?: string[]\n  libraryInfo?: ILibraryInfo\n  metascore?: string // metacritic score\\\n  originalLanguage?: string // tmdb:\"en\",omdb:\"English\"\n  originalTitle?: string\n  plot?: string // plot or overview\n  popularity?: number\n  posterPath: string\n  production?: string // company; i.e. Walt Disney Pictures\n  rated?: string // rated or certificate\n  ratings?: IRating[]\n  releaseDate?: string // omdb:\"05 May 2017\"; tmdb:\"1999-10-15\"\n  releaseYear?: number | string\n  response: string\n  runtime?: string\n  starring?: string // Actors field in omdb\n  status?: string // released/Post\n  tagline?: string;\n  tmdbId?: number\n  title: string\n  type?: string // movie/tvmovie/series\n  video?: boolean; // unknown\n  // voteAverage: number; // tmdb votes\n  // voteCount: number; // tmdb votes\n  website?: string\n  writer?: string // omdb\n  [propName: string]: any;\n}\n\nexport interface IRating {\n  Source: string\n  Value: string\n}\n\nexport interface LibraryInfo {\n  tmdbId?: null | number | string\n  imdbID?: string\n  title?: string\n  year?: number\n  directoryList?: string[]\n  _id: string\n}\n\nexport interface MovieGenre {\n  id: number\n  code: string\n  description: string\n  isChecked: boolean\n}\n\nexport interface WatchList {\n  id: number\n  movieList: string[]\n}\n\nexport interface ILibraryInfo {\n  tmdbId?: null | number | string\n  imdbID?: string\n  title?: string\n  year?: number\n  directoryList?: string[]\n  _id: string\n}\n\nexport interface ICollection {\n  id: number,\n  name: string\n}\n\nexport interface IProductionCompany {\n  id: number;\n  logo_path: null | string;\n  name: string;\n  origin_country: string;\n}\n\nexport interface IProductionCountry {\n  iso_3166_1: string;\n  name: string;\n}\n\nexport interface ISpokenLanguage {\n  iso_639_1: string;\n  name: string;\n}\n\nexport interface IOmdbMovieDetail {\n  Title: string\n  Year?: string\n  Rated?: string\n  Released?: string // \"05 May 2017\"\n  Runtime?: string\n  Genre?: string\n  Director?: string\n  Writer?: string\n  Actors?: string\n  Plot?: string\n  Language?: string\n  Country?: string\n  Awards?: string\n  Poster?: string\n  Ratings?: IRating[]\n  Metascore?: string\n  imdbRating?: string\n  imdbVotes?: string\n  imdbID: string\n  Type?: string\n  DVD?: string\n  BoxOffice?: string\n  Production?: string\n  Website?: string\n  Response: string\n}\n\nexport interface ITmdbMovieDetail {\n  adult: boolean;\n  backdrop_path: string;\n  belongs_to_collection: null;\n  budget: number;\n  genres: IGenre[];\n  homepage: string;\n  id: number;\n  imdb_id: string;\n  original_language: string;\n  original_title: string;\n  overview: string;\n  popularity: number;\n  poster_path: string;\n  production_companies: IProductionCompany[];\n  production_countries: IProductionCountry[];\n  release_date: string;\n  revenue: number;\n  runtime: number;\n  spoken_languages: ISpokenLanguage[];\n  status: string;\n  tagline: string;\n  title: string;\n  video: boolean;\n  vote_average: number;\n  vote_count: number;\n}\n\nexport interface MdbMovieDetails {\n  adult?: boolean;\n  title: string\n  releaseYear?: string\n  releaseDate?: string\n  rated?: string // rated or certificate\n  runtime?: string\n  genres?: string\n  director?: string\n  writer?: string\n  Actors?: string\n  plot?: string // plot or overview\n  Language?: string\n  Country?: string\n  Awards?: string\n  Poster?: string\n  Ratings?: IRating[]\n  Metascore?: string\n  imdbRating?: string\n  imdbVotes?: string\n  imdbID: string\n  tmdbID: number\n  Type?: string\n  DVD?: string\n  BoxOffice?: string\n  Production?: string\n  website?: string\n  response: string\n  libraryInfo?: ILibraryInfo\n}\n\n// // adult: boolean;\n// //backdrop_path: string;\n// belongs_to_collection: null;\n// // budget: number;\n// genres: Genre[];\n// // homepage: string;\n// // id: number;\n// // imdb_id: string;\n// original_language: string;\n// original_title: string;\n// // overview: string;\n// // popularity: number;\n// // poster_path: string;\n// production_companies: ProductionCompany[];\n// production_countries: ProductionCountry[];\n// // release_date: string;\n// // revenue: number;\n// // runtime: number;\n// spoken_languages: SpokenLanguage[];\n// // status: string;\n// // tagline: string;\n// // title: string;\n// // video: boolean;\n// // vote_average: number;\n// // vote_count: number;\n\nexport interface ITmdbResultObject {\n  page: number;\n  total_results: number;\n  total_pages: number;\n  results: ITmdbResult[];\n}\n\nexport interface ITmdbResult {\n  popularity: number\n  vote_count: number\n  video: boolean\n  poster_path: string\n  id: number\n  adult: boolean\n  backdrop_path: string\n  original_language: string\n  original_title: string\n  genre_ids: number[]\n  title: string\n  vote_average: number\n  overview: string\n  release_date: string\n  isAvailable?: boolean\n  isHighlighted?: boolean\n}\n\nexport interface ILibraryMovie {\n  tmdbId?: number,\n  title: string,\n  year: number,\n  imdbId?: string,\n  directory: string[]\n}\n\nexport interface IGenre {\n  id: number\n  name: string\n}\n\nexport interface Credits {\n  id: number;\n  cast: CastElement[];\n  crew: Crew[];\n}\n\ninterface CastElement {\n  cast_id: number;\n  character: string;\n  credit_id: string;\n  gender: number;\n  id: number;\n  name: string;\n  order: number;\n  profile_path: null | string;\n}\n\ninterface Crew {\n  credit_id: string;\n  department: Department;\n  gender: number;\n  id: number;\n  job: string;\n  name: string;\n  profile_path: null | string;\n}\n\nexport enum Department {\n  Art = 'Art',\n  Camera = 'Camera',\n  CostumeMakeUp = 'Costume & Make-Up',\n  Crew = 'Crew',\n  Directing = 'Directing',\n  Editing = 'Editing',\n  Lighting = 'Lighting',\n  Production = 'Production',\n  Sound = 'Sound',\n  VisualEffects = 'Visual Effects',\n  Writing = 'Writing',\n}\n\nexport class MDBTorrent {\n  id?: string\n  name?: string\n  size?: string\n  hash: string\n  url?: string\n  quality?: string\n  type?: string\n  seeds?: number\n  peers?: number\n  sizeBytes?: number\n  added?: string\n  dateUploaded?: string\n  dateUploadedUnix?: number\n  isYts?: boolean\n  magnetLink?: string\n}\n\nexport class ITPBTorrent {\n  id?: number\n  name?: string\n  hash: string\n  sizeBytes?: number\n  added?: string\n}\n\nexport interface ISearch {\n  page: number\n}\n\nexport enum OmdbParameters {\n  ApiKey = 'apikey',\n  ImdbId = 'i',\n  Title = 't',\n  Type = 'type',\n  Year = 'y',\n  Plot = 'plot',\n  Return = 'r',\n  Callback = 'callback',\n  Version = 'v',\n}\n\nexport enum TmdbParameters {\n  ApiKey = 'api_key',\n  AppendToResponse = 'append_to_response',\n  Language = 'language',\n  Region = 'region',\n  SortBy = 'sort_by',\n  CertificationCountry = 'certification_country',\n  Certification = 'certification',\n  CertificationLess = 'certification.lte',\n  CertificationGreater = 'certification.gte',\n  IncludeAdult = 'include_adult',\n  IncludeVideo = 'include_video',\n  Page = 'page',\n  PrimaryReleaseYear = 'primary_release_year',\n  PrimaryReleaseDateGreater = 'primary_release_date.gte',\n  PrimaryReleaseDateLess = 'primary_release_date.lte',\n  ReleaseDateGreater = 'release_date.gte',\n  ReleaseDateLess = 'release_date.lte',\n  WithReleaseType = 'with_release_type',\n  Year = 'year',\n  VoteCountGreater = 'vote_count.gte',\n  VoteCountLess = 'vote_count.lte',\n  VoteAverageGreater = 'vote_average.gte',\n  VoteAverageLess = 'vote_average.lte',\n  WithCast = 'with_cast',\n  WithCrew = 'with_crew',\n  WithPeople = 'with_people',\n  WithCompanies = 'with_companies',\n  WithGenres = 'with_genres',\n  WithoutGenres = 'without_genres',\n  WithKeywords = 'with_keywords',\n  WithoutKeywords = 'without_keywords',\n  WithRuntimeGreater = 'with_runtime.gte',\n  WithRuntimeLess = 'with_runtime.lte',\n  WithOriginalLanguage = 'with_original_language',\n  WithWatchProviders = 'with_watch_providers',\n  WatchRegion = 'watch_region'\n}\n\nexport enum TmdbSearchMovieParameters {\n  ApiKey = 'api_key',\n  Language = 'language', // Pass a ISO 639 - 1 value to display translated data for the fields that support it. minLength: 2 pattern: ([a - z]{ 2 }) -([A - Z]{ 2 }) default: en - US\n  Query = 'query',\n  Page = 'page', // minimum: 1 maximum: 1000\n  IncludeAdult = 'include_adult',\n  Region = 'region',\n  // Specify a ISO 3166 - 1 code to filter release dates.Must be uppercase. pattern: ^ [A - Z]{ 2 } $\n  Year = 'year',\n  PrimaryReleaseYear = 'primary_release_year'\n}\n\nenum TmdbAppendToResponseParameters {\n  AccountStates = 'account_states',\n  Videos = 'videos',\n  Images = 'images',\n  Credits = 'credits',\n  Changes = 'changes',\n  Translations = 'translations',\n  Similar = 'similar',\n  ExternalIds = 'external_ids',\n  AlternativeTitles = 'alternative_titles',\n  Keywords = 'keywords',\n  Reviews = 'reviews',\n  Recommendations = 'recommendations',\n  ReleaseDates = 'release_dates',\n  Lists = 'lists'\n}\n\nenum TmdbReleaseTypes {\n  PREMIERE = 'Premiere',  // 1\n  THEATRICAL_LIMITED = 'Theatrical(limited)', // 2\n  THEATRICAL = 'Theatrical', // 3\n  DIGITAL = 'Digital', // 4\n  PHYSICAL = 'Physical', // 5\n  TV = 'TV', // 6\n}\n\nexport interface IPersonDetails {\n  birthday: string;\n  known_for_department: string;\n  id: number;\n  movie_credits?: IPersonCredits;\n  tv_credits?: IPersonCredits;\n  combined_credits?: IPersonCredits;\n  homepage?: any;\n  profile_path: string;\n  imdb_id: string;\n  deathday?: any;\n  images?: IImages;\n  external_ids?: IExternalids;\n  name: string;\n  also_known_as: string[];\n  biography: string;\n  adult: boolean;\n  gender: number;\n  place_of_birth: string;\n  popularity: number;\n}\n\nexport interface IPersonCredits {\n  cast: IPersonCastCrew[];\n  crew: IPersonCastCrew[];\n  id?: number;\n}\n\nexport interface IPersonCastCrew {\n  id?: number;\n  original_language: string;\n  episode_count?: number;\n  overview: string;\n  origin_country?: string[];\n  original_name?: string;\n  genre_ids: number[];\n  name?: string;\n  media_type: string;\n  poster_path: null | string;\n  first_air_date?: string;\n  vote_average: number;\n  vote_count: number;\n  character?: string;\n  backdrop_path: null | string;\n  popularity: number;\n  credit_id: string;\n  original_title?: string;\n  video?: boolean;\n  release_date?: string;\n  title?: string;\n  adult?: boolean;\n  department?: string;\n  job?: string;\n}\n\nexport interface IExternalids {\n  id?: number;\n  freebase_id: string;\n  instagram_id: string;\n  tvrage_id: number;\n  twitter_id: string;\n  freebase_mid: string;\n  imdb_id: string;\n  facebook_id: string;\n}\n\nexport interface IImages {\n  id?: number;\n  profiles: IProfile[];\n}\n\nexport interface IProfile {\n  iso_639_1?: any;\n  aspect_ratio: number;\n  vote_count: number;\n  height: number;\n  vote_average: number;\n  file_path: string;\n  width: number;\n}\n\nexport interface ICredits {\n  cast: ICast[];\n  crew: ICrew[];\n}\n\ninterface ICast {\n  poster_path?: string;\n  adult: boolean;\n  backdrop_path?: string;\n  vote_count: number;\n  video: boolean;\n  id: number;\n  media_type?: string;\n  popularity: number;\n  genre_ids: number[];\n  original_language: string;\n  title: string;\n  original_title: string;\n  release_date: string;\n  character: string;\n  vote_average: number;\n  overview: string;\n  credit_id: string;\n}\n\ninterface ICrew {\n  id: number;\n  department: string;\n  original_language: string;\n  original_title: string;\n  job: string;\n  overview: string;\n  genre_ids: number[];\n  video: boolean;\n  episode_count: number\n  media_type?: string;\n  credit_id: string;\n  poster_path?: string;\n  popularity: number;\n  backdrop_path?: string;\n  vote_count: number;\n  title: string;\n  adult: boolean;\n  vote_average: number;\n  release_date: string;\n}\n\nexport interface IUserSavedData {\n  id?: string,\n  title: string,\n  year: number,\n  tmdbId: number,\n}\n\nexport enum GenreCodes {\n  Action = 28,\n  Adventure = 12,\n  Animation = 16,\n  Comedy = 35,\n  Crime = 80,\n  Documentary = 99,\n  Drama = 18,\n  Family = 10751,\n  Fantasy = 14,\n  History = 36,\n  Horror = 27,\n  Music = 10402,\n  Mystery = 9648,\n  Romance = 10749,\n  ScienceFiction = 878,\n  TVMovie = 10770,\n  Thriller = 53,\n  War = 10752,\n  Western = 37,\n  // mdb reserved\n  FilmNoir = 20000,\n  // similar genre: Music id:10402\n  Musical = 20001,\n  News = 20002,\n  RealityTV = 20003,\n  // similar genre: Science Fiction id:878\n  SciFi = 20004,\n  // another media type\n  Short = 20005,\n  Sport = 20006,\n}\n\n\n\n/**\nexport enum Department {\n    Art = \"Art\",\n    Camera = \"Camera\",\n    CostumeMakeUp = \"Costume & Make-Up\",\n    Crew = \"Crew\",\n    Directing = \"Directing\",\n    Editing = \"Editing\",\n    Lighting = \"Lighting\",\n    Production = \"Production\",\n    Sound = \"Sound\",\n    VisualEffects = \"Visual Effects\",\n    Writing = \"Writing\",\n}\n\nexport interface ExternalIDS {\n    imdb_id:      string;\n    facebook_id:  null;\n    instagram_id: null;\n    twitter_id:   null;\n}\n\nexport interface Genre {\n    id:   number;\n    name: string;\n}\n\nexport interface Images {\n    backdrops: any[];\n    posters:   any[];\n}\n\nexport enum OriginalLanguage {\n    En = \"en\",\n    Es = \"es\",\n    Fr = \"fr\",\n}\n\nexport interface ProductionCompany {\n    id:             number;\n    logo_path:      string;\n    name:           string;\n    origin_country: string;\n}\n\nexport interface ProductionCountry {\n    iso_3166_1: string;\n    name:       string;\n}\n\nexport interface Recommendations {\n    page:          number;\n    results:       RecommendationsResult[];\n    total_pages:   number;\n    total_results: number;\n}\n\nexport interface RecommendationsResult {\n    id:                number;\n    video:             boolean;\n    vote_count:        number;\n    vote_average:      number;\n    title:             string;\n    release_date:      string;\n    original_language: OriginalLanguage;\n    original_title:    string;\n    genre_ids:         number[];\n    backdrop_path:     string;\n    adult:             boolean;\n    overview:          string;\n    poster_path:       string;\n    popularity:        number;\n}\n\nexport interface SpokenLanguage {\n    iso_639_1: OriginalLanguage;\n    name:      string;\n}\n\nexport interface Videos {\n    results: VideosResult[];\n}\n\nexport interface VideosResult {\n    id:         string;\n    iso_639_1:  OriginalLanguage;\n    iso_3166_1: string;\n    key:        string;\n    name:       string;\n    site:       string;\n    size:       number;\n    type:       string;\n}\n */\n\n",
            "properties": [
                {
                    "name": "aspect_ratio",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 488
                },
                {
                    "name": "file_path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 492
                },
                {
                    "name": "height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 490
                },
                {
                    "name": "iso_639_1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 487
                },
                {
                    "name": "vote_average",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 491
                },
                {
                    "name": "vote_count",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 489
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 493
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IProfile",
            "id": "interface-IProfile-3a24dd37ec96cbba40daa4e8d88c59caaff4e40d895e071571a104415f02bb0fd3f9ed94385428eefc0fe449579c62e5d6f82d5dd48ee0b2661ca288b28f6943-1",
            "file": "src/app/modules/user/profile/profile.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  Component, OnInit,\n} from '@angular/core';\nimport { ThemePalette } from '@angular/material/core';\n// import { Observable } from 'rxjs';\n// import { UserState } from '../../../app.state';\n// import { Select } from '@ngxs/store';\n// import { FirebaseService } from 'src/app/services/firebase.service';\nimport { UserDataService } from '@services/user-data/user-data.service';\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.scss']\n})\nexport class ProfileComponent implements OnInit {\n  // @Select(UserState) user$: Observable<any>\n  // moviesList = TMDB_SEARCH_RESULTS.results\n  moviesList = []\n  userProfile: IProfile = {\n    username: 'peterparker123',\n    emailAddress: 'peterparker123@gmail.com',\n    watchedCount: 90,\n    bookmarkedCount: 9,\n    bio: 'movies... I like'\n  }\n  photoUrl = ''\n  userStats: {\n    filmsNumber: 54\n  }\n  defaultUserProfile\n  firebaseUser$\n  moviesWatchedList = {\n    count: 0,\n    data: []\n  }\n  moviesBookmarksList = {\n    count: 0,\n    data: []\n  }\n  background: ThemePalette = undefined\n  constructor(\n    private userDataService: UserDataService\n  ) { }\n\n  ngOnInit() {\n    // this.countBookmarks()\n    this.getUser()\n    this.treatAll()\n    this.getUserData()\n  }\n\n  ngAfterViewInit(): void {\n    this.background = this.background ? undefined : 'primary'\n  }\n  treatAll() {\n    // this.firebaseService.getEmpty()\n  }\n\n  getUser() {\n    // this.firebaseService.getUser().then(e => {\n    //   console.log('fbuser', this.firebaseUser$);\n    //   this.firebaseUser$ = e\n    //   this.defaultUserProfile = e\n    //   this.cdr.detectChanges()\n    // })\n  }\n\n  changePassword() {\n\n  }\n\n  changeEmailAddress() {\n\n  }\n\n  onSave() {\n\n  }\n\n  onReset() {\n    this.userProfile = this.defaultUserProfile\n  }\n\n  onSignOut() {\n\n  }\n\n  async countBookmarks() {\n    // const count = await this.firebaseService.countAll('bookmark')\n    // console.log('count: ', count)\n  }\n\n  uploadFile(data) {\n    console.log(data)\n    // this.firebaseService.uploadToStorage(data.item(0))\n  }\n\n  exportUserData() {\n\n  }\n\n  getUserData() {\n    this.userDataService.getUserDataFirstPage('watched').then(e => {\n      console.log('getuserdata watched', e)\n      this.moviesWatchedList.count = e.totalResults\n      this.moviesWatchedList.data = e.results\n    })\n    this.userDataService.getUserDataFirstPage('bookmark').then(e => {\n      console.log('getuserdata bookmark', e)\n      this.moviesBookmarksList.count = e.totalResults\n      this.moviesBookmarksList.data = e.results\n    })\n  }\n}\n\nexport interface IProfile {\n  username: string,\n  watchedCount: number | 0,\n  bookmarkedCount: number | 0,\n  emailAddress: string,\n  bio: string\n}\n",
            "properties": [
                {
                    "name": "bio",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 122
                },
                {
                    "name": "bookmarkedCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | \"0\"",
                    "optional": false,
                    "description": "",
                    "line": 120
                },
                {
                    "name": "emailAddress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 121
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 118
                },
                {
                    "name": "watchedCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | \"0\"",
                    "optional": false,
                    "description": "",
                    "line": 119
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "IProfile-1"
        },
        {
            "name": "IProgressBar",
            "id": "interface-IProgressBar-588585bdf2d6064ecb2f9bd835b9a8acb99adfb30b717f933e69f83a68c7ae04ad51feb9141293ddac1bb8a42c569d3460cdc83ad38e869c1227894beb630d13",
            "file": "src/app/modules/watch/video-player-controls/video-player-controls.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { IpcService } from '@services/ipc.service';\nimport { COLOR_LIST, FONT_SIZE_LIST, PERCENTAGE_LIST, RGB_COLOR_LIST } from '@shared/constants';\nimport GeneralUtil from '@utils/general.util';\n\n@Component({\n  selector: 'mdb-video-player-controls',\n  templateUrl: './video-player-controls.component.html',\n  styleUrls: ['./video-player-controls.component.scss']\n})\nexport class VideoPlayerControlsComponent implements OnInit {\n\n  @Input() isMuted: boolean\n  @Input() isPlaying: boolean\n  @Input() isShowSubtitles: boolean = false\n  @Input() canPlay: boolean\n  @Input() videoPlayerElement: any\n  @Input() volume: number\n  // @Input() videoPlayer1: any // tocheck\n  @Input() videoTime: IVideoTime\n  @Input() progressBar: IProgressBar\n\n  @Output() onTogglePlay = new EventEmitter<any>();\n  @Output() onToggleMute = new EventEmitter<any>();\n  @Output() onToggleFullScreen = new EventEmitter<any>();\n  @Output() onToggleSubtitles = new EventEmitter<boolean>();\n  @Output() onSeekValue = new EventEmitter<any>();\n  @Output() onChangeVolume = new EventEmitter<any>();\n  @Output() onChangeSubtitleFile = new EventEmitter<any>();\n  @Output() onChangeFontColor = new EventEmitter<any>();\n  @Output() onChangeFontSize = new EventEmitter<any>();\n  @Output() onChangeBackgroundColor = new EventEmitter<any>();\n  @Output() onChangeBackgroundOpacity = new EventEmitter<any>();\n\n  fontColorsList = RGB_COLOR_LIST\n  // fontColorsList = COLOR_LIST\n  fontSizeList = FONT_SIZE_LIST\n  percentageList = PERCENTAGE_LIST;\n  seekTooltip: any\n  toSeek: number = 0\n  // isPlaying: boolean = false\n  isPaused: false;\n  isShowStatus = false;\n  constructor(\n    private ipcService: IpcService) { }\n\n  ngOnInit() {\n  }\n\n  updateProgressBar() {\n  }\n  /**\n   * Event for video player scrubber tooltip\n   */\n  mouseMove(e) {\n    this.seekTooltip = GeneralUtil.convertToHHMMSS(this.calculateSeekSeconds(e))\n  }\n\n  onSeek() {\n    this.onSeekValue.emit(this.toSeek);\n  }\n\n  togglePlay() {\n    this.onTogglePlay.emit()\n  }\n  toggleMute() {\n    this.onToggleMute.emit()\n  }\n  toggleFullScreen() {\n    this.onToggleFullScreen.emit()\n  }\n  volumeChange(val) {\n    this.onChangeVolume.emit(val);\n  }\n\n  toggleSubtitles(val: boolean) {\n    this.onToggleSubtitles.emit(val)\n  }\n\n  async changeCc() {\n    // let filePath = 'Aliens.Directors.Cut.1986.1080p.BRrip.x264.GAZ.YIFY.srt'\n    let filePath = ''\n    // let filePath = 'Cinema Paradiso-English.srt'\n    // filePath = '../../../../assets/tmp/' + filePath\n    filePath = await this.ipcService.changeSubtitle()\n    GeneralUtil.DEBUG.log('filePath', filePath)\n    this.onChangeSubtitleFile.emit(filePath);\n  }\n\n\n  changeFontColor(color: string) {\n    this.onChangeFontColor.emit(color);\n  }\n  changeFontSize(size: string) {\n    this.onChangeFontSize.emit(size);\n  }\n  changeBackgroundColor(color: string) {\n    this.onChangeBackgroundColor.emit(color);\n  }\n  changeBackgroundOpacity(percentage: string) {\n    this.onChangeBackgroundOpacity.emit(percentage);\n  }\n\n\n  private calculateSeekSeconds(val) {\n    const totalWidth = val.currentTarget.offsetWidth\n    const offsetX = val.offsetX\n    const percentage = GeneralUtil.getPercentage(offsetX, totalWidth)\n    this.toSeek = (percentage / 100) * this.videoTime.duration\n    return this.toSeek\n  }\n}\n\ninterface IVideoTime {\n  elapsed: number,\n  duration: number,\n  remaining: number\n}\n\nexport interface IProgressBar {\n  buffered: string,\n  played: string,\n}\n",
            "properties": [
                {
                    "name": "buffered",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 121
                },
                {
                    "name": "played",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 122
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IRating",
            "id": "interface-IRating-584d54738f93e2af94202069b5eddb4cab23bb2dfec2ff69f24ebaf881c252f94680b4cd6cec302796817692570a31bedafc5d74fed1cf6488a895dbf372e23d",
            "file": "src/app/models/interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IMdbMovieDetails {\n  awards?: string\n  backgroundPath: string;\n  belongsToCollection?: []\n  boxOffice?: string | number // tmdb:revenue(number)\n  budget?: number\n  country?: string\n  director?: string\n  dvd?: string // dvd release\n  genres?: string[] | string | IGenre[]\n  imdbId?: string\n  imdbRating?: string\n  imdbVotes?: string\n  isAdult?: boolean;\n  isAvailable?: boolean;\n  languages?: string[]\n  libraryInfo?: ILibraryInfo\n  metascore?: string // metacritic score\\\n  originalLanguage?: string // tmdb:\"en\",omdb:\"English\"\n  originalTitle?: string\n  plot?: string // plot or overview\n  popularity?: number\n  posterPath: string\n  production?: string // company; i.e. Walt Disney Pictures\n  rated?: string // rated or certificate\n  ratings?: IRating[]\n  releaseDate?: string // omdb:\"05 May 2017\"; tmdb:\"1999-10-15\"\n  releaseYear?: number | string\n  response: string\n  runtime?: string\n  starring?: string // Actors field in omdb\n  status?: string // released/Post\n  tagline?: string;\n  tmdbId?: number\n  title: string\n  type?: string // movie/tvmovie/series\n  video?: boolean; // unknown\n  // voteAverage: number; // tmdb votes\n  // voteCount: number; // tmdb votes\n  website?: string\n  writer?: string // omdb\n  [propName: string]: any;\n}\n\nexport interface IRating {\n  Source: string\n  Value: string\n}\n\nexport interface LibraryInfo {\n  tmdbId?: null | number | string\n  imdbID?: string\n  title?: string\n  year?: number\n  directoryList?: string[]\n  _id: string\n}\n\nexport interface MovieGenre {\n  id: number\n  code: string\n  description: string\n  isChecked: boolean\n}\n\nexport interface WatchList {\n  id: number\n  movieList: string[]\n}\n\nexport interface ILibraryInfo {\n  tmdbId?: null | number | string\n  imdbID?: string\n  title?: string\n  year?: number\n  directoryList?: string[]\n  _id: string\n}\n\nexport interface ICollection {\n  id: number,\n  name: string\n}\n\nexport interface IProductionCompany {\n  id: number;\n  logo_path: null | string;\n  name: string;\n  origin_country: string;\n}\n\nexport interface IProductionCountry {\n  iso_3166_1: string;\n  name: string;\n}\n\nexport interface ISpokenLanguage {\n  iso_639_1: string;\n  name: string;\n}\n\nexport interface IOmdbMovieDetail {\n  Title: string\n  Year?: string\n  Rated?: string\n  Released?: string // \"05 May 2017\"\n  Runtime?: string\n  Genre?: string\n  Director?: string\n  Writer?: string\n  Actors?: string\n  Plot?: string\n  Language?: string\n  Country?: string\n  Awards?: string\n  Poster?: string\n  Ratings?: IRating[]\n  Metascore?: string\n  imdbRating?: string\n  imdbVotes?: string\n  imdbID: string\n  Type?: string\n  DVD?: string\n  BoxOffice?: string\n  Production?: string\n  Website?: string\n  Response: string\n}\n\nexport interface ITmdbMovieDetail {\n  adult: boolean;\n  backdrop_path: string;\n  belongs_to_collection: null;\n  budget: number;\n  genres: IGenre[];\n  homepage: string;\n  id: number;\n  imdb_id: string;\n  original_language: string;\n  original_title: string;\n  overview: string;\n  popularity: number;\n  poster_path: string;\n  production_companies: IProductionCompany[];\n  production_countries: IProductionCountry[];\n  release_date: string;\n  revenue: number;\n  runtime: number;\n  spoken_languages: ISpokenLanguage[];\n  status: string;\n  tagline: string;\n  title: string;\n  video: boolean;\n  vote_average: number;\n  vote_count: number;\n}\n\nexport interface MdbMovieDetails {\n  adult?: boolean;\n  title: string\n  releaseYear?: string\n  releaseDate?: string\n  rated?: string // rated or certificate\n  runtime?: string\n  genres?: string\n  director?: string\n  writer?: string\n  Actors?: string\n  plot?: string // plot or overview\n  Language?: string\n  Country?: string\n  Awards?: string\n  Poster?: string\n  Ratings?: IRating[]\n  Metascore?: string\n  imdbRating?: string\n  imdbVotes?: string\n  imdbID: string\n  tmdbID: number\n  Type?: string\n  DVD?: string\n  BoxOffice?: string\n  Production?: string\n  website?: string\n  response: string\n  libraryInfo?: ILibraryInfo\n}\n\n// // adult: boolean;\n// //backdrop_path: string;\n// belongs_to_collection: null;\n// // budget: number;\n// genres: Genre[];\n// // homepage: string;\n// // id: number;\n// // imdb_id: string;\n// original_language: string;\n// original_title: string;\n// // overview: string;\n// // popularity: number;\n// // poster_path: string;\n// production_companies: ProductionCompany[];\n// production_countries: ProductionCountry[];\n// // release_date: string;\n// // revenue: number;\n// // runtime: number;\n// spoken_languages: SpokenLanguage[];\n// // status: string;\n// // tagline: string;\n// // title: string;\n// // video: boolean;\n// // vote_average: number;\n// // vote_count: number;\n\nexport interface ITmdbResultObject {\n  page: number;\n  total_results: number;\n  total_pages: number;\n  results: ITmdbResult[];\n}\n\nexport interface ITmdbResult {\n  popularity: number\n  vote_count: number\n  video: boolean\n  poster_path: string\n  id: number\n  adult: boolean\n  backdrop_path: string\n  original_language: string\n  original_title: string\n  genre_ids: number[]\n  title: string\n  vote_average: number\n  overview: string\n  release_date: string\n  isAvailable?: boolean\n  isHighlighted?: boolean\n}\n\nexport interface ILibraryMovie {\n  tmdbId?: number,\n  title: string,\n  year: number,\n  imdbId?: string,\n  directory: string[]\n}\n\nexport interface IGenre {\n  id: number\n  name: string\n}\n\nexport interface Credits {\n  id: number;\n  cast: CastElement[];\n  crew: Crew[];\n}\n\ninterface CastElement {\n  cast_id: number;\n  character: string;\n  credit_id: string;\n  gender: number;\n  id: number;\n  name: string;\n  order: number;\n  profile_path: null | string;\n}\n\ninterface Crew {\n  credit_id: string;\n  department: Department;\n  gender: number;\n  id: number;\n  job: string;\n  name: string;\n  profile_path: null | string;\n}\n\nexport enum Department {\n  Art = 'Art',\n  Camera = 'Camera',\n  CostumeMakeUp = 'Costume & Make-Up',\n  Crew = 'Crew',\n  Directing = 'Directing',\n  Editing = 'Editing',\n  Lighting = 'Lighting',\n  Production = 'Production',\n  Sound = 'Sound',\n  VisualEffects = 'Visual Effects',\n  Writing = 'Writing',\n}\n\nexport class MDBTorrent {\n  id?: string\n  name?: string\n  size?: string\n  hash: string\n  url?: string\n  quality?: string\n  type?: string\n  seeds?: number\n  peers?: number\n  sizeBytes?: number\n  added?: string\n  dateUploaded?: string\n  dateUploadedUnix?: number\n  isYts?: boolean\n  magnetLink?: string\n}\n\nexport class ITPBTorrent {\n  id?: number\n  name?: string\n  hash: string\n  sizeBytes?: number\n  added?: string\n}\n\nexport interface ISearch {\n  page: number\n}\n\nexport enum OmdbParameters {\n  ApiKey = 'apikey',\n  ImdbId = 'i',\n  Title = 't',\n  Type = 'type',\n  Year = 'y',\n  Plot = 'plot',\n  Return = 'r',\n  Callback = 'callback',\n  Version = 'v',\n}\n\nexport enum TmdbParameters {\n  ApiKey = 'api_key',\n  AppendToResponse = 'append_to_response',\n  Language = 'language',\n  Region = 'region',\n  SortBy = 'sort_by',\n  CertificationCountry = 'certification_country',\n  Certification = 'certification',\n  CertificationLess = 'certification.lte',\n  CertificationGreater = 'certification.gte',\n  IncludeAdult = 'include_adult',\n  IncludeVideo = 'include_video',\n  Page = 'page',\n  PrimaryReleaseYear = 'primary_release_year',\n  PrimaryReleaseDateGreater = 'primary_release_date.gte',\n  PrimaryReleaseDateLess = 'primary_release_date.lte',\n  ReleaseDateGreater = 'release_date.gte',\n  ReleaseDateLess = 'release_date.lte',\n  WithReleaseType = 'with_release_type',\n  Year = 'year',\n  VoteCountGreater = 'vote_count.gte',\n  VoteCountLess = 'vote_count.lte',\n  VoteAverageGreater = 'vote_average.gte',\n  VoteAverageLess = 'vote_average.lte',\n  WithCast = 'with_cast',\n  WithCrew = 'with_crew',\n  WithPeople = 'with_people',\n  WithCompanies = 'with_companies',\n  WithGenres = 'with_genres',\n  WithoutGenres = 'without_genres',\n  WithKeywords = 'with_keywords',\n  WithoutKeywords = 'without_keywords',\n  WithRuntimeGreater = 'with_runtime.gte',\n  WithRuntimeLess = 'with_runtime.lte',\n  WithOriginalLanguage = 'with_original_language',\n  WithWatchProviders = 'with_watch_providers',\n  WatchRegion = 'watch_region'\n}\n\nexport enum TmdbSearchMovieParameters {\n  ApiKey = 'api_key',\n  Language = 'language', // Pass a ISO 639 - 1 value to display translated data for the fields that support it. minLength: 2 pattern: ([a - z]{ 2 }) -([A - Z]{ 2 }) default: en - US\n  Query = 'query',\n  Page = 'page', // minimum: 1 maximum: 1000\n  IncludeAdult = 'include_adult',\n  Region = 'region',\n  // Specify a ISO 3166 - 1 code to filter release dates.Must be uppercase. pattern: ^ [A - Z]{ 2 } $\n  Year = 'year',\n  PrimaryReleaseYear = 'primary_release_year'\n}\n\nenum TmdbAppendToResponseParameters {\n  AccountStates = 'account_states',\n  Videos = 'videos',\n  Images = 'images',\n  Credits = 'credits',\n  Changes = 'changes',\n  Translations = 'translations',\n  Similar = 'similar',\n  ExternalIds = 'external_ids',\n  AlternativeTitles = 'alternative_titles',\n  Keywords = 'keywords',\n  Reviews = 'reviews',\n  Recommendations = 'recommendations',\n  ReleaseDates = 'release_dates',\n  Lists = 'lists'\n}\n\nenum TmdbReleaseTypes {\n  PREMIERE = 'Premiere',  // 1\n  THEATRICAL_LIMITED = 'Theatrical(limited)', // 2\n  THEATRICAL = 'Theatrical', // 3\n  DIGITAL = 'Digital', // 4\n  PHYSICAL = 'Physical', // 5\n  TV = 'TV', // 6\n}\n\nexport interface IPersonDetails {\n  birthday: string;\n  known_for_department: string;\n  id: number;\n  movie_credits?: IPersonCredits;\n  tv_credits?: IPersonCredits;\n  combined_credits?: IPersonCredits;\n  homepage?: any;\n  profile_path: string;\n  imdb_id: string;\n  deathday?: any;\n  images?: IImages;\n  external_ids?: IExternalids;\n  name: string;\n  also_known_as: string[];\n  biography: string;\n  adult: boolean;\n  gender: number;\n  place_of_birth: string;\n  popularity: number;\n}\n\nexport interface IPersonCredits {\n  cast: IPersonCastCrew[];\n  crew: IPersonCastCrew[];\n  id?: number;\n}\n\nexport interface IPersonCastCrew {\n  id?: number;\n  original_language: string;\n  episode_count?: number;\n  overview: string;\n  origin_country?: string[];\n  original_name?: string;\n  genre_ids: number[];\n  name?: string;\n  media_type: string;\n  poster_path: null | string;\n  first_air_date?: string;\n  vote_average: number;\n  vote_count: number;\n  character?: string;\n  backdrop_path: null | string;\n  popularity: number;\n  credit_id: string;\n  original_title?: string;\n  video?: boolean;\n  release_date?: string;\n  title?: string;\n  adult?: boolean;\n  department?: string;\n  job?: string;\n}\n\nexport interface IExternalids {\n  id?: number;\n  freebase_id: string;\n  instagram_id: string;\n  tvrage_id: number;\n  twitter_id: string;\n  freebase_mid: string;\n  imdb_id: string;\n  facebook_id: string;\n}\n\nexport interface IImages {\n  id?: number;\n  profiles: IProfile[];\n}\n\nexport interface IProfile {\n  iso_639_1?: any;\n  aspect_ratio: number;\n  vote_count: number;\n  height: number;\n  vote_average: number;\n  file_path: string;\n  width: number;\n}\n\nexport interface ICredits {\n  cast: ICast[];\n  crew: ICrew[];\n}\n\ninterface ICast {\n  poster_path?: string;\n  adult: boolean;\n  backdrop_path?: string;\n  vote_count: number;\n  video: boolean;\n  id: number;\n  media_type?: string;\n  popularity: number;\n  genre_ids: number[];\n  original_language: string;\n  title: string;\n  original_title: string;\n  release_date: string;\n  character: string;\n  vote_average: number;\n  overview: string;\n  credit_id: string;\n}\n\ninterface ICrew {\n  id: number;\n  department: string;\n  original_language: string;\n  original_title: string;\n  job: string;\n  overview: string;\n  genre_ids: number[];\n  video: boolean;\n  episode_count: number\n  media_type?: string;\n  credit_id: string;\n  poster_path?: string;\n  popularity: number;\n  backdrop_path?: string;\n  vote_count: number;\n  title: string;\n  adult: boolean;\n  vote_average: number;\n  release_date: string;\n}\n\nexport interface IUserSavedData {\n  id?: string,\n  title: string,\n  year: number,\n  tmdbId: number,\n}\n\nexport enum GenreCodes {\n  Action = 28,\n  Adventure = 12,\n  Animation = 16,\n  Comedy = 35,\n  Crime = 80,\n  Documentary = 99,\n  Drama = 18,\n  Family = 10751,\n  Fantasy = 14,\n  History = 36,\n  Horror = 27,\n  Music = 10402,\n  Mystery = 9648,\n  Romance = 10749,\n  ScienceFiction = 878,\n  TVMovie = 10770,\n  Thriller = 53,\n  War = 10752,\n  Western = 37,\n  // mdb reserved\n  FilmNoir = 20000,\n  // similar genre: Music id:10402\n  Musical = 20001,\n  News = 20002,\n  RealityTV = 20003,\n  // similar genre: Science Fiction id:878\n  SciFi = 20004,\n  // another media type\n  Short = 20005,\n  Sport = 20006,\n}\n\n\n\n/**\nexport enum Department {\n    Art = \"Art\",\n    Camera = \"Camera\",\n    CostumeMakeUp = \"Costume & Make-Up\",\n    Crew = \"Crew\",\n    Directing = \"Directing\",\n    Editing = \"Editing\",\n    Lighting = \"Lighting\",\n    Production = \"Production\",\n    Sound = \"Sound\",\n    VisualEffects = \"Visual Effects\",\n    Writing = \"Writing\",\n}\n\nexport interface ExternalIDS {\n    imdb_id:      string;\n    facebook_id:  null;\n    instagram_id: null;\n    twitter_id:   null;\n}\n\nexport interface Genre {\n    id:   number;\n    name: string;\n}\n\nexport interface Images {\n    backdrops: any[];\n    posters:   any[];\n}\n\nexport enum OriginalLanguage {\n    En = \"en\",\n    Es = \"es\",\n    Fr = \"fr\",\n}\n\nexport interface ProductionCompany {\n    id:             number;\n    logo_path:      string;\n    name:           string;\n    origin_country: string;\n}\n\nexport interface ProductionCountry {\n    iso_3166_1: string;\n    name:       string;\n}\n\nexport interface Recommendations {\n    page:          number;\n    results:       RecommendationsResult[];\n    total_pages:   number;\n    total_results: number;\n}\n\nexport interface RecommendationsResult {\n    id:                number;\n    video:             boolean;\n    vote_count:        number;\n    vote_average:      number;\n    title:             string;\n    release_date:      string;\n    original_language: OriginalLanguage;\n    original_title:    string;\n    genre_ids:         number[];\n    backdrop_path:     string;\n    adult:             boolean;\n    overview:          string;\n    poster_path:       string;\n    popularity:        number;\n}\n\nexport interface SpokenLanguage {\n    iso_639_1: OriginalLanguage;\n    name:      string;\n}\n\nexport interface Videos {\n    results: VideosResult[];\n}\n\nexport interface VideosResult {\n    id:         string;\n    iso_639_1:  OriginalLanguage;\n    iso_3166_1: string;\n    key:        string;\n    name:       string;\n    site:       string;\n    size:       number;\n    type:       string;\n}\n */\n\n",
            "properties": [
                {
                    "name": "Source",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "Value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 48
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IRawLibrary",
            "id": "interface-IRawLibrary-1fe741c1bd1cbf7dcb5ab651b5e2a2c1698d17be281716ce1ab4567a992d5520dc1c378f451304d3cc61240d75f5ce4cde0ba3b3567c3c1bfce3d16871d2e55e",
            "file": "src/app/services/library.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IUserSavedData } from '@models/interfaces';\nimport { environment } from '@environments/environment';\nimport { Injectable } from '@angular/core';\nimport { IpcService } from './ipc.service';\nimport { FirebaseService, CollectionName, FieldName, FirebaseOperator } from './firebase.service';\n\n@Injectable({ providedIn: 'root' })\nexport class LibraryService {\n\n  constructor(\n    private ipcService: IpcService,\n    private firebaseService: FirebaseService,\n  ) {\n\n  }\n\n  /**\n   * Opens a video stream to watch.\n   * @param id library id to open stream\n   * @returns stream link/url\n   */\n  async openVideoStream(id) {\n    // this.ipcService.playOfflineVideo(id) // commented to make way for torrent-play\n    return this.ipcService.playOfflineVideo(id)\n    // return new Promise((resolve, reject) => {\n    //   if (environment.runConfig.firebaseMode) {\n    //     this.firebaseService.getFromFirestore(CollectionName.Library, FieldName.TmdbId, FirebaseOperator.Equal, id).then(e => {\n    //       resolve(e)\n    //     }).catch(e => {\n    //       reject(e)\n    //     })\n    //     // })\n    //   } else {\n    //     this.ipcService.LibraryFile.toPromise().then(e => {\n    //       resolve(e)\n    //     })\n    //   }\n    // })\n  }\n\n  /**\n   * Gets movie library.\n   * @param id - tmdbId or imdbId\n   */\n  getMovieFromLibrary(id: number | string): Promise<any> {\n    const myFunction = environment.runConfig.firebaseMode ?\n      this.firebaseService.getFromFirestore(CollectionName.Library, FieldName.TmdbId, FirebaseOperator.Equal, id) :\n      this.ipcService.getMovieFromLibrary(id)\n    return myFunction\n  }\n\n  /**\n   * Gets multiple library using list. Movie(s) eventually becomes available in status.\n   * @param idList\n   */\n  getMoviesFromLibraryInList(idList: number[]): Promise<any> {\n    console.log('getting multiplevideos...', idList);\n    const myFunction = environment.runConfig.firebaseMode ?\n      this.firebaseService.getFromFirestoreMultiple(CollectionName.Library, FieldName.TmdbId, idList) :\n      this.ipcService.getMoviesFromLibraryInList(idList)\n    return myFunction\n  }\n\n  /**\n   * Gets first page of list. Gets multiple videos. Movie(s) eventually becomes available in status.\n   */\n  getLibraryPaginatedFirstPage(): Promise<any> {\n    const myFunction = environment.runConfig.firebaseMode ? null : this.ipcService.getMultiplePaginatedFirst(CollectionName.Library, FieldName.TmdbId, 20)\n    // this.firebaseService.getFromFirestoreMultiplePaginated(CollectionName.Library, FieldName.TmdbId, 20)\n    return myFunction\n  }\n\n  /**\n   * Gets multiple library.\n   * @param lastVal the last value to start with.\n   */\n  getLibraryPaginated(lastVal: string | number): Promise<any> {\n    console.log('getVideoPaginated...', lastVal);\n    const myFunction = environment.runConfig.firebaseMode ?\n      this.firebaseService.getFromFirestoreMultiplePaginated(CollectionName.Library, FieldName.TmdbId, 20, lastVal) :\n      this.ipcService.getMultiplePaginated(CollectionName.Library, FieldName.TmdbId, 20, lastVal)\n    return myFunction\n  }\n\n}\n\nexport interface IVideo extends IUserSavedData {\n  tmdbId: number,\n  imdbId?: string,\n  title: string,\n  year: number,\n  id: string,\n  videoUrl: string,\n  filePath?: string,\n  cre8Ts?: number, // create timestamp\n  timestamp?: number,\n}\n\nexport interface IRawLibrary {\n  fullFilePath: string,\n  title: string,\n  year: number,\n  tmdbId: number,\n  _id: string\n}\n\ninterface Library {\n  type: 'movie' | 'video' | 'audio' | 'music' | 'podcast' | 'videogame',\n  source: 'local' | 'online',\n  id: string,\n  title: string\n}\n",
            "properties": [
                {
                    "name": "_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 104
                },
                {
                    "name": "fullFilePath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 100
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 101
                },
                {
                    "name": "tmdbId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 103
                },
                {
                    "name": "year",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 102
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IScanFrequency",
            "id": "interface-IScanFrequency-762aab3f13408cf543f5fe806389a08ae4f1e3cd13bf634d1cce11d647e39e349b0a2025d4789d00f83084ebbe025b98dbedd097bcba540fc5f3cd239b0f3d7e",
            "file": "src/app/models/preferences.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IPreferences {\n  isDarkMode: boolean\n  isEnableCache: boolean\n  libraryFolders: string[]\n  torrentSeedRatio: number\n  torrentRatio?: any\n  subtitle: ISubtitlePreferences\n  hotKeys: IHotkeys\n  autoPlayTrailer: boolean\n  playTrailerBeforeShow: boolean\n  playBack: IPlaybackPreferences\n  library: ILibraryPreferences,\n  streamPreferences?: IStreamPreferences\n  isAutoScan: boolean\n  autoScanFrequencyUnit: string\n  autoScanFrequencyValue: number\n}\n\ninterface IStreamPreferences {\n  downloadSpeed: number // in bps\n}\ninterface ILibraryPreferences {\n  libraryPathList: string[]\n  scanFrenquency: IScanFrequency\n}\n\nexport interface IPlaybackPreferences {\n  preferredQuality: Quality\n  preferredMode: 'torrent' | 'offline'\n  repeat: boolean\n  volume: number\n}\n\nexport enum Quality {\n  SD = '720p',\n  HD = '1080p',\n  FHD = '1440p',\n  FourK = '4k'\n}\ninterface IScanFrequency {\n  isScanAutomatically: boolean\n  frequencyUnit: string\n  frequencyValue: number\n}\n\ninterface IHotkeys {\n  playerHotkeys?: any\n\n}\n\nexport interface ISubtitlePreferences {\n  synchronization: number;\n  fontColor: string;\n  fontSize: string;\n  fontOpacity?: number;\n  textShadow: string;\n  fontFamily?: string;\n  backgroundColor: string;\n  backgroundOpacity: string;\n}\n",
            "properties": [
                {
                    "name": "frequencyUnit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "frequencyValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "isScanAutomatically",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 42
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ISearch",
            "id": "interface-ISearch-584d54738f93e2af94202069b5eddb4cab23bb2dfec2ff69f24ebaf881c252f94680b4cd6cec302796817692570a31bedafc5d74fed1cf6488a895dbf372e23d",
            "file": "src/app/models/interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IMdbMovieDetails {\n  awards?: string\n  backgroundPath: string;\n  belongsToCollection?: []\n  boxOffice?: string | number // tmdb:revenue(number)\n  budget?: number\n  country?: string\n  director?: string\n  dvd?: string // dvd release\n  genres?: string[] | string | IGenre[]\n  imdbId?: string\n  imdbRating?: string\n  imdbVotes?: string\n  isAdult?: boolean;\n  isAvailable?: boolean;\n  languages?: string[]\n  libraryInfo?: ILibraryInfo\n  metascore?: string // metacritic score\\\n  originalLanguage?: string // tmdb:\"en\",omdb:\"English\"\n  originalTitle?: string\n  plot?: string // plot or overview\n  popularity?: number\n  posterPath: string\n  production?: string // company; i.e. Walt Disney Pictures\n  rated?: string // rated or certificate\n  ratings?: IRating[]\n  releaseDate?: string // omdb:\"05 May 2017\"; tmdb:\"1999-10-15\"\n  releaseYear?: number | string\n  response: string\n  runtime?: string\n  starring?: string // Actors field in omdb\n  status?: string // released/Post\n  tagline?: string;\n  tmdbId?: number\n  title: string\n  type?: string // movie/tvmovie/series\n  video?: boolean; // unknown\n  // voteAverage: number; // tmdb votes\n  // voteCount: number; // tmdb votes\n  website?: string\n  writer?: string // omdb\n  [propName: string]: any;\n}\n\nexport interface IRating {\n  Source: string\n  Value: string\n}\n\nexport interface LibraryInfo {\n  tmdbId?: null | number | string\n  imdbID?: string\n  title?: string\n  year?: number\n  directoryList?: string[]\n  _id: string\n}\n\nexport interface MovieGenre {\n  id: number\n  code: string\n  description: string\n  isChecked: boolean\n}\n\nexport interface WatchList {\n  id: number\n  movieList: string[]\n}\n\nexport interface ILibraryInfo {\n  tmdbId?: null | number | string\n  imdbID?: string\n  title?: string\n  year?: number\n  directoryList?: string[]\n  _id: string\n}\n\nexport interface ICollection {\n  id: number,\n  name: string\n}\n\nexport interface IProductionCompany {\n  id: number;\n  logo_path: null | string;\n  name: string;\n  origin_country: string;\n}\n\nexport interface IProductionCountry {\n  iso_3166_1: string;\n  name: string;\n}\n\nexport interface ISpokenLanguage {\n  iso_639_1: string;\n  name: string;\n}\n\nexport interface IOmdbMovieDetail {\n  Title: string\n  Year?: string\n  Rated?: string\n  Released?: string // \"05 May 2017\"\n  Runtime?: string\n  Genre?: string\n  Director?: string\n  Writer?: string\n  Actors?: string\n  Plot?: string\n  Language?: string\n  Country?: string\n  Awards?: string\n  Poster?: string\n  Ratings?: IRating[]\n  Metascore?: string\n  imdbRating?: string\n  imdbVotes?: string\n  imdbID: string\n  Type?: string\n  DVD?: string\n  BoxOffice?: string\n  Production?: string\n  Website?: string\n  Response: string\n}\n\nexport interface ITmdbMovieDetail {\n  adult: boolean;\n  backdrop_path: string;\n  belongs_to_collection: null;\n  budget: number;\n  genres: IGenre[];\n  homepage: string;\n  id: number;\n  imdb_id: string;\n  original_language: string;\n  original_title: string;\n  overview: string;\n  popularity: number;\n  poster_path: string;\n  production_companies: IProductionCompany[];\n  production_countries: IProductionCountry[];\n  release_date: string;\n  revenue: number;\n  runtime: number;\n  spoken_languages: ISpokenLanguage[];\n  status: string;\n  tagline: string;\n  title: string;\n  video: boolean;\n  vote_average: number;\n  vote_count: number;\n}\n\nexport interface MdbMovieDetails {\n  adult?: boolean;\n  title: string\n  releaseYear?: string\n  releaseDate?: string\n  rated?: string // rated or certificate\n  runtime?: string\n  genres?: string\n  director?: string\n  writer?: string\n  Actors?: string\n  plot?: string // plot or overview\n  Language?: string\n  Country?: string\n  Awards?: string\n  Poster?: string\n  Ratings?: IRating[]\n  Metascore?: string\n  imdbRating?: string\n  imdbVotes?: string\n  imdbID: string\n  tmdbID: number\n  Type?: string\n  DVD?: string\n  BoxOffice?: string\n  Production?: string\n  website?: string\n  response: string\n  libraryInfo?: ILibraryInfo\n}\n\n// // adult: boolean;\n// //backdrop_path: string;\n// belongs_to_collection: null;\n// // budget: number;\n// genres: Genre[];\n// // homepage: string;\n// // id: number;\n// // imdb_id: string;\n// original_language: string;\n// original_title: string;\n// // overview: string;\n// // popularity: number;\n// // poster_path: string;\n// production_companies: ProductionCompany[];\n// production_countries: ProductionCountry[];\n// // release_date: string;\n// // revenue: number;\n// // runtime: number;\n// spoken_languages: SpokenLanguage[];\n// // status: string;\n// // tagline: string;\n// // title: string;\n// // video: boolean;\n// // vote_average: number;\n// // vote_count: number;\n\nexport interface ITmdbResultObject {\n  page: number;\n  total_results: number;\n  total_pages: number;\n  results: ITmdbResult[];\n}\n\nexport interface ITmdbResult {\n  popularity: number\n  vote_count: number\n  video: boolean\n  poster_path: string\n  id: number\n  adult: boolean\n  backdrop_path: string\n  original_language: string\n  original_title: string\n  genre_ids: number[]\n  title: string\n  vote_average: number\n  overview: string\n  release_date: string\n  isAvailable?: boolean\n  isHighlighted?: boolean\n}\n\nexport interface ILibraryMovie {\n  tmdbId?: number,\n  title: string,\n  year: number,\n  imdbId?: string,\n  directory: string[]\n}\n\nexport interface IGenre {\n  id: number\n  name: string\n}\n\nexport interface Credits {\n  id: number;\n  cast: CastElement[];\n  crew: Crew[];\n}\n\ninterface CastElement {\n  cast_id: number;\n  character: string;\n  credit_id: string;\n  gender: number;\n  id: number;\n  name: string;\n  order: number;\n  profile_path: null | string;\n}\n\ninterface Crew {\n  credit_id: string;\n  department: Department;\n  gender: number;\n  id: number;\n  job: string;\n  name: string;\n  profile_path: null | string;\n}\n\nexport enum Department {\n  Art = 'Art',\n  Camera = 'Camera',\n  CostumeMakeUp = 'Costume & Make-Up',\n  Crew = 'Crew',\n  Directing = 'Directing',\n  Editing = 'Editing',\n  Lighting = 'Lighting',\n  Production = 'Production',\n  Sound = 'Sound',\n  VisualEffects = 'Visual Effects',\n  Writing = 'Writing',\n}\n\nexport class MDBTorrent {\n  id?: string\n  name?: string\n  size?: string\n  hash: string\n  url?: string\n  quality?: string\n  type?: string\n  seeds?: number\n  peers?: number\n  sizeBytes?: number\n  added?: string\n  dateUploaded?: string\n  dateUploadedUnix?: number\n  isYts?: boolean\n  magnetLink?: string\n}\n\nexport class ITPBTorrent {\n  id?: number\n  name?: string\n  hash: string\n  sizeBytes?: number\n  added?: string\n}\n\nexport interface ISearch {\n  page: number\n}\n\nexport enum OmdbParameters {\n  ApiKey = 'apikey',\n  ImdbId = 'i',\n  Title = 't',\n  Type = 'type',\n  Year = 'y',\n  Plot = 'plot',\n  Return = 'r',\n  Callback = 'callback',\n  Version = 'v',\n}\n\nexport enum TmdbParameters {\n  ApiKey = 'api_key',\n  AppendToResponse = 'append_to_response',\n  Language = 'language',\n  Region = 'region',\n  SortBy = 'sort_by',\n  CertificationCountry = 'certification_country',\n  Certification = 'certification',\n  CertificationLess = 'certification.lte',\n  CertificationGreater = 'certification.gte',\n  IncludeAdult = 'include_adult',\n  IncludeVideo = 'include_video',\n  Page = 'page',\n  PrimaryReleaseYear = 'primary_release_year',\n  PrimaryReleaseDateGreater = 'primary_release_date.gte',\n  PrimaryReleaseDateLess = 'primary_release_date.lte',\n  ReleaseDateGreater = 'release_date.gte',\n  ReleaseDateLess = 'release_date.lte',\n  WithReleaseType = 'with_release_type',\n  Year = 'year',\n  VoteCountGreater = 'vote_count.gte',\n  VoteCountLess = 'vote_count.lte',\n  VoteAverageGreater = 'vote_average.gte',\n  VoteAverageLess = 'vote_average.lte',\n  WithCast = 'with_cast',\n  WithCrew = 'with_crew',\n  WithPeople = 'with_people',\n  WithCompanies = 'with_companies',\n  WithGenres = 'with_genres',\n  WithoutGenres = 'without_genres',\n  WithKeywords = 'with_keywords',\n  WithoutKeywords = 'without_keywords',\n  WithRuntimeGreater = 'with_runtime.gte',\n  WithRuntimeLess = 'with_runtime.lte',\n  WithOriginalLanguage = 'with_original_language',\n  WithWatchProviders = 'with_watch_providers',\n  WatchRegion = 'watch_region'\n}\n\nexport enum TmdbSearchMovieParameters {\n  ApiKey = 'api_key',\n  Language = 'language', // Pass a ISO 639 - 1 value to display translated data for the fields that support it. minLength: 2 pattern: ([a - z]{ 2 }) -([A - Z]{ 2 }) default: en - US\n  Query = 'query',\n  Page = 'page', // minimum: 1 maximum: 1000\n  IncludeAdult = 'include_adult',\n  Region = 'region',\n  // Specify a ISO 3166 - 1 code to filter release dates.Must be uppercase. pattern: ^ [A - Z]{ 2 } $\n  Year = 'year',\n  PrimaryReleaseYear = 'primary_release_year'\n}\n\nenum TmdbAppendToResponseParameters {\n  AccountStates = 'account_states',\n  Videos = 'videos',\n  Images = 'images',\n  Credits = 'credits',\n  Changes = 'changes',\n  Translations = 'translations',\n  Similar = 'similar',\n  ExternalIds = 'external_ids',\n  AlternativeTitles = 'alternative_titles',\n  Keywords = 'keywords',\n  Reviews = 'reviews',\n  Recommendations = 'recommendations',\n  ReleaseDates = 'release_dates',\n  Lists = 'lists'\n}\n\nenum TmdbReleaseTypes {\n  PREMIERE = 'Premiere',  // 1\n  THEATRICAL_LIMITED = 'Theatrical(limited)', // 2\n  THEATRICAL = 'Theatrical', // 3\n  DIGITAL = 'Digital', // 4\n  PHYSICAL = 'Physical', // 5\n  TV = 'TV', // 6\n}\n\nexport interface IPersonDetails {\n  birthday: string;\n  known_for_department: string;\n  id: number;\n  movie_credits?: IPersonCredits;\n  tv_credits?: IPersonCredits;\n  combined_credits?: IPersonCredits;\n  homepage?: any;\n  profile_path: string;\n  imdb_id: string;\n  deathday?: any;\n  images?: IImages;\n  external_ids?: IExternalids;\n  name: string;\n  also_known_as: string[];\n  biography: string;\n  adult: boolean;\n  gender: number;\n  place_of_birth: string;\n  popularity: number;\n}\n\nexport interface IPersonCredits {\n  cast: IPersonCastCrew[];\n  crew: IPersonCastCrew[];\n  id?: number;\n}\n\nexport interface IPersonCastCrew {\n  id?: number;\n  original_language: string;\n  episode_count?: number;\n  overview: string;\n  origin_country?: string[];\n  original_name?: string;\n  genre_ids: number[];\n  name?: string;\n  media_type: string;\n  poster_path: null | string;\n  first_air_date?: string;\n  vote_average: number;\n  vote_count: number;\n  character?: string;\n  backdrop_path: null | string;\n  popularity: number;\n  credit_id: string;\n  original_title?: string;\n  video?: boolean;\n  release_date?: string;\n  title?: string;\n  adult?: boolean;\n  department?: string;\n  job?: string;\n}\n\nexport interface IExternalids {\n  id?: number;\n  freebase_id: string;\n  instagram_id: string;\n  tvrage_id: number;\n  twitter_id: string;\n  freebase_mid: string;\n  imdb_id: string;\n  facebook_id: string;\n}\n\nexport interface IImages {\n  id?: number;\n  profiles: IProfile[];\n}\n\nexport interface IProfile {\n  iso_639_1?: any;\n  aspect_ratio: number;\n  vote_count: number;\n  height: number;\n  vote_average: number;\n  file_path: string;\n  width: number;\n}\n\nexport interface ICredits {\n  cast: ICast[];\n  crew: ICrew[];\n}\n\ninterface ICast {\n  poster_path?: string;\n  adult: boolean;\n  backdrop_path?: string;\n  vote_count: number;\n  video: boolean;\n  id: number;\n  media_type?: string;\n  popularity: number;\n  genre_ids: number[];\n  original_language: string;\n  title: string;\n  original_title: string;\n  release_date: string;\n  character: string;\n  vote_average: number;\n  overview: string;\n  credit_id: string;\n}\n\ninterface ICrew {\n  id: number;\n  department: string;\n  original_language: string;\n  original_title: string;\n  job: string;\n  overview: string;\n  genre_ids: number[];\n  video: boolean;\n  episode_count: number\n  media_type?: string;\n  credit_id: string;\n  poster_path?: string;\n  popularity: number;\n  backdrop_path?: string;\n  vote_count: number;\n  title: string;\n  adult: boolean;\n  vote_average: number;\n  release_date: string;\n}\n\nexport interface IUserSavedData {\n  id?: string,\n  title: string,\n  year: number,\n  tmdbId: number,\n}\n\nexport enum GenreCodes {\n  Action = 28,\n  Adventure = 12,\n  Animation = 16,\n  Comedy = 35,\n  Crime = 80,\n  Documentary = 99,\n  Drama = 18,\n  Family = 10751,\n  Fantasy = 14,\n  History = 36,\n  Horror = 27,\n  Music = 10402,\n  Mystery = 9648,\n  Romance = 10749,\n  ScienceFiction = 878,\n  TVMovie = 10770,\n  Thriller = 53,\n  War = 10752,\n  Western = 37,\n  // mdb reserved\n  FilmNoir = 20000,\n  // similar genre: Music id:10402\n  Musical = 20001,\n  News = 20002,\n  RealityTV = 20003,\n  // similar genre: Science Fiction id:878\n  SciFi = 20004,\n  // another media type\n  Short = 20005,\n  Sport = 20006,\n}\n\n\n\n/**\nexport enum Department {\n    Art = \"Art\",\n    Camera = \"Camera\",\n    CostumeMakeUp = \"Costume & Make-Up\",\n    Crew = \"Crew\",\n    Directing = \"Directing\",\n    Editing = \"Editing\",\n    Lighting = \"Lighting\",\n    Production = \"Production\",\n    Sound = \"Sound\",\n    VisualEffects = \"Visual Effects\",\n    Writing = \"Writing\",\n}\n\nexport interface ExternalIDS {\n    imdb_id:      string;\n    facebook_id:  null;\n    instagram_id: null;\n    twitter_id:   null;\n}\n\nexport interface Genre {\n    id:   number;\n    name: string;\n}\n\nexport interface Images {\n    backdrops: any[];\n    posters:   any[];\n}\n\nexport enum OriginalLanguage {\n    En = \"en\",\n    Es = \"es\",\n    Fr = \"fr\",\n}\n\nexport interface ProductionCompany {\n    id:             number;\n    logo_path:      string;\n    name:           string;\n    origin_country: string;\n}\n\nexport interface ProductionCountry {\n    iso_3166_1: string;\n    name:       string;\n}\n\nexport interface Recommendations {\n    page:          number;\n    results:       RecommendationsResult[];\n    total_pages:   number;\n    total_results: number;\n}\n\nexport interface RecommendationsResult {\n    id:                number;\n    video:             boolean;\n    vote_count:        number;\n    vote_average:      number;\n    title:             string;\n    release_date:      string;\n    original_language: OriginalLanguage;\n    original_title:    string;\n    genre_ids:         number[];\n    backdrop_path:     string;\n    adult:             boolean;\n    overview:          string;\n    poster_path:       string;\n    popularity:        number;\n}\n\nexport interface SpokenLanguage {\n    iso_639_1: OriginalLanguage;\n    name:      string;\n}\n\nexport interface Videos {\n    results: VideosResult[];\n}\n\nexport interface VideosResult {\n    id:         string;\n    iso_639_1:  OriginalLanguage;\n    iso_3166_1: string;\n    key:        string;\n    name:       string;\n    site:       string;\n    size:       number;\n    type:       string;\n}\n */\n\n",
            "properties": [
                {
                    "name": "page",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 323
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ISearchQuery",
            "id": "interface-ISearchQuery-af609ff57db56d9ca4e20e81287c6db91685feed74f697eae4d9971f10b44eb92366f91c85690a6e8ec75b8145c6195eeb72d8c04d960d850c2150460d746a12",
            "file": "src/app/core/components/top-navigation/top-navigation.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\nimport { Observable } from 'rxjs'\nimport { IOmdbMovieDetail, MovieGenre, IGenre } from '@models/interfaces';\nimport { MOVIES, MOVIEGENRES } from '../../../mock-data';\nimport { STRING_REGEX_IMDB_ID } from '@shared/constants';\nimport { DataService } from '@services/data.service'\nimport { MovieService } from '@services/movie/movie.service'\nimport { IpcService } from '@services/ipc.service'\nimport { Router, ActivatedRoute } from '@angular/router'\nimport { Location } from '@angular/common'\nimport { environment } from '@environments/environment';\nimport { map, startWith } from 'rxjs/operators';\nimport { FormControl } from '@angular/forms';\n\nenum STATUS {\n  login = 'LOGIN',\n  logout = 'LOGOUT'\n}\n\n@Component({\n  selector: 'app-top-navigation',\n  templateUrl: './top-navigation.component.html',\n  styleUrls: ['./top-navigation.component.scss']\n})\nexport class TopNavigationComponent implements OnInit {\n  @Input() data: Observable<any>\n  constructor(\n    private dataService: DataService,\n    // private firebaseService: FirebaseService,\n    private ipcService: IpcService,\n    private movieService: MovieService,\n    private router: Router,\n    private activatedRoute: ActivatedRoute,\n    private location: Location) { }\n\n  isElectron = environment.runConfig.electron\n  status = 'LOGIN'\n  browserConnection = navigator.onLine;\n  selectedMovie: IOmdbMovieDetail\n  numbers;\n  currentYear = new Date().getFullYear()\n  genres = ['Action', 'Adventure', 'Documentary', 'Drama', 'Horror', 'Sci-Fi', 'Thriller'];\n  movieGenres = MOVIEGENRES;\n  types = ['TV Series', 'Movie', 'Short'];\n  searchQuery: ISearchQuery = {\n    query: '',\n    yearFrom: 1969,\n    yearTo: 2018,\n    genres: this.movieGenres,\n    type: 'TV Series',\n    isAvailable: 'true',\n    availability: '',\n    sortBy: ''\n  };\n  movies = MOVIES;\n  selectedMovies = []\n  isHighlighted = false\n  numberOfPages = 1\n  numberOfResults = 0\n  currentPage = 1\n  currentSearchQuery = ''\n  hasSearchResults = false\n  isSearchDirty = false\n  searchHistoryList = []\n  filteredOptions: Observable<string[]>;\n  SEARCH_HISTORY_MAX_LENGTH = 8\n  decadesList = []\n  voteAverageList = []\n  isSignedIn = false\n  lastQuery = ''\n\n  myControl = new FormControl();\n  ngOnInit() {\n    const e = localStorage.getItem('user')\n    // this.getSearchHistoryList()\n    if (e === null) {\n      this.status = 'LOGIN'\n      this.isSignedIn = false\n    } else {\n      this.isSignedIn = true\n      this.status = ''\n    }\n    this.filteredOptions = this.myControl.valueChanges.pipe(\n      startWith(''),\n      map(value => this._filter(value))\n    );\n  }\n  private _filter(value: string): string[] {\n    const filterValue = value.toLowerCase();\n\n    return this.searchHistoryList.filter(option => option.toLowerCase().indexOf(filterValue) === 0);\n  }\n\n  getSearchHistoryList() {\n    // })\n    // this.ipcService.call(this.ipcService.IPCCommand.GetSearchList)\n    // this.ipcService.searchList.subscribe(data => {\n    //   this.searchHistoryList = data\n    //   console.log('DATA:', data)\n    // })\n  }\n\n  /**\n   * Go to previous location\n   */\n  navigateBack() {\n    this.location.back()\n  }\n\n  /**\n   * Opens advanced search options.\n   */\n  onAdvancedSearch() {\n    this.router.navigate([`/advanced-find`], { relativeTo: this.activatedRoute });\n  }\n\n  /**\n   * Initialize search\n   */\n  onSearch(val: string) {\n    val = val.trim()\n    if (this.lastQuery === val && this.router.url === '/results') {\n      return\n    }\n    this.lastQuery = val\n    this.searchHistoryList.unshift(val)\n    this.removeDuplicate(val);\n    this.searchHistoryList.splice(this.searchHistoryList.indexOf(val), 1)\n    console.log(this.searchHistoryList);\n    if (this.searchHistoryList.length >= this.SEARCH_HISTORY_MAX_LENGTH) {\n      // this.searchHistoryList = this.searchHistoryList.splice(1)\n      this.searchHistoryList = this.searchHistoryList.slice(0, this.SEARCH_HISTORY_MAX_LENGTH)\n    }\n    const enteredQuery = val\n    // this.isSearchDirty = true\n    // this.currentPage = 1\n    // this.numberOfPages = 1\n    // this.numberOfResults = 0\n    // this.currentSearchQuery = enteredQuery\n    // // tt0092099 example\n\n    this.searchHistoryList.unshift(val);\n    const REGEX_IMDB_ID = new RegExp(STRING_REGEX_IMDB_ID, `gi`)\n    if (enteredQuery.match(REGEX_IMDB_ID)) {\n      this.searchByImdbId(enteredQuery)\n    } else {\n      this.searchByTitle(enteredQuery)\n    }\n  }\n\n  /**\n   * Searches movie by imdb id and redirects if there are results\n   * @param imdbId imdb id to search\n   */\n  searchByImdbId(imdbId: string) {\n    this.movieService.getMovieByImdbId(imdbId).subscribe(data => {\n      if (data.Response !== 'False') {\n        this.router.navigate([`/details/${imdbId}`], { relativeTo: this.activatedRoute });\n      } else {\n        this.hasSearchResults = false\n        // insert code for not found\n      }\n    })\n  }\n\n  /**\n   * Searches by title\n   * @param enteredQuery query to search\n   */\n  searchByTitle(enteredQuery: string) {\n    // this.dataService.currentSearchQuery = enteredQuery\n    if (this.searchQuery && this.searchQuery.query.length > 0) {\n      this.dataService.updateSearchQuery(this.searchQuery)\n      this.router.navigate([`/results`], { relativeTo: this.activatedRoute });\n    }\n  }\n\n  openProfile() {\n\n  }\n\n  signOut() {\n    // this.firebaseService.signOut()\n  }\n\n  onMinimize() {\n    this.ipcService.minimizeWindow()\n  }\n  onRestore() {\n    this.ipcService.minimizeRestoreWindow()\n  }\n  onExit() {\n    this.ipcService.exitApp()\n  }\n\n  private removeDuplicate(val: string) {\n    let result = this.searchHistoryList.filter((option, index) => {\n      console.log('option: ', option);\n      return this.searchHistoryList.indexOf(option) === index;\n    });\n    this.searchHistoryList = result;\n  }\n}\n\nexport interface ISearchQuery {\n  query: string,\n  yearFrom: number,\n  yearTo: number,\n  genres: MovieGenre[],\n  type: string,\n  isAvailable: string,\n  availability: string, // all, offline, netflix\n  ratingCount?: number,\n  ratingAverage?: number,\n  ratingAverageFrom?: number,\n  ratingAverageTo?: number,\n  sortBy: string,\n}\n\nexport interface ITmdbSearchQuery {\n  keywords: string,\n  decade: number\n  yearTo: number,\n  genres: IGenre[],\n}\n",
            "properties": [
                {
                    "name": "availability",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 213
                },
                {
                    "name": "genres",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MovieGenre[]",
                    "optional": false,
                    "description": "",
                    "line": 210
                },
                {
                    "name": "isAvailable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 212
                },
                {
                    "name": "query",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 207
                },
                {
                    "name": "ratingAverage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 215
                },
                {
                    "name": "ratingAverageFrom",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 216
                },
                {
                    "name": "ratingAverageTo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 217
                },
                {
                    "name": "ratingCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 214
                },
                {
                    "name": "sortBy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 218
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 211
                },
                {
                    "name": "yearFrom",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 208
                },
                {
                    "name": "yearTo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 209
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ISpokenLanguage",
            "id": "interface-ISpokenLanguage-584d54738f93e2af94202069b5eddb4cab23bb2dfec2ff69f24ebaf881c252f94680b4cd6cec302796817692570a31bedafc5d74fed1cf6488a895dbf372e23d",
            "file": "src/app/models/interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IMdbMovieDetails {\n  awards?: string\n  backgroundPath: string;\n  belongsToCollection?: []\n  boxOffice?: string | number // tmdb:revenue(number)\n  budget?: number\n  country?: string\n  director?: string\n  dvd?: string // dvd release\n  genres?: string[] | string | IGenre[]\n  imdbId?: string\n  imdbRating?: string\n  imdbVotes?: string\n  isAdult?: boolean;\n  isAvailable?: boolean;\n  languages?: string[]\n  libraryInfo?: ILibraryInfo\n  metascore?: string // metacritic score\\\n  originalLanguage?: string // tmdb:\"en\",omdb:\"English\"\n  originalTitle?: string\n  plot?: string // plot or overview\n  popularity?: number\n  posterPath: string\n  production?: string // company; i.e. Walt Disney Pictures\n  rated?: string // rated or certificate\n  ratings?: IRating[]\n  releaseDate?: string // omdb:\"05 May 2017\"; tmdb:\"1999-10-15\"\n  releaseYear?: number | string\n  response: string\n  runtime?: string\n  starring?: string // Actors field in omdb\n  status?: string // released/Post\n  tagline?: string;\n  tmdbId?: number\n  title: string\n  type?: string // movie/tvmovie/series\n  video?: boolean; // unknown\n  // voteAverage: number; // tmdb votes\n  // voteCount: number; // tmdb votes\n  website?: string\n  writer?: string // omdb\n  [propName: string]: any;\n}\n\nexport interface IRating {\n  Source: string\n  Value: string\n}\n\nexport interface LibraryInfo {\n  tmdbId?: null | number | string\n  imdbID?: string\n  title?: string\n  year?: number\n  directoryList?: string[]\n  _id: string\n}\n\nexport interface MovieGenre {\n  id: number\n  code: string\n  description: string\n  isChecked: boolean\n}\n\nexport interface WatchList {\n  id: number\n  movieList: string[]\n}\n\nexport interface ILibraryInfo {\n  tmdbId?: null | number | string\n  imdbID?: string\n  title?: string\n  year?: number\n  directoryList?: string[]\n  _id: string\n}\n\nexport interface ICollection {\n  id: number,\n  name: string\n}\n\nexport interface IProductionCompany {\n  id: number;\n  logo_path: null | string;\n  name: string;\n  origin_country: string;\n}\n\nexport interface IProductionCountry {\n  iso_3166_1: string;\n  name: string;\n}\n\nexport interface ISpokenLanguage {\n  iso_639_1: string;\n  name: string;\n}\n\nexport interface IOmdbMovieDetail {\n  Title: string\n  Year?: string\n  Rated?: string\n  Released?: string // \"05 May 2017\"\n  Runtime?: string\n  Genre?: string\n  Director?: string\n  Writer?: string\n  Actors?: string\n  Plot?: string\n  Language?: string\n  Country?: string\n  Awards?: string\n  Poster?: string\n  Ratings?: IRating[]\n  Metascore?: string\n  imdbRating?: string\n  imdbVotes?: string\n  imdbID: string\n  Type?: string\n  DVD?: string\n  BoxOffice?: string\n  Production?: string\n  Website?: string\n  Response: string\n}\n\nexport interface ITmdbMovieDetail {\n  adult: boolean;\n  backdrop_path: string;\n  belongs_to_collection: null;\n  budget: number;\n  genres: IGenre[];\n  homepage: string;\n  id: number;\n  imdb_id: string;\n  original_language: string;\n  original_title: string;\n  overview: string;\n  popularity: number;\n  poster_path: string;\n  production_companies: IProductionCompany[];\n  production_countries: IProductionCountry[];\n  release_date: string;\n  revenue: number;\n  runtime: number;\n  spoken_languages: ISpokenLanguage[];\n  status: string;\n  tagline: string;\n  title: string;\n  video: boolean;\n  vote_average: number;\n  vote_count: number;\n}\n\nexport interface MdbMovieDetails {\n  adult?: boolean;\n  title: string\n  releaseYear?: string\n  releaseDate?: string\n  rated?: string // rated or certificate\n  runtime?: string\n  genres?: string\n  director?: string\n  writer?: string\n  Actors?: string\n  plot?: string // plot or overview\n  Language?: string\n  Country?: string\n  Awards?: string\n  Poster?: string\n  Ratings?: IRating[]\n  Metascore?: string\n  imdbRating?: string\n  imdbVotes?: string\n  imdbID: string\n  tmdbID: number\n  Type?: string\n  DVD?: string\n  BoxOffice?: string\n  Production?: string\n  website?: string\n  response: string\n  libraryInfo?: ILibraryInfo\n}\n\n// // adult: boolean;\n// //backdrop_path: string;\n// belongs_to_collection: null;\n// // budget: number;\n// genres: Genre[];\n// // homepage: string;\n// // id: number;\n// // imdb_id: string;\n// original_language: string;\n// original_title: string;\n// // overview: string;\n// // popularity: number;\n// // poster_path: string;\n// production_companies: ProductionCompany[];\n// production_countries: ProductionCountry[];\n// // release_date: string;\n// // revenue: number;\n// // runtime: number;\n// spoken_languages: SpokenLanguage[];\n// // status: string;\n// // tagline: string;\n// // title: string;\n// // video: boolean;\n// // vote_average: number;\n// // vote_count: number;\n\nexport interface ITmdbResultObject {\n  page: number;\n  total_results: number;\n  total_pages: number;\n  results: ITmdbResult[];\n}\n\nexport interface ITmdbResult {\n  popularity: number\n  vote_count: number\n  video: boolean\n  poster_path: string\n  id: number\n  adult: boolean\n  backdrop_path: string\n  original_language: string\n  original_title: string\n  genre_ids: number[]\n  title: string\n  vote_average: number\n  overview: string\n  release_date: string\n  isAvailable?: boolean\n  isHighlighted?: boolean\n}\n\nexport interface ILibraryMovie {\n  tmdbId?: number,\n  title: string,\n  year: number,\n  imdbId?: string,\n  directory: string[]\n}\n\nexport interface IGenre {\n  id: number\n  name: string\n}\n\nexport interface Credits {\n  id: number;\n  cast: CastElement[];\n  crew: Crew[];\n}\n\ninterface CastElement {\n  cast_id: number;\n  character: string;\n  credit_id: string;\n  gender: number;\n  id: number;\n  name: string;\n  order: number;\n  profile_path: null | string;\n}\n\ninterface Crew {\n  credit_id: string;\n  department: Department;\n  gender: number;\n  id: number;\n  job: string;\n  name: string;\n  profile_path: null | string;\n}\n\nexport enum Department {\n  Art = 'Art',\n  Camera = 'Camera',\n  CostumeMakeUp = 'Costume & Make-Up',\n  Crew = 'Crew',\n  Directing = 'Directing',\n  Editing = 'Editing',\n  Lighting = 'Lighting',\n  Production = 'Production',\n  Sound = 'Sound',\n  VisualEffects = 'Visual Effects',\n  Writing = 'Writing',\n}\n\nexport class MDBTorrent {\n  id?: string\n  name?: string\n  size?: string\n  hash: string\n  url?: string\n  quality?: string\n  type?: string\n  seeds?: number\n  peers?: number\n  sizeBytes?: number\n  added?: string\n  dateUploaded?: string\n  dateUploadedUnix?: number\n  isYts?: boolean\n  magnetLink?: string\n}\n\nexport class ITPBTorrent {\n  id?: number\n  name?: string\n  hash: string\n  sizeBytes?: number\n  added?: string\n}\n\nexport interface ISearch {\n  page: number\n}\n\nexport enum OmdbParameters {\n  ApiKey = 'apikey',\n  ImdbId = 'i',\n  Title = 't',\n  Type = 'type',\n  Year = 'y',\n  Plot = 'plot',\n  Return = 'r',\n  Callback = 'callback',\n  Version = 'v',\n}\n\nexport enum TmdbParameters {\n  ApiKey = 'api_key',\n  AppendToResponse = 'append_to_response',\n  Language = 'language',\n  Region = 'region',\n  SortBy = 'sort_by',\n  CertificationCountry = 'certification_country',\n  Certification = 'certification',\n  CertificationLess = 'certification.lte',\n  CertificationGreater = 'certification.gte',\n  IncludeAdult = 'include_adult',\n  IncludeVideo = 'include_video',\n  Page = 'page',\n  PrimaryReleaseYear = 'primary_release_year',\n  PrimaryReleaseDateGreater = 'primary_release_date.gte',\n  PrimaryReleaseDateLess = 'primary_release_date.lte',\n  ReleaseDateGreater = 'release_date.gte',\n  ReleaseDateLess = 'release_date.lte',\n  WithReleaseType = 'with_release_type',\n  Year = 'year',\n  VoteCountGreater = 'vote_count.gte',\n  VoteCountLess = 'vote_count.lte',\n  VoteAverageGreater = 'vote_average.gte',\n  VoteAverageLess = 'vote_average.lte',\n  WithCast = 'with_cast',\n  WithCrew = 'with_crew',\n  WithPeople = 'with_people',\n  WithCompanies = 'with_companies',\n  WithGenres = 'with_genres',\n  WithoutGenres = 'without_genres',\n  WithKeywords = 'with_keywords',\n  WithoutKeywords = 'without_keywords',\n  WithRuntimeGreater = 'with_runtime.gte',\n  WithRuntimeLess = 'with_runtime.lte',\n  WithOriginalLanguage = 'with_original_language',\n  WithWatchProviders = 'with_watch_providers',\n  WatchRegion = 'watch_region'\n}\n\nexport enum TmdbSearchMovieParameters {\n  ApiKey = 'api_key',\n  Language = 'language', // Pass a ISO 639 - 1 value to display translated data for the fields that support it. minLength: 2 pattern: ([a - z]{ 2 }) -([A - Z]{ 2 }) default: en - US\n  Query = 'query',\n  Page = 'page', // minimum: 1 maximum: 1000\n  IncludeAdult = 'include_adult',\n  Region = 'region',\n  // Specify a ISO 3166 - 1 code to filter release dates.Must be uppercase. pattern: ^ [A - Z]{ 2 } $\n  Year = 'year',\n  PrimaryReleaseYear = 'primary_release_year'\n}\n\nenum TmdbAppendToResponseParameters {\n  AccountStates = 'account_states',\n  Videos = 'videos',\n  Images = 'images',\n  Credits = 'credits',\n  Changes = 'changes',\n  Translations = 'translations',\n  Similar = 'similar',\n  ExternalIds = 'external_ids',\n  AlternativeTitles = 'alternative_titles',\n  Keywords = 'keywords',\n  Reviews = 'reviews',\n  Recommendations = 'recommendations',\n  ReleaseDates = 'release_dates',\n  Lists = 'lists'\n}\n\nenum TmdbReleaseTypes {\n  PREMIERE = 'Premiere',  // 1\n  THEATRICAL_LIMITED = 'Theatrical(limited)', // 2\n  THEATRICAL = 'Theatrical', // 3\n  DIGITAL = 'Digital', // 4\n  PHYSICAL = 'Physical', // 5\n  TV = 'TV', // 6\n}\n\nexport interface IPersonDetails {\n  birthday: string;\n  known_for_department: string;\n  id: number;\n  movie_credits?: IPersonCredits;\n  tv_credits?: IPersonCredits;\n  combined_credits?: IPersonCredits;\n  homepage?: any;\n  profile_path: string;\n  imdb_id: string;\n  deathday?: any;\n  images?: IImages;\n  external_ids?: IExternalids;\n  name: string;\n  also_known_as: string[];\n  biography: string;\n  adult: boolean;\n  gender: number;\n  place_of_birth: string;\n  popularity: number;\n}\n\nexport interface IPersonCredits {\n  cast: IPersonCastCrew[];\n  crew: IPersonCastCrew[];\n  id?: number;\n}\n\nexport interface IPersonCastCrew {\n  id?: number;\n  original_language: string;\n  episode_count?: number;\n  overview: string;\n  origin_country?: string[];\n  original_name?: string;\n  genre_ids: number[];\n  name?: string;\n  media_type: string;\n  poster_path: null | string;\n  first_air_date?: string;\n  vote_average: number;\n  vote_count: number;\n  character?: string;\n  backdrop_path: null | string;\n  popularity: number;\n  credit_id: string;\n  original_title?: string;\n  video?: boolean;\n  release_date?: string;\n  title?: string;\n  adult?: boolean;\n  department?: string;\n  job?: string;\n}\n\nexport interface IExternalids {\n  id?: number;\n  freebase_id: string;\n  instagram_id: string;\n  tvrage_id: number;\n  twitter_id: string;\n  freebase_mid: string;\n  imdb_id: string;\n  facebook_id: string;\n}\n\nexport interface IImages {\n  id?: number;\n  profiles: IProfile[];\n}\n\nexport interface IProfile {\n  iso_639_1?: any;\n  aspect_ratio: number;\n  vote_count: number;\n  height: number;\n  vote_average: number;\n  file_path: string;\n  width: number;\n}\n\nexport interface ICredits {\n  cast: ICast[];\n  crew: ICrew[];\n}\n\ninterface ICast {\n  poster_path?: string;\n  adult: boolean;\n  backdrop_path?: string;\n  vote_count: number;\n  video: boolean;\n  id: number;\n  media_type?: string;\n  popularity: number;\n  genre_ids: number[];\n  original_language: string;\n  title: string;\n  original_title: string;\n  release_date: string;\n  character: string;\n  vote_average: number;\n  overview: string;\n  credit_id: string;\n}\n\ninterface ICrew {\n  id: number;\n  department: string;\n  original_language: string;\n  original_title: string;\n  job: string;\n  overview: string;\n  genre_ids: number[];\n  video: boolean;\n  episode_count: number\n  media_type?: string;\n  credit_id: string;\n  poster_path?: string;\n  popularity: number;\n  backdrop_path?: string;\n  vote_count: number;\n  title: string;\n  adult: boolean;\n  vote_average: number;\n  release_date: string;\n}\n\nexport interface IUserSavedData {\n  id?: string,\n  title: string,\n  year: number,\n  tmdbId: number,\n}\n\nexport enum GenreCodes {\n  Action = 28,\n  Adventure = 12,\n  Animation = 16,\n  Comedy = 35,\n  Crime = 80,\n  Documentary = 99,\n  Drama = 18,\n  Family = 10751,\n  Fantasy = 14,\n  History = 36,\n  Horror = 27,\n  Music = 10402,\n  Mystery = 9648,\n  Romance = 10749,\n  ScienceFiction = 878,\n  TVMovie = 10770,\n  Thriller = 53,\n  War = 10752,\n  Western = 37,\n  // mdb reserved\n  FilmNoir = 20000,\n  // similar genre: Music id:10402\n  Musical = 20001,\n  News = 20002,\n  RealityTV = 20003,\n  // similar genre: Science Fiction id:878\n  SciFi = 20004,\n  // another media type\n  Short = 20005,\n  Sport = 20006,\n}\n\n\n\n/**\nexport enum Department {\n    Art = \"Art\",\n    Camera = \"Camera\",\n    CostumeMakeUp = \"Costume & Make-Up\",\n    Crew = \"Crew\",\n    Directing = \"Directing\",\n    Editing = \"Editing\",\n    Lighting = \"Lighting\",\n    Production = \"Production\",\n    Sound = \"Sound\",\n    VisualEffects = \"Visual Effects\",\n    Writing = \"Writing\",\n}\n\nexport interface ExternalIDS {\n    imdb_id:      string;\n    facebook_id:  null;\n    instagram_id: null;\n    twitter_id:   null;\n}\n\nexport interface Genre {\n    id:   number;\n    name: string;\n}\n\nexport interface Images {\n    backdrops: any[];\n    posters:   any[];\n}\n\nexport enum OriginalLanguage {\n    En = \"en\",\n    Es = \"es\",\n    Fr = \"fr\",\n}\n\nexport interface ProductionCompany {\n    id:             number;\n    logo_path:      string;\n    name:           string;\n    origin_country: string;\n}\n\nexport interface ProductionCountry {\n    iso_3166_1: string;\n    name:       string;\n}\n\nexport interface Recommendations {\n    page:          number;\n    results:       RecommendationsResult[];\n    total_pages:   number;\n    total_results: number;\n}\n\nexport interface RecommendationsResult {\n    id:                number;\n    video:             boolean;\n    vote_count:        number;\n    vote_average:      number;\n    title:             string;\n    release_date:      string;\n    original_language: OriginalLanguage;\n    original_title:    string;\n    genre_ids:         number[];\n    backdrop_path:     string;\n    adult:             boolean;\n    overview:          string;\n    poster_path:       string;\n    popularity:        number;\n}\n\nexport interface SpokenLanguage {\n    iso_639_1: OriginalLanguage;\n    name:      string;\n}\n\nexport interface Videos {\n    results: VideosResult[];\n}\n\nexport interface VideosResult {\n    id:         string;\n    iso_639_1:  OriginalLanguage;\n    iso_3166_1: string;\n    key:        string;\n    name:       string;\n    site:       string;\n    size:       number;\n    type:       string;\n}\n */\n\n",
            "properties": [
                {
                    "name": "iso_639_1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 99
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 100
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IStreamPreferences",
            "id": "interface-IStreamPreferences-762aab3f13408cf543f5fe806389a08ae4f1e3cd13bf634d1cce11d647e39e349b0a2025d4789d00f83084ebbe025b98dbedd097bcba540fc5f3cd239b0f3d7e",
            "file": "src/app/models/preferences.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IPreferences {\n  isDarkMode: boolean\n  isEnableCache: boolean\n  libraryFolders: string[]\n  torrentSeedRatio: number\n  torrentRatio?: any\n  subtitle: ISubtitlePreferences\n  hotKeys: IHotkeys\n  autoPlayTrailer: boolean\n  playTrailerBeforeShow: boolean\n  playBack: IPlaybackPreferences\n  library: ILibraryPreferences,\n  streamPreferences?: IStreamPreferences\n  isAutoScan: boolean\n  autoScanFrequencyUnit: string\n  autoScanFrequencyValue: number\n}\n\ninterface IStreamPreferences {\n  downloadSpeed: number // in bps\n}\ninterface ILibraryPreferences {\n  libraryPathList: string[]\n  scanFrenquency: IScanFrequency\n}\n\nexport interface IPlaybackPreferences {\n  preferredQuality: Quality\n  preferredMode: 'torrent' | 'offline'\n  repeat: boolean\n  volume: number\n}\n\nexport enum Quality {\n  SD = '720p',\n  HD = '1080p',\n  FHD = '1440p',\n  FourK = '4k'\n}\ninterface IScanFrequency {\n  isScanAutomatically: boolean\n  frequencyUnit: string\n  frequencyValue: number\n}\n\ninterface IHotkeys {\n  playerHotkeys?: any\n\n}\n\nexport interface ISubtitlePreferences {\n  synchronization: number;\n  fontColor: string;\n  fontSize: string;\n  fontOpacity?: number;\n  textShadow: string;\n  fontFamily?: string;\n  backgroundColor: string;\n  backgroundOpacity: string;\n}\n",
            "properties": [
                {
                    "name": "downloadSpeed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ISubtitlePreferences",
            "id": "interface-ISubtitlePreferences-762aab3f13408cf543f5fe806389a08ae4f1e3cd13bf634d1cce11d647e39e349b0a2025d4789d00f83084ebbe025b98dbedd097bcba540fc5f3cd239b0f3d7e",
            "file": "src/app/models/preferences.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IPreferences {\n  isDarkMode: boolean\n  isEnableCache: boolean\n  libraryFolders: string[]\n  torrentSeedRatio: number\n  torrentRatio?: any\n  subtitle: ISubtitlePreferences\n  hotKeys: IHotkeys\n  autoPlayTrailer: boolean\n  playTrailerBeforeShow: boolean\n  playBack: IPlaybackPreferences\n  library: ILibraryPreferences,\n  streamPreferences?: IStreamPreferences\n  isAutoScan: boolean\n  autoScanFrequencyUnit: string\n  autoScanFrequencyValue: number\n}\n\ninterface IStreamPreferences {\n  downloadSpeed: number // in bps\n}\ninterface ILibraryPreferences {\n  libraryPathList: string[]\n  scanFrenquency: IScanFrequency\n}\n\nexport interface IPlaybackPreferences {\n  preferredQuality: Quality\n  preferredMode: 'torrent' | 'offline'\n  repeat: boolean\n  volume: number\n}\n\nexport enum Quality {\n  SD = '720p',\n  HD = '1080p',\n  FHD = '1440p',\n  FourK = '4k'\n}\ninterface IScanFrequency {\n  isScanAutomatically: boolean\n  frequencyUnit: string\n  frequencyValue: number\n}\n\ninterface IHotkeys {\n  playerHotkeys?: any\n\n}\n\nexport interface ISubtitlePreferences {\n  synchronization: number;\n  fontColor: string;\n  fontSize: string;\n  fontOpacity?: number;\n  textShadow: string;\n  fontFamily?: string;\n  backgroundColor: string;\n  backgroundOpacity: string;\n}\n",
            "properties": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "backgroundOpacity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "fontColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "fontFamily",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "fontOpacity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "fontSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "synchronization",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "textShadow",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 57
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ITmdbMovieDetail",
            "id": "interface-ITmdbMovieDetail-584d54738f93e2af94202069b5eddb4cab23bb2dfec2ff69f24ebaf881c252f94680b4cd6cec302796817692570a31bedafc5d74fed1cf6488a895dbf372e23d",
            "file": "src/app/models/interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IMdbMovieDetails {\n  awards?: string\n  backgroundPath: string;\n  belongsToCollection?: []\n  boxOffice?: string | number // tmdb:revenue(number)\n  budget?: number\n  country?: string\n  director?: string\n  dvd?: string // dvd release\n  genres?: string[] | string | IGenre[]\n  imdbId?: string\n  imdbRating?: string\n  imdbVotes?: string\n  isAdult?: boolean;\n  isAvailable?: boolean;\n  languages?: string[]\n  libraryInfo?: ILibraryInfo\n  metascore?: string // metacritic score\\\n  originalLanguage?: string // tmdb:\"en\",omdb:\"English\"\n  originalTitle?: string\n  plot?: string // plot or overview\n  popularity?: number\n  posterPath: string\n  production?: string // company; i.e. Walt Disney Pictures\n  rated?: string // rated or certificate\n  ratings?: IRating[]\n  releaseDate?: string // omdb:\"05 May 2017\"; tmdb:\"1999-10-15\"\n  releaseYear?: number | string\n  response: string\n  runtime?: string\n  starring?: string // Actors field in omdb\n  status?: string // released/Post\n  tagline?: string;\n  tmdbId?: number\n  title: string\n  type?: string // movie/tvmovie/series\n  video?: boolean; // unknown\n  // voteAverage: number; // tmdb votes\n  // voteCount: number; // tmdb votes\n  website?: string\n  writer?: string // omdb\n  [propName: string]: any;\n}\n\nexport interface IRating {\n  Source: string\n  Value: string\n}\n\nexport interface LibraryInfo {\n  tmdbId?: null | number | string\n  imdbID?: string\n  title?: string\n  year?: number\n  directoryList?: string[]\n  _id: string\n}\n\nexport interface MovieGenre {\n  id: number\n  code: string\n  description: string\n  isChecked: boolean\n}\n\nexport interface WatchList {\n  id: number\n  movieList: string[]\n}\n\nexport interface ILibraryInfo {\n  tmdbId?: null | number | string\n  imdbID?: string\n  title?: string\n  year?: number\n  directoryList?: string[]\n  _id: string\n}\n\nexport interface ICollection {\n  id: number,\n  name: string\n}\n\nexport interface IProductionCompany {\n  id: number;\n  logo_path: null | string;\n  name: string;\n  origin_country: string;\n}\n\nexport interface IProductionCountry {\n  iso_3166_1: string;\n  name: string;\n}\n\nexport interface ISpokenLanguage {\n  iso_639_1: string;\n  name: string;\n}\n\nexport interface IOmdbMovieDetail {\n  Title: string\n  Year?: string\n  Rated?: string\n  Released?: string // \"05 May 2017\"\n  Runtime?: string\n  Genre?: string\n  Director?: string\n  Writer?: string\n  Actors?: string\n  Plot?: string\n  Language?: string\n  Country?: string\n  Awards?: string\n  Poster?: string\n  Ratings?: IRating[]\n  Metascore?: string\n  imdbRating?: string\n  imdbVotes?: string\n  imdbID: string\n  Type?: string\n  DVD?: string\n  BoxOffice?: string\n  Production?: string\n  Website?: string\n  Response: string\n}\n\nexport interface ITmdbMovieDetail {\n  adult: boolean;\n  backdrop_path: string;\n  belongs_to_collection: null;\n  budget: number;\n  genres: IGenre[];\n  homepage: string;\n  id: number;\n  imdb_id: string;\n  original_language: string;\n  original_title: string;\n  overview: string;\n  popularity: number;\n  poster_path: string;\n  production_companies: IProductionCompany[];\n  production_countries: IProductionCountry[];\n  release_date: string;\n  revenue: number;\n  runtime: number;\n  spoken_languages: ISpokenLanguage[];\n  status: string;\n  tagline: string;\n  title: string;\n  video: boolean;\n  vote_average: number;\n  vote_count: number;\n}\n\nexport interface MdbMovieDetails {\n  adult?: boolean;\n  title: string\n  releaseYear?: string\n  releaseDate?: string\n  rated?: string // rated or certificate\n  runtime?: string\n  genres?: string\n  director?: string\n  writer?: string\n  Actors?: string\n  plot?: string // plot or overview\n  Language?: string\n  Country?: string\n  Awards?: string\n  Poster?: string\n  Ratings?: IRating[]\n  Metascore?: string\n  imdbRating?: string\n  imdbVotes?: string\n  imdbID: string\n  tmdbID: number\n  Type?: string\n  DVD?: string\n  BoxOffice?: string\n  Production?: string\n  website?: string\n  response: string\n  libraryInfo?: ILibraryInfo\n}\n\n// // adult: boolean;\n// //backdrop_path: string;\n// belongs_to_collection: null;\n// // budget: number;\n// genres: Genre[];\n// // homepage: string;\n// // id: number;\n// // imdb_id: string;\n// original_language: string;\n// original_title: string;\n// // overview: string;\n// // popularity: number;\n// // poster_path: string;\n// production_companies: ProductionCompany[];\n// production_countries: ProductionCountry[];\n// // release_date: string;\n// // revenue: number;\n// // runtime: number;\n// spoken_languages: SpokenLanguage[];\n// // status: string;\n// // tagline: string;\n// // title: string;\n// // video: boolean;\n// // vote_average: number;\n// // vote_count: number;\n\nexport interface ITmdbResultObject {\n  page: number;\n  total_results: number;\n  total_pages: number;\n  results: ITmdbResult[];\n}\n\nexport interface ITmdbResult {\n  popularity: number\n  vote_count: number\n  video: boolean\n  poster_path: string\n  id: number\n  adult: boolean\n  backdrop_path: string\n  original_language: string\n  original_title: string\n  genre_ids: number[]\n  title: string\n  vote_average: number\n  overview: string\n  release_date: string\n  isAvailable?: boolean\n  isHighlighted?: boolean\n}\n\nexport interface ILibraryMovie {\n  tmdbId?: number,\n  title: string,\n  year: number,\n  imdbId?: string,\n  directory: string[]\n}\n\nexport interface IGenre {\n  id: number\n  name: string\n}\n\nexport interface Credits {\n  id: number;\n  cast: CastElement[];\n  crew: Crew[];\n}\n\ninterface CastElement {\n  cast_id: number;\n  character: string;\n  credit_id: string;\n  gender: number;\n  id: number;\n  name: string;\n  order: number;\n  profile_path: null | string;\n}\n\ninterface Crew {\n  credit_id: string;\n  department: Department;\n  gender: number;\n  id: number;\n  job: string;\n  name: string;\n  profile_path: null | string;\n}\n\nexport enum Department {\n  Art = 'Art',\n  Camera = 'Camera',\n  CostumeMakeUp = 'Costume & Make-Up',\n  Crew = 'Crew',\n  Directing = 'Directing',\n  Editing = 'Editing',\n  Lighting = 'Lighting',\n  Production = 'Production',\n  Sound = 'Sound',\n  VisualEffects = 'Visual Effects',\n  Writing = 'Writing',\n}\n\nexport class MDBTorrent {\n  id?: string\n  name?: string\n  size?: string\n  hash: string\n  url?: string\n  quality?: string\n  type?: string\n  seeds?: number\n  peers?: number\n  sizeBytes?: number\n  added?: string\n  dateUploaded?: string\n  dateUploadedUnix?: number\n  isYts?: boolean\n  magnetLink?: string\n}\n\nexport class ITPBTorrent {\n  id?: number\n  name?: string\n  hash: string\n  sizeBytes?: number\n  added?: string\n}\n\nexport interface ISearch {\n  page: number\n}\n\nexport enum OmdbParameters {\n  ApiKey = 'apikey',\n  ImdbId = 'i',\n  Title = 't',\n  Type = 'type',\n  Year = 'y',\n  Plot = 'plot',\n  Return = 'r',\n  Callback = 'callback',\n  Version = 'v',\n}\n\nexport enum TmdbParameters {\n  ApiKey = 'api_key',\n  AppendToResponse = 'append_to_response',\n  Language = 'language',\n  Region = 'region',\n  SortBy = 'sort_by',\n  CertificationCountry = 'certification_country',\n  Certification = 'certification',\n  CertificationLess = 'certification.lte',\n  CertificationGreater = 'certification.gte',\n  IncludeAdult = 'include_adult',\n  IncludeVideo = 'include_video',\n  Page = 'page',\n  PrimaryReleaseYear = 'primary_release_year',\n  PrimaryReleaseDateGreater = 'primary_release_date.gte',\n  PrimaryReleaseDateLess = 'primary_release_date.lte',\n  ReleaseDateGreater = 'release_date.gte',\n  ReleaseDateLess = 'release_date.lte',\n  WithReleaseType = 'with_release_type',\n  Year = 'year',\n  VoteCountGreater = 'vote_count.gte',\n  VoteCountLess = 'vote_count.lte',\n  VoteAverageGreater = 'vote_average.gte',\n  VoteAverageLess = 'vote_average.lte',\n  WithCast = 'with_cast',\n  WithCrew = 'with_crew',\n  WithPeople = 'with_people',\n  WithCompanies = 'with_companies',\n  WithGenres = 'with_genres',\n  WithoutGenres = 'without_genres',\n  WithKeywords = 'with_keywords',\n  WithoutKeywords = 'without_keywords',\n  WithRuntimeGreater = 'with_runtime.gte',\n  WithRuntimeLess = 'with_runtime.lte',\n  WithOriginalLanguage = 'with_original_language',\n  WithWatchProviders = 'with_watch_providers',\n  WatchRegion = 'watch_region'\n}\n\nexport enum TmdbSearchMovieParameters {\n  ApiKey = 'api_key',\n  Language = 'language', // Pass a ISO 639 - 1 value to display translated data for the fields that support it. minLength: 2 pattern: ([a - z]{ 2 }) -([A - Z]{ 2 }) default: en - US\n  Query = 'query',\n  Page = 'page', // minimum: 1 maximum: 1000\n  IncludeAdult = 'include_adult',\n  Region = 'region',\n  // Specify a ISO 3166 - 1 code to filter release dates.Must be uppercase. pattern: ^ [A - Z]{ 2 } $\n  Year = 'year',\n  PrimaryReleaseYear = 'primary_release_year'\n}\n\nenum TmdbAppendToResponseParameters {\n  AccountStates = 'account_states',\n  Videos = 'videos',\n  Images = 'images',\n  Credits = 'credits',\n  Changes = 'changes',\n  Translations = 'translations',\n  Similar = 'similar',\n  ExternalIds = 'external_ids',\n  AlternativeTitles = 'alternative_titles',\n  Keywords = 'keywords',\n  Reviews = 'reviews',\n  Recommendations = 'recommendations',\n  ReleaseDates = 'release_dates',\n  Lists = 'lists'\n}\n\nenum TmdbReleaseTypes {\n  PREMIERE = 'Premiere',  // 1\n  THEATRICAL_LIMITED = 'Theatrical(limited)', // 2\n  THEATRICAL = 'Theatrical', // 3\n  DIGITAL = 'Digital', // 4\n  PHYSICAL = 'Physical', // 5\n  TV = 'TV', // 6\n}\n\nexport interface IPersonDetails {\n  birthday: string;\n  known_for_department: string;\n  id: number;\n  movie_credits?: IPersonCredits;\n  tv_credits?: IPersonCredits;\n  combined_credits?: IPersonCredits;\n  homepage?: any;\n  profile_path: string;\n  imdb_id: string;\n  deathday?: any;\n  images?: IImages;\n  external_ids?: IExternalids;\n  name: string;\n  also_known_as: string[];\n  biography: string;\n  adult: boolean;\n  gender: number;\n  place_of_birth: string;\n  popularity: number;\n}\n\nexport interface IPersonCredits {\n  cast: IPersonCastCrew[];\n  crew: IPersonCastCrew[];\n  id?: number;\n}\n\nexport interface IPersonCastCrew {\n  id?: number;\n  original_language: string;\n  episode_count?: number;\n  overview: string;\n  origin_country?: string[];\n  original_name?: string;\n  genre_ids: number[];\n  name?: string;\n  media_type: string;\n  poster_path: null | string;\n  first_air_date?: string;\n  vote_average: number;\n  vote_count: number;\n  character?: string;\n  backdrop_path: null | string;\n  popularity: number;\n  credit_id: string;\n  original_title?: string;\n  video?: boolean;\n  release_date?: string;\n  title?: string;\n  adult?: boolean;\n  department?: string;\n  job?: string;\n}\n\nexport interface IExternalids {\n  id?: number;\n  freebase_id: string;\n  instagram_id: string;\n  tvrage_id: number;\n  twitter_id: string;\n  freebase_mid: string;\n  imdb_id: string;\n  facebook_id: string;\n}\n\nexport interface IImages {\n  id?: number;\n  profiles: IProfile[];\n}\n\nexport interface IProfile {\n  iso_639_1?: any;\n  aspect_ratio: number;\n  vote_count: number;\n  height: number;\n  vote_average: number;\n  file_path: string;\n  width: number;\n}\n\nexport interface ICredits {\n  cast: ICast[];\n  crew: ICrew[];\n}\n\ninterface ICast {\n  poster_path?: string;\n  adult: boolean;\n  backdrop_path?: string;\n  vote_count: number;\n  video: boolean;\n  id: number;\n  media_type?: string;\n  popularity: number;\n  genre_ids: number[];\n  original_language: string;\n  title: string;\n  original_title: string;\n  release_date: string;\n  character: string;\n  vote_average: number;\n  overview: string;\n  credit_id: string;\n}\n\ninterface ICrew {\n  id: number;\n  department: string;\n  original_language: string;\n  original_title: string;\n  job: string;\n  overview: string;\n  genre_ids: number[];\n  video: boolean;\n  episode_count: number\n  media_type?: string;\n  credit_id: string;\n  poster_path?: string;\n  popularity: number;\n  backdrop_path?: string;\n  vote_count: number;\n  title: string;\n  adult: boolean;\n  vote_average: number;\n  release_date: string;\n}\n\nexport interface IUserSavedData {\n  id?: string,\n  title: string,\n  year: number,\n  tmdbId: number,\n}\n\nexport enum GenreCodes {\n  Action = 28,\n  Adventure = 12,\n  Animation = 16,\n  Comedy = 35,\n  Crime = 80,\n  Documentary = 99,\n  Drama = 18,\n  Family = 10751,\n  Fantasy = 14,\n  History = 36,\n  Horror = 27,\n  Music = 10402,\n  Mystery = 9648,\n  Romance = 10749,\n  ScienceFiction = 878,\n  TVMovie = 10770,\n  Thriller = 53,\n  War = 10752,\n  Western = 37,\n  // mdb reserved\n  FilmNoir = 20000,\n  // similar genre: Music id:10402\n  Musical = 20001,\n  News = 20002,\n  RealityTV = 20003,\n  // similar genre: Science Fiction id:878\n  SciFi = 20004,\n  // another media type\n  Short = 20005,\n  Sport = 20006,\n}\n\n\n\n/**\nexport enum Department {\n    Art = \"Art\",\n    Camera = \"Camera\",\n    CostumeMakeUp = \"Costume & Make-Up\",\n    Crew = \"Crew\",\n    Directing = \"Directing\",\n    Editing = \"Editing\",\n    Lighting = \"Lighting\",\n    Production = \"Production\",\n    Sound = \"Sound\",\n    VisualEffects = \"Visual Effects\",\n    Writing = \"Writing\",\n}\n\nexport interface ExternalIDS {\n    imdb_id:      string;\n    facebook_id:  null;\n    instagram_id: null;\n    twitter_id:   null;\n}\n\nexport interface Genre {\n    id:   number;\n    name: string;\n}\n\nexport interface Images {\n    backdrops: any[];\n    posters:   any[];\n}\n\nexport enum OriginalLanguage {\n    En = \"en\",\n    Es = \"es\",\n    Fr = \"fr\",\n}\n\nexport interface ProductionCompany {\n    id:             number;\n    logo_path:      string;\n    name:           string;\n    origin_country: string;\n}\n\nexport interface ProductionCountry {\n    iso_3166_1: string;\n    name:       string;\n}\n\nexport interface Recommendations {\n    page:          number;\n    results:       RecommendationsResult[];\n    total_pages:   number;\n    total_results: number;\n}\n\nexport interface RecommendationsResult {\n    id:                number;\n    video:             boolean;\n    vote_count:        number;\n    vote_average:      number;\n    title:             string;\n    release_date:      string;\n    original_language: OriginalLanguage;\n    original_title:    string;\n    genre_ids:         number[];\n    backdrop_path:     string;\n    adult:             boolean;\n    overview:          string;\n    poster_path:       string;\n    popularity:        number;\n}\n\nexport interface SpokenLanguage {\n    iso_639_1: OriginalLanguage;\n    name:      string;\n}\n\nexport interface Videos {\n    results: VideosResult[];\n}\n\nexport interface VideosResult {\n    id:         string;\n    iso_639_1:  OriginalLanguage;\n    iso_3166_1: string;\n    key:        string;\n    name:       string;\n    site:       string;\n    size:       number;\n    type:       string;\n}\n */\n\n",
            "properties": [
                {
                    "name": "adult",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 132
                },
                {
                    "name": "backdrop_path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 133
                },
                {
                    "name": "belongs_to_collection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 134
                },
                {
                    "name": "budget",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 135
                },
                {
                    "name": "genres",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IGenre[]",
                    "optional": false,
                    "description": "",
                    "line": 136
                },
                {
                    "name": "homepage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 137
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 138
                },
                {
                    "name": "imdb_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 139
                },
                {
                    "name": "original_language",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 140
                },
                {
                    "name": "original_title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 141
                },
                {
                    "name": "overview",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 142
                },
                {
                    "name": "popularity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 143
                },
                {
                    "name": "poster_path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 144
                },
                {
                    "name": "production_companies",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IProductionCompany[]",
                    "optional": false,
                    "description": "",
                    "line": 145
                },
                {
                    "name": "production_countries",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IProductionCountry[]",
                    "optional": false,
                    "description": "",
                    "line": 146
                },
                {
                    "name": "release_date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 147
                },
                {
                    "name": "revenue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 148
                },
                {
                    "name": "runtime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 149
                },
                {
                    "name": "spoken_languages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ISpokenLanguage[]",
                    "optional": false,
                    "description": "",
                    "line": 150
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 151
                },
                {
                    "name": "tagline",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 152
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 153
                },
                {
                    "name": "video",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 154
                },
                {
                    "name": "vote_average",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 155
                },
                {
                    "name": "vote_count",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 156
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ITmdbResult",
            "id": "interface-ITmdbResult-584d54738f93e2af94202069b5eddb4cab23bb2dfec2ff69f24ebaf881c252f94680b4cd6cec302796817692570a31bedafc5d74fed1cf6488a895dbf372e23d",
            "file": "src/app/models/interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IMdbMovieDetails {\n  awards?: string\n  backgroundPath: string;\n  belongsToCollection?: []\n  boxOffice?: string | number // tmdb:revenue(number)\n  budget?: number\n  country?: string\n  director?: string\n  dvd?: string // dvd release\n  genres?: string[] | string | IGenre[]\n  imdbId?: string\n  imdbRating?: string\n  imdbVotes?: string\n  isAdult?: boolean;\n  isAvailable?: boolean;\n  languages?: string[]\n  libraryInfo?: ILibraryInfo\n  metascore?: string // metacritic score\\\n  originalLanguage?: string // tmdb:\"en\",omdb:\"English\"\n  originalTitle?: string\n  plot?: string // plot or overview\n  popularity?: number\n  posterPath: string\n  production?: string // company; i.e. Walt Disney Pictures\n  rated?: string // rated or certificate\n  ratings?: IRating[]\n  releaseDate?: string // omdb:\"05 May 2017\"; tmdb:\"1999-10-15\"\n  releaseYear?: number | string\n  response: string\n  runtime?: string\n  starring?: string // Actors field in omdb\n  status?: string // released/Post\n  tagline?: string;\n  tmdbId?: number\n  title: string\n  type?: string // movie/tvmovie/series\n  video?: boolean; // unknown\n  // voteAverage: number; // tmdb votes\n  // voteCount: number; // tmdb votes\n  website?: string\n  writer?: string // omdb\n  [propName: string]: any;\n}\n\nexport interface IRating {\n  Source: string\n  Value: string\n}\n\nexport interface LibraryInfo {\n  tmdbId?: null | number | string\n  imdbID?: string\n  title?: string\n  year?: number\n  directoryList?: string[]\n  _id: string\n}\n\nexport interface MovieGenre {\n  id: number\n  code: string\n  description: string\n  isChecked: boolean\n}\n\nexport interface WatchList {\n  id: number\n  movieList: string[]\n}\n\nexport interface ILibraryInfo {\n  tmdbId?: null | number | string\n  imdbID?: string\n  title?: string\n  year?: number\n  directoryList?: string[]\n  _id: string\n}\n\nexport interface ICollection {\n  id: number,\n  name: string\n}\n\nexport interface IProductionCompany {\n  id: number;\n  logo_path: null | string;\n  name: string;\n  origin_country: string;\n}\n\nexport interface IProductionCountry {\n  iso_3166_1: string;\n  name: string;\n}\n\nexport interface ISpokenLanguage {\n  iso_639_1: string;\n  name: string;\n}\n\nexport interface IOmdbMovieDetail {\n  Title: string\n  Year?: string\n  Rated?: string\n  Released?: string // \"05 May 2017\"\n  Runtime?: string\n  Genre?: string\n  Director?: string\n  Writer?: string\n  Actors?: string\n  Plot?: string\n  Language?: string\n  Country?: string\n  Awards?: string\n  Poster?: string\n  Ratings?: IRating[]\n  Metascore?: string\n  imdbRating?: string\n  imdbVotes?: string\n  imdbID: string\n  Type?: string\n  DVD?: string\n  BoxOffice?: string\n  Production?: string\n  Website?: string\n  Response: string\n}\n\nexport interface ITmdbMovieDetail {\n  adult: boolean;\n  backdrop_path: string;\n  belongs_to_collection: null;\n  budget: number;\n  genres: IGenre[];\n  homepage: string;\n  id: number;\n  imdb_id: string;\n  original_language: string;\n  original_title: string;\n  overview: string;\n  popularity: number;\n  poster_path: string;\n  production_companies: IProductionCompany[];\n  production_countries: IProductionCountry[];\n  release_date: string;\n  revenue: number;\n  runtime: number;\n  spoken_languages: ISpokenLanguage[];\n  status: string;\n  tagline: string;\n  title: string;\n  video: boolean;\n  vote_average: number;\n  vote_count: number;\n}\n\nexport interface MdbMovieDetails {\n  adult?: boolean;\n  title: string\n  releaseYear?: string\n  releaseDate?: string\n  rated?: string // rated or certificate\n  runtime?: string\n  genres?: string\n  director?: string\n  writer?: string\n  Actors?: string\n  plot?: string // plot or overview\n  Language?: string\n  Country?: string\n  Awards?: string\n  Poster?: string\n  Ratings?: IRating[]\n  Metascore?: string\n  imdbRating?: string\n  imdbVotes?: string\n  imdbID: string\n  tmdbID: number\n  Type?: string\n  DVD?: string\n  BoxOffice?: string\n  Production?: string\n  website?: string\n  response: string\n  libraryInfo?: ILibraryInfo\n}\n\n// // adult: boolean;\n// //backdrop_path: string;\n// belongs_to_collection: null;\n// // budget: number;\n// genres: Genre[];\n// // homepage: string;\n// // id: number;\n// // imdb_id: string;\n// original_language: string;\n// original_title: string;\n// // overview: string;\n// // popularity: number;\n// // poster_path: string;\n// production_companies: ProductionCompany[];\n// production_countries: ProductionCountry[];\n// // release_date: string;\n// // revenue: number;\n// // runtime: number;\n// spoken_languages: SpokenLanguage[];\n// // status: string;\n// // tagline: string;\n// // title: string;\n// // video: boolean;\n// // vote_average: number;\n// // vote_count: number;\n\nexport interface ITmdbResultObject {\n  page: number;\n  total_results: number;\n  total_pages: number;\n  results: ITmdbResult[];\n}\n\nexport interface ITmdbResult {\n  popularity: number\n  vote_count: number\n  video: boolean\n  poster_path: string\n  id: number\n  adult: boolean\n  backdrop_path: string\n  original_language: string\n  original_title: string\n  genre_ids: number[]\n  title: string\n  vote_average: number\n  overview: string\n  release_date: string\n  isAvailable?: boolean\n  isHighlighted?: boolean\n}\n\nexport interface ILibraryMovie {\n  tmdbId?: number,\n  title: string,\n  year: number,\n  imdbId?: string,\n  directory: string[]\n}\n\nexport interface IGenre {\n  id: number\n  name: string\n}\n\nexport interface Credits {\n  id: number;\n  cast: CastElement[];\n  crew: Crew[];\n}\n\ninterface CastElement {\n  cast_id: number;\n  character: string;\n  credit_id: string;\n  gender: number;\n  id: number;\n  name: string;\n  order: number;\n  profile_path: null | string;\n}\n\ninterface Crew {\n  credit_id: string;\n  department: Department;\n  gender: number;\n  id: number;\n  job: string;\n  name: string;\n  profile_path: null | string;\n}\n\nexport enum Department {\n  Art = 'Art',\n  Camera = 'Camera',\n  CostumeMakeUp = 'Costume & Make-Up',\n  Crew = 'Crew',\n  Directing = 'Directing',\n  Editing = 'Editing',\n  Lighting = 'Lighting',\n  Production = 'Production',\n  Sound = 'Sound',\n  VisualEffects = 'Visual Effects',\n  Writing = 'Writing',\n}\n\nexport class MDBTorrent {\n  id?: string\n  name?: string\n  size?: string\n  hash: string\n  url?: string\n  quality?: string\n  type?: string\n  seeds?: number\n  peers?: number\n  sizeBytes?: number\n  added?: string\n  dateUploaded?: string\n  dateUploadedUnix?: number\n  isYts?: boolean\n  magnetLink?: string\n}\n\nexport class ITPBTorrent {\n  id?: number\n  name?: string\n  hash: string\n  sizeBytes?: number\n  added?: string\n}\n\nexport interface ISearch {\n  page: number\n}\n\nexport enum OmdbParameters {\n  ApiKey = 'apikey',\n  ImdbId = 'i',\n  Title = 't',\n  Type = 'type',\n  Year = 'y',\n  Plot = 'plot',\n  Return = 'r',\n  Callback = 'callback',\n  Version = 'v',\n}\n\nexport enum TmdbParameters {\n  ApiKey = 'api_key',\n  AppendToResponse = 'append_to_response',\n  Language = 'language',\n  Region = 'region',\n  SortBy = 'sort_by',\n  CertificationCountry = 'certification_country',\n  Certification = 'certification',\n  CertificationLess = 'certification.lte',\n  CertificationGreater = 'certification.gte',\n  IncludeAdult = 'include_adult',\n  IncludeVideo = 'include_video',\n  Page = 'page',\n  PrimaryReleaseYear = 'primary_release_year',\n  PrimaryReleaseDateGreater = 'primary_release_date.gte',\n  PrimaryReleaseDateLess = 'primary_release_date.lte',\n  ReleaseDateGreater = 'release_date.gte',\n  ReleaseDateLess = 'release_date.lte',\n  WithReleaseType = 'with_release_type',\n  Year = 'year',\n  VoteCountGreater = 'vote_count.gte',\n  VoteCountLess = 'vote_count.lte',\n  VoteAverageGreater = 'vote_average.gte',\n  VoteAverageLess = 'vote_average.lte',\n  WithCast = 'with_cast',\n  WithCrew = 'with_crew',\n  WithPeople = 'with_people',\n  WithCompanies = 'with_companies',\n  WithGenres = 'with_genres',\n  WithoutGenres = 'without_genres',\n  WithKeywords = 'with_keywords',\n  WithoutKeywords = 'without_keywords',\n  WithRuntimeGreater = 'with_runtime.gte',\n  WithRuntimeLess = 'with_runtime.lte',\n  WithOriginalLanguage = 'with_original_language',\n  WithWatchProviders = 'with_watch_providers',\n  WatchRegion = 'watch_region'\n}\n\nexport enum TmdbSearchMovieParameters {\n  ApiKey = 'api_key',\n  Language = 'language', // Pass a ISO 639 - 1 value to display translated data for the fields that support it. minLength: 2 pattern: ([a - z]{ 2 }) -([A - Z]{ 2 }) default: en - US\n  Query = 'query',\n  Page = 'page', // minimum: 1 maximum: 1000\n  IncludeAdult = 'include_adult',\n  Region = 'region',\n  // Specify a ISO 3166 - 1 code to filter release dates.Must be uppercase. pattern: ^ [A - Z]{ 2 } $\n  Year = 'year',\n  PrimaryReleaseYear = 'primary_release_year'\n}\n\nenum TmdbAppendToResponseParameters {\n  AccountStates = 'account_states',\n  Videos = 'videos',\n  Images = 'images',\n  Credits = 'credits',\n  Changes = 'changes',\n  Translations = 'translations',\n  Similar = 'similar',\n  ExternalIds = 'external_ids',\n  AlternativeTitles = 'alternative_titles',\n  Keywords = 'keywords',\n  Reviews = 'reviews',\n  Recommendations = 'recommendations',\n  ReleaseDates = 'release_dates',\n  Lists = 'lists'\n}\n\nenum TmdbReleaseTypes {\n  PREMIERE = 'Premiere',  // 1\n  THEATRICAL_LIMITED = 'Theatrical(limited)', // 2\n  THEATRICAL = 'Theatrical', // 3\n  DIGITAL = 'Digital', // 4\n  PHYSICAL = 'Physical', // 5\n  TV = 'TV', // 6\n}\n\nexport interface IPersonDetails {\n  birthday: string;\n  known_for_department: string;\n  id: number;\n  movie_credits?: IPersonCredits;\n  tv_credits?: IPersonCredits;\n  combined_credits?: IPersonCredits;\n  homepage?: any;\n  profile_path: string;\n  imdb_id: string;\n  deathday?: any;\n  images?: IImages;\n  external_ids?: IExternalids;\n  name: string;\n  also_known_as: string[];\n  biography: string;\n  adult: boolean;\n  gender: number;\n  place_of_birth: string;\n  popularity: number;\n}\n\nexport interface IPersonCredits {\n  cast: IPersonCastCrew[];\n  crew: IPersonCastCrew[];\n  id?: number;\n}\n\nexport interface IPersonCastCrew {\n  id?: number;\n  original_language: string;\n  episode_count?: number;\n  overview: string;\n  origin_country?: string[];\n  original_name?: string;\n  genre_ids: number[];\n  name?: string;\n  media_type: string;\n  poster_path: null | string;\n  first_air_date?: string;\n  vote_average: number;\n  vote_count: number;\n  character?: string;\n  backdrop_path: null | string;\n  popularity: number;\n  credit_id: string;\n  original_title?: string;\n  video?: boolean;\n  release_date?: string;\n  title?: string;\n  adult?: boolean;\n  department?: string;\n  job?: string;\n}\n\nexport interface IExternalids {\n  id?: number;\n  freebase_id: string;\n  instagram_id: string;\n  tvrage_id: number;\n  twitter_id: string;\n  freebase_mid: string;\n  imdb_id: string;\n  facebook_id: string;\n}\n\nexport interface IImages {\n  id?: number;\n  profiles: IProfile[];\n}\n\nexport interface IProfile {\n  iso_639_1?: any;\n  aspect_ratio: number;\n  vote_count: number;\n  height: number;\n  vote_average: number;\n  file_path: string;\n  width: number;\n}\n\nexport interface ICredits {\n  cast: ICast[];\n  crew: ICrew[];\n}\n\ninterface ICast {\n  poster_path?: string;\n  adult: boolean;\n  backdrop_path?: string;\n  vote_count: number;\n  video: boolean;\n  id: number;\n  media_type?: string;\n  popularity: number;\n  genre_ids: number[];\n  original_language: string;\n  title: string;\n  original_title: string;\n  release_date: string;\n  character: string;\n  vote_average: number;\n  overview: string;\n  credit_id: string;\n}\n\ninterface ICrew {\n  id: number;\n  department: string;\n  original_language: string;\n  original_title: string;\n  job: string;\n  overview: string;\n  genre_ids: number[];\n  video: boolean;\n  episode_count: number\n  media_type?: string;\n  credit_id: string;\n  poster_path?: string;\n  popularity: number;\n  backdrop_path?: string;\n  vote_count: number;\n  title: string;\n  adult: boolean;\n  vote_average: number;\n  release_date: string;\n}\n\nexport interface IUserSavedData {\n  id?: string,\n  title: string,\n  year: number,\n  tmdbId: number,\n}\n\nexport enum GenreCodes {\n  Action = 28,\n  Adventure = 12,\n  Animation = 16,\n  Comedy = 35,\n  Crime = 80,\n  Documentary = 99,\n  Drama = 18,\n  Family = 10751,\n  Fantasy = 14,\n  History = 36,\n  Horror = 27,\n  Music = 10402,\n  Mystery = 9648,\n  Romance = 10749,\n  ScienceFiction = 878,\n  TVMovie = 10770,\n  Thriller = 53,\n  War = 10752,\n  Western = 37,\n  // mdb reserved\n  FilmNoir = 20000,\n  // similar genre: Music id:10402\n  Musical = 20001,\n  News = 20002,\n  RealityTV = 20003,\n  // similar genre: Science Fiction id:878\n  SciFi = 20004,\n  // another media type\n  Short = 20005,\n  Sport = 20006,\n}\n\n\n\n/**\nexport enum Department {\n    Art = \"Art\",\n    Camera = \"Camera\",\n    CostumeMakeUp = \"Costume & Make-Up\",\n    Crew = \"Crew\",\n    Directing = \"Directing\",\n    Editing = \"Editing\",\n    Lighting = \"Lighting\",\n    Production = \"Production\",\n    Sound = \"Sound\",\n    VisualEffects = \"Visual Effects\",\n    Writing = \"Writing\",\n}\n\nexport interface ExternalIDS {\n    imdb_id:      string;\n    facebook_id:  null;\n    instagram_id: null;\n    twitter_id:   null;\n}\n\nexport interface Genre {\n    id:   number;\n    name: string;\n}\n\nexport interface Images {\n    backdrops: any[];\n    posters:   any[];\n}\n\nexport enum OriginalLanguage {\n    En = \"en\",\n    Es = \"es\",\n    Fr = \"fr\",\n}\n\nexport interface ProductionCompany {\n    id:             number;\n    logo_path:      string;\n    name:           string;\n    origin_country: string;\n}\n\nexport interface ProductionCountry {\n    iso_3166_1: string;\n    name:       string;\n}\n\nexport interface Recommendations {\n    page:          number;\n    results:       RecommendationsResult[];\n    total_pages:   number;\n    total_results: number;\n}\n\nexport interface RecommendationsResult {\n    id:                number;\n    video:             boolean;\n    vote_count:        number;\n    vote_average:      number;\n    title:             string;\n    release_date:      string;\n    original_language: OriginalLanguage;\n    original_title:    string;\n    genre_ids:         number[];\n    backdrop_path:     string;\n    adult:             boolean;\n    overview:          string;\n    poster_path:       string;\n    popularity:        number;\n}\n\nexport interface SpokenLanguage {\n    iso_639_1: OriginalLanguage;\n    name:      string;\n}\n\nexport interface Videos {\n    results: VideosResult[];\n}\n\nexport interface VideosResult {\n    id:         string;\n    iso_639_1:  OriginalLanguage;\n    iso_3166_1: string;\n    key:        string;\n    name:       string;\n    site:       string;\n    size:       number;\n    type:       string;\n}\n */\n\n",
            "properties": [
                {
                    "name": "adult",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 229
                },
                {
                    "name": "backdrop_path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 230
                },
                {
                    "name": "genre_ids",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 233
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 228
                },
                {
                    "name": "isAvailable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 238
                },
                {
                    "name": "isHighlighted",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 239
                },
                {
                    "name": "original_language",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 231
                },
                {
                    "name": "original_title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 232
                },
                {
                    "name": "overview",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 236
                },
                {
                    "name": "popularity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 224
                },
                {
                    "name": "poster_path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 227
                },
                {
                    "name": "release_date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 237
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 234
                },
                {
                    "name": "video",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 226
                },
                {
                    "name": "vote_average",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 235
                },
                {
                    "name": "vote_count",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 225
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ITmdbResultObject",
            "id": "interface-ITmdbResultObject-584d54738f93e2af94202069b5eddb4cab23bb2dfec2ff69f24ebaf881c252f94680b4cd6cec302796817692570a31bedafc5d74fed1cf6488a895dbf372e23d",
            "file": "src/app/models/interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IMdbMovieDetails {\n  awards?: string\n  backgroundPath: string;\n  belongsToCollection?: []\n  boxOffice?: string | number // tmdb:revenue(number)\n  budget?: number\n  country?: string\n  director?: string\n  dvd?: string // dvd release\n  genres?: string[] | string | IGenre[]\n  imdbId?: string\n  imdbRating?: string\n  imdbVotes?: string\n  isAdult?: boolean;\n  isAvailable?: boolean;\n  languages?: string[]\n  libraryInfo?: ILibraryInfo\n  metascore?: string // metacritic score\\\n  originalLanguage?: string // tmdb:\"en\",omdb:\"English\"\n  originalTitle?: string\n  plot?: string // plot or overview\n  popularity?: number\n  posterPath: string\n  production?: string // company; i.e. Walt Disney Pictures\n  rated?: string // rated or certificate\n  ratings?: IRating[]\n  releaseDate?: string // omdb:\"05 May 2017\"; tmdb:\"1999-10-15\"\n  releaseYear?: number | string\n  response: string\n  runtime?: string\n  starring?: string // Actors field in omdb\n  status?: string // released/Post\n  tagline?: string;\n  tmdbId?: number\n  title: string\n  type?: string // movie/tvmovie/series\n  video?: boolean; // unknown\n  // voteAverage: number; // tmdb votes\n  // voteCount: number; // tmdb votes\n  website?: string\n  writer?: string // omdb\n  [propName: string]: any;\n}\n\nexport interface IRating {\n  Source: string\n  Value: string\n}\n\nexport interface LibraryInfo {\n  tmdbId?: null | number | string\n  imdbID?: string\n  title?: string\n  year?: number\n  directoryList?: string[]\n  _id: string\n}\n\nexport interface MovieGenre {\n  id: number\n  code: string\n  description: string\n  isChecked: boolean\n}\n\nexport interface WatchList {\n  id: number\n  movieList: string[]\n}\n\nexport interface ILibraryInfo {\n  tmdbId?: null | number | string\n  imdbID?: string\n  title?: string\n  year?: number\n  directoryList?: string[]\n  _id: string\n}\n\nexport interface ICollection {\n  id: number,\n  name: string\n}\n\nexport interface IProductionCompany {\n  id: number;\n  logo_path: null | string;\n  name: string;\n  origin_country: string;\n}\n\nexport interface IProductionCountry {\n  iso_3166_1: string;\n  name: string;\n}\n\nexport interface ISpokenLanguage {\n  iso_639_1: string;\n  name: string;\n}\n\nexport interface IOmdbMovieDetail {\n  Title: string\n  Year?: string\n  Rated?: string\n  Released?: string // \"05 May 2017\"\n  Runtime?: string\n  Genre?: string\n  Director?: string\n  Writer?: string\n  Actors?: string\n  Plot?: string\n  Language?: string\n  Country?: string\n  Awards?: string\n  Poster?: string\n  Ratings?: IRating[]\n  Metascore?: string\n  imdbRating?: string\n  imdbVotes?: string\n  imdbID: string\n  Type?: string\n  DVD?: string\n  BoxOffice?: string\n  Production?: string\n  Website?: string\n  Response: string\n}\n\nexport interface ITmdbMovieDetail {\n  adult: boolean;\n  backdrop_path: string;\n  belongs_to_collection: null;\n  budget: number;\n  genres: IGenre[];\n  homepage: string;\n  id: number;\n  imdb_id: string;\n  original_language: string;\n  original_title: string;\n  overview: string;\n  popularity: number;\n  poster_path: string;\n  production_companies: IProductionCompany[];\n  production_countries: IProductionCountry[];\n  release_date: string;\n  revenue: number;\n  runtime: number;\n  spoken_languages: ISpokenLanguage[];\n  status: string;\n  tagline: string;\n  title: string;\n  video: boolean;\n  vote_average: number;\n  vote_count: number;\n}\n\nexport interface MdbMovieDetails {\n  adult?: boolean;\n  title: string\n  releaseYear?: string\n  releaseDate?: string\n  rated?: string // rated or certificate\n  runtime?: string\n  genres?: string\n  director?: string\n  writer?: string\n  Actors?: string\n  plot?: string // plot or overview\n  Language?: string\n  Country?: string\n  Awards?: string\n  Poster?: string\n  Ratings?: IRating[]\n  Metascore?: string\n  imdbRating?: string\n  imdbVotes?: string\n  imdbID: string\n  tmdbID: number\n  Type?: string\n  DVD?: string\n  BoxOffice?: string\n  Production?: string\n  website?: string\n  response: string\n  libraryInfo?: ILibraryInfo\n}\n\n// // adult: boolean;\n// //backdrop_path: string;\n// belongs_to_collection: null;\n// // budget: number;\n// genres: Genre[];\n// // homepage: string;\n// // id: number;\n// // imdb_id: string;\n// original_language: string;\n// original_title: string;\n// // overview: string;\n// // popularity: number;\n// // poster_path: string;\n// production_companies: ProductionCompany[];\n// production_countries: ProductionCountry[];\n// // release_date: string;\n// // revenue: number;\n// // runtime: number;\n// spoken_languages: SpokenLanguage[];\n// // status: string;\n// // tagline: string;\n// // title: string;\n// // video: boolean;\n// // vote_average: number;\n// // vote_count: number;\n\nexport interface ITmdbResultObject {\n  page: number;\n  total_results: number;\n  total_pages: number;\n  results: ITmdbResult[];\n}\n\nexport interface ITmdbResult {\n  popularity: number\n  vote_count: number\n  video: boolean\n  poster_path: string\n  id: number\n  adult: boolean\n  backdrop_path: string\n  original_language: string\n  original_title: string\n  genre_ids: number[]\n  title: string\n  vote_average: number\n  overview: string\n  release_date: string\n  isAvailable?: boolean\n  isHighlighted?: boolean\n}\n\nexport interface ILibraryMovie {\n  tmdbId?: number,\n  title: string,\n  year: number,\n  imdbId?: string,\n  directory: string[]\n}\n\nexport interface IGenre {\n  id: number\n  name: string\n}\n\nexport interface Credits {\n  id: number;\n  cast: CastElement[];\n  crew: Crew[];\n}\n\ninterface CastElement {\n  cast_id: number;\n  character: string;\n  credit_id: string;\n  gender: number;\n  id: number;\n  name: string;\n  order: number;\n  profile_path: null | string;\n}\n\ninterface Crew {\n  credit_id: string;\n  department: Department;\n  gender: number;\n  id: number;\n  job: string;\n  name: string;\n  profile_path: null | string;\n}\n\nexport enum Department {\n  Art = 'Art',\n  Camera = 'Camera',\n  CostumeMakeUp = 'Costume & Make-Up',\n  Crew = 'Crew',\n  Directing = 'Directing',\n  Editing = 'Editing',\n  Lighting = 'Lighting',\n  Production = 'Production',\n  Sound = 'Sound',\n  VisualEffects = 'Visual Effects',\n  Writing = 'Writing',\n}\n\nexport class MDBTorrent {\n  id?: string\n  name?: string\n  size?: string\n  hash: string\n  url?: string\n  quality?: string\n  type?: string\n  seeds?: number\n  peers?: number\n  sizeBytes?: number\n  added?: string\n  dateUploaded?: string\n  dateUploadedUnix?: number\n  isYts?: boolean\n  magnetLink?: string\n}\n\nexport class ITPBTorrent {\n  id?: number\n  name?: string\n  hash: string\n  sizeBytes?: number\n  added?: string\n}\n\nexport interface ISearch {\n  page: number\n}\n\nexport enum OmdbParameters {\n  ApiKey = 'apikey',\n  ImdbId = 'i',\n  Title = 't',\n  Type = 'type',\n  Year = 'y',\n  Plot = 'plot',\n  Return = 'r',\n  Callback = 'callback',\n  Version = 'v',\n}\n\nexport enum TmdbParameters {\n  ApiKey = 'api_key',\n  AppendToResponse = 'append_to_response',\n  Language = 'language',\n  Region = 'region',\n  SortBy = 'sort_by',\n  CertificationCountry = 'certification_country',\n  Certification = 'certification',\n  CertificationLess = 'certification.lte',\n  CertificationGreater = 'certification.gte',\n  IncludeAdult = 'include_adult',\n  IncludeVideo = 'include_video',\n  Page = 'page',\n  PrimaryReleaseYear = 'primary_release_year',\n  PrimaryReleaseDateGreater = 'primary_release_date.gte',\n  PrimaryReleaseDateLess = 'primary_release_date.lte',\n  ReleaseDateGreater = 'release_date.gte',\n  ReleaseDateLess = 'release_date.lte',\n  WithReleaseType = 'with_release_type',\n  Year = 'year',\n  VoteCountGreater = 'vote_count.gte',\n  VoteCountLess = 'vote_count.lte',\n  VoteAverageGreater = 'vote_average.gte',\n  VoteAverageLess = 'vote_average.lte',\n  WithCast = 'with_cast',\n  WithCrew = 'with_crew',\n  WithPeople = 'with_people',\n  WithCompanies = 'with_companies',\n  WithGenres = 'with_genres',\n  WithoutGenres = 'without_genres',\n  WithKeywords = 'with_keywords',\n  WithoutKeywords = 'without_keywords',\n  WithRuntimeGreater = 'with_runtime.gte',\n  WithRuntimeLess = 'with_runtime.lte',\n  WithOriginalLanguage = 'with_original_language',\n  WithWatchProviders = 'with_watch_providers',\n  WatchRegion = 'watch_region'\n}\n\nexport enum TmdbSearchMovieParameters {\n  ApiKey = 'api_key',\n  Language = 'language', // Pass a ISO 639 - 1 value to display translated data for the fields that support it. minLength: 2 pattern: ([a - z]{ 2 }) -([A - Z]{ 2 }) default: en - US\n  Query = 'query',\n  Page = 'page', // minimum: 1 maximum: 1000\n  IncludeAdult = 'include_adult',\n  Region = 'region',\n  // Specify a ISO 3166 - 1 code to filter release dates.Must be uppercase. pattern: ^ [A - Z]{ 2 } $\n  Year = 'year',\n  PrimaryReleaseYear = 'primary_release_year'\n}\n\nenum TmdbAppendToResponseParameters {\n  AccountStates = 'account_states',\n  Videos = 'videos',\n  Images = 'images',\n  Credits = 'credits',\n  Changes = 'changes',\n  Translations = 'translations',\n  Similar = 'similar',\n  ExternalIds = 'external_ids',\n  AlternativeTitles = 'alternative_titles',\n  Keywords = 'keywords',\n  Reviews = 'reviews',\n  Recommendations = 'recommendations',\n  ReleaseDates = 'release_dates',\n  Lists = 'lists'\n}\n\nenum TmdbReleaseTypes {\n  PREMIERE = 'Premiere',  // 1\n  THEATRICAL_LIMITED = 'Theatrical(limited)', // 2\n  THEATRICAL = 'Theatrical', // 3\n  DIGITAL = 'Digital', // 4\n  PHYSICAL = 'Physical', // 5\n  TV = 'TV', // 6\n}\n\nexport interface IPersonDetails {\n  birthday: string;\n  known_for_department: string;\n  id: number;\n  movie_credits?: IPersonCredits;\n  tv_credits?: IPersonCredits;\n  combined_credits?: IPersonCredits;\n  homepage?: any;\n  profile_path: string;\n  imdb_id: string;\n  deathday?: any;\n  images?: IImages;\n  external_ids?: IExternalids;\n  name: string;\n  also_known_as: string[];\n  biography: string;\n  adult: boolean;\n  gender: number;\n  place_of_birth: string;\n  popularity: number;\n}\n\nexport interface IPersonCredits {\n  cast: IPersonCastCrew[];\n  crew: IPersonCastCrew[];\n  id?: number;\n}\n\nexport interface IPersonCastCrew {\n  id?: number;\n  original_language: string;\n  episode_count?: number;\n  overview: string;\n  origin_country?: string[];\n  original_name?: string;\n  genre_ids: number[];\n  name?: string;\n  media_type: string;\n  poster_path: null | string;\n  first_air_date?: string;\n  vote_average: number;\n  vote_count: number;\n  character?: string;\n  backdrop_path: null | string;\n  popularity: number;\n  credit_id: string;\n  original_title?: string;\n  video?: boolean;\n  release_date?: string;\n  title?: string;\n  adult?: boolean;\n  department?: string;\n  job?: string;\n}\n\nexport interface IExternalids {\n  id?: number;\n  freebase_id: string;\n  instagram_id: string;\n  tvrage_id: number;\n  twitter_id: string;\n  freebase_mid: string;\n  imdb_id: string;\n  facebook_id: string;\n}\n\nexport interface IImages {\n  id?: number;\n  profiles: IProfile[];\n}\n\nexport interface IProfile {\n  iso_639_1?: any;\n  aspect_ratio: number;\n  vote_count: number;\n  height: number;\n  vote_average: number;\n  file_path: string;\n  width: number;\n}\n\nexport interface ICredits {\n  cast: ICast[];\n  crew: ICrew[];\n}\n\ninterface ICast {\n  poster_path?: string;\n  adult: boolean;\n  backdrop_path?: string;\n  vote_count: number;\n  video: boolean;\n  id: number;\n  media_type?: string;\n  popularity: number;\n  genre_ids: number[];\n  original_language: string;\n  title: string;\n  original_title: string;\n  release_date: string;\n  character: string;\n  vote_average: number;\n  overview: string;\n  credit_id: string;\n}\n\ninterface ICrew {\n  id: number;\n  department: string;\n  original_language: string;\n  original_title: string;\n  job: string;\n  overview: string;\n  genre_ids: number[];\n  video: boolean;\n  episode_count: number\n  media_type?: string;\n  credit_id: string;\n  poster_path?: string;\n  popularity: number;\n  backdrop_path?: string;\n  vote_count: number;\n  title: string;\n  adult: boolean;\n  vote_average: number;\n  release_date: string;\n}\n\nexport interface IUserSavedData {\n  id?: string,\n  title: string,\n  year: number,\n  tmdbId: number,\n}\n\nexport enum GenreCodes {\n  Action = 28,\n  Adventure = 12,\n  Animation = 16,\n  Comedy = 35,\n  Crime = 80,\n  Documentary = 99,\n  Drama = 18,\n  Family = 10751,\n  Fantasy = 14,\n  History = 36,\n  Horror = 27,\n  Music = 10402,\n  Mystery = 9648,\n  Romance = 10749,\n  ScienceFiction = 878,\n  TVMovie = 10770,\n  Thriller = 53,\n  War = 10752,\n  Western = 37,\n  // mdb reserved\n  FilmNoir = 20000,\n  // similar genre: Music id:10402\n  Musical = 20001,\n  News = 20002,\n  RealityTV = 20003,\n  // similar genre: Science Fiction id:878\n  SciFi = 20004,\n  // another media type\n  Short = 20005,\n  Sport = 20006,\n}\n\n\n\n/**\nexport enum Department {\n    Art = \"Art\",\n    Camera = \"Camera\",\n    CostumeMakeUp = \"Costume & Make-Up\",\n    Crew = \"Crew\",\n    Directing = \"Directing\",\n    Editing = \"Editing\",\n    Lighting = \"Lighting\",\n    Production = \"Production\",\n    Sound = \"Sound\",\n    VisualEffects = \"Visual Effects\",\n    Writing = \"Writing\",\n}\n\nexport interface ExternalIDS {\n    imdb_id:      string;\n    facebook_id:  null;\n    instagram_id: null;\n    twitter_id:   null;\n}\n\nexport interface Genre {\n    id:   number;\n    name: string;\n}\n\nexport interface Images {\n    backdrops: any[];\n    posters:   any[];\n}\n\nexport enum OriginalLanguage {\n    En = \"en\",\n    Es = \"es\",\n    Fr = \"fr\",\n}\n\nexport interface ProductionCompany {\n    id:             number;\n    logo_path:      string;\n    name:           string;\n    origin_country: string;\n}\n\nexport interface ProductionCountry {\n    iso_3166_1: string;\n    name:       string;\n}\n\nexport interface Recommendations {\n    page:          number;\n    results:       RecommendationsResult[];\n    total_pages:   number;\n    total_results: number;\n}\n\nexport interface RecommendationsResult {\n    id:                number;\n    video:             boolean;\n    vote_count:        number;\n    vote_average:      number;\n    title:             string;\n    release_date:      string;\n    original_language: OriginalLanguage;\n    original_title:    string;\n    genre_ids:         number[];\n    backdrop_path:     string;\n    adult:             boolean;\n    overview:          string;\n    poster_path:       string;\n    popularity:        number;\n}\n\nexport interface SpokenLanguage {\n    iso_639_1: OriginalLanguage;\n    name:      string;\n}\n\nexport interface Videos {\n    results: VideosResult[];\n}\n\nexport interface VideosResult {\n    id:         string;\n    iso_639_1:  OriginalLanguage;\n    iso_3166_1: string;\n    key:        string;\n    name:       string;\n    site:       string;\n    size:       number;\n    type:       string;\n}\n */\n\n",
            "properties": [
                {
                    "name": "page",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 217
                },
                {
                    "name": "results",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ITmdbResult[]",
                    "optional": false,
                    "description": "",
                    "line": 220
                },
                {
                    "name": "total_pages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 219
                },
                {
                    "name": "total_results",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 218
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ITmdbSearchQuery",
            "id": "interface-ITmdbSearchQuery-af609ff57db56d9ca4e20e81287c6db91685feed74f697eae4d9971f10b44eb92366f91c85690a6e8ec75b8145c6195eeb72d8c04d960d850c2150460d746a12",
            "file": "src/app/core/components/top-navigation/top-navigation.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\nimport { Observable } from 'rxjs'\nimport { IOmdbMovieDetail, MovieGenre, IGenre } from '@models/interfaces';\nimport { MOVIES, MOVIEGENRES } from '../../../mock-data';\nimport { STRING_REGEX_IMDB_ID } from '@shared/constants';\nimport { DataService } from '@services/data.service'\nimport { MovieService } from '@services/movie/movie.service'\nimport { IpcService } from '@services/ipc.service'\nimport { Router, ActivatedRoute } from '@angular/router'\nimport { Location } from '@angular/common'\nimport { environment } from '@environments/environment';\nimport { map, startWith } from 'rxjs/operators';\nimport { FormControl } from '@angular/forms';\n\nenum STATUS {\n  login = 'LOGIN',\n  logout = 'LOGOUT'\n}\n\n@Component({\n  selector: 'app-top-navigation',\n  templateUrl: './top-navigation.component.html',\n  styleUrls: ['./top-navigation.component.scss']\n})\nexport class TopNavigationComponent implements OnInit {\n  @Input() data: Observable<any>\n  constructor(\n    private dataService: DataService,\n    // private firebaseService: FirebaseService,\n    private ipcService: IpcService,\n    private movieService: MovieService,\n    private router: Router,\n    private activatedRoute: ActivatedRoute,\n    private location: Location) { }\n\n  isElectron = environment.runConfig.electron\n  status = 'LOGIN'\n  browserConnection = navigator.onLine;\n  selectedMovie: IOmdbMovieDetail\n  numbers;\n  currentYear = new Date().getFullYear()\n  genres = ['Action', 'Adventure', 'Documentary', 'Drama', 'Horror', 'Sci-Fi', 'Thriller'];\n  movieGenres = MOVIEGENRES;\n  types = ['TV Series', 'Movie', 'Short'];\n  searchQuery: ISearchQuery = {\n    query: '',\n    yearFrom: 1969,\n    yearTo: 2018,\n    genres: this.movieGenres,\n    type: 'TV Series',\n    isAvailable: 'true',\n    availability: '',\n    sortBy: ''\n  };\n  movies = MOVIES;\n  selectedMovies = []\n  isHighlighted = false\n  numberOfPages = 1\n  numberOfResults = 0\n  currentPage = 1\n  currentSearchQuery = ''\n  hasSearchResults = false\n  isSearchDirty = false\n  searchHistoryList = []\n  filteredOptions: Observable<string[]>;\n  SEARCH_HISTORY_MAX_LENGTH = 8\n  decadesList = []\n  voteAverageList = []\n  isSignedIn = false\n  lastQuery = ''\n\n  myControl = new FormControl();\n  ngOnInit() {\n    const e = localStorage.getItem('user')\n    // this.getSearchHistoryList()\n    if (e === null) {\n      this.status = 'LOGIN'\n      this.isSignedIn = false\n    } else {\n      this.isSignedIn = true\n      this.status = ''\n    }\n    this.filteredOptions = this.myControl.valueChanges.pipe(\n      startWith(''),\n      map(value => this._filter(value))\n    );\n  }\n  private _filter(value: string): string[] {\n    const filterValue = value.toLowerCase();\n\n    return this.searchHistoryList.filter(option => option.toLowerCase().indexOf(filterValue) === 0);\n  }\n\n  getSearchHistoryList() {\n    // })\n    // this.ipcService.call(this.ipcService.IPCCommand.GetSearchList)\n    // this.ipcService.searchList.subscribe(data => {\n    //   this.searchHistoryList = data\n    //   console.log('DATA:', data)\n    // })\n  }\n\n  /**\n   * Go to previous location\n   */\n  navigateBack() {\n    this.location.back()\n  }\n\n  /**\n   * Opens advanced search options.\n   */\n  onAdvancedSearch() {\n    this.router.navigate([`/advanced-find`], { relativeTo: this.activatedRoute });\n  }\n\n  /**\n   * Initialize search\n   */\n  onSearch(val: string) {\n    val = val.trim()\n    if (this.lastQuery === val && this.router.url === '/results') {\n      return\n    }\n    this.lastQuery = val\n    this.searchHistoryList.unshift(val)\n    this.removeDuplicate(val);\n    this.searchHistoryList.splice(this.searchHistoryList.indexOf(val), 1)\n    console.log(this.searchHistoryList);\n    if (this.searchHistoryList.length >= this.SEARCH_HISTORY_MAX_LENGTH) {\n      // this.searchHistoryList = this.searchHistoryList.splice(1)\n      this.searchHistoryList = this.searchHistoryList.slice(0, this.SEARCH_HISTORY_MAX_LENGTH)\n    }\n    const enteredQuery = val\n    // this.isSearchDirty = true\n    // this.currentPage = 1\n    // this.numberOfPages = 1\n    // this.numberOfResults = 0\n    // this.currentSearchQuery = enteredQuery\n    // // tt0092099 example\n\n    this.searchHistoryList.unshift(val);\n    const REGEX_IMDB_ID = new RegExp(STRING_REGEX_IMDB_ID, `gi`)\n    if (enteredQuery.match(REGEX_IMDB_ID)) {\n      this.searchByImdbId(enteredQuery)\n    } else {\n      this.searchByTitle(enteredQuery)\n    }\n  }\n\n  /**\n   * Searches movie by imdb id and redirects if there are results\n   * @param imdbId imdb id to search\n   */\n  searchByImdbId(imdbId: string) {\n    this.movieService.getMovieByImdbId(imdbId).subscribe(data => {\n      if (data.Response !== 'False') {\n        this.router.navigate([`/details/${imdbId}`], { relativeTo: this.activatedRoute });\n      } else {\n        this.hasSearchResults = false\n        // insert code for not found\n      }\n    })\n  }\n\n  /**\n   * Searches by title\n   * @param enteredQuery query to search\n   */\n  searchByTitle(enteredQuery: string) {\n    // this.dataService.currentSearchQuery = enteredQuery\n    if (this.searchQuery && this.searchQuery.query.length > 0) {\n      this.dataService.updateSearchQuery(this.searchQuery)\n      this.router.navigate([`/results`], { relativeTo: this.activatedRoute });\n    }\n  }\n\n  openProfile() {\n\n  }\n\n  signOut() {\n    // this.firebaseService.signOut()\n  }\n\n  onMinimize() {\n    this.ipcService.minimizeWindow()\n  }\n  onRestore() {\n    this.ipcService.minimizeRestoreWindow()\n  }\n  onExit() {\n    this.ipcService.exitApp()\n  }\n\n  private removeDuplicate(val: string) {\n    let result = this.searchHistoryList.filter((option, index) => {\n      console.log('option: ', option);\n      return this.searchHistoryList.indexOf(option) === index;\n    });\n    this.searchHistoryList = result;\n  }\n}\n\nexport interface ISearchQuery {\n  query: string,\n  yearFrom: number,\n  yearTo: number,\n  genres: MovieGenre[],\n  type: string,\n  isAvailable: string,\n  availability: string, // all, offline, netflix\n  ratingCount?: number,\n  ratingAverage?: number,\n  ratingAverageFrom?: number,\n  ratingAverageTo?: number,\n  sortBy: string,\n}\n\nexport interface ITmdbSearchQuery {\n  keywords: string,\n  decade: number\n  yearTo: number,\n  genres: IGenre[],\n}\n",
            "properties": [
                {
                    "name": "decade",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 223
                },
                {
                    "name": "genres",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IGenre[]",
                    "optional": false,
                    "description": "",
                    "line": 225
                },
                {
                    "name": "keywords",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 222
                },
                {
                    "name": "yearTo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 224
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IUserDataPaginated",
            "id": "interface-IUserDataPaginated-88e397b48570501d2155099bb31f9322acc23bd18595d1aca93c37f8404b5193d4990a928e2ef0f2759f3078524d816543be05c53659fcf0f24800e145c77598",
            "file": "src/app/services/ipc.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { environment } from '@environments/environment';\nimport * as IPCRendererChannel from '../../assets/IPCRendererChannel.json';\nimport * as IPCMainChannel from '../../assets/IPCMainChannel.json';\nimport { v4 as uuidv4 } from 'uuid'\nimport { Injectable } from '@angular/core'\nimport { BehaviorSubject, Observable, fromEvent } from 'rxjs'\nimport { ipcRenderer } from 'electron'\nimport { ILibraryInfo } from '@models/interfaces'\nimport { IRawLibrary } from './library.service';\nimport { IWatched } from './watched.service';\nimport { Review } from '@models/review.model';\nimport { IProfileData, ListLinkMovie } from '@models/profile-data.model';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class IpcService {\n\n  libraryMovies = new BehaviorSubject<string[]>([])\n  libraryMovie = new BehaviorSubject<string[]>([])\n  bookmarkChanges = new BehaviorSubject<IBookmarkChanges[]>([])\n  movieIdentified = new BehaviorSubject<any>({ id: 0 })\n  searchList = new BehaviorSubject<any>([])\n  torrentVideo = new BehaviorSubject<string[]>([])\n  preferences = new BehaviorSubject<any>([])\n  streamLink = new BehaviorSubject<any>('')\n  private statsForNerds = new BehaviorSubject<any>({})\n  statsForNerdsSubscribable = this.statsForNerds.asObservable()\n  private ipcRenderer: typeof ipcRenderer\n\n  constructor() {\n    if (environment.runConfig.electron) {\n\n      console.log((window as any).require('electron'))\n\n      this.ipcRenderer = (window as any).require('electron').ipcRenderer\n\n      this.ipcRenderer.on('torrent-video', (event, data: any) => {\n        console.log('event: ', event)\n        console.log('data: ', data)\n        this.torrentVideo.next(data)\n      })\n\n      this.ipcRenderer.on(IPCMainChannel.PREFERENCES_GET_COMPLETE, (event: Electron.IpcRendererEvent, data) => {\n        this.preferences.next(data)\n        console.log('IPCMainChannel.PREFERENCES_COMPLETE ', data)\n      })\n      this.ipcRenderer.on(IPCMainChannel.STREAM_LINK, (event: Electron.IpcRendererEvent, data) => {\n        this.streamLink.next(data)\n        console.log('IPCMainChannel.STREAM_LINK ', data)\n      })\n      this.ipcRenderer.on(IPCMainChannel.STATS, (event: Electron.IpcRendererEvent, data) => {\n        this.statsForNerds.next(data)\n        console.log('IPCMainChannel.STATS ', data)\n      })\n    }\n  }\n\n  async getFiles() {\n    // return new Promise<string[]>((resolve, reject) => {\n    //   this.ipcRenderer.once('library-folders', (event, arg) => {\n    //     resolve(arg);\n    //   });\n    //   this.ipcRenderer.send('retrieve-library-folders');\n    // });\n  }\n\n  /**\n   * Gets the drives in the system.\n   */\n  async getSystemDrives() {\n    // return new Promise<string[]>((resolve, reject) => {\n    //   this.ipcRenderer.once('system-drives', (event, arg) => {\n    //     resolve(arg);\n    //   });\n    // });\n    // this.ipcRenderer.send('get-drives')\n  }\n  /**\n   * Opens the folder\n   * @param data folder directory\n   */\n  openFolder(data: string) {\n    console.log('open', data)\n    // this.ipcRenderer.send('go-to-folder', ['open', data])\n  }\n\n  /**\n   * Ipc renderer that sends command to main renderer to get movies from library db.\n   * @param idList\n   */\n  getMoviesFromLibraryInList(idList: number[]): Promise<any> {\n    const theUuid = uuidv4()\n    this.sendToMain('library', { operation: IpcOperations.FIND_IN_LIST, uuid: theUuid },\n      { idList: idList });\n    return this.listenOnce(`library-${theUuid}`);\n  }\n\n  /**\n   * Paginated, first page.\n   * @param collectionName\n   * @param order\n   * @param size\n   */\n  getMultiplePaginatedFirst(collectionName: string, sort: string, size?: number): Promise<IUserDataPaginated> {\n    const theUuid = uuidv4()\n    this.sendToMain(collectionName, { operation: IpcOperations.GET_BY_PAGE, uuid: theUuid },\n      { sort: sort, size: size, lastVal: 0 });\n    return this.listenOnce(`${collectionName}-${theUuid}`);\n  }\n\n  /**\n   * Paginated, NOT first page.\n   * @param collectionName\n   * @param order\n   * @param limit\n   * @param lastVal\n   */\n  getMultiplePaginated(collectionName: string, sort: string, limit?: number, lastVal?: string | number): Promise<IUserDataPaginated> {\n    const theUuid = uuidv4()\n    this.sendToMain(collectionName, { operation: IpcOperations.GET_BY_PAGE, uuid: theUuid },\n      { sort: sort, limit: limit, lastVal: lastVal });\n    return this.listenOnce(`${collectionName}-${theUuid}`);\n  }\n\n  /**\n   * Ipc renderer that sends command to main renderer to get specified movie from library db.\n   * Replies offline library object(s).\n   * @param arg imdb id or movie title and release year or tmdb id\n   */\n  getMovieFromLibrary(arg): Promise<IRawLibrary> {\n    const theUuid = uuidv4()\n    this.sendToMain('library', { operation: IpcOperations.FIND, uuid: theUuid },\n      { tmdbId: arg });\n    return this.listenOnce(`library-${theUuid}`);\n  }\n\n  // // user services; watchlist/bookmarks, watched\n  getBookmark(data: number) {\n    const theUuid = uuidv4()\n    this.sendToMain('bookmark', { operation: IpcOperations.FIND_ONE, uuid: theUuid },\n      { tmdbId: data })\n    return this.listenOnce(`bookmark-${theUuid}`);\n  }\n\n  getBookmarkInList(idList: number[]): Promise<any> {\n    const theUuid = uuidv4()\n    this.sendToMain('bookmark', {\n      operation: IpcOperations.FIND_IN_LIST,\n      uuid: theUuid\n    }, { idList: idList });\n    return this.listenOnce(`bookmark-${theUuid}`);\n  }\n\n  saveBookmark(data) {\n    const theUuid = uuidv4()\n    this.sendToMain('bookmark', { operation: IpcOperations.SAVE, uuid: theUuid },\n      data);\n    return this.listenOnce(`bookmark-${theUuid}`);\n  }\n\n  removeBookmark(type: string, id: string | number) {\n    const theUuid = uuidv4()\n    this.sendToMain('bookmark', { operation: IpcOperations.REMOVE, uuid: theUuid }, { type: type, id: id });\n    return this.listenOnce(`bookmark-${theUuid}`);\n  }\n\n  // ----- WATCHED\n  getWatched(data: number) {\n    const theUuid = uuidv4()\n    this.sendToMain('watched', { operation: IpcOperations.FIND_ONE, uuid: theUuid },\n      { tmdbId: data })\n    return this.listenOnce(`watched-${theUuid}`);\n  }\n\n  /**\n   * Ipc renderer that sends command to main renderer to get movies from library db.\n   * @param idList\n   */\n  getWatchedInList(idList: number[]): Promise<any> {\n    const theUuid = uuidv4()\n    this.sendToMain('watched', {\n      operation: IpcOperations.FIND_IN_LIST,\n      uuid: theUuid\n    }, { idList: idList });\n    return this.listenOnce(`watched-${theUuid}`);\n  }\n\n  saveWatched(data) {\n    const theUuid = uuidv4()\n    this.sendToMain('watched', { operation: IpcOperations.SAVE, uuid: theUuid }, data);\n    return this.listenOnce(`watched-${theUuid}`);\n  }\n\n  updateWatchedStatus(val: IWatched) {\n    this.ipcRenderer.send('', val)\n  }\n\n  /**\n   * TODO: remove type\n   */\n  removeWatched(type: string, id: string | number) {\n    const theUuid = uuidv4()\n    this.sendToMain('watched', { operation: IpcOperations.REMOVE, uuid: theUuid }, { type: type, id: id });\n    return this.listenOnce(`watched-${theUuid}`);\n  }\n\n\n  // ----- END OF WATCHED\n  /**\n   *\n   * @param id tmdb id\n   */\n  getMovieUserData(id: number): Promise<IProfileData> {\n    const theUuid = uuidv4()\n    this.sendToMain('user-data', {\n      operation: IpcOperations.FIND,\n      uuid: theUuid\n    }, { tmdbId: id });\n    return this.listenOnce(`user-data-${theUuid}`);\n  }\n\n  getMovieUserDataInList(idList: number[]): Promise<IProfileData[]> {\n    const theUuid = uuidv4()\n    this.sendToMain('user-data', {\n      operation: IpcOperations.FIND_IN_LIST,\n      uuid: theUuid\n    }, { idList: idList });\n    return this.listenOnce(`user-data-${theUuid}`)\n  }\n\n  saveFavorite(data) {\n    const theUuid = uuidv4()\n    this.sendToMain('favorite', { operation: IpcOperations.SAVE, uuid: theUuid }, data);\n    return this.listenOnce(`favorite-${theUuid}`);\n  }\n\n  // ----- END OF USER DATA\n  startScanLibrary() {\n\n    this.sendToMain(IPCRendererChannel.SCAN_LIBRARY_START)\n    this.ipcRenderer.on(IPCMainChannel.ScanLibraryResult, e => {\n      console.log(IPCMainChannel.ScanLibraryResult, e)\n    })\n    this.ipcRenderer.once(IPCMainChannel.ScanLibraryComplete, e => {\n      console.log('completscan')\n      this.ipcRenderer.removeListener(IPCMainChannel.ScanLibraryResult, d => { })\n    })\n  }\n\n  stopScanLibrary() {\n    this.sendToMain(IPCRendererChannel.SCAN_LIBRARY_STOP)\n  }\n\n  getPlayTorrent(hash: string): Promise<any> {\n    this.sendToMain(IPCRendererChannel.PLAY_TORRENT, hash)\n    return this.listenOnce(`stream-link`);\n  }\n\n  stopStream() {\n    this.sendToMain(IPCRendererChannel.STOP_STREAM)\n  }\n\n  playOfflineVideo(docId): Promise<any> {\n    this.sendToMain(IPCRendererChannel.PLAY_OFFLINE_VIDEO_STREAM, docId);\n    return this.listenOnce(`stream-link`);\n  }\n\n  getPreferences() {\n\n    this.sendToMain(IPCRendererChannel.PREFERENCES_GET)\n    // this.ipcRenderer.addListener(IPCMainChannel.PREFERENCES_GET_COMPLETE, this.pref)\n\n    // (event, data: any) => {\n    // console.log('IPCMainChannel.PREFERENCES_COMPLETE ', data)\n    // this.pref()\n    // this.preferences.next(data)\n    // this.ipcRenderer.removeListener(IPCMainChannel.PREFERENCES_GET_COMPLETE, e => { })\n    // })\n  }\n\n  savePreferences(val) {\n    this.sendToMain(IPCRendererChannel.PREFERENCES_SET, val)\n    // this.ipcRenderer.on(IPCMainChannel.PREFERENCES_SET_COMPLETE, (event, data: any) => {\n    //   console.log('IPCMainChannel.PREFERENCES_SET_COMPLETE ', data)\n    //   this.preferences.next(data)\n    //   this.ipcRenderer.removeListener(IPCMainChannel.PREFERENCES_SET_COMPLETE, d => { })\n    // })\n  }\n\n  changeSubtitle(): Promise<any> {\n    this.sendToMain(\"get-subtitle\")\n    return this.listenOnce('subtitle-path')\n  }\n\n  minimizeWindow() {\n    this.sendToMain(this.IPCCommand.MinimizeApp)\n  }\n  minimizeRestoreWindow() {\n    this.sendToMain(this.IPCCommand.RestoreApp)\n  }\n  exitApp() {\n    this.sendToMain(this.IPCCommand.ExitApp)\n  }\n\n  private removeListener(channel: string) {\n    console.log('REMOVING LISTENER', channel)\n    this.ipcRenderer.removeListener(channel, d => { })\n  }\n\n  private sendToMain(channel: string, headers?: Headers | string, body?: Body) {\n    try {\n      this.ipcRenderer.send(channel, [headers, body])\n      console.log('sent to ipc... ', channel, [headers, body])\n    } catch {\n      console.log('failed to send Ipc: ', channel, [headers, body])\n    }\n  }\n\n  private listenOnce(channel: string) {\n    return new Promise<any>((resolve, reject) => {\n      try {\n        this.ipcRenderer.once(channel, (event, arg) => {\n          console.log('channel: ', channel, ' arg: ', arg)\n          resolve(arg);\n        });\n      } catch {\n        resolve(null);\n        console.log(`listen ${channel} failed`)\n      }\n    });\n  }\n\n  IPCCommand = IPCRendererChannel['default']\n  IPCChannel = IPCMainChannel['default']\n}\n\ninterface Headers {\n  operation: IpcOperations,\n  uuid: string\n}\n\ninterface Body {\n  tmdbId?: number\n  idList?: number[]\n  [x: string]: any\n}\n\nenum IpcOperations {\n  FIND = 'find',\n  FIND_ONE = 'find-one',\n  FIND_IN_LIST = 'find-in-list',\n  UPDATE = 'update',\n  SAVE = 'save',\n  REMOVE = 'remove',\n  GET_BY_PAGE = 'get-by-page',\n  COUNT = 'count'\n}\nexport interface IBookmarkChanges {\n  change: BookmarkChanges\n}\n\nexport enum BookmarkChanges {\n  UPDATE = 'update',\n  DELETE = 'delete',\n  INSERT = 'insert'\n}\n\nexport interface IBookmark {\n  tmdbId: number,\n  imdbId: string,\n  id: string\n}\n\n\n\ninterface ILibrary {\n  title?: string,\n  year?: number,\n  tmdbId?: number,\n  imdbId?: string,\n  libraryList: ILibraryData[]\n}\n\ninterface ILibraryData {\n  fullFilePath: string,\n  _id: string\n}\n\nexport interface IUserDataPaginated {\n  totalPages: number,\n  totalResults: number,\n  page?: number,\n  results: any[],\n}\n\ninterface SortObject {\n  [x: string]: 1 | -1\n}\n",
            "properties": [
                {
                    "name": "page",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 401
                },
                {
                    "name": "results",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 402
                },
                {
                    "name": "totalPages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 399
                },
                {
                    "name": "totalResults",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 400
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IUserSavedData",
            "id": "interface-IUserSavedData-584d54738f93e2af94202069b5eddb4cab23bb2dfec2ff69f24ebaf881c252f94680b4cd6cec302796817692570a31bedafc5d74fed1cf6488a895dbf372e23d",
            "file": "src/app/models/interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IMdbMovieDetails {\n  awards?: string\n  backgroundPath: string;\n  belongsToCollection?: []\n  boxOffice?: string | number // tmdb:revenue(number)\n  budget?: number\n  country?: string\n  director?: string\n  dvd?: string // dvd release\n  genres?: string[] | string | IGenre[]\n  imdbId?: string\n  imdbRating?: string\n  imdbVotes?: string\n  isAdult?: boolean;\n  isAvailable?: boolean;\n  languages?: string[]\n  libraryInfo?: ILibraryInfo\n  metascore?: string // metacritic score\\\n  originalLanguage?: string // tmdb:\"en\",omdb:\"English\"\n  originalTitle?: string\n  plot?: string // plot or overview\n  popularity?: number\n  posterPath: string\n  production?: string // company; i.e. Walt Disney Pictures\n  rated?: string // rated or certificate\n  ratings?: IRating[]\n  releaseDate?: string // omdb:\"05 May 2017\"; tmdb:\"1999-10-15\"\n  releaseYear?: number | string\n  response: string\n  runtime?: string\n  starring?: string // Actors field in omdb\n  status?: string // released/Post\n  tagline?: string;\n  tmdbId?: number\n  title: string\n  type?: string // movie/tvmovie/series\n  video?: boolean; // unknown\n  // voteAverage: number; // tmdb votes\n  // voteCount: number; // tmdb votes\n  website?: string\n  writer?: string // omdb\n  [propName: string]: any;\n}\n\nexport interface IRating {\n  Source: string\n  Value: string\n}\n\nexport interface LibraryInfo {\n  tmdbId?: null | number | string\n  imdbID?: string\n  title?: string\n  year?: number\n  directoryList?: string[]\n  _id: string\n}\n\nexport interface MovieGenre {\n  id: number\n  code: string\n  description: string\n  isChecked: boolean\n}\n\nexport interface WatchList {\n  id: number\n  movieList: string[]\n}\n\nexport interface ILibraryInfo {\n  tmdbId?: null | number | string\n  imdbID?: string\n  title?: string\n  year?: number\n  directoryList?: string[]\n  _id: string\n}\n\nexport interface ICollection {\n  id: number,\n  name: string\n}\n\nexport interface IProductionCompany {\n  id: number;\n  logo_path: null | string;\n  name: string;\n  origin_country: string;\n}\n\nexport interface IProductionCountry {\n  iso_3166_1: string;\n  name: string;\n}\n\nexport interface ISpokenLanguage {\n  iso_639_1: string;\n  name: string;\n}\n\nexport interface IOmdbMovieDetail {\n  Title: string\n  Year?: string\n  Rated?: string\n  Released?: string // \"05 May 2017\"\n  Runtime?: string\n  Genre?: string\n  Director?: string\n  Writer?: string\n  Actors?: string\n  Plot?: string\n  Language?: string\n  Country?: string\n  Awards?: string\n  Poster?: string\n  Ratings?: IRating[]\n  Metascore?: string\n  imdbRating?: string\n  imdbVotes?: string\n  imdbID: string\n  Type?: string\n  DVD?: string\n  BoxOffice?: string\n  Production?: string\n  Website?: string\n  Response: string\n}\n\nexport interface ITmdbMovieDetail {\n  adult: boolean;\n  backdrop_path: string;\n  belongs_to_collection: null;\n  budget: number;\n  genres: IGenre[];\n  homepage: string;\n  id: number;\n  imdb_id: string;\n  original_language: string;\n  original_title: string;\n  overview: string;\n  popularity: number;\n  poster_path: string;\n  production_companies: IProductionCompany[];\n  production_countries: IProductionCountry[];\n  release_date: string;\n  revenue: number;\n  runtime: number;\n  spoken_languages: ISpokenLanguage[];\n  status: string;\n  tagline: string;\n  title: string;\n  video: boolean;\n  vote_average: number;\n  vote_count: number;\n}\n\nexport interface MdbMovieDetails {\n  adult?: boolean;\n  title: string\n  releaseYear?: string\n  releaseDate?: string\n  rated?: string // rated or certificate\n  runtime?: string\n  genres?: string\n  director?: string\n  writer?: string\n  Actors?: string\n  plot?: string // plot or overview\n  Language?: string\n  Country?: string\n  Awards?: string\n  Poster?: string\n  Ratings?: IRating[]\n  Metascore?: string\n  imdbRating?: string\n  imdbVotes?: string\n  imdbID: string\n  tmdbID: number\n  Type?: string\n  DVD?: string\n  BoxOffice?: string\n  Production?: string\n  website?: string\n  response: string\n  libraryInfo?: ILibraryInfo\n}\n\n// // adult: boolean;\n// //backdrop_path: string;\n// belongs_to_collection: null;\n// // budget: number;\n// genres: Genre[];\n// // homepage: string;\n// // id: number;\n// // imdb_id: string;\n// original_language: string;\n// original_title: string;\n// // overview: string;\n// // popularity: number;\n// // poster_path: string;\n// production_companies: ProductionCompany[];\n// production_countries: ProductionCountry[];\n// // release_date: string;\n// // revenue: number;\n// // runtime: number;\n// spoken_languages: SpokenLanguage[];\n// // status: string;\n// // tagline: string;\n// // title: string;\n// // video: boolean;\n// // vote_average: number;\n// // vote_count: number;\n\nexport interface ITmdbResultObject {\n  page: number;\n  total_results: number;\n  total_pages: number;\n  results: ITmdbResult[];\n}\n\nexport interface ITmdbResult {\n  popularity: number\n  vote_count: number\n  video: boolean\n  poster_path: string\n  id: number\n  adult: boolean\n  backdrop_path: string\n  original_language: string\n  original_title: string\n  genre_ids: number[]\n  title: string\n  vote_average: number\n  overview: string\n  release_date: string\n  isAvailable?: boolean\n  isHighlighted?: boolean\n}\n\nexport interface ILibraryMovie {\n  tmdbId?: number,\n  title: string,\n  year: number,\n  imdbId?: string,\n  directory: string[]\n}\n\nexport interface IGenre {\n  id: number\n  name: string\n}\n\nexport interface Credits {\n  id: number;\n  cast: CastElement[];\n  crew: Crew[];\n}\n\ninterface CastElement {\n  cast_id: number;\n  character: string;\n  credit_id: string;\n  gender: number;\n  id: number;\n  name: string;\n  order: number;\n  profile_path: null | string;\n}\n\ninterface Crew {\n  credit_id: string;\n  department: Department;\n  gender: number;\n  id: number;\n  job: string;\n  name: string;\n  profile_path: null | string;\n}\n\nexport enum Department {\n  Art = 'Art',\n  Camera = 'Camera',\n  CostumeMakeUp = 'Costume & Make-Up',\n  Crew = 'Crew',\n  Directing = 'Directing',\n  Editing = 'Editing',\n  Lighting = 'Lighting',\n  Production = 'Production',\n  Sound = 'Sound',\n  VisualEffects = 'Visual Effects',\n  Writing = 'Writing',\n}\n\nexport class MDBTorrent {\n  id?: string\n  name?: string\n  size?: string\n  hash: string\n  url?: string\n  quality?: string\n  type?: string\n  seeds?: number\n  peers?: number\n  sizeBytes?: number\n  added?: string\n  dateUploaded?: string\n  dateUploadedUnix?: number\n  isYts?: boolean\n  magnetLink?: string\n}\n\nexport class ITPBTorrent {\n  id?: number\n  name?: string\n  hash: string\n  sizeBytes?: number\n  added?: string\n}\n\nexport interface ISearch {\n  page: number\n}\n\nexport enum OmdbParameters {\n  ApiKey = 'apikey',\n  ImdbId = 'i',\n  Title = 't',\n  Type = 'type',\n  Year = 'y',\n  Plot = 'plot',\n  Return = 'r',\n  Callback = 'callback',\n  Version = 'v',\n}\n\nexport enum TmdbParameters {\n  ApiKey = 'api_key',\n  AppendToResponse = 'append_to_response',\n  Language = 'language',\n  Region = 'region',\n  SortBy = 'sort_by',\n  CertificationCountry = 'certification_country',\n  Certification = 'certification',\n  CertificationLess = 'certification.lte',\n  CertificationGreater = 'certification.gte',\n  IncludeAdult = 'include_adult',\n  IncludeVideo = 'include_video',\n  Page = 'page',\n  PrimaryReleaseYear = 'primary_release_year',\n  PrimaryReleaseDateGreater = 'primary_release_date.gte',\n  PrimaryReleaseDateLess = 'primary_release_date.lte',\n  ReleaseDateGreater = 'release_date.gte',\n  ReleaseDateLess = 'release_date.lte',\n  WithReleaseType = 'with_release_type',\n  Year = 'year',\n  VoteCountGreater = 'vote_count.gte',\n  VoteCountLess = 'vote_count.lte',\n  VoteAverageGreater = 'vote_average.gte',\n  VoteAverageLess = 'vote_average.lte',\n  WithCast = 'with_cast',\n  WithCrew = 'with_crew',\n  WithPeople = 'with_people',\n  WithCompanies = 'with_companies',\n  WithGenres = 'with_genres',\n  WithoutGenres = 'without_genres',\n  WithKeywords = 'with_keywords',\n  WithoutKeywords = 'without_keywords',\n  WithRuntimeGreater = 'with_runtime.gte',\n  WithRuntimeLess = 'with_runtime.lte',\n  WithOriginalLanguage = 'with_original_language',\n  WithWatchProviders = 'with_watch_providers',\n  WatchRegion = 'watch_region'\n}\n\nexport enum TmdbSearchMovieParameters {\n  ApiKey = 'api_key',\n  Language = 'language', // Pass a ISO 639 - 1 value to display translated data for the fields that support it. minLength: 2 pattern: ([a - z]{ 2 }) -([A - Z]{ 2 }) default: en - US\n  Query = 'query',\n  Page = 'page', // minimum: 1 maximum: 1000\n  IncludeAdult = 'include_adult',\n  Region = 'region',\n  // Specify a ISO 3166 - 1 code to filter release dates.Must be uppercase. pattern: ^ [A - Z]{ 2 } $\n  Year = 'year',\n  PrimaryReleaseYear = 'primary_release_year'\n}\n\nenum TmdbAppendToResponseParameters {\n  AccountStates = 'account_states',\n  Videos = 'videos',\n  Images = 'images',\n  Credits = 'credits',\n  Changes = 'changes',\n  Translations = 'translations',\n  Similar = 'similar',\n  ExternalIds = 'external_ids',\n  AlternativeTitles = 'alternative_titles',\n  Keywords = 'keywords',\n  Reviews = 'reviews',\n  Recommendations = 'recommendations',\n  ReleaseDates = 'release_dates',\n  Lists = 'lists'\n}\n\nenum TmdbReleaseTypes {\n  PREMIERE = 'Premiere',  // 1\n  THEATRICAL_LIMITED = 'Theatrical(limited)', // 2\n  THEATRICAL = 'Theatrical', // 3\n  DIGITAL = 'Digital', // 4\n  PHYSICAL = 'Physical', // 5\n  TV = 'TV', // 6\n}\n\nexport interface IPersonDetails {\n  birthday: string;\n  known_for_department: string;\n  id: number;\n  movie_credits?: IPersonCredits;\n  tv_credits?: IPersonCredits;\n  combined_credits?: IPersonCredits;\n  homepage?: any;\n  profile_path: string;\n  imdb_id: string;\n  deathday?: any;\n  images?: IImages;\n  external_ids?: IExternalids;\n  name: string;\n  also_known_as: string[];\n  biography: string;\n  adult: boolean;\n  gender: number;\n  place_of_birth: string;\n  popularity: number;\n}\n\nexport interface IPersonCredits {\n  cast: IPersonCastCrew[];\n  crew: IPersonCastCrew[];\n  id?: number;\n}\n\nexport interface IPersonCastCrew {\n  id?: number;\n  original_language: string;\n  episode_count?: number;\n  overview: string;\n  origin_country?: string[];\n  original_name?: string;\n  genre_ids: number[];\n  name?: string;\n  media_type: string;\n  poster_path: null | string;\n  first_air_date?: string;\n  vote_average: number;\n  vote_count: number;\n  character?: string;\n  backdrop_path: null | string;\n  popularity: number;\n  credit_id: string;\n  original_title?: string;\n  video?: boolean;\n  release_date?: string;\n  title?: string;\n  adult?: boolean;\n  department?: string;\n  job?: string;\n}\n\nexport interface IExternalids {\n  id?: number;\n  freebase_id: string;\n  instagram_id: string;\n  tvrage_id: number;\n  twitter_id: string;\n  freebase_mid: string;\n  imdb_id: string;\n  facebook_id: string;\n}\n\nexport interface IImages {\n  id?: number;\n  profiles: IProfile[];\n}\n\nexport interface IProfile {\n  iso_639_1?: any;\n  aspect_ratio: number;\n  vote_count: number;\n  height: number;\n  vote_average: number;\n  file_path: string;\n  width: number;\n}\n\nexport interface ICredits {\n  cast: ICast[];\n  crew: ICrew[];\n}\n\ninterface ICast {\n  poster_path?: string;\n  adult: boolean;\n  backdrop_path?: string;\n  vote_count: number;\n  video: boolean;\n  id: number;\n  media_type?: string;\n  popularity: number;\n  genre_ids: number[];\n  original_language: string;\n  title: string;\n  original_title: string;\n  release_date: string;\n  character: string;\n  vote_average: number;\n  overview: string;\n  credit_id: string;\n}\n\ninterface ICrew {\n  id: number;\n  department: string;\n  original_language: string;\n  original_title: string;\n  job: string;\n  overview: string;\n  genre_ids: number[];\n  video: boolean;\n  episode_count: number\n  media_type?: string;\n  credit_id: string;\n  poster_path?: string;\n  popularity: number;\n  backdrop_path?: string;\n  vote_count: number;\n  title: string;\n  adult: boolean;\n  vote_average: number;\n  release_date: string;\n}\n\nexport interface IUserSavedData {\n  id?: string,\n  title: string,\n  year: number,\n  tmdbId: number,\n}\n\nexport enum GenreCodes {\n  Action = 28,\n  Adventure = 12,\n  Animation = 16,\n  Comedy = 35,\n  Crime = 80,\n  Documentary = 99,\n  Drama = 18,\n  Family = 10751,\n  Fantasy = 14,\n  History = 36,\n  Horror = 27,\n  Music = 10402,\n  Mystery = 9648,\n  Romance = 10749,\n  ScienceFiction = 878,\n  TVMovie = 10770,\n  Thriller = 53,\n  War = 10752,\n  Western = 37,\n  // mdb reserved\n  FilmNoir = 20000,\n  // similar genre: Music id:10402\n  Musical = 20001,\n  News = 20002,\n  RealityTV = 20003,\n  // similar genre: Science Fiction id:878\n  SciFi = 20004,\n  // another media type\n  Short = 20005,\n  Sport = 20006,\n}\n\n\n\n/**\nexport enum Department {\n    Art = \"Art\",\n    Camera = \"Camera\",\n    CostumeMakeUp = \"Costume & Make-Up\",\n    Crew = \"Crew\",\n    Directing = \"Directing\",\n    Editing = \"Editing\",\n    Lighting = \"Lighting\",\n    Production = \"Production\",\n    Sound = \"Sound\",\n    VisualEffects = \"Visual Effects\",\n    Writing = \"Writing\",\n}\n\nexport interface ExternalIDS {\n    imdb_id:      string;\n    facebook_id:  null;\n    instagram_id: null;\n    twitter_id:   null;\n}\n\nexport interface Genre {\n    id:   number;\n    name: string;\n}\n\nexport interface Images {\n    backdrops: any[];\n    posters:   any[];\n}\n\nexport enum OriginalLanguage {\n    En = \"en\",\n    Es = \"es\",\n    Fr = \"fr\",\n}\n\nexport interface ProductionCompany {\n    id:             number;\n    logo_path:      string;\n    name:           string;\n    origin_country: string;\n}\n\nexport interface ProductionCountry {\n    iso_3166_1: string;\n    name:       string;\n}\n\nexport interface Recommendations {\n    page:          number;\n    results:       RecommendationsResult[];\n    total_pages:   number;\n    total_results: number;\n}\n\nexport interface RecommendationsResult {\n    id:                number;\n    video:             boolean;\n    vote_count:        number;\n    vote_average:      number;\n    title:             string;\n    release_date:      string;\n    original_language: OriginalLanguage;\n    original_title:    string;\n    genre_ids:         number[];\n    backdrop_path:     string;\n    adult:             boolean;\n    overview:          string;\n    poster_path:       string;\n    popularity:        number;\n}\n\nexport interface SpokenLanguage {\n    iso_639_1: OriginalLanguage;\n    name:      string;\n}\n\nexport interface Videos {\n    results: VideosResult[];\n}\n\nexport interface VideosResult {\n    id:         string;\n    iso_639_1:  OriginalLanguage;\n    iso_3166_1: string;\n    key:        string;\n    name:       string;\n    site:       string;\n    size:       number;\n    type:       string;\n}\n */\n\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 544
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 545
                },
                {
                    "name": "tmdbId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 547
                },
                {
                    "name": "year",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 546
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IVideo",
            "id": "interface-IVideo-1fe741c1bd1cbf7dcb5ab651b5e2a2c1698d17be281716ce1ab4567a992d5520dc1c378f451304d3cc61240d75f5ce4cde0ba3b3567c3c1bfce3d16871d2e55e",
            "file": "src/app/services/library.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IUserSavedData } from '@models/interfaces';\nimport { environment } from '@environments/environment';\nimport { Injectable } from '@angular/core';\nimport { IpcService } from './ipc.service';\nimport { FirebaseService, CollectionName, FieldName, FirebaseOperator } from './firebase.service';\n\n@Injectable({ providedIn: 'root' })\nexport class LibraryService {\n\n  constructor(\n    private ipcService: IpcService,\n    private firebaseService: FirebaseService,\n  ) {\n\n  }\n\n  /**\n   * Opens a video stream to watch.\n   * @param id library id to open stream\n   * @returns stream link/url\n   */\n  async openVideoStream(id) {\n    // this.ipcService.playOfflineVideo(id) // commented to make way for torrent-play\n    return this.ipcService.playOfflineVideo(id)\n    // return new Promise((resolve, reject) => {\n    //   if (environment.runConfig.firebaseMode) {\n    //     this.firebaseService.getFromFirestore(CollectionName.Library, FieldName.TmdbId, FirebaseOperator.Equal, id).then(e => {\n    //       resolve(e)\n    //     }).catch(e => {\n    //       reject(e)\n    //     })\n    //     // })\n    //   } else {\n    //     this.ipcService.LibraryFile.toPromise().then(e => {\n    //       resolve(e)\n    //     })\n    //   }\n    // })\n  }\n\n  /**\n   * Gets movie library.\n   * @param id - tmdbId or imdbId\n   */\n  getMovieFromLibrary(id: number | string): Promise<any> {\n    const myFunction = environment.runConfig.firebaseMode ?\n      this.firebaseService.getFromFirestore(CollectionName.Library, FieldName.TmdbId, FirebaseOperator.Equal, id) :\n      this.ipcService.getMovieFromLibrary(id)\n    return myFunction\n  }\n\n  /**\n   * Gets multiple library using list. Movie(s) eventually becomes available in status.\n   * @param idList\n   */\n  getMoviesFromLibraryInList(idList: number[]): Promise<any> {\n    console.log('getting multiplevideos...', idList);\n    const myFunction = environment.runConfig.firebaseMode ?\n      this.firebaseService.getFromFirestoreMultiple(CollectionName.Library, FieldName.TmdbId, idList) :\n      this.ipcService.getMoviesFromLibraryInList(idList)\n    return myFunction\n  }\n\n  /**\n   * Gets first page of list. Gets multiple videos. Movie(s) eventually becomes available in status.\n   */\n  getLibraryPaginatedFirstPage(): Promise<any> {\n    const myFunction = environment.runConfig.firebaseMode ? null : this.ipcService.getMultiplePaginatedFirst(CollectionName.Library, FieldName.TmdbId, 20)\n    // this.firebaseService.getFromFirestoreMultiplePaginated(CollectionName.Library, FieldName.TmdbId, 20)\n    return myFunction\n  }\n\n  /**\n   * Gets multiple library.\n   * @param lastVal the last value to start with.\n   */\n  getLibraryPaginated(lastVal: string | number): Promise<any> {\n    console.log('getVideoPaginated...', lastVal);\n    const myFunction = environment.runConfig.firebaseMode ?\n      this.firebaseService.getFromFirestoreMultiplePaginated(CollectionName.Library, FieldName.TmdbId, 20, lastVal) :\n      this.ipcService.getMultiplePaginated(CollectionName.Library, FieldName.TmdbId, 20, lastVal)\n    return myFunction\n  }\n\n}\n\nexport interface IVideo extends IUserSavedData {\n  tmdbId: number,\n  imdbId?: string,\n  title: string,\n  year: number,\n  id: string,\n  videoUrl: string,\n  filePath?: string,\n  cre8Ts?: number, // create timestamp\n  timestamp?: number,\n}\n\nexport interface IRawLibrary {\n  fullFilePath: string,\n  title: string,\n  year: number,\n  tmdbId: number,\n  _id: string\n}\n\ninterface Library {\n  type: 'movie' | 'video' | 'audio' | 'music' | 'podcast' | 'videogame',\n  source: 'local' | 'online',\n  id: string,\n  title: string\n}\n",
            "properties": [
                {
                    "name": "cre8Ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 95
                },
                {
                    "name": "filePath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 94
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 92
                },
                {
                    "name": "imdbId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 89
                },
                {
                    "name": "timestamp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 96
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 90
                },
                {
                    "name": "tmdbId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 88
                },
                {
                    "name": "videoUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 93
                },
                {
                    "name": "year",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 91
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "IUserSavedData"
        },
        {
            "name": "IVideoTime",
            "id": "interface-IVideoTime-588585bdf2d6064ecb2f9bd835b9a8acb99adfb30b717f933e69f83a68c7ae04ad51feb9141293ddac1bb8a42c569d3460cdc83ad38e869c1227894beb630d13",
            "file": "src/app/modules/watch/video-player-controls/video-player-controls.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { IpcService } from '@services/ipc.service';\nimport { COLOR_LIST, FONT_SIZE_LIST, PERCENTAGE_LIST, RGB_COLOR_LIST } from '@shared/constants';\nimport GeneralUtil from '@utils/general.util';\n\n@Component({\n  selector: 'mdb-video-player-controls',\n  templateUrl: './video-player-controls.component.html',\n  styleUrls: ['./video-player-controls.component.scss']\n})\nexport class VideoPlayerControlsComponent implements OnInit {\n\n  @Input() isMuted: boolean\n  @Input() isPlaying: boolean\n  @Input() isShowSubtitles: boolean = false\n  @Input() canPlay: boolean\n  @Input() videoPlayerElement: any\n  @Input() volume: number\n  // @Input() videoPlayer1: any // tocheck\n  @Input() videoTime: IVideoTime\n  @Input() progressBar: IProgressBar\n\n  @Output() onTogglePlay = new EventEmitter<any>();\n  @Output() onToggleMute = new EventEmitter<any>();\n  @Output() onToggleFullScreen = new EventEmitter<any>();\n  @Output() onToggleSubtitles = new EventEmitter<boolean>();\n  @Output() onSeekValue = new EventEmitter<any>();\n  @Output() onChangeVolume = new EventEmitter<any>();\n  @Output() onChangeSubtitleFile = new EventEmitter<any>();\n  @Output() onChangeFontColor = new EventEmitter<any>();\n  @Output() onChangeFontSize = new EventEmitter<any>();\n  @Output() onChangeBackgroundColor = new EventEmitter<any>();\n  @Output() onChangeBackgroundOpacity = new EventEmitter<any>();\n\n  fontColorsList = RGB_COLOR_LIST\n  // fontColorsList = COLOR_LIST\n  fontSizeList = FONT_SIZE_LIST\n  percentageList = PERCENTAGE_LIST;\n  seekTooltip: any\n  toSeek: number = 0\n  // isPlaying: boolean = false\n  isPaused: false;\n  isShowStatus = false;\n  constructor(\n    private ipcService: IpcService) { }\n\n  ngOnInit() {\n  }\n\n  updateProgressBar() {\n  }\n  /**\n   * Event for video player scrubber tooltip\n   */\n  mouseMove(e) {\n    this.seekTooltip = GeneralUtil.convertToHHMMSS(this.calculateSeekSeconds(e))\n  }\n\n  onSeek() {\n    this.onSeekValue.emit(this.toSeek);\n  }\n\n  togglePlay() {\n    this.onTogglePlay.emit()\n  }\n  toggleMute() {\n    this.onToggleMute.emit()\n  }\n  toggleFullScreen() {\n    this.onToggleFullScreen.emit()\n  }\n  volumeChange(val) {\n    this.onChangeVolume.emit(val);\n  }\n\n  toggleSubtitles(val: boolean) {\n    this.onToggleSubtitles.emit(val)\n  }\n\n  async changeCc() {\n    // let filePath = 'Aliens.Directors.Cut.1986.1080p.BRrip.x264.GAZ.YIFY.srt'\n    let filePath = ''\n    // let filePath = 'Cinema Paradiso-English.srt'\n    // filePath = '../../../../assets/tmp/' + filePath\n    filePath = await this.ipcService.changeSubtitle()\n    GeneralUtil.DEBUG.log('filePath', filePath)\n    this.onChangeSubtitleFile.emit(filePath);\n  }\n\n\n  changeFontColor(color: string) {\n    this.onChangeFontColor.emit(color);\n  }\n  changeFontSize(size: string) {\n    this.onChangeFontSize.emit(size);\n  }\n  changeBackgroundColor(color: string) {\n    this.onChangeBackgroundColor.emit(color);\n  }\n  changeBackgroundOpacity(percentage: string) {\n    this.onChangeBackgroundOpacity.emit(percentage);\n  }\n\n\n  private calculateSeekSeconds(val) {\n    const totalWidth = val.currentTarget.offsetWidth\n    const offsetX = val.offsetX\n    const percentage = GeneralUtil.getPercentage(offsetX, totalWidth)\n    this.toSeek = (percentage / 100) * this.videoTime.duration\n    return this.toSeek\n  }\n}\n\ninterface IVideoTime {\n  elapsed: number,\n  duration: number,\n  remaining: number\n}\n\nexport interface IProgressBar {\n  buffered: string,\n  played: string,\n}\n",
            "properties": [
                {
                    "name": "duration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 116
                },
                {
                    "name": "elapsed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 115
                },
                {
                    "name": "remaining",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 117
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IVote",
            "id": "interface-IVote-ab3c214285c1bfb717ed3d3b0126b69c830be2c667b8ea1793b5a95dd2f4bb2586d106c6397d01b558a5443d11988665d988e81d61dce2a7c48ca0eb54dacd73",
            "file": "src/app/models/mdb-movie.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Department, IRating } from \"./interfaces\"\nimport { TMDB_External_Id } from \"./tmdb-external-id.model\"\nimport { IProfileData } from \"./profile-data.model\"\n\nexport class MDBMovie {\n  mdbId: string\n  imdbId: string\n  tmdbId: number\n  title: string\n  originalTitle: string\n  originalLanguage: string\n  overview: string\n  popularity: number\n  posterPath: string\n  userData: IProfileData\n  backropPath: string\n  credits: ICredits\n  rating: IRating\n  isAdult: boolean\n  vote: IVote\n  releaseDate: string\n  runtime: number // runtme by minutes\n  status: string\n  tagline: string\n  externalIds: TMDB_External_Id\n  genres: any\n  genreIds: number[]\n  // not used much\n  budget: number\n  website: string\n  revenue: number\n  spokenLanguages: any\n  video: boolean\n  // to map further\n  recommendations: any\n  images: any\n  videos: any\n  productionCompanies: any\n  collection: any\n  productionCountries: any\n  releaseDates: any\n\n  constructor(value?: any) {\n    if (value != null) {\n      this.mapToObject(value)\n    }\n  }\n\n  private nestMapper(val: any, ...args) {\n    let toReturn = null\n    try {\n      if (this.getNested(val, args))\n        toReturn = val\n    } catch {\n      toReturn = null\n    }\n    return toReturn\n  }\n\n  getNested(obj, ...args) {\n    return args.reduce((obj, level) => obj && obj[level], obj)\n  }\n  /**\n   * https://stackoverflow.com/questions/47632430/pattern-for-dealing-with-mapping-api-objects-to-ui-model-objects\n   * @param value orig value\n   * @param source tmdb, mdb or omdb\n   */\n  private mapToObject(value: any, source?: string) {\n\n    this.imdbId = value['imdb_id'] || value['imdbId']\n    this.tmdbId = value['id'] || value['tmdbId']\n    this.mdbId = value['tmdbId'] || value['id']\n    this.title = value['title']\n    this.originalTitle = value['original_language'] || value['originalTitle']\n    this.originalLanguage = value['original_title'] || value['originalLanguage']\n    this.overview = value['overview'] || value['plot']\n    this.posterPath = value['poster_path'] || value['posterPath']\n    // this.userData = value['userData'] || value['plot']\n    this.backropPath = value['backdrop_path'] || value['backropPath']\n    this.credits = value['credits']\n    this.rating = value['overview'] || value['plot']\n    this.isAdult = value['adult'] || value['isAdult']\n    this.vote = {\n      voteAverage: value['vote_average'] || this.nestMapper(value, 'vote', 'voteAverage'),\n      voteCount: value['vote_count'] || this.nestMapper(value, 'vote', 'voteCount')\n    }\n    this.releaseDate = value['release_date'] || value['releaseDate']\n    this.runtime = value['runtime']\n    this.status = value['status']\n    this.tagline = value['tagline']\n    this.externalIds = value['external_ids'] || value['externalIds']\n    this.genres = value['genres']\n    this.genreIds = value['genre_ids']\n\n    this.budget = value['budget']\n    this.website = value['homepage'] || value['Website']\n    this.revenue = value['revenue']\n    this.spokenLanguages = value['spoken_languages'] || value['spokenLanguages']\n    this.video = value['video']\n\n    this.recommendations = value['recommendations']\n    this.images = value['images']\n    this.videos = value['videos']\n    this.productionCompanies = value['production_companies'] || value['productionCompanies']\n    this.collection = value['belongs_to_collection'] || value['collection']\n    this.productionCountries = value['production_countries'] || value['productionCountries']\n    this.releaseDates = value['release_dates'] || value['releaseDates']\n\n  }\n}\n\nexport interface ICredits {\n  id: number;\n  cast: ICast[];\n  crew: ICrew[];\n}\n\ninterface ICast {\n  castId: number;\n  character: string;\n  credit_id: string;\n  gender: number;\n  id: number;\n  name: string;\n  order: number;\n  profilePath: null | string;\n}\n\ninterface ICrew {\n  creditId: string;\n  department: Department;\n  gender: number;\n  id: number;\n  job: string;\n  name: string;\n  profilePath: null | string;\n}\n\n\ninterface IVote {\n  voteCount: number\n  voteAverage: number\n}\n",
            "properties": [
                {
                    "name": "voteAverage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 142
                },
                {
                    "name": "voteCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 141
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IWatched",
            "id": "interface-IWatched-686c8f4642b49583bb0035cda2ee2245a0462957ebe2212844020167e8641e8edd340c903ae6936a8feb0b9702a2784fe47119cbce52e6394169b3bdcb182de4",
            "file": "src/app/services/watched.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { FirebaseService, CollectionName, FirebaseOperator, FieldName } from './firebase.service';\nimport { IUserSavedData } from '@models/interfaces';\nimport { environment } from '@environments/environment';\nimport { IpcService, IUserDataPaginated } from '@services/ipc.service';\nimport GeneralUtil from '@utils/general.util';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WatchedService {\n\n  constructor(private firebaseService: FirebaseService,\n    private ipcService: IpcService\n  ) { }\n\n  async toggleWatched(movie) {\n    let wDocId\n    if (!movie.watched || !movie.watched.id) {\n      const rDate = movie.release_date ? movie.release_date : movie.releaseDate\n      const releaseYear = parseInt(GeneralUtil.getYear(rDate), 10)\n      const data: IWatched = {\n        title: movie.title,\n        tmdbId: movie.id ? movie.id : movie.tmdbId,\n        imdbId: movie.imdbId ? movie.imdbId : '',\n        year: releaseYear ? releaseYear : 0,\n        percentage: 100\n      }\n      wDocId = await this.saveWatched(data)\n      movie.watched = wDocId\n    } else {\n      const type = movie.watched && movie.watched.id ? 'id' : 'tmdbId'\n      const id = type === 'id' ? movie.watched.id : movie.tmdbId\n      wDocId = await this.removeWatched(type, id)\n      movie.watched.id = ''\n    }\n    return wDocId;\n  }\n\n  getWatched(id): Promise<any> {\n    if (environment.runConfig.firebaseMode) {\n      return this.firebaseService.getFromFirestore(CollectionName.Watched, FieldName.TmdbId, FirebaseOperator.Equal, id)\n    } else {\n      return this.ipcService.getWatched(id)\n    }\n  }\n\n  /**\n   * Gets multiple watched movies.\n   * @param idList\n   */\n  getWatchedInList(idList: number[]): Promise<any> {\n\n    const myFunction = environment.runConfig.firebaseMode ?\n      this.firebaseService.getFromFirestoreMultiple(CollectionName.Watched, FieldName.TmdbId, idList) :\n      this.ipcService.getWatchedInList(idList);\n\n    return myFunction\n  }\n\n  saveWatched(data: IWatched): Promise<any> {\n    if (environment.runConfig.firebaseMode) {\n      return this.firebaseService.insertIntoFirestore(CollectionName.Watched, data)\n    } else {\n      return this.ipcService.saveWatched(data)\n    }\n  }\n\n  /**\n   * Removes watched.\n   * @param type\n   * @param id watched id/_id/tmdbId to remove.\n   */\n  removeWatched(type: 'id' | 'tmdbId', id: string | number) {\n    if (environment.runConfig.firebaseMode) {\n      return this.firebaseService.deleteFromFirestore(CollectionName.Watched, id)\n    } else {\n      return this.ipcService.removeWatched(type, id)\n    }\n  }\n\n  saveWatchedMulti(data: object[]) {\n    if (environment.runConfig.firebaseMode) {\n      const list = []\n      data.forEach(element => {\n        list.push({ tmdbId: element })\n      })\n      this.firebaseService.insertIntoFirestoreMulti(CollectionName.Watched, list)\n    } else {\n\n    }\n  }\n\n  /**\n   * Gets first page of list.\n   */\n  getWatchedPaginatedFirstPage(): Promise<IUserDataPaginated | any> {\n    if (environment.runConfig.firebaseMode) {\n      return this.firebaseService.getFromFirestoreMultiplePaginatedFirst(CollectionName.Watched, FieldName.TmdbId, 20)\n    } else {\n      return this.ipcService.getMultiplePaginatedFirst(CollectionName.Watched, FieldName.TmdbId, 20)\n    }\n  }\n\n  /**\n   * Gets multiple watched.\n   * @param lastVal the last value to start with.\n   */\n  getWatchedPaginated(lastVal: string | number): Promise<IUserDataPaginated | any> {\n    console.log('getting multiplewatched...', lastVal);\n    return this.firebaseService.getFromFirestoreMultiplePaginated(CollectionName.Watched, FieldName.TmdbId, 20, lastVal)\n  }\n\n}\n\nexport interface IWatched extends IUserSavedData {\n  id?: string // also use in Doc Id\n  tmdbId: number,\n  imdbId?: string,\n  title: string,\n  year: number,\n  percentage?: number,\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 117
                },
                {
                    "name": "imdbId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 119
                },
                {
                    "name": "percentage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 122
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 120
                },
                {
                    "name": "tmdbId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 118
                },
                {
                    "name": "year",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 121
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "IUserSavedData"
        },
        {
            "name": "Library",
            "id": "interface-Library-1fe741c1bd1cbf7dcb5ab651b5e2a2c1698d17be281716ce1ab4567a992d5520dc1c378f451304d3cc61240d75f5ce4cde0ba3b3567c3c1bfce3d16871d2e55e",
            "file": "src/app/services/library.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IUserSavedData } from '@models/interfaces';\nimport { environment } from '@environments/environment';\nimport { Injectable } from '@angular/core';\nimport { IpcService } from './ipc.service';\nimport { FirebaseService, CollectionName, FieldName, FirebaseOperator } from './firebase.service';\n\n@Injectable({ providedIn: 'root' })\nexport class LibraryService {\n\n  constructor(\n    private ipcService: IpcService,\n    private firebaseService: FirebaseService,\n  ) {\n\n  }\n\n  /**\n   * Opens a video stream to watch.\n   * @param id library id to open stream\n   * @returns stream link/url\n   */\n  async openVideoStream(id) {\n    // this.ipcService.playOfflineVideo(id) // commented to make way for torrent-play\n    return this.ipcService.playOfflineVideo(id)\n    // return new Promise((resolve, reject) => {\n    //   if (environment.runConfig.firebaseMode) {\n    //     this.firebaseService.getFromFirestore(CollectionName.Library, FieldName.TmdbId, FirebaseOperator.Equal, id).then(e => {\n    //       resolve(e)\n    //     }).catch(e => {\n    //       reject(e)\n    //     })\n    //     // })\n    //   } else {\n    //     this.ipcService.LibraryFile.toPromise().then(e => {\n    //       resolve(e)\n    //     })\n    //   }\n    // })\n  }\n\n  /**\n   * Gets movie library.\n   * @param id - tmdbId or imdbId\n   */\n  getMovieFromLibrary(id: number | string): Promise<any> {\n    const myFunction = environment.runConfig.firebaseMode ?\n      this.firebaseService.getFromFirestore(CollectionName.Library, FieldName.TmdbId, FirebaseOperator.Equal, id) :\n      this.ipcService.getMovieFromLibrary(id)\n    return myFunction\n  }\n\n  /**\n   * Gets multiple library using list. Movie(s) eventually becomes available in status.\n   * @param idList\n   */\n  getMoviesFromLibraryInList(idList: number[]): Promise<any> {\n    console.log('getting multiplevideos...', idList);\n    const myFunction = environment.runConfig.firebaseMode ?\n      this.firebaseService.getFromFirestoreMultiple(CollectionName.Library, FieldName.TmdbId, idList) :\n      this.ipcService.getMoviesFromLibraryInList(idList)\n    return myFunction\n  }\n\n  /**\n   * Gets first page of list. Gets multiple videos. Movie(s) eventually becomes available in status.\n   */\n  getLibraryPaginatedFirstPage(): Promise<any> {\n    const myFunction = environment.runConfig.firebaseMode ? null : this.ipcService.getMultiplePaginatedFirst(CollectionName.Library, FieldName.TmdbId, 20)\n    // this.firebaseService.getFromFirestoreMultiplePaginated(CollectionName.Library, FieldName.TmdbId, 20)\n    return myFunction\n  }\n\n  /**\n   * Gets multiple library.\n   * @param lastVal the last value to start with.\n   */\n  getLibraryPaginated(lastVal: string | number): Promise<any> {\n    console.log('getVideoPaginated...', lastVal);\n    const myFunction = environment.runConfig.firebaseMode ?\n      this.firebaseService.getFromFirestoreMultiplePaginated(CollectionName.Library, FieldName.TmdbId, 20, lastVal) :\n      this.ipcService.getMultiplePaginated(CollectionName.Library, FieldName.TmdbId, 20, lastVal)\n    return myFunction\n  }\n\n}\n\nexport interface IVideo extends IUserSavedData {\n  tmdbId: number,\n  imdbId?: string,\n  title: string,\n  year: number,\n  id: string,\n  videoUrl: string,\n  filePath?: string,\n  cre8Ts?: number, // create timestamp\n  timestamp?: number,\n}\n\nexport interface IRawLibrary {\n  fullFilePath: string,\n  title: string,\n  year: number,\n  tmdbId: number,\n  _id: string\n}\n\ninterface Library {\n  type: 'movie' | 'video' | 'audio' | 'music' | 'podcast' | 'videogame',\n  source: 'local' | 'online',\n  id: string,\n  title: string\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 110
                },
                {
                    "name": "source",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"local\" | \"online\"",
                    "optional": false,
                    "description": "",
                    "line": 109
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 111
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"movie\" | \"video\" | \"audio\" | \"music\" | \"podcast\" | \"videogame\"",
                    "optional": false,
                    "description": "",
                    "line": 108
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "LibraryInfo",
            "id": "interface-LibraryInfo-584d54738f93e2af94202069b5eddb4cab23bb2dfec2ff69f24ebaf881c252f94680b4cd6cec302796817692570a31bedafc5d74fed1cf6488a895dbf372e23d",
            "file": "src/app/models/interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IMdbMovieDetails {\n  awards?: string\n  backgroundPath: string;\n  belongsToCollection?: []\n  boxOffice?: string | number // tmdb:revenue(number)\n  budget?: number\n  country?: string\n  director?: string\n  dvd?: string // dvd release\n  genres?: string[] | string | IGenre[]\n  imdbId?: string\n  imdbRating?: string\n  imdbVotes?: string\n  isAdult?: boolean;\n  isAvailable?: boolean;\n  languages?: string[]\n  libraryInfo?: ILibraryInfo\n  metascore?: string // metacritic score\\\n  originalLanguage?: string // tmdb:\"en\",omdb:\"English\"\n  originalTitle?: string\n  plot?: string // plot or overview\n  popularity?: number\n  posterPath: string\n  production?: string // company; i.e. Walt Disney Pictures\n  rated?: string // rated or certificate\n  ratings?: IRating[]\n  releaseDate?: string // omdb:\"05 May 2017\"; tmdb:\"1999-10-15\"\n  releaseYear?: number | string\n  response: string\n  runtime?: string\n  starring?: string // Actors field in omdb\n  status?: string // released/Post\n  tagline?: string;\n  tmdbId?: number\n  title: string\n  type?: string // movie/tvmovie/series\n  video?: boolean; // unknown\n  // voteAverage: number; // tmdb votes\n  // voteCount: number; // tmdb votes\n  website?: string\n  writer?: string // omdb\n  [propName: string]: any;\n}\n\nexport interface IRating {\n  Source: string\n  Value: string\n}\n\nexport interface LibraryInfo {\n  tmdbId?: null | number | string\n  imdbID?: string\n  title?: string\n  year?: number\n  directoryList?: string[]\n  _id: string\n}\n\nexport interface MovieGenre {\n  id: number\n  code: string\n  description: string\n  isChecked: boolean\n}\n\nexport interface WatchList {\n  id: number\n  movieList: string[]\n}\n\nexport interface ILibraryInfo {\n  tmdbId?: null | number | string\n  imdbID?: string\n  title?: string\n  year?: number\n  directoryList?: string[]\n  _id: string\n}\n\nexport interface ICollection {\n  id: number,\n  name: string\n}\n\nexport interface IProductionCompany {\n  id: number;\n  logo_path: null | string;\n  name: string;\n  origin_country: string;\n}\n\nexport interface IProductionCountry {\n  iso_3166_1: string;\n  name: string;\n}\n\nexport interface ISpokenLanguage {\n  iso_639_1: string;\n  name: string;\n}\n\nexport interface IOmdbMovieDetail {\n  Title: string\n  Year?: string\n  Rated?: string\n  Released?: string // \"05 May 2017\"\n  Runtime?: string\n  Genre?: string\n  Director?: string\n  Writer?: string\n  Actors?: string\n  Plot?: string\n  Language?: string\n  Country?: string\n  Awards?: string\n  Poster?: string\n  Ratings?: IRating[]\n  Metascore?: string\n  imdbRating?: string\n  imdbVotes?: string\n  imdbID: string\n  Type?: string\n  DVD?: string\n  BoxOffice?: string\n  Production?: string\n  Website?: string\n  Response: string\n}\n\nexport interface ITmdbMovieDetail {\n  adult: boolean;\n  backdrop_path: string;\n  belongs_to_collection: null;\n  budget: number;\n  genres: IGenre[];\n  homepage: string;\n  id: number;\n  imdb_id: string;\n  original_language: string;\n  original_title: string;\n  overview: string;\n  popularity: number;\n  poster_path: string;\n  production_companies: IProductionCompany[];\n  production_countries: IProductionCountry[];\n  release_date: string;\n  revenue: number;\n  runtime: number;\n  spoken_languages: ISpokenLanguage[];\n  status: string;\n  tagline: string;\n  title: string;\n  video: boolean;\n  vote_average: number;\n  vote_count: number;\n}\n\nexport interface MdbMovieDetails {\n  adult?: boolean;\n  title: string\n  releaseYear?: string\n  releaseDate?: string\n  rated?: string // rated or certificate\n  runtime?: string\n  genres?: string\n  director?: string\n  writer?: string\n  Actors?: string\n  plot?: string // plot or overview\n  Language?: string\n  Country?: string\n  Awards?: string\n  Poster?: string\n  Ratings?: IRating[]\n  Metascore?: string\n  imdbRating?: string\n  imdbVotes?: string\n  imdbID: string\n  tmdbID: number\n  Type?: string\n  DVD?: string\n  BoxOffice?: string\n  Production?: string\n  website?: string\n  response: string\n  libraryInfo?: ILibraryInfo\n}\n\n// // adult: boolean;\n// //backdrop_path: string;\n// belongs_to_collection: null;\n// // budget: number;\n// genres: Genre[];\n// // homepage: string;\n// // id: number;\n// // imdb_id: string;\n// original_language: string;\n// original_title: string;\n// // overview: string;\n// // popularity: number;\n// // poster_path: string;\n// production_companies: ProductionCompany[];\n// production_countries: ProductionCountry[];\n// // release_date: string;\n// // revenue: number;\n// // runtime: number;\n// spoken_languages: SpokenLanguage[];\n// // status: string;\n// // tagline: string;\n// // title: string;\n// // video: boolean;\n// // vote_average: number;\n// // vote_count: number;\n\nexport interface ITmdbResultObject {\n  page: number;\n  total_results: number;\n  total_pages: number;\n  results: ITmdbResult[];\n}\n\nexport interface ITmdbResult {\n  popularity: number\n  vote_count: number\n  video: boolean\n  poster_path: string\n  id: number\n  adult: boolean\n  backdrop_path: string\n  original_language: string\n  original_title: string\n  genre_ids: number[]\n  title: string\n  vote_average: number\n  overview: string\n  release_date: string\n  isAvailable?: boolean\n  isHighlighted?: boolean\n}\n\nexport interface ILibraryMovie {\n  tmdbId?: number,\n  title: string,\n  year: number,\n  imdbId?: string,\n  directory: string[]\n}\n\nexport interface IGenre {\n  id: number\n  name: string\n}\n\nexport interface Credits {\n  id: number;\n  cast: CastElement[];\n  crew: Crew[];\n}\n\ninterface CastElement {\n  cast_id: number;\n  character: string;\n  credit_id: string;\n  gender: number;\n  id: number;\n  name: string;\n  order: number;\n  profile_path: null | string;\n}\n\ninterface Crew {\n  credit_id: string;\n  department: Department;\n  gender: number;\n  id: number;\n  job: string;\n  name: string;\n  profile_path: null | string;\n}\n\nexport enum Department {\n  Art = 'Art',\n  Camera = 'Camera',\n  CostumeMakeUp = 'Costume & Make-Up',\n  Crew = 'Crew',\n  Directing = 'Directing',\n  Editing = 'Editing',\n  Lighting = 'Lighting',\n  Production = 'Production',\n  Sound = 'Sound',\n  VisualEffects = 'Visual Effects',\n  Writing = 'Writing',\n}\n\nexport class MDBTorrent {\n  id?: string\n  name?: string\n  size?: string\n  hash: string\n  url?: string\n  quality?: string\n  type?: string\n  seeds?: number\n  peers?: number\n  sizeBytes?: number\n  added?: string\n  dateUploaded?: string\n  dateUploadedUnix?: number\n  isYts?: boolean\n  magnetLink?: string\n}\n\nexport class ITPBTorrent {\n  id?: number\n  name?: string\n  hash: string\n  sizeBytes?: number\n  added?: string\n}\n\nexport interface ISearch {\n  page: number\n}\n\nexport enum OmdbParameters {\n  ApiKey = 'apikey',\n  ImdbId = 'i',\n  Title = 't',\n  Type = 'type',\n  Year = 'y',\n  Plot = 'plot',\n  Return = 'r',\n  Callback = 'callback',\n  Version = 'v',\n}\n\nexport enum TmdbParameters {\n  ApiKey = 'api_key',\n  AppendToResponse = 'append_to_response',\n  Language = 'language',\n  Region = 'region',\n  SortBy = 'sort_by',\n  CertificationCountry = 'certification_country',\n  Certification = 'certification',\n  CertificationLess = 'certification.lte',\n  CertificationGreater = 'certification.gte',\n  IncludeAdult = 'include_adult',\n  IncludeVideo = 'include_video',\n  Page = 'page',\n  PrimaryReleaseYear = 'primary_release_year',\n  PrimaryReleaseDateGreater = 'primary_release_date.gte',\n  PrimaryReleaseDateLess = 'primary_release_date.lte',\n  ReleaseDateGreater = 'release_date.gte',\n  ReleaseDateLess = 'release_date.lte',\n  WithReleaseType = 'with_release_type',\n  Year = 'year',\n  VoteCountGreater = 'vote_count.gte',\n  VoteCountLess = 'vote_count.lte',\n  VoteAverageGreater = 'vote_average.gte',\n  VoteAverageLess = 'vote_average.lte',\n  WithCast = 'with_cast',\n  WithCrew = 'with_crew',\n  WithPeople = 'with_people',\n  WithCompanies = 'with_companies',\n  WithGenres = 'with_genres',\n  WithoutGenres = 'without_genres',\n  WithKeywords = 'with_keywords',\n  WithoutKeywords = 'without_keywords',\n  WithRuntimeGreater = 'with_runtime.gte',\n  WithRuntimeLess = 'with_runtime.lte',\n  WithOriginalLanguage = 'with_original_language',\n  WithWatchProviders = 'with_watch_providers',\n  WatchRegion = 'watch_region'\n}\n\nexport enum TmdbSearchMovieParameters {\n  ApiKey = 'api_key',\n  Language = 'language', // Pass a ISO 639 - 1 value to display translated data for the fields that support it. minLength: 2 pattern: ([a - z]{ 2 }) -([A - Z]{ 2 }) default: en - US\n  Query = 'query',\n  Page = 'page', // minimum: 1 maximum: 1000\n  IncludeAdult = 'include_adult',\n  Region = 'region',\n  // Specify a ISO 3166 - 1 code to filter release dates.Must be uppercase. pattern: ^ [A - Z]{ 2 } $\n  Year = 'year',\n  PrimaryReleaseYear = 'primary_release_year'\n}\n\nenum TmdbAppendToResponseParameters {\n  AccountStates = 'account_states',\n  Videos = 'videos',\n  Images = 'images',\n  Credits = 'credits',\n  Changes = 'changes',\n  Translations = 'translations',\n  Similar = 'similar',\n  ExternalIds = 'external_ids',\n  AlternativeTitles = 'alternative_titles',\n  Keywords = 'keywords',\n  Reviews = 'reviews',\n  Recommendations = 'recommendations',\n  ReleaseDates = 'release_dates',\n  Lists = 'lists'\n}\n\nenum TmdbReleaseTypes {\n  PREMIERE = 'Premiere',  // 1\n  THEATRICAL_LIMITED = 'Theatrical(limited)', // 2\n  THEATRICAL = 'Theatrical', // 3\n  DIGITAL = 'Digital', // 4\n  PHYSICAL = 'Physical', // 5\n  TV = 'TV', // 6\n}\n\nexport interface IPersonDetails {\n  birthday: string;\n  known_for_department: string;\n  id: number;\n  movie_credits?: IPersonCredits;\n  tv_credits?: IPersonCredits;\n  combined_credits?: IPersonCredits;\n  homepage?: any;\n  profile_path: string;\n  imdb_id: string;\n  deathday?: any;\n  images?: IImages;\n  external_ids?: IExternalids;\n  name: string;\n  also_known_as: string[];\n  biography: string;\n  adult: boolean;\n  gender: number;\n  place_of_birth: string;\n  popularity: number;\n}\n\nexport interface IPersonCredits {\n  cast: IPersonCastCrew[];\n  crew: IPersonCastCrew[];\n  id?: number;\n}\n\nexport interface IPersonCastCrew {\n  id?: number;\n  original_language: string;\n  episode_count?: number;\n  overview: string;\n  origin_country?: string[];\n  original_name?: string;\n  genre_ids: number[];\n  name?: string;\n  media_type: string;\n  poster_path: null | string;\n  first_air_date?: string;\n  vote_average: number;\n  vote_count: number;\n  character?: string;\n  backdrop_path: null | string;\n  popularity: number;\n  credit_id: string;\n  original_title?: string;\n  video?: boolean;\n  release_date?: string;\n  title?: string;\n  adult?: boolean;\n  department?: string;\n  job?: string;\n}\n\nexport interface IExternalids {\n  id?: number;\n  freebase_id: string;\n  instagram_id: string;\n  tvrage_id: number;\n  twitter_id: string;\n  freebase_mid: string;\n  imdb_id: string;\n  facebook_id: string;\n}\n\nexport interface IImages {\n  id?: number;\n  profiles: IProfile[];\n}\n\nexport interface IProfile {\n  iso_639_1?: any;\n  aspect_ratio: number;\n  vote_count: number;\n  height: number;\n  vote_average: number;\n  file_path: string;\n  width: number;\n}\n\nexport interface ICredits {\n  cast: ICast[];\n  crew: ICrew[];\n}\n\ninterface ICast {\n  poster_path?: string;\n  adult: boolean;\n  backdrop_path?: string;\n  vote_count: number;\n  video: boolean;\n  id: number;\n  media_type?: string;\n  popularity: number;\n  genre_ids: number[];\n  original_language: string;\n  title: string;\n  original_title: string;\n  release_date: string;\n  character: string;\n  vote_average: number;\n  overview: string;\n  credit_id: string;\n}\n\ninterface ICrew {\n  id: number;\n  department: string;\n  original_language: string;\n  original_title: string;\n  job: string;\n  overview: string;\n  genre_ids: number[];\n  video: boolean;\n  episode_count: number\n  media_type?: string;\n  credit_id: string;\n  poster_path?: string;\n  popularity: number;\n  backdrop_path?: string;\n  vote_count: number;\n  title: string;\n  adult: boolean;\n  vote_average: number;\n  release_date: string;\n}\n\nexport interface IUserSavedData {\n  id?: string,\n  title: string,\n  year: number,\n  tmdbId: number,\n}\n\nexport enum GenreCodes {\n  Action = 28,\n  Adventure = 12,\n  Animation = 16,\n  Comedy = 35,\n  Crime = 80,\n  Documentary = 99,\n  Drama = 18,\n  Family = 10751,\n  Fantasy = 14,\n  History = 36,\n  Horror = 27,\n  Music = 10402,\n  Mystery = 9648,\n  Romance = 10749,\n  ScienceFiction = 878,\n  TVMovie = 10770,\n  Thriller = 53,\n  War = 10752,\n  Western = 37,\n  // mdb reserved\n  FilmNoir = 20000,\n  // similar genre: Music id:10402\n  Musical = 20001,\n  News = 20002,\n  RealityTV = 20003,\n  // similar genre: Science Fiction id:878\n  SciFi = 20004,\n  // another media type\n  Short = 20005,\n  Sport = 20006,\n}\n\n\n\n/**\nexport enum Department {\n    Art = \"Art\",\n    Camera = \"Camera\",\n    CostumeMakeUp = \"Costume & Make-Up\",\n    Crew = \"Crew\",\n    Directing = \"Directing\",\n    Editing = \"Editing\",\n    Lighting = \"Lighting\",\n    Production = \"Production\",\n    Sound = \"Sound\",\n    VisualEffects = \"Visual Effects\",\n    Writing = \"Writing\",\n}\n\nexport interface ExternalIDS {\n    imdb_id:      string;\n    facebook_id:  null;\n    instagram_id: null;\n    twitter_id:   null;\n}\n\nexport interface Genre {\n    id:   number;\n    name: string;\n}\n\nexport interface Images {\n    backdrops: any[];\n    posters:   any[];\n}\n\nexport enum OriginalLanguage {\n    En = \"en\",\n    Es = \"es\",\n    Fr = \"fr\",\n}\n\nexport interface ProductionCompany {\n    id:             number;\n    logo_path:      string;\n    name:           string;\n    origin_country: string;\n}\n\nexport interface ProductionCountry {\n    iso_3166_1: string;\n    name:       string;\n}\n\nexport interface Recommendations {\n    page:          number;\n    results:       RecommendationsResult[];\n    total_pages:   number;\n    total_results: number;\n}\n\nexport interface RecommendationsResult {\n    id:                number;\n    video:             boolean;\n    vote_count:        number;\n    vote_average:      number;\n    title:             string;\n    release_date:      string;\n    original_language: OriginalLanguage;\n    original_title:    string;\n    genre_ids:         number[];\n    backdrop_path:     string;\n    adult:             boolean;\n    overview:          string;\n    poster_path:       string;\n    popularity:        number;\n}\n\nexport interface SpokenLanguage {\n    iso_639_1: OriginalLanguage;\n    name:      string;\n}\n\nexport interface Videos {\n    results: VideosResult[];\n}\n\nexport interface VideosResult {\n    id:         string;\n    iso_639_1:  OriginalLanguage;\n    iso_3166_1: string;\n    key:        string;\n    name:       string;\n    site:       string;\n    size:       number;\n    type:       string;\n}\n */\n\n",
            "properties": [
                {
                    "name": "_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "directoryList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "imdbID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "tmdbId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "null | number | string",
                    "optional": true,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "year",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 55
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ListLinkMovie",
            "id": "interface-ListLinkMovie-1864c2d5448e0c9450395f701045f267f35956627df366578c5a166274ffa8e8faf40cc47d8b234217c9f617306668665f329af03586e3cd1f8d89f5686324b7",
            "file": "src/app/models/profile-data.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Review } from \"./review.model\";\n\nexport class IProfileData {\n\n  tmdbId?: number;\n  bookmark?: Bookmark;\n  favorite?: Favorite;\n  watched?: Watched;\n  listLinkMovie?: ListLinkMovie;\n  review?: Review;\n  isBookmark?: boolean;\n  isFavorite?: boolean;\n  library?: any\n  // isBookmark?: boolean;\n}\n\ninterface Bookmark {\n  id: string\n}\ninterface Favorite {\n  id: string\n}\ninterface Watched {\n  id?: string\n  percentage: number\n}\nexport interface ListLinkMovie {\n  id: number\n  listId: number\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "listId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "LoginUser",
            "id": "interface-LoginUser-386d7e269c530e10c32373347ca9bff5aaa5425f9fcc6edb7263342fa375fb21f6c6dcb6bc5c891861829511d2075eef4dc5aa5e9aa533a49d42c1df1eb9c4b4",
            "file": "src/app/services/mdb-api.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams, } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { IpcService } from '../services/ipc.service';\nimport { STRING_REGEX_IMDB_ID, MDB_API_URL } from '../shared/constants';\nimport { IProfileData } from '../models/profile-data.model';\n\nconst JSON_CONTENT_TYPE_HEADER = new HttpHeaders({ 'Content-Type': 'application/json' })\n\n@Injectable({ providedIn: 'root' })\nexport class MdbApiService {\n\n  constructor(\n    private http: HttpClient\n  ) { }\n\n  httpParam = new HttpParams()\n\n  saveBookmark(bookmarkBody: any): Observable<any> {\n    return this.http.post<any>(`${MDB_API_URL}\\\\profileData\\\\bookmark`, bookmarkBody).pipe(tap(_ => this.log('')),\n      catchError(this.handleError<any>('saveFavorite')))\n  }\n\n  deleteBookmark(bookmarkId: any): Observable<any> {\n    let httpParams = new HttpParams().set('id', bookmarkId);\n    return this.http.delete<any>(`${MDB_API_URL}\\\\profileData\\\\bookmark`, { params: httpParams }).pipe(tap(_ => this.log('')),\n      catchError(this.handleError<any>('deleteFavorite')))\n  }\n  saveFavorite(favBody: any): Observable<any> {\n    return this.http.post<any>(`${MDB_API_URL}\\\\profileData\\\\favorite`, favBody).pipe(tap(_ => this.log('')),\n      catchError(this.handleError<any>('saveFavorite')))\n  }\n  deleteFavorite(favId: any): Observable<any> {\n    let httpParams = new HttpParams().set('id', favId);\n    return this.http.delete<any>(`${MDB_API_URL}\\\\profileData\\\\favorite`, { params: httpParams }).pipe(tap(_ => this.log('')),\n      catchError(this.handleError<any>('deleteFavorite')))\n  }\n  saveToList(listLinkMovie: any): Observable<any> {\n    return this.http.post<any>(`${MDB_API_URL}\\\\profileData\\\\list\\\\add`, listLinkMovie).pipe(tap(_ => this.log('')),\n      catchError(this.handleError<any>('saveFavorite')))\n  }\n  removeFromList(listLinkMovie: any): Observable<any> {\n    return this.http.post<any>(`${MDB_API_URL}\\\\profileData\\\\list\\\\remove`, listLinkMovie).pipe(tap(_ => this.log('')),\n      catchError(this.handleError<any>('saveFavorite')))\n  }\n  saveList(listBody: any): Observable<any> {\n    return this.http.post<any>(`${MDB_API_URL}\\\\profileData\\\\list`, listBody).pipe(tap(_ => this.log('')),\n      catchError(this.handleError<any>('saveFavorite')))\n  }\n  deleteList(listId: any): Observable<any> {\n    let httpParams = new HttpParams().set('id', listId);\n    return this.http.delete<any>(`${MDB_API_URL}\\\\profileData\\\\list`, { params: httpParams }).pipe(tap(_ => this.log('')),\n      catchError(this.handleError<any>('deleteFavorite')))\n  }\n  saveWatched(watchedBody: any): Observable<any> {\n    return this.http.post<any>(`${MDB_API_URL}\\\\profileData\\\\watched`, watchedBody).pipe(tap(_ => this.log('')),\n      catchError(this.handleError<any>('saveFavorite')))\n  }\n  deleteWatched(watchedBody: any): Observable<any> {\n    return this.http.delete<any>(`${MDB_API_URL}\\\\profileData\\\\watched`, watchedBody).pipe(tap(_ => this.log('')),\n      catchError(this.handleError<any>('deleteFavorite')))\n  }\n\n  getProfileDataByTmdbId(tmdbId: number): Observable<IProfileData> {\n\n    return this.http.get<any>(`${MDB_API_URL}\\\\profileData\\\\media\\\\${tmdbId}`).pipe(tap(_ => this.log('')),\n      catchError(this.handleError<any>('getProfileDataByTmdbId')))\n  }\n\n  getProfileDataByTmdbIdList(tmdbIdList: number[]): Observable<IProfileData[]> {\n\n    return this.http.get<any>(`${MDB_API_URL}\\\\profileData\\\\media\\\\list\\\\${tmdbIdList}`).pipe(tap(_ => this.log('')),\n      catchError(this.handleError<any>('getProfileDataByTmdbIdList')))\n  }\n\n  registerUser(payload: RegisterUser) {\n    return this.http.post<any>(`mdb/user/register`, payload).pipe(tap(_ => this.log('')),\n      catchError(this.handleError<any>('registerUser')))\n  }\n\n  logout() {\n    return this.http.post<any>(`mdb/user/logout`, {}).pipe(tap(_ => this.log('')),\n      catchError(this.handleError<any>('logout')))\n  }\n\n  login(payload: LoginUser) {\n    return this.http.post<any>(`mdb/user/login`, payload).pipe(tap(_ => this.log('')),\n      catchError(this.handleError<any>('logout')))\n  }\n\n  /**\n   * Error handler.\n   * @param operation the operation\n   * @param result the result\n   */\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n      console.error(error); // log to console instead\n      this.log(`${operation} failed: ${error.message}`);\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n\n  private log(message: string) {\n    console.log(`MovieService: ${message} `);\n  }\n}\n\nexport interface LoginUser {\n  userName: string;\n  password: string;\n  type?: string;\n  token?: string;\n}\nexport interface RegisterUser {\n  password: string;\n  userName: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  avatar: string;\n  contactNumber?: string;\n}\n",
            "properties": [
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 116
                },
                {
                    "name": "token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 118
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 117
                },
                {
                    "name": "userName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 115
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MdbMovieDetails",
            "id": "interface-MdbMovieDetails-584d54738f93e2af94202069b5eddb4cab23bb2dfec2ff69f24ebaf881c252f94680b4cd6cec302796817692570a31bedafc5d74fed1cf6488a895dbf372e23d",
            "file": "src/app/models/interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IMdbMovieDetails {\n  awards?: string\n  backgroundPath: string;\n  belongsToCollection?: []\n  boxOffice?: string | number // tmdb:revenue(number)\n  budget?: number\n  country?: string\n  director?: string\n  dvd?: string // dvd release\n  genres?: string[] | string | IGenre[]\n  imdbId?: string\n  imdbRating?: string\n  imdbVotes?: string\n  isAdult?: boolean;\n  isAvailable?: boolean;\n  languages?: string[]\n  libraryInfo?: ILibraryInfo\n  metascore?: string // metacritic score\\\n  originalLanguage?: string // tmdb:\"en\",omdb:\"English\"\n  originalTitle?: string\n  plot?: string // plot or overview\n  popularity?: number\n  posterPath: string\n  production?: string // company; i.e. Walt Disney Pictures\n  rated?: string // rated or certificate\n  ratings?: IRating[]\n  releaseDate?: string // omdb:\"05 May 2017\"; tmdb:\"1999-10-15\"\n  releaseYear?: number | string\n  response: string\n  runtime?: string\n  starring?: string // Actors field in omdb\n  status?: string // released/Post\n  tagline?: string;\n  tmdbId?: number\n  title: string\n  type?: string // movie/tvmovie/series\n  video?: boolean; // unknown\n  // voteAverage: number; // tmdb votes\n  // voteCount: number; // tmdb votes\n  website?: string\n  writer?: string // omdb\n  [propName: string]: any;\n}\n\nexport interface IRating {\n  Source: string\n  Value: string\n}\n\nexport interface LibraryInfo {\n  tmdbId?: null | number | string\n  imdbID?: string\n  title?: string\n  year?: number\n  directoryList?: string[]\n  _id: string\n}\n\nexport interface MovieGenre {\n  id: number\n  code: string\n  description: string\n  isChecked: boolean\n}\n\nexport interface WatchList {\n  id: number\n  movieList: string[]\n}\n\nexport interface ILibraryInfo {\n  tmdbId?: null | number | string\n  imdbID?: string\n  title?: string\n  year?: number\n  directoryList?: string[]\n  _id: string\n}\n\nexport interface ICollection {\n  id: number,\n  name: string\n}\n\nexport interface IProductionCompany {\n  id: number;\n  logo_path: null | string;\n  name: string;\n  origin_country: string;\n}\n\nexport interface IProductionCountry {\n  iso_3166_1: string;\n  name: string;\n}\n\nexport interface ISpokenLanguage {\n  iso_639_1: string;\n  name: string;\n}\n\nexport interface IOmdbMovieDetail {\n  Title: string\n  Year?: string\n  Rated?: string\n  Released?: string // \"05 May 2017\"\n  Runtime?: string\n  Genre?: string\n  Director?: string\n  Writer?: string\n  Actors?: string\n  Plot?: string\n  Language?: string\n  Country?: string\n  Awards?: string\n  Poster?: string\n  Ratings?: IRating[]\n  Metascore?: string\n  imdbRating?: string\n  imdbVotes?: string\n  imdbID: string\n  Type?: string\n  DVD?: string\n  BoxOffice?: string\n  Production?: string\n  Website?: string\n  Response: string\n}\n\nexport interface ITmdbMovieDetail {\n  adult: boolean;\n  backdrop_path: string;\n  belongs_to_collection: null;\n  budget: number;\n  genres: IGenre[];\n  homepage: string;\n  id: number;\n  imdb_id: string;\n  original_language: string;\n  original_title: string;\n  overview: string;\n  popularity: number;\n  poster_path: string;\n  production_companies: IProductionCompany[];\n  production_countries: IProductionCountry[];\n  release_date: string;\n  revenue: number;\n  runtime: number;\n  spoken_languages: ISpokenLanguage[];\n  status: string;\n  tagline: string;\n  title: string;\n  video: boolean;\n  vote_average: number;\n  vote_count: number;\n}\n\nexport interface MdbMovieDetails {\n  adult?: boolean;\n  title: string\n  releaseYear?: string\n  releaseDate?: string\n  rated?: string // rated or certificate\n  runtime?: string\n  genres?: string\n  director?: string\n  writer?: string\n  Actors?: string\n  plot?: string // plot or overview\n  Language?: string\n  Country?: string\n  Awards?: string\n  Poster?: string\n  Ratings?: IRating[]\n  Metascore?: string\n  imdbRating?: string\n  imdbVotes?: string\n  imdbID: string\n  tmdbID: number\n  Type?: string\n  DVD?: string\n  BoxOffice?: string\n  Production?: string\n  website?: string\n  response: string\n  libraryInfo?: ILibraryInfo\n}\n\n// // adult: boolean;\n// //backdrop_path: string;\n// belongs_to_collection: null;\n// // budget: number;\n// genres: Genre[];\n// // homepage: string;\n// // id: number;\n// // imdb_id: string;\n// original_language: string;\n// original_title: string;\n// // overview: string;\n// // popularity: number;\n// // poster_path: string;\n// production_companies: ProductionCompany[];\n// production_countries: ProductionCountry[];\n// // release_date: string;\n// // revenue: number;\n// // runtime: number;\n// spoken_languages: SpokenLanguage[];\n// // status: string;\n// // tagline: string;\n// // title: string;\n// // video: boolean;\n// // vote_average: number;\n// // vote_count: number;\n\nexport interface ITmdbResultObject {\n  page: number;\n  total_results: number;\n  total_pages: number;\n  results: ITmdbResult[];\n}\n\nexport interface ITmdbResult {\n  popularity: number\n  vote_count: number\n  video: boolean\n  poster_path: string\n  id: number\n  adult: boolean\n  backdrop_path: string\n  original_language: string\n  original_title: string\n  genre_ids: number[]\n  title: string\n  vote_average: number\n  overview: string\n  release_date: string\n  isAvailable?: boolean\n  isHighlighted?: boolean\n}\n\nexport interface ILibraryMovie {\n  tmdbId?: number,\n  title: string,\n  year: number,\n  imdbId?: string,\n  directory: string[]\n}\n\nexport interface IGenre {\n  id: number\n  name: string\n}\n\nexport interface Credits {\n  id: number;\n  cast: CastElement[];\n  crew: Crew[];\n}\n\ninterface CastElement {\n  cast_id: number;\n  character: string;\n  credit_id: string;\n  gender: number;\n  id: number;\n  name: string;\n  order: number;\n  profile_path: null | string;\n}\n\ninterface Crew {\n  credit_id: string;\n  department: Department;\n  gender: number;\n  id: number;\n  job: string;\n  name: string;\n  profile_path: null | string;\n}\n\nexport enum Department {\n  Art = 'Art',\n  Camera = 'Camera',\n  CostumeMakeUp = 'Costume & Make-Up',\n  Crew = 'Crew',\n  Directing = 'Directing',\n  Editing = 'Editing',\n  Lighting = 'Lighting',\n  Production = 'Production',\n  Sound = 'Sound',\n  VisualEffects = 'Visual Effects',\n  Writing = 'Writing',\n}\n\nexport class MDBTorrent {\n  id?: string\n  name?: string\n  size?: string\n  hash: string\n  url?: string\n  quality?: string\n  type?: string\n  seeds?: number\n  peers?: number\n  sizeBytes?: number\n  added?: string\n  dateUploaded?: string\n  dateUploadedUnix?: number\n  isYts?: boolean\n  magnetLink?: string\n}\n\nexport class ITPBTorrent {\n  id?: number\n  name?: string\n  hash: string\n  sizeBytes?: number\n  added?: string\n}\n\nexport interface ISearch {\n  page: number\n}\n\nexport enum OmdbParameters {\n  ApiKey = 'apikey',\n  ImdbId = 'i',\n  Title = 't',\n  Type = 'type',\n  Year = 'y',\n  Plot = 'plot',\n  Return = 'r',\n  Callback = 'callback',\n  Version = 'v',\n}\n\nexport enum TmdbParameters {\n  ApiKey = 'api_key',\n  AppendToResponse = 'append_to_response',\n  Language = 'language',\n  Region = 'region',\n  SortBy = 'sort_by',\n  CertificationCountry = 'certification_country',\n  Certification = 'certification',\n  CertificationLess = 'certification.lte',\n  CertificationGreater = 'certification.gte',\n  IncludeAdult = 'include_adult',\n  IncludeVideo = 'include_video',\n  Page = 'page',\n  PrimaryReleaseYear = 'primary_release_year',\n  PrimaryReleaseDateGreater = 'primary_release_date.gte',\n  PrimaryReleaseDateLess = 'primary_release_date.lte',\n  ReleaseDateGreater = 'release_date.gte',\n  ReleaseDateLess = 'release_date.lte',\n  WithReleaseType = 'with_release_type',\n  Year = 'year',\n  VoteCountGreater = 'vote_count.gte',\n  VoteCountLess = 'vote_count.lte',\n  VoteAverageGreater = 'vote_average.gte',\n  VoteAverageLess = 'vote_average.lte',\n  WithCast = 'with_cast',\n  WithCrew = 'with_crew',\n  WithPeople = 'with_people',\n  WithCompanies = 'with_companies',\n  WithGenres = 'with_genres',\n  WithoutGenres = 'without_genres',\n  WithKeywords = 'with_keywords',\n  WithoutKeywords = 'without_keywords',\n  WithRuntimeGreater = 'with_runtime.gte',\n  WithRuntimeLess = 'with_runtime.lte',\n  WithOriginalLanguage = 'with_original_language',\n  WithWatchProviders = 'with_watch_providers',\n  WatchRegion = 'watch_region'\n}\n\nexport enum TmdbSearchMovieParameters {\n  ApiKey = 'api_key',\n  Language = 'language', // Pass a ISO 639 - 1 value to display translated data for the fields that support it. minLength: 2 pattern: ([a - z]{ 2 }) -([A - Z]{ 2 }) default: en - US\n  Query = 'query',\n  Page = 'page', // minimum: 1 maximum: 1000\n  IncludeAdult = 'include_adult',\n  Region = 'region',\n  // Specify a ISO 3166 - 1 code to filter release dates.Must be uppercase. pattern: ^ [A - Z]{ 2 } $\n  Year = 'year',\n  PrimaryReleaseYear = 'primary_release_year'\n}\n\nenum TmdbAppendToResponseParameters {\n  AccountStates = 'account_states',\n  Videos = 'videos',\n  Images = 'images',\n  Credits = 'credits',\n  Changes = 'changes',\n  Translations = 'translations',\n  Similar = 'similar',\n  ExternalIds = 'external_ids',\n  AlternativeTitles = 'alternative_titles',\n  Keywords = 'keywords',\n  Reviews = 'reviews',\n  Recommendations = 'recommendations',\n  ReleaseDates = 'release_dates',\n  Lists = 'lists'\n}\n\nenum TmdbReleaseTypes {\n  PREMIERE = 'Premiere',  // 1\n  THEATRICAL_LIMITED = 'Theatrical(limited)', // 2\n  THEATRICAL = 'Theatrical', // 3\n  DIGITAL = 'Digital', // 4\n  PHYSICAL = 'Physical', // 5\n  TV = 'TV', // 6\n}\n\nexport interface IPersonDetails {\n  birthday: string;\n  known_for_department: string;\n  id: number;\n  movie_credits?: IPersonCredits;\n  tv_credits?: IPersonCredits;\n  combined_credits?: IPersonCredits;\n  homepage?: any;\n  profile_path: string;\n  imdb_id: string;\n  deathday?: any;\n  images?: IImages;\n  external_ids?: IExternalids;\n  name: string;\n  also_known_as: string[];\n  biography: string;\n  adult: boolean;\n  gender: number;\n  place_of_birth: string;\n  popularity: number;\n}\n\nexport interface IPersonCredits {\n  cast: IPersonCastCrew[];\n  crew: IPersonCastCrew[];\n  id?: number;\n}\n\nexport interface IPersonCastCrew {\n  id?: number;\n  original_language: string;\n  episode_count?: number;\n  overview: string;\n  origin_country?: string[];\n  original_name?: string;\n  genre_ids: number[];\n  name?: string;\n  media_type: string;\n  poster_path: null | string;\n  first_air_date?: string;\n  vote_average: number;\n  vote_count: number;\n  character?: string;\n  backdrop_path: null | string;\n  popularity: number;\n  credit_id: string;\n  original_title?: string;\n  video?: boolean;\n  release_date?: string;\n  title?: string;\n  adult?: boolean;\n  department?: string;\n  job?: string;\n}\n\nexport interface IExternalids {\n  id?: number;\n  freebase_id: string;\n  instagram_id: string;\n  tvrage_id: number;\n  twitter_id: string;\n  freebase_mid: string;\n  imdb_id: string;\n  facebook_id: string;\n}\n\nexport interface IImages {\n  id?: number;\n  profiles: IProfile[];\n}\n\nexport interface IProfile {\n  iso_639_1?: any;\n  aspect_ratio: number;\n  vote_count: number;\n  height: number;\n  vote_average: number;\n  file_path: string;\n  width: number;\n}\n\nexport interface ICredits {\n  cast: ICast[];\n  crew: ICrew[];\n}\n\ninterface ICast {\n  poster_path?: string;\n  adult: boolean;\n  backdrop_path?: string;\n  vote_count: number;\n  video: boolean;\n  id: number;\n  media_type?: string;\n  popularity: number;\n  genre_ids: number[];\n  original_language: string;\n  title: string;\n  original_title: string;\n  release_date: string;\n  character: string;\n  vote_average: number;\n  overview: string;\n  credit_id: string;\n}\n\ninterface ICrew {\n  id: number;\n  department: string;\n  original_language: string;\n  original_title: string;\n  job: string;\n  overview: string;\n  genre_ids: number[];\n  video: boolean;\n  episode_count: number\n  media_type?: string;\n  credit_id: string;\n  poster_path?: string;\n  popularity: number;\n  backdrop_path?: string;\n  vote_count: number;\n  title: string;\n  adult: boolean;\n  vote_average: number;\n  release_date: string;\n}\n\nexport interface IUserSavedData {\n  id?: string,\n  title: string,\n  year: number,\n  tmdbId: number,\n}\n\nexport enum GenreCodes {\n  Action = 28,\n  Adventure = 12,\n  Animation = 16,\n  Comedy = 35,\n  Crime = 80,\n  Documentary = 99,\n  Drama = 18,\n  Family = 10751,\n  Fantasy = 14,\n  History = 36,\n  Horror = 27,\n  Music = 10402,\n  Mystery = 9648,\n  Romance = 10749,\n  ScienceFiction = 878,\n  TVMovie = 10770,\n  Thriller = 53,\n  War = 10752,\n  Western = 37,\n  // mdb reserved\n  FilmNoir = 20000,\n  // similar genre: Music id:10402\n  Musical = 20001,\n  News = 20002,\n  RealityTV = 20003,\n  // similar genre: Science Fiction id:878\n  SciFi = 20004,\n  // another media type\n  Short = 20005,\n  Sport = 20006,\n}\n\n\n\n/**\nexport enum Department {\n    Art = \"Art\",\n    Camera = \"Camera\",\n    CostumeMakeUp = \"Costume & Make-Up\",\n    Crew = \"Crew\",\n    Directing = \"Directing\",\n    Editing = \"Editing\",\n    Lighting = \"Lighting\",\n    Production = \"Production\",\n    Sound = \"Sound\",\n    VisualEffects = \"Visual Effects\",\n    Writing = \"Writing\",\n}\n\nexport interface ExternalIDS {\n    imdb_id:      string;\n    facebook_id:  null;\n    instagram_id: null;\n    twitter_id:   null;\n}\n\nexport interface Genre {\n    id:   number;\n    name: string;\n}\n\nexport interface Images {\n    backdrops: any[];\n    posters:   any[];\n}\n\nexport enum OriginalLanguage {\n    En = \"en\",\n    Es = \"es\",\n    Fr = \"fr\",\n}\n\nexport interface ProductionCompany {\n    id:             number;\n    logo_path:      string;\n    name:           string;\n    origin_country: string;\n}\n\nexport interface ProductionCountry {\n    iso_3166_1: string;\n    name:       string;\n}\n\nexport interface Recommendations {\n    page:          number;\n    results:       RecommendationsResult[];\n    total_pages:   number;\n    total_results: number;\n}\n\nexport interface RecommendationsResult {\n    id:                number;\n    video:             boolean;\n    vote_count:        number;\n    vote_average:      number;\n    title:             string;\n    release_date:      string;\n    original_language: OriginalLanguage;\n    original_title:    string;\n    genre_ids:         number[];\n    backdrop_path:     string;\n    adult:             boolean;\n    overview:          string;\n    poster_path:       string;\n    popularity:        number;\n}\n\nexport interface SpokenLanguage {\n    iso_639_1: OriginalLanguage;\n    name:      string;\n}\n\nexport interface Videos {\n    results: VideosResult[];\n}\n\nexport interface VideosResult {\n    id:         string;\n    iso_639_1:  OriginalLanguage;\n    iso_3166_1: string;\n    key:        string;\n    name:       string;\n    site:       string;\n    size:       number;\n    type:       string;\n}\n */\n\n",
            "properties": [
                {
                    "name": "Actors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 169
                },
                {
                    "name": "adult",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 160
                },
                {
                    "name": "Awards",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 173
                },
                {
                    "name": "BoxOffice",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 183
                },
                {
                    "name": "Country",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 172
                },
                {
                    "name": "director",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 167
                },
                {
                    "name": "DVD",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 182
                },
                {
                    "name": "genres",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 166
                },
                {
                    "name": "imdbID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 179
                },
                {
                    "name": "imdbRating",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 177
                },
                {
                    "name": "imdbVotes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 178
                },
                {
                    "name": "Language",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 171
                },
                {
                    "name": "libraryInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ILibraryInfo",
                    "optional": true,
                    "description": "",
                    "line": 187
                },
                {
                    "name": "Metascore",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 176
                },
                {
                    "name": "plot",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 170
                },
                {
                    "name": "Poster",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 174
                },
                {
                    "name": "Production",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 184
                },
                {
                    "name": "rated",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 164
                },
                {
                    "name": "Ratings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IRating[]",
                    "optional": true,
                    "description": "",
                    "line": 175
                },
                {
                    "name": "releaseDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 163
                },
                {
                    "name": "releaseYear",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 162
                },
                {
                    "name": "response",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 186
                },
                {
                    "name": "runtime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 165
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 161
                },
                {
                    "name": "tmdbID",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 180
                },
                {
                    "name": "Type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 181
                },
                {
                    "name": "website",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 185
                },
                {
                    "name": "writer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 168
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MDBMovieListModel",
            "id": "interface-MDBMovieListModel-bb8938fc05476f502fde700913c0a29bbf004c0e99184d0d4bf3dba9e2c8fd013b6c1fdcc5da021cbab33cd5998c86eaa741a98471ad767ca6dda3279b896d23",
            "file": "src/app/services/movie/interface/movie.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ID } from \"@datorama/akita\";\nimport { MDBMovie } from \"@models/mdb-movie.model\";\n\n\nexport interface TmdbMovieModel {\n  id: ID,\n  movie: any;\n}\n\nexport interface MDBMovieModel {\n  id: ID,\n  movie: MDBMovie;\n}\n\n\nexport interface TmdbMovieListModel {\n  id: ID,\n  movies: any[];\n}\n\n\nexport interface MDBMovieListModel {\n  id: ID,\n  movies: MDBMovie[];\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "movies",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MDBMovie[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MDBMovieModel",
            "id": "interface-MDBMovieModel-bb8938fc05476f502fde700913c0a29bbf004c0e99184d0d4bf3dba9e2c8fd013b6c1fdcc5da021cbab33cd5998c86eaa741a98471ad767ca6dda3279b896d23",
            "file": "src/app/services/movie/interface/movie.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ID } from \"@datorama/akita\";\nimport { MDBMovie } from \"@models/mdb-movie.model\";\n\n\nexport interface TmdbMovieModel {\n  id: ID,\n  movie: any;\n}\n\nexport interface MDBMovieModel {\n  id: ID,\n  movie: MDBMovie;\n}\n\n\nexport interface TmdbMovieListModel {\n  id: ID,\n  movies: any[];\n}\n\n\nexport interface MDBMovieListModel {\n  id: ID,\n  movies: MDBMovie[];\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "movie",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MDBMovie",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "MDBMovieSearchState",
            "id": "interface-MDBMovieSearchState-003356e894d6d3fd8e699789e15f6942809cf8b544dbfcd102ceb5a241798a30c7e4b55fa4b0d72866404b32e84c9ff40d963c066d471ae956a9f77f45b3a8a9",
            "file": "src/app/services/movie/movie.store.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport { EntityState, EntityStore, StoreConfig } from \"@datorama/akita\";\nimport { MDBMovieListModel, MDBMovieModel, TmdbMovieModel } from \"./interface/movie\";\n\nexport interface TmdbMovieState extends EntityState<TmdbMovieModel> { }\n\n@Injectable({ providedIn: 'root' })\n@StoreConfig({ name: 'tmdbMovie' })\nexport class TMDBMovieStore extends EntityStore<TmdbMovieState, TmdbMovieModel>{\n  constructor() {\n    super();\n  }\n}\n\nexport interface MDBMovieState extends EntityState<MDBMovieModel> { }\n@Injectable({ providedIn: 'root' })\n@StoreConfig({ name: 'mdbMovie' })\nexport class MDBMovieStore extends EntityStore<MDBMovieState, MDBMovieModel>{\n  constructor() {\n    super();\n  }\n}\n\nexport interface MDBMovieSearchState extends EntityState<MDBMovieListModel> { }\n@Injectable({ providedIn: 'root' })\n@StoreConfig({ name: 'mdbSearchMovie' })\nexport class MDBMovieSearchStore extends EntityStore<MDBMovieSearchState, MDBMovieListModel>{\n  constructor() {\n    super();\n  }\n}\n\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "EntityState"
        },
        {
            "name": "MDBMovieState",
            "id": "interface-MDBMovieState-003356e894d6d3fd8e699789e15f6942809cf8b544dbfcd102ceb5a241798a30c7e4b55fa4b0d72866404b32e84c9ff40d963c066d471ae956a9f77f45b3a8a9",
            "file": "src/app/services/movie/movie.store.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport { EntityState, EntityStore, StoreConfig } from \"@datorama/akita\";\nimport { MDBMovieListModel, MDBMovieModel, TmdbMovieModel } from \"./interface/movie\";\n\nexport interface TmdbMovieState extends EntityState<TmdbMovieModel> { }\n\n@Injectable({ providedIn: 'root' })\n@StoreConfig({ name: 'tmdbMovie' })\nexport class TMDBMovieStore extends EntityStore<TmdbMovieState, TmdbMovieModel>{\n  constructor() {\n    super();\n  }\n}\n\nexport interface MDBMovieState extends EntityState<MDBMovieModel> { }\n@Injectable({ providedIn: 'root' })\n@StoreConfig({ name: 'mdbMovie' })\nexport class MDBMovieStore extends EntityStore<MDBMovieState, MDBMovieModel>{\n  constructor() {\n    super();\n  }\n}\n\nexport interface MDBMovieSearchState extends EntityState<MDBMovieListModel> { }\n@Injectable({ providedIn: 'root' })\n@StoreConfig({ name: 'mdbSearchMovie' })\nexport class MDBMovieSearchStore extends EntityStore<MDBMovieSearchState, MDBMovieListModel>{\n  constructor() {\n    super();\n  }\n}\n\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "EntityState"
        },
        {
            "name": "MovieGenre",
            "id": "interface-MovieGenre-584d54738f93e2af94202069b5eddb4cab23bb2dfec2ff69f24ebaf881c252f94680b4cd6cec302796817692570a31bedafc5d74fed1cf6488a895dbf372e23d",
            "file": "src/app/models/interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IMdbMovieDetails {\n  awards?: string\n  backgroundPath: string;\n  belongsToCollection?: []\n  boxOffice?: string | number // tmdb:revenue(number)\n  budget?: number\n  country?: string\n  director?: string\n  dvd?: string // dvd release\n  genres?: string[] | string | IGenre[]\n  imdbId?: string\n  imdbRating?: string\n  imdbVotes?: string\n  isAdult?: boolean;\n  isAvailable?: boolean;\n  languages?: string[]\n  libraryInfo?: ILibraryInfo\n  metascore?: string // metacritic score\\\n  originalLanguage?: string // tmdb:\"en\",omdb:\"English\"\n  originalTitle?: string\n  plot?: string // plot or overview\n  popularity?: number\n  posterPath: string\n  production?: string // company; i.e. Walt Disney Pictures\n  rated?: string // rated or certificate\n  ratings?: IRating[]\n  releaseDate?: string // omdb:\"05 May 2017\"; tmdb:\"1999-10-15\"\n  releaseYear?: number | string\n  response: string\n  runtime?: string\n  starring?: string // Actors field in omdb\n  status?: string // released/Post\n  tagline?: string;\n  tmdbId?: number\n  title: string\n  type?: string // movie/tvmovie/series\n  video?: boolean; // unknown\n  // voteAverage: number; // tmdb votes\n  // voteCount: number; // tmdb votes\n  website?: string\n  writer?: string // omdb\n  [propName: string]: any;\n}\n\nexport interface IRating {\n  Source: string\n  Value: string\n}\n\nexport interface LibraryInfo {\n  tmdbId?: null | number | string\n  imdbID?: string\n  title?: string\n  year?: number\n  directoryList?: string[]\n  _id: string\n}\n\nexport interface MovieGenre {\n  id: number\n  code: string\n  description: string\n  isChecked: boolean\n}\n\nexport interface WatchList {\n  id: number\n  movieList: string[]\n}\n\nexport interface ILibraryInfo {\n  tmdbId?: null | number | string\n  imdbID?: string\n  title?: string\n  year?: number\n  directoryList?: string[]\n  _id: string\n}\n\nexport interface ICollection {\n  id: number,\n  name: string\n}\n\nexport interface IProductionCompany {\n  id: number;\n  logo_path: null | string;\n  name: string;\n  origin_country: string;\n}\n\nexport interface IProductionCountry {\n  iso_3166_1: string;\n  name: string;\n}\n\nexport interface ISpokenLanguage {\n  iso_639_1: string;\n  name: string;\n}\n\nexport interface IOmdbMovieDetail {\n  Title: string\n  Year?: string\n  Rated?: string\n  Released?: string // \"05 May 2017\"\n  Runtime?: string\n  Genre?: string\n  Director?: string\n  Writer?: string\n  Actors?: string\n  Plot?: string\n  Language?: string\n  Country?: string\n  Awards?: string\n  Poster?: string\n  Ratings?: IRating[]\n  Metascore?: string\n  imdbRating?: string\n  imdbVotes?: string\n  imdbID: string\n  Type?: string\n  DVD?: string\n  BoxOffice?: string\n  Production?: string\n  Website?: string\n  Response: string\n}\n\nexport interface ITmdbMovieDetail {\n  adult: boolean;\n  backdrop_path: string;\n  belongs_to_collection: null;\n  budget: number;\n  genres: IGenre[];\n  homepage: string;\n  id: number;\n  imdb_id: string;\n  original_language: string;\n  original_title: string;\n  overview: string;\n  popularity: number;\n  poster_path: string;\n  production_companies: IProductionCompany[];\n  production_countries: IProductionCountry[];\n  release_date: string;\n  revenue: number;\n  runtime: number;\n  spoken_languages: ISpokenLanguage[];\n  status: string;\n  tagline: string;\n  title: string;\n  video: boolean;\n  vote_average: number;\n  vote_count: number;\n}\n\nexport interface MdbMovieDetails {\n  adult?: boolean;\n  title: string\n  releaseYear?: string\n  releaseDate?: string\n  rated?: string // rated or certificate\n  runtime?: string\n  genres?: string\n  director?: string\n  writer?: string\n  Actors?: string\n  plot?: string // plot or overview\n  Language?: string\n  Country?: string\n  Awards?: string\n  Poster?: string\n  Ratings?: IRating[]\n  Metascore?: string\n  imdbRating?: string\n  imdbVotes?: string\n  imdbID: string\n  tmdbID: number\n  Type?: string\n  DVD?: string\n  BoxOffice?: string\n  Production?: string\n  website?: string\n  response: string\n  libraryInfo?: ILibraryInfo\n}\n\n// // adult: boolean;\n// //backdrop_path: string;\n// belongs_to_collection: null;\n// // budget: number;\n// genres: Genre[];\n// // homepage: string;\n// // id: number;\n// // imdb_id: string;\n// original_language: string;\n// original_title: string;\n// // overview: string;\n// // popularity: number;\n// // poster_path: string;\n// production_companies: ProductionCompany[];\n// production_countries: ProductionCountry[];\n// // release_date: string;\n// // revenue: number;\n// // runtime: number;\n// spoken_languages: SpokenLanguage[];\n// // status: string;\n// // tagline: string;\n// // title: string;\n// // video: boolean;\n// // vote_average: number;\n// // vote_count: number;\n\nexport interface ITmdbResultObject {\n  page: number;\n  total_results: number;\n  total_pages: number;\n  results: ITmdbResult[];\n}\n\nexport interface ITmdbResult {\n  popularity: number\n  vote_count: number\n  video: boolean\n  poster_path: string\n  id: number\n  adult: boolean\n  backdrop_path: string\n  original_language: string\n  original_title: string\n  genre_ids: number[]\n  title: string\n  vote_average: number\n  overview: string\n  release_date: string\n  isAvailable?: boolean\n  isHighlighted?: boolean\n}\n\nexport interface ILibraryMovie {\n  tmdbId?: number,\n  title: string,\n  year: number,\n  imdbId?: string,\n  directory: string[]\n}\n\nexport interface IGenre {\n  id: number\n  name: string\n}\n\nexport interface Credits {\n  id: number;\n  cast: CastElement[];\n  crew: Crew[];\n}\n\ninterface CastElement {\n  cast_id: number;\n  character: string;\n  credit_id: string;\n  gender: number;\n  id: number;\n  name: string;\n  order: number;\n  profile_path: null | string;\n}\n\ninterface Crew {\n  credit_id: string;\n  department: Department;\n  gender: number;\n  id: number;\n  job: string;\n  name: string;\n  profile_path: null | string;\n}\n\nexport enum Department {\n  Art = 'Art',\n  Camera = 'Camera',\n  CostumeMakeUp = 'Costume & Make-Up',\n  Crew = 'Crew',\n  Directing = 'Directing',\n  Editing = 'Editing',\n  Lighting = 'Lighting',\n  Production = 'Production',\n  Sound = 'Sound',\n  VisualEffects = 'Visual Effects',\n  Writing = 'Writing',\n}\n\nexport class MDBTorrent {\n  id?: string\n  name?: string\n  size?: string\n  hash: string\n  url?: string\n  quality?: string\n  type?: string\n  seeds?: number\n  peers?: number\n  sizeBytes?: number\n  added?: string\n  dateUploaded?: string\n  dateUploadedUnix?: number\n  isYts?: boolean\n  magnetLink?: string\n}\n\nexport class ITPBTorrent {\n  id?: number\n  name?: string\n  hash: string\n  sizeBytes?: number\n  added?: string\n}\n\nexport interface ISearch {\n  page: number\n}\n\nexport enum OmdbParameters {\n  ApiKey = 'apikey',\n  ImdbId = 'i',\n  Title = 't',\n  Type = 'type',\n  Year = 'y',\n  Plot = 'plot',\n  Return = 'r',\n  Callback = 'callback',\n  Version = 'v',\n}\n\nexport enum TmdbParameters {\n  ApiKey = 'api_key',\n  AppendToResponse = 'append_to_response',\n  Language = 'language',\n  Region = 'region',\n  SortBy = 'sort_by',\n  CertificationCountry = 'certification_country',\n  Certification = 'certification',\n  CertificationLess = 'certification.lte',\n  CertificationGreater = 'certification.gte',\n  IncludeAdult = 'include_adult',\n  IncludeVideo = 'include_video',\n  Page = 'page',\n  PrimaryReleaseYear = 'primary_release_year',\n  PrimaryReleaseDateGreater = 'primary_release_date.gte',\n  PrimaryReleaseDateLess = 'primary_release_date.lte',\n  ReleaseDateGreater = 'release_date.gte',\n  ReleaseDateLess = 'release_date.lte',\n  WithReleaseType = 'with_release_type',\n  Year = 'year',\n  VoteCountGreater = 'vote_count.gte',\n  VoteCountLess = 'vote_count.lte',\n  VoteAverageGreater = 'vote_average.gte',\n  VoteAverageLess = 'vote_average.lte',\n  WithCast = 'with_cast',\n  WithCrew = 'with_crew',\n  WithPeople = 'with_people',\n  WithCompanies = 'with_companies',\n  WithGenres = 'with_genres',\n  WithoutGenres = 'without_genres',\n  WithKeywords = 'with_keywords',\n  WithoutKeywords = 'without_keywords',\n  WithRuntimeGreater = 'with_runtime.gte',\n  WithRuntimeLess = 'with_runtime.lte',\n  WithOriginalLanguage = 'with_original_language',\n  WithWatchProviders = 'with_watch_providers',\n  WatchRegion = 'watch_region'\n}\n\nexport enum TmdbSearchMovieParameters {\n  ApiKey = 'api_key',\n  Language = 'language', // Pass a ISO 639 - 1 value to display translated data for the fields that support it. minLength: 2 pattern: ([a - z]{ 2 }) -([A - Z]{ 2 }) default: en - US\n  Query = 'query',\n  Page = 'page', // minimum: 1 maximum: 1000\n  IncludeAdult = 'include_adult',\n  Region = 'region',\n  // Specify a ISO 3166 - 1 code to filter release dates.Must be uppercase. pattern: ^ [A - Z]{ 2 } $\n  Year = 'year',\n  PrimaryReleaseYear = 'primary_release_year'\n}\n\nenum TmdbAppendToResponseParameters {\n  AccountStates = 'account_states',\n  Videos = 'videos',\n  Images = 'images',\n  Credits = 'credits',\n  Changes = 'changes',\n  Translations = 'translations',\n  Similar = 'similar',\n  ExternalIds = 'external_ids',\n  AlternativeTitles = 'alternative_titles',\n  Keywords = 'keywords',\n  Reviews = 'reviews',\n  Recommendations = 'recommendations',\n  ReleaseDates = 'release_dates',\n  Lists = 'lists'\n}\n\nenum TmdbReleaseTypes {\n  PREMIERE = 'Premiere',  // 1\n  THEATRICAL_LIMITED = 'Theatrical(limited)', // 2\n  THEATRICAL = 'Theatrical', // 3\n  DIGITAL = 'Digital', // 4\n  PHYSICAL = 'Physical', // 5\n  TV = 'TV', // 6\n}\n\nexport interface IPersonDetails {\n  birthday: string;\n  known_for_department: string;\n  id: number;\n  movie_credits?: IPersonCredits;\n  tv_credits?: IPersonCredits;\n  combined_credits?: IPersonCredits;\n  homepage?: any;\n  profile_path: string;\n  imdb_id: string;\n  deathday?: any;\n  images?: IImages;\n  external_ids?: IExternalids;\n  name: string;\n  also_known_as: string[];\n  biography: string;\n  adult: boolean;\n  gender: number;\n  place_of_birth: string;\n  popularity: number;\n}\n\nexport interface IPersonCredits {\n  cast: IPersonCastCrew[];\n  crew: IPersonCastCrew[];\n  id?: number;\n}\n\nexport interface IPersonCastCrew {\n  id?: number;\n  original_language: string;\n  episode_count?: number;\n  overview: string;\n  origin_country?: string[];\n  original_name?: string;\n  genre_ids: number[];\n  name?: string;\n  media_type: string;\n  poster_path: null | string;\n  first_air_date?: string;\n  vote_average: number;\n  vote_count: number;\n  character?: string;\n  backdrop_path: null | string;\n  popularity: number;\n  credit_id: string;\n  original_title?: string;\n  video?: boolean;\n  release_date?: string;\n  title?: string;\n  adult?: boolean;\n  department?: string;\n  job?: string;\n}\n\nexport interface IExternalids {\n  id?: number;\n  freebase_id: string;\n  instagram_id: string;\n  tvrage_id: number;\n  twitter_id: string;\n  freebase_mid: string;\n  imdb_id: string;\n  facebook_id: string;\n}\n\nexport interface IImages {\n  id?: number;\n  profiles: IProfile[];\n}\n\nexport interface IProfile {\n  iso_639_1?: any;\n  aspect_ratio: number;\n  vote_count: number;\n  height: number;\n  vote_average: number;\n  file_path: string;\n  width: number;\n}\n\nexport interface ICredits {\n  cast: ICast[];\n  crew: ICrew[];\n}\n\ninterface ICast {\n  poster_path?: string;\n  adult: boolean;\n  backdrop_path?: string;\n  vote_count: number;\n  video: boolean;\n  id: number;\n  media_type?: string;\n  popularity: number;\n  genre_ids: number[];\n  original_language: string;\n  title: string;\n  original_title: string;\n  release_date: string;\n  character: string;\n  vote_average: number;\n  overview: string;\n  credit_id: string;\n}\n\ninterface ICrew {\n  id: number;\n  department: string;\n  original_language: string;\n  original_title: string;\n  job: string;\n  overview: string;\n  genre_ids: number[];\n  video: boolean;\n  episode_count: number\n  media_type?: string;\n  credit_id: string;\n  poster_path?: string;\n  popularity: number;\n  backdrop_path?: string;\n  vote_count: number;\n  title: string;\n  adult: boolean;\n  vote_average: number;\n  release_date: string;\n}\n\nexport interface IUserSavedData {\n  id?: string,\n  title: string,\n  year: number,\n  tmdbId: number,\n}\n\nexport enum GenreCodes {\n  Action = 28,\n  Adventure = 12,\n  Animation = 16,\n  Comedy = 35,\n  Crime = 80,\n  Documentary = 99,\n  Drama = 18,\n  Family = 10751,\n  Fantasy = 14,\n  History = 36,\n  Horror = 27,\n  Music = 10402,\n  Mystery = 9648,\n  Romance = 10749,\n  ScienceFiction = 878,\n  TVMovie = 10770,\n  Thriller = 53,\n  War = 10752,\n  Western = 37,\n  // mdb reserved\n  FilmNoir = 20000,\n  // similar genre: Music id:10402\n  Musical = 20001,\n  News = 20002,\n  RealityTV = 20003,\n  // similar genre: Science Fiction id:878\n  SciFi = 20004,\n  // another media type\n  Short = 20005,\n  Sport = 20006,\n}\n\n\n\n/**\nexport enum Department {\n    Art = \"Art\",\n    Camera = \"Camera\",\n    CostumeMakeUp = \"Costume & Make-Up\",\n    Crew = \"Crew\",\n    Directing = \"Directing\",\n    Editing = \"Editing\",\n    Lighting = \"Lighting\",\n    Production = \"Production\",\n    Sound = \"Sound\",\n    VisualEffects = \"Visual Effects\",\n    Writing = \"Writing\",\n}\n\nexport interface ExternalIDS {\n    imdb_id:      string;\n    facebook_id:  null;\n    instagram_id: null;\n    twitter_id:   null;\n}\n\nexport interface Genre {\n    id:   number;\n    name: string;\n}\n\nexport interface Images {\n    backdrops: any[];\n    posters:   any[];\n}\n\nexport enum OriginalLanguage {\n    En = \"en\",\n    Es = \"es\",\n    Fr = \"fr\",\n}\n\nexport interface ProductionCompany {\n    id:             number;\n    logo_path:      string;\n    name:           string;\n    origin_country: string;\n}\n\nexport interface ProductionCountry {\n    iso_3166_1: string;\n    name:       string;\n}\n\nexport interface Recommendations {\n    page:          number;\n    results:       RecommendationsResult[];\n    total_pages:   number;\n    total_results: number;\n}\n\nexport interface RecommendationsResult {\n    id:                number;\n    video:             boolean;\n    vote_count:        number;\n    vote_average:      number;\n    title:             string;\n    release_date:      string;\n    original_language: OriginalLanguage;\n    original_title:    string;\n    genre_ids:         number[];\n    backdrop_path:     string;\n    adult:             boolean;\n    overview:          string;\n    poster_path:       string;\n    popularity:        number;\n}\n\nexport interface SpokenLanguage {\n    iso_639_1: OriginalLanguage;\n    name:      string;\n}\n\nexport interface Videos {\n    results: VideosResult[];\n}\n\nexport interface VideosResult {\n    id:         string;\n    iso_639_1:  OriginalLanguage;\n    iso_3166_1: string;\n    key:        string;\n    name:       string;\n    site:       string;\n    size:       number;\n    type:       string;\n}\n */\n\n",
            "properties": [
                {
                    "name": "code",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "isChecked",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 64
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "RegisterUser",
            "id": "interface-RegisterUser-386d7e269c530e10c32373347ca9bff5aaa5425f9fcc6edb7263342fa375fb21f6c6dcb6bc5c891861829511d2075eef4dc5aa5e9aa533a49d42c1df1eb9c4b4",
            "file": "src/app/services/mdb-api.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams, } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { IpcService } from '../services/ipc.service';\nimport { STRING_REGEX_IMDB_ID, MDB_API_URL } from '../shared/constants';\nimport { IProfileData } from '../models/profile-data.model';\n\nconst JSON_CONTENT_TYPE_HEADER = new HttpHeaders({ 'Content-Type': 'application/json' })\n\n@Injectable({ providedIn: 'root' })\nexport class MdbApiService {\n\n  constructor(\n    private http: HttpClient\n  ) { }\n\n  httpParam = new HttpParams()\n\n  saveBookmark(bookmarkBody: any): Observable<any> {\n    return this.http.post<any>(`${MDB_API_URL}\\\\profileData\\\\bookmark`, bookmarkBody).pipe(tap(_ => this.log('')),\n      catchError(this.handleError<any>('saveFavorite')))\n  }\n\n  deleteBookmark(bookmarkId: any): Observable<any> {\n    let httpParams = new HttpParams().set('id', bookmarkId);\n    return this.http.delete<any>(`${MDB_API_URL}\\\\profileData\\\\bookmark`, { params: httpParams }).pipe(tap(_ => this.log('')),\n      catchError(this.handleError<any>('deleteFavorite')))\n  }\n  saveFavorite(favBody: any): Observable<any> {\n    return this.http.post<any>(`${MDB_API_URL}\\\\profileData\\\\favorite`, favBody).pipe(tap(_ => this.log('')),\n      catchError(this.handleError<any>('saveFavorite')))\n  }\n  deleteFavorite(favId: any): Observable<any> {\n    let httpParams = new HttpParams().set('id', favId);\n    return this.http.delete<any>(`${MDB_API_URL}\\\\profileData\\\\favorite`, { params: httpParams }).pipe(tap(_ => this.log('')),\n      catchError(this.handleError<any>('deleteFavorite')))\n  }\n  saveToList(listLinkMovie: any): Observable<any> {\n    return this.http.post<any>(`${MDB_API_URL}\\\\profileData\\\\list\\\\add`, listLinkMovie).pipe(tap(_ => this.log('')),\n      catchError(this.handleError<any>('saveFavorite')))\n  }\n  removeFromList(listLinkMovie: any): Observable<any> {\n    return this.http.post<any>(`${MDB_API_URL}\\\\profileData\\\\list\\\\remove`, listLinkMovie).pipe(tap(_ => this.log('')),\n      catchError(this.handleError<any>('saveFavorite')))\n  }\n  saveList(listBody: any): Observable<any> {\n    return this.http.post<any>(`${MDB_API_URL}\\\\profileData\\\\list`, listBody).pipe(tap(_ => this.log('')),\n      catchError(this.handleError<any>('saveFavorite')))\n  }\n  deleteList(listId: any): Observable<any> {\n    let httpParams = new HttpParams().set('id', listId);\n    return this.http.delete<any>(`${MDB_API_URL}\\\\profileData\\\\list`, { params: httpParams }).pipe(tap(_ => this.log('')),\n      catchError(this.handleError<any>('deleteFavorite')))\n  }\n  saveWatched(watchedBody: any): Observable<any> {\n    return this.http.post<any>(`${MDB_API_URL}\\\\profileData\\\\watched`, watchedBody).pipe(tap(_ => this.log('')),\n      catchError(this.handleError<any>('saveFavorite')))\n  }\n  deleteWatched(watchedBody: any): Observable<any> {\n    return this.http.delete<any>(`${MDB_API_URL}\\\\profileData\\\\watched`, watchedBody).pipe(tap(_ => this.log('')),\n      catchError(this.handleError<any>('deleteFavorite')))\n  }\n\n  getProfileDataByTmdbId(tmdbId: number): Observable<IProfileData> {\n\n    return this.http.get<any>(`${MDB_API_URL}\\\\profileData\\\\media\\\\${tmdbId}`).pipe(tap(_ => this.log('')),\n      catchError(this.handleError<any>('getProfileDataByTmdbId')))\n  }\n\n  getProfileDataByTmdbIdList(tmdbIdList: number[]): Observable<IProfileData[]> {\n\n    return this.http.get<any>(`${MDB_API_URL}\\\\profileData\\\\media\\\\list\\\\${tmdbIdList}`).pipe(tap(_ => this.log('')),\n      catchError(this.handleError<any>('getProfileDataByTmdbIdList')))\n  }\n\n  registerUser(payload: RegisterUser) {\n    return this.http.post<any>(`mdb/user/register`, payload).pipe(tap(_ => this.log('')),\n      catchError(this.handleError<any>('registerUser')))\n  }\n\n  logout() {\n    return this.http.post<any>(`mdb/user/logout`, {}).pipe(tap(_ => this.log('')),\n      catchError(this.handleError<any>('logout')))\n  }\n\n  login(payload: LoginUser) {\n    return this.http.post<any>(`mdb/user/login`, payload).pipe(tap(_ => this.log('')),\n      catchError(this.handleError<any>('logout')))\n  }\n\n  /**\n   * Error handler.\n   * @param operation the operation\n   * @param result the result\n   */\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n      console.error(error); // log to console instead\n      this.log(`${operation} failed: ${error.message}`);\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n\n  private log(message: string) {\n    console.log(`MovieService: ${message} `);\n  }\n}\n\nexport interface LoginUser {\n  userName: string;\n  password: string;\n  type?: string;\n  token?: string;\n}\nexport interface RegisterUser {\n  password: string;\n  userName: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  avatar: string;\n  contactNumber?: string;\n}\n",
            "properties": [
                {
                    "name": "avatar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 126
                },
                {
                    "name": "contactNumber",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 127
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 123
                },
                {
                    "name": "firstName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 124
                },
                {
                    "name": "lastName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 125
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 121
                },
                {
                    "name": "userName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 122
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Review",
            "id": "interface-Review-08842b1ab0ae2357353fe89eaf497dd213e2f61dda54adc1d6c9e449b0d102b87fa47aee3bb9ba95ee188e6d4b3f6fea9998ca218e83aceb9f3f9e22dd0f49d9",
            "file": "src/app/models/review.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Review {\n    id: number\n    rating: number\n    content: string\n  }\n",
            "properties": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "rating",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SignIn",
            "id": "interface-SignIn-262313785ca70d6ec44d15ca30b76272c8da306812585d0f7e6330b194810f562ae341bdbbe0c8cfa9e4883d7ce176734a7265af13dae73cc619faf5f36befe6",
            "file": "src/app/modules/user/signin/signin.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { UsernameExistValidator, UsernameExistingValidator } from '@directives/username-exist.directive';\nimport { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, Validators, FormBuilder, AbstractControl } from '@angular/forms'\nimport { repeatPasswordValidator } from '@directives/repeat-password.directive';\nimport { CredentialsValidator } from '@directives/credentials.directive';\nimport * as firebase from 'firebase/app';\nimport { AngularFirestore } from '@angular/fire/firestore'\nimport { AngularFireAuth, AngularFireAuthModule } from '@angular/fire/auth'\nimport { IpcService } from '@services/ipc.service';\nimport { FirebaseService, CollectionName } from '@services/firebase.service';\nimport { UtilsService } from '@services/utils.service';\nimport { repeat, debounceTime, take, map } from 'rxjs/operators';\n\nexport class CustomValidator {\n  static usernameValidate(afs: AngularFirestore) {\n    return (control: AbstractControl) => {\n\n      const username = control.value.toLowerCase();\n      console.log('control username ', username)\n      return afs.collection('user', ref => ref.where('username', '==', username))\n\n        .valueChanges().pipe(\n          debounceTime(500),\n          take(1),\n          map(arr => arr.length ? { usernameAvailable: false } : null),\n        )\n    }\n  }\n}\n\n@Component({\n  selector: 'app-signin',\n  templateUrl: './signin.component.html',\n  styleUrls: ['./signin.component.scss']\n})\nexport class SigninComponent implements OnInit {\n\n  ageList = []\n  user = {\n    emailAddress: '',\n    password: ''\n  }\n  userSignUp = {\n    username: '',\n    emailAddress: '',\n    age: 0,\n    gender: '',\n    authType: '',\n    password: '',\n    repeatPassword: ''\n  }\n  userSignIn = {\n    usernameEmail: '',\n    password: ''\n  }\n  signUpForm: FormGroup\n  signInForm: FormGroup\n  isSignIn = false\n  isOAuthValid = false\n  generalError = ''\n\n  constructor(\n    private credentialValidator: CredentialsValidator,\n    private auth: AngularFireAuth,\n    private authModule: AngularFireAuthModule,\n    private firebaseService: FirebaseService,\n    private ipcService: IpcService,\n    private utilsService: UtilsService,\n    private formBuilder: FormBuilder,\n    private usernameExistValidator: UsernameExistValidator,\n    private afs: AngularFirestore\n  ) { }\n\n  ngOnInit() {\n    // const env = this.utilsService.getEnvironment()\n    // if (env === 'web') {\n    //   this.isOAuthValid = true\n    // }\n\n    this.signUpForm = this.formBuilder.group({\n      username: [this.userSignUp.username, [Validators.required, Validators.minLength(4)], UsernameExistingValidator.validateUsername(this.afs)\n      ],\n      emailAddress: [this.userSignUp.emailAddress, [Validators.required, Validators.minLength(4), Validators.email]],\n\n      password: [this.userSignUp.password, [Validators.required, Validators.minLength(6)]],\n\n      repeatPassword: [this.userSignUp.repeatPassword, [Validators.required, Validators.minLength(6)]],\n    }, { validators: repeatPasswordValidator }\n    )\n\n    this.signInForm = new FormGroup({\n      usernameEmail: new FormControl(this.userSignIn.usernameEmail, [Validators.required]),\n      password: new FormControl(this.userSignIn.password, [Validators.required])\n    },\n    )\n  }\n\n  get username() { return this.signUpForm.get('username'); }\n  get emailAddress() { return this.signUpForm.get('emailAddress'); }\n  get password() { return this.signUpForm.get('password'); }\n  get repeatPassword() { return this.signUpForm.get('repeatPassword'); }\n\n  onSignUp() {\n    console.log('submit');\n    const username = this.signUpForm.get('username').value\n    const emailAddress = this.signUpForm.get('emailAddress').value\n    const password = this.signUpForm.get('password').value\n    this.firebaseService.signUp(emailAddress, password).then(e => {\n      console.log(e)\n      // this.firebaseService.insertIntoFirestore(CollectionName.User, { username, emailAddress })\n    }).catch(e => {\n      this.generalError = e\n      // this.signUpForm.\n      // console.log(this.signUpForm.value('username'))\n      this.signUpForm.setErrors({ generalError: e })\n    })\n  }\n\n  // onSignUpFromLogin() {\n  //   console.log('submit');\n  //   const emailUsername = this.signInForm.get('usernameEmail').value\n  //   const password = this.signInForm.get('password').value\n  //   this.firebaseService.signUp(emailUsername, password)\n  // }\n\n  onSignIn() {\n    console.log('onsignin');\n    const emailUsername = this.signInForm.get('usernameEmail').value\n    const password = this.signInForm.get('password').value\n    this.firebaseService.signIn(emailUsername, password)\n  }\n\n  onSignInGoogle() {\n    const provider = new firebase.auth.GoogleAuthProvider()\n    // this.auth.auth.signInWithRedirect(provider)\n    // firebase.auth().getRedirectResult().then((e) => {\n    this.firebaseService.signInWithGoogle(provider)\n  }\n\n  emailDomainValidator(control: FormControl) {\n    const email = control.value;\n    if (email && email.indexOf(\"@\") != -1) {\n      let [_, domain] = email.split('@');\n      if (domain !== 'codecraft.tv') {\n        const emailDomain = {\n          parsedDomain: domain\n        }\n        console.log(emailDomain)\n        return {\n          emailDomain\n        }\n      }\n    }\n    return null;\n  }\n\n}\n\n\nexport interface SignIn {\n  username: string,\n  emailAddress: string,\n  age: number,\n  gender: string,\n  authType: string,\n}\n",
            "properties": [
                {
                    "name": "age",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 163
                },
                {
                    "name": "authType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 165
                },
                {
                    "name": "emailAddress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 162
                },
                {
                    "name": "gender",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 164
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 161
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SortObject",
            "id": "interface-SortObject-88e397b48570501d2155099bb31f9322acc23bd18595d1aca93c37f8404b5193d4990a928e2ef0f2759f3078524d816543be05c53659fcf0f24800e145c77598",
            "file": "src/app/services/ipc.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { environment } from '@environments/environment';\nimport * as IPCRendererChannel from '../../assets/IPCRendererChannel.json';\nimport * as IPCMainChannel from '../../assets/IPCMainChannel.json';\nimport { v4 as uuidv4 } from 'uuid'\nimport { Injectable } from '@angular/core'\nimport { BehaviorSubject, Observable, fromEvent } from 'rxjs'\nimport { ipcRenderer } from 'electron'\nimport { ILibraryInfo } from '@models/interfaces'\nimport { IRawLibrary } from './library.service';\nimport { IWatched } from './watched.service';\nimport { Review } from '@models/review.model';\nimport { IProfileData, ListLinkMovie } from '@models/profile-data.model';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class IpcService {\n\n  libraryMovies = new BehaviorSubject<string[]>([])\n  libraryMovie = new BehaviorSubject<string[]>([])\n  bookmarkChanges = new BehaviorSubject<IBookmarkChanges[]>([])\n  movieIdentified = new BehaviorSubject<any>({ id: 0 })\n  searchList = new BehaviorSubject<any>([])\n  torrentVideo = new BehaviorSubject<string[]>([])\n  preferences = new BehaviorSubject<any>([])\n  streamLink = new BehaviorSubject<any>('')\n  private statsForNerds = new BehaviorSubject<any>({})\n  statsForNerdsSubscribable = this.statsForNerds.asObservable()\n  private ipcRenderer: typeof ipcRenderer\n\n  constructor() {\n    if (environment.runConfig.electron) {\n\n      console.log((window as any).require('electron'))\n\n      this.ipcRenderer = (window as any).require('electron').ipcRenderer\n\n      this.ipcRenderer.on('torrent-video', (event, data: any) => {\n        console.log('event: ', event)\n        console.log('data: ', data)\n        this.torrentVideo.next(data)\n      })\n\n      this.ipcRenderer.on(IPCMainChannel.PREFERENCES_GET_COMPLETE, (event: Electron.IpcRendererEvent, data) => {\n        this.preferences.next(data)\n        console.log('IPCMainChannel.PREFERENCES_COMPLETE ', data)\n      })\n      this.ipcRenderer.on(IPCMainChannel.STREAM_LINK, (event: Electron.IpcRendererEvent, data) => {\n        this.streamLink.next(data)\n        console.log('IPCMainChannel.STREAM_LINK ', data)\n      })\n      this.ipcRenderer.on(IPCMainChannel.STATS, (event: Electron.IpcRendererEvent, data) => {\n        this.statsForNerds.next(data)\n        console.log('IPCMainChannel.STATS ', data)\n      })\n    }\n  }\n\n  async getFiles() {\n    // return new Promise<string[]>((resolve, reject) => {\n    //   this.ipcRenderer.once('library-folders', (event, arg) => {\n    //     resolve(arg);\n    //   });\n    //   this.ipcRenderer.send('retrieve-library-folders');\n    // });\n  }\n\n  /**\n   * Gets the drives in the system.\n   */\n  async getSystemDrives() {\n    // return new Promise<string[]>((resolve, reject) => {\n    //   this.ipcRenderer.once('system-drives', (event, arg) => {\n    //     resolve(arg);\n    //   });\n    // });\n    // this.ipcRenderer.send('get-drives')\n  }\n  /**\n   * Opens the folder\n   * @param data folder directory\n   */\n  openFolder(data: string) {\n    console.log('open', data)\n    // this.ipcRenderer.send('go-to-folder', ['open', data])\n  }\n\n  /**\n   * Ipc renderer that sends command to main renderer to get movies from library db.\n   * @param idList\n   */\n  getMoviesFromLibraryInList(idList: number[]): Promise<any> {\n    const theUuid = uuidv4()\n    this.sendToMain('library', { operation: IpcOperations.FIND_IN_LIST, uuid: theUuid },\n      { idList: idList });\n    return this.listenOnce(`library-${theUuid}`);\n  }\n\n  /**\n   * Paginated, first page.\n   * @param collectionName\n   * @param order\n   * @param size\n   */\n  getMultiplePaginatedFirst(collectionName: string, sort: string, size?: number): Promise<IUserDataPaginated> {\n    const theUuid = uuidv4()\n    this.sendToMain(collectionName, { operation: IpcOperations.GET_BY_PAGE, uuid: theUuid },\n      { sort: sort, size: size, lastVal: 0 });\n    return this.listenOnce(`${collectionName}-${theUuid}`);\n  }\n\n  /**\n   * Paginated, NOT first page.\n   * @param collectionName\n   * @param order\n   * @param limit\n   * @param lastVal\n   */\n  getMultiplePaginated(collectionName: string, sort: string, limit?: number, lastVal?: string | number): Promise<IUserDataPaginated> {\n    const theUuid = uuidv4()\n    this.sendToMain(collectionName, { operation: IpcOperations.GET_BY_PAGE, uuid: theUuid },\n      { sort: sort, limit: limit, lastVal: lastVal });\n    return this.listenOnce(`${collectionName}-${theUuid}`);\n  }\n\n  /**\n   * Ipc renderer that sends command to main renderer to get specified movie from library db.\n   * Replies offline library object(s).\n   * @param arg imdb id or movie title and release year or tmdb id\n   */\n  getMovieFromLibrary(arg): Promise<IRawLibrary> {\n    const theUuid = uuidv4()\n    this.sendToMain('library', { operation: IpcOperations.FIND, uuid: theUuid },\n      { tmdbId: arg });\n    return this.listenOnce(`library-${theUuid}`);\n  }\n\n  // // user services; watchlist/bookmarks, watched\n  getBookmark(data: number) {\n    const theUuid = uuidv4()\n    this.sendToMain('bookmark', { operation: IpcOperations.FIND_ONE, uuid: theUuid },\n      { tmdbId: data })\n    return this.listenOnce(`bookmark-${theUuid}`);\n  }\n\n  getBookmarkInList(idList: number[]): Promise<any> {\n    const theUuid = uuidv4()\n    this.sendToMain('bookmark', {\n      operation: IpcOperations.FIND_IN_LIST,\n      uuid: theUuid\n    }, { idList: idList });\n    return this.listenOnce(`bookmark-${theUuid}`);\n  }\n\n  saveBookmark(data) {\n    const theUuid = uuidv4()\n    this.sendToMain('bookmark', { operation: IpcOperations.SAVE, uuid: theUuid },\n      data);\n    return this.listenOnce(`bookmark-${theUuid}`);\n  }\n\n  removeBookmark(type: string, id: string | number) {\n    const theUuid = uuidv4()\n    this.sendToMain('bookmark', { operation: IpcOperations.REMOVE, uuid: theUuid }, { type: type, id: id });\n    return this.listenOnce(`bookmark-${theUuid}`);\n  }\n\n  // ----- WATCHED\n  getWatched(data: number) {\n    const theUuid = uuidv4()\n    this.sendToMain('watched', { operation: IpcOperations.FIND_ONE, uuid: theUuid },\n      { tmdbId: data })\n    return this.listenOnce(`watched-${theUuid}`);\n  }\n\n  /**\n   * Ipc renderer that sends command to main renderer to get movies from library db.\n   * @param idList\n   */\n  getWatchedInList(idList: number[]): Promise<any> {\n    const theUuid = uuidv4()\n    this.sendToMain('watched', {\n      operation: IpcOperations.FIND_IN_LIST,\n      uuid: theUuid\n    }, { idList: idList });\n    return this.listenOnce(`watched-${theUuid}`);\n  }\n\n  saveWatched(data) {\n    const theUuid = uuidv4()\n    this.sendToMain('watched', { operation: IpcOperations.SAVE, uuid: theUuid }, data);\n    return this.listenOnce(`watched-${theUuid}`);\n  }\n\n  updateWatchedStatus(val: IWatched) {\n    this.ipcRenderer.send('', val)\n  }\n\n  /**\n   * TODO: remove type\n   */\n  removeWatched(type: string, id: string | number) {\n    const theUuid = uuidv4()\n    this.sendToMain('watched', { operation: IpcOperations.REMOVE, uuid: theUuid }, { type: type, id: id });\n    return this.listenOnce(`watched-${theUuid}`);\n  }\n\n\n  // ----- END OF WATCHED\n  /**\n   *\n   * @param id tmdb id\n   */\n  getMovieUserData(id: number): Promise<IProfileData> {\n    const theUuid = uuidv4()\n    this.sendToMain('user-data', {\n      operation: IpcOperations.FIND,\n      uuid: theUuid\n    }, { tmdbId: id });\n    return this.listenOnce(`user-data-${theUuid}`);\n  }\n\n  getMovieUserDataInList(idList: number[]): Promise<IProfileData[]> {\n    const theUuid = uuidv4()\n    this.sendToMain('user-data', {\n      operation: IpcOperations.FIND_IN_LIST,\n      uuid: theUuid\n    }, { idList: idList });\n    return this.listenOnce(`user-data-${theUuid}`)\n  }\n\n  saveFavorite(data) {\n    const theUuid = uuidv4()\n    this.sendToMain('favorite', { operation: IpcOperations.SAVE, uuid: theUuid }, data);\n    return this.listenOnce(`favorite-${theUuid}`);\n  }\n\n  // ----- END OF USER DATA\n  startScanLibrary() {\n\n    this.sendToMain(IPCRendererChannel.SCAN_LIBRARY_START)\n    this.ipcRenderer.on(IPCMainChannel.ScanLibraryResult, e => {\n      console.log(IPCMainChannel.ScanLibraryResult, e)\n    })\n    this.ipcRenderer.once(IPCMainChannel.ScanLibraryComplete, e => {\n      console.log('completscan')\n      this.ipcRenderer.removeListener(IPCMainChannel.ScanLibraryResult, d => { })\n    })\n  }\n\n  stopScanLibrary() {\n    this.sendToMain(IPCRendererChannel.SCAN_LIBRARY_STOP)\n  }\n\n  getPlayTorrent(hash: string): Promise<any> {\n    this.sendToMain(IPCRendererChannel.PLAY_TORRENT, hash)\n    return this.listenOnce(`stream-link`);\n  }\n\n  stopStream() {\n    this.sendToMain(IPCRendererChannel.STOP_STREAM)\n  }\n\n  playOfflineVideo(docId): Promise<any> {\n    this.sendToMain(IPCRendererChannel.PLAY_OFFLINE_VIDEO_STREAM, docId);\n    return this.listenOnce(`stream-link`);\n  }\n\n  getPreferences() {\n\n    this.sendToMain(IPCRendererChannel.PREFERENCES_GET)\n    // this.ipcRenderer.addListener(IPCMainChannel.PREFERENCES_GET_COMPLETE, this.pref)\n\n    // (event, data: any) => {\n    // console.log('IPCMainChannel.PREFERENCES_COMPLETE ', data)\n    // this.pref()\n    // this.preferences.next(data)\n    // this.ipcRenderer.removeListener(IPCMainChannel.PREFERENCES_GET_COMPLETE, e => { })\n    // })\n  }\n\n  savePreferences(val) {\n    this.sendToMain(IPCRendererChannel.PREFERENCES_SET, val)\n    // this.ipcRenderer.on(IPCMainChannel.PREFERENCES_SET_COMPLETE, (event, data: any) => {\n    //   console.log('IPCMainChannel.PREFERENCES_SET_COMPLETE ', data)\n    //   this.preferences.next(data)\n    //   this.ipcRenderer.removeListener(IPCMainChannel.PREFERENCES_SET_COMPLETE, d => { })\n    // })\n  }\n\n  changeSubtitle(): Promise<any> {\n    this.sendToMain(\"get-subtitle\")\n    return this.listenOnce('subtitle-path')\n  }\n\n  minimizeWindow() {\n    this.sendToMain(this.IPCCommand.MinimizeApp)\n  }\n  minimizeRestoreWindow() {\n    this.sendToMain(this.IPCCommand.RestoreApp)\n  }\n  exitApp() {\n    this.sendToMain(this.IPCCommand.ExitApp)\n  }\n\n  private removeListener(channel: string) {\n    console.log('REMOVING LISTENER', channel)\n    this.ipcRenderer.removeListener(channel, d => { })\n  }\n\n  private sendToMain(channel: string, headers?: Headers | string, body?: Body) {\n    try {\n      this.ipcRenderer.send(channel, [headers, body])\n      console.log('sent to ipc... ', channel, [headers, body])\n    } catch {\n      console.log('failed to send Ipc: ', channel, [headers, body])\n    }\n  }\n\n  private listenOnce(channel: string) {\n    return new Promise<any>((resolve, reject) => {\n      try {\n        this.ipcRenderer.once(channel, (event, arg) => {\n          console.log('channel: ', channel, ' arg: ', arg)\n          resolve(arg);\n        });\n      } catch {\n        resolve(null);\n        console.log(`listen ${channel} failed`)\n      }\n    });\n  }\n\n  IPCCommand = IPCRendererChannel['default']\n  IPCChannel = IPCMainChannel['default']\n}\n\ninterface Headers {\n  operation: IpcOperations,\n  uuid: string\n}\n\ninterface Body {\n  tmdbId?: number\n  idList?: number[]\n  [x: string]: any\n}\n\nenum IpcOperations {\n  FIND = 'find',\n  FIND_ONE = 'find-one',\n  FIND_IN_LIST = 'find-in-list',\n  UPDATE = 'update',\n  SAVE = 'save',\n  REMOVE = 'remove',\n  GET_BY_PAGE = 'get-by-page',\n  COUNT = 'count'\n}\nexport interface IBookmarkChanges {\n  change: BookmarkChanges\n}\n\nexport enum BookmarkChanges {\n  UPDATE = 'update',\n  DELETE = 'delete',\n  INSERT = 'insert'\n}\n\nexport interface IBookmark {\n  tmdbId: number,\n  imdbId: string,\n  id: string\n}\n\n\n\ninterface ILibrary {\n  title?: string,\n  year?: number,\n  tmdbId?: number,\n  imdbId?: string,\n  libraryList: ILibraryData[]\n}\n\ninterface ILibraryData {\n  fullFilePath: string,\n  _id: string\n}\n\nexport interface IUserDataPaginated {\n  totalPages: number,\n  totalResults: number,\n  page?: number,\n  results: any[],\n}\n\ninterface SortObject {\n  [x: string]: 1 | -1\n}\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-88e397b48570501d2155099bb31f9322acc23bd18595d1aca93c37f8404b5193d4990a928e2ef0f2759f3078524d816543be05c53659fcf0f24800e145c77598",
                    "args": [
                        {
                            "name": "x",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "\"1\" | ",
                    "line": 405,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 175,
            "methods": []
        },
        {
            "name": "Stats",
            "id": "interface-Stats-058cdc7107d30f17a17f612e1752543af958475052b5832c32f37751c288c89e6a58cd2206e2e9322ada69304fbe59f5554dd6dc123b18351bbb115289bed2c1",
            "file": "src/app/modules/watch/video-player.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit, Input, OnDestroy, AfterViewInit, ElementRef, OnChanges, SimpleChanges, ViewChild, PipeTransform, Pipe } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { IpcService } from '@services/ipc.service';\nimport { MovieService } from '@services/movie/movie.service';\nimport { WatchedService } from '@services/watched.service';\nimport SubtitlesUtil from '@utils/subtitles.utils';\nimport { Subtitle } from '@models/subtitle.model';\nimport { UserIdleService } from \"angular-user-idle\";\nimport chardet from \"chardet\";\nimport jschardet from \"jschardet\";\nimport { environment } from 'environments/environment';\nimport { takeUntil } from 'rxjs/operators';\nimport { IPlaybackPreferences, ISubtitlePreferences } from '@models/preferences.model';\nimport { COLOR_LIST, FONT_SIZE_LIST } from '@shared/constants';\nimport GeneralUtil from '@utils/general.util';\nimport { PreferencesService } from '@services/preferences.service';\nimport { IProgressBar, VideoPlayerControlsComponent } from './video-player-controls/video-player-controls.component';\n\n@Component({\n  selector: 'app-video-player',\n  templateUrl: './video-player.component.html',\n  styleUrls: ['./video-player.component.scss']\n})\nexport class VideoPlayerComponent implements OnInit, OnDestroy, AfterViewInit, OnChanges {\n  @Input() streamLink: string\n  @Input() id: string\n  @Input() tmdbId: number\n  @Input() imdbId: string\n\n  @ViewChild('videoPlayer1', { static: true }) videoPlayer1: ElementRef\n  @ViewChild(VideoPlayerControlsComponent, { static: true }) child;\n  @ViewChild('tooltipSpan', { static: false }) tooltipSpan: ElementRef\n\n  DEFAULT_VOLUME = 50\n  isPlaying = false\n  isMuted = false\n  volume = this.DEFAULT_VOLUME\n  videoPlayerElement;\n  isShowStatus = false\n  isShowSubtitles = true\n  statsForNerds: Stats = {\n    bufferhealth: '',\n    connectionSpeed: '',\n    downloadedPieces: 0,\n    downSpeed: '',\n    upSpeed: '',\n    ratio: '',\n    // codec\n    id: '',\n    source: '',\n    size: '',\n    resolution: ''\n  }\n  videoTime = {\n    elapsed: 0,\n    duration: 0,\n    remaining: 0\n  }\n  progressBar: IProgressBar = {\n    buffered: '0%',\n    played: '0%',\n  }\n  subtitleMap = new Map<number, Subtitle>();\n\n  // subtitleLine1 = '<i>Subtitle line 1 look like this.</i>';\n  // subtitleLine2 = '<b><i><font face=\"Tempus Sans ITC\" color=\"#ffff80\" size=\"30\">\"Spice Girls : Viva Forever\"</font></i></b>';\n  subtitleLine1 = 'Subtitle line 1 look like this.';\n  subtitleLine2 = 'Subtitle line 2 look like this.';\n  isUserInactive = false;\n  subtitleDisplaySettings: ISubtitlePreferences = this.preferencesService.getPreferences().subtitle\n  playbackSettings: IPlaybackPreferences = this.preferencesService.getPreferences().playBack\n  fontColorsList = COLOR_LIST\n  subtitleSpanElementsList: any[];\n  fontSizeList = FONT_SIZE_LIST\n  canPlay = false\n  isMetadataLoaded = false\n  isSeeking = false\n  toSeek: number = 0\n  private ngUnsubscribe = new Subject();\n\n  constructor(\n    private ipcService: IpcService,\n    private watchedService: WatchedService,\n    private movieService: MovieService,\n    private elementRef: ElementRef,\n    private userIdleService: UserIdleService,\n    private preferencesService: PreferencesService\n  ) { GeneralUtil.DEBUG.log('VIDEOPLAYER CONSTRUCTOR') }\n\n  onNotIdle() {\n    this.userIdleService.resetTimer()\n    this.isUserInactive = false;\n  }\n\n  ngOnInit() {\n\n    // this.subtitleDisplaySettings.fontSize = size\n    // this.subtitleDisplaySettings.fontColor = color\n    // this.subtitleDisplaySettings.backgroundColor = color\n    // this.subtitleDisplaySettings.backgroundOpacity = percentage;\n    // this.streamLink = 'https://s3.eu-central-1.amazonaws.com/pipe.public.content/short.mp4' // 320p sample\n    // this.streamLink = 'https://file-examples-com.github.io/uploads/2017/04/file_example_MP4_1920_18MG.mp4' // 1080p sample\n    // this.streamLink = '../../../../assets/sample movie/Ratatouille (2007) [1080p]/Ratatouille.2007.1080p.BrRip.x264.YIFY.mp4'\n    this.userIdleService.startWatching()\n    this.userIdleService.onTimerStart().pipe(takeUntil(this.ngUnsubscribe)).subscribe((_count) => { GeneralUtil.DEBUG.log('start! ', _count) });\n    this.userIdleService.onIdleStatusChanged().pipe(takeUntil(this.ngUnsubscribe)).subscribe(e => {\n      GeneralUtil.DEBUG.log(\"changed!\", e)\n    })\n    this.userIdleService.onTimeout().pipe(takeUntil(this.ngUnsubscribe)).subscribe(e => {\n      GeneralUtil.DEBUG.log(\"TIMEOUT!OUT!\", e)\n      // this.isUserInactive = true;\n    })\n\n    const root = this;\n    // setTimeout(() => {\n    //   root.isShowSubtitles = false;\n    // }, 5000);\n\n    GeneralUtil.DEBUG.log('1. VIDEOPLAYER ngOnInit')\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    const cs = changes.streamLink\n    if (cs) {\n      GeneralUtil.DEBUG.log('2. cs:', cs)\n      GeneralUtil.DEBUG.log('this.streamLink:', this.streamLink)\n      // if (cs && !cs.firstChange) {\n      this.statsForNerds.source = this.streamLink;\n      this.isMetadataLoaded = true\n      GeneralUtil.DEBUG.log('isMetadataLoaded true')\n\n      const root = this\n      let checkExist = setInterval(function () {\n        root.videoPlayerElement = root.elementRef.nativeElement.querySelectorAll('#videoPlayer')\n        if (root.videoPlayerElement.length > 0) {\n          GeneralUtil.DEBUG.log(\"3. videoPlayer Exists!\");\n          root.videoPlayerEvents();\n          clearInterval(checkExist);\n        }\n      }, 100); // check every 100ms\n\n    }\n  }\n\n  ngAfterViewInit(): void {\n\n    if (environment.runConfig.electron) {\n      this.ipcService.statsForNerdsSubscribable.pipe(takeUntil(this.ngUnsubscribe)).subscribe(stats => {\n        GeneralUtil.DEBUG.log(stats)\n        if (stats) {\n          this.statsForNerds.downSpeed = stats.downSpeed\n          this.statsForNerds.upSpeed = stats.upSpeed\n          this.statsForNerds.downloadedPieces = stats.downloadedPieces\n          this.statsForNerds.ratio = stats.ratio\n        }\n      })\n    }\n  }\n\n  ngOnDestroy(): void {\n    GeneralUtil.DEBUG.log('ondestroy')\n    this.canPlay = false\n    this.ngUnsubscribe.next()\n    this.ngUnsubscribe.complete()\n    this.ipcService.stopStream()\n    GeneralUtil.DEBUG.log('DESTROYED')\n  }\n\n  videoPlayerEvents() {\n\n    // this.videoPlayerElement = this.videoPlayer1.nativeElement as HTMLVideoElement\n    GeneralUtil.DEBUG.log('4. videoPlayerEvents, videoPlayerElement: ', this.videoPlayerElement)\n    this.videoPlayerElement = this.videoPlayerElement[0]\n    // GeneralUtil.DEBUG.log(this.videoPlayer1)\n\n\n    //   // Mute/Unmute\n    //   // this.videoPlayerElement.muted = true\n    this.videoPlayerElement.addEventListener('canplay', (e) => {\n      this.subtitleSpanElementsList = this.elementRef.nativeElement.querySelectorAll('.subtitle-span')\n      GeneralUtil.DEBUG.log('EVENT: canplay', e)\n      this.canPlay = true\n      this.videoTime.duration = this.videoPlayerElement.duration\n      this.togglePlay();\n      this.isSeeking = false\n    })\n    this.videoPlayerElement.addEventListener('durationchange', (e) => {\n      GeneralUtil.DEBUG.log('EVENT: durationchange', e)\n    })\n    this.videoPlayerElement.addEventListener('ended', (e) => {\n      this.isPlaying = false\n      GeneralUtil.DEBUG.log('EVENT: ended', e)\n      // this.watchedService.saveWatched({\n      //   id: '',\n      //   tmdbId: this.tmdbId,\n      //   imdbId: this.imdbId,\n      //   title: '',\n      //   percentage: 100,\n      //   year: 0});\n    })\n    this.videoPlayerElement.addEventListener('error', (e) => {\n      GeneralUtil.DEBUG.log('EVENT: error', e)\n    })\n    this.videoPlayerElement.addEventListener('pause', (e) => {\n      this.isPlaying = false\n      GeneralUtil.DEBUG.log('EVENT: pause', e)\n    })\n    this.videoPlayerElement.addEventListener('play', (e) => {\n      this.isPlaying = true\n      GeneralUtil.DEBUG.log('EVENT: play', e)\n    })\n    this.videoPlayerElement.addEventListener('playing', (e) => {\n      this.isPlaying = true\n      GeneralUtil.DEBUG.log('EVENT: playing', e)\n    })\n    this.videoPlayerElement.addEventListener('progress', (e) => {\n      // GeneralUtil.DEBUG.log('progress', e)\n    })\n    this.videoPlayerElement.addEventListener('seeked', (e) => {\n      GeneralUtil.DEBUG.log('EVENT: seeked', e)\n      this.updateProgressBar()\n      this.isSeeking = false\n    })\n    this.videoPlayerElement.addEventListener('seeking', (e) => {\n      GeneralUtil.DEBUG.log('EVENT: seeking', e)\n      this.isSeeking = true\n    })\n    this.videoPlayerElement.addEventListener('stalled', (e) => {\n      GeneralUtil.DEBUG.log('EVENT: stalled', e)\n      this.isSeeking = true\n    })\n    this.videoPlayerElement.addEventListener('suspend', (e) => {\n      // GeneralUtil.DEBUG.log('onSuspend', e)\n    })\n    this.videoPlayerElement.addEventListener('timeupdate', (e) => {\n      this.videoTime.elapsed = this.videoPlayerElement.currentTime\n      for (let entry of this.subtitleMap.entries()) {\n        if (this.videoTime.elapsed >= this.convertToSeconds(entry[1].startTime) && this.videoTime.elapsed <= this.convertToSeconds(entry[1].endTime)) {\n          this.updateDisplaySubtitle(entry[1].captionText1, entry[1].captionText2)\n          break;\n        } else {\n          this.updateDisplaySubtitle('', '')\n          // this.updateDisplaySubtitle('\\uD83D\\uDE00', '\\uD83D\\uDE00') // emoji test\n        }\n      }\n    })\n    this.videoPlayerElement.addEventListener('loadedmetadata', (e) => {\n      GeneralUtil.DEBUG.log('EVENT: loadedmetadata', e)\n      this.isMetadataLoaded = true\n      this.statsForNerds.resolution = this.videoPlayerElement.videoWidth + 'x' + this.videoPlayerElement.videoHeight\n    })\n\n    // MIGRATED\n    const root = this\n    setInterval((e) => {\n      if (root.isPlaying) {\n        root.updateProgressBar()\n        // this.updateWatchedStatus(e)\n      }\n    }, 500)\n    // END OF MIGRATED\n  }\n\n  onKeyPress(val: KeyboardEvent) {\n    const key = val.key.toLowerCase()\n    GeneralUtil.DEBUG.log(val)\n    if (!val.shiftKey && !val.altKey && !val.ctrlKey && !val.metaKey) {\n\n      switch (key) {\n        case 'm':\n          // toggle mute\n          this.toggleMute()\n          break;\n        case 'f':\n          this.toggleFullScreen()\n          break;\n        case 'k':\n        case ' ':\n          // toggle pause/play\n          this.togglePlay()\n          break;\n        case 'arrowup':\n          try {\n            this.videoPlayerElement.volume += .2\n          } catch (e) {\n            this.videoPlayerElement.volume = 1\n          }\n          // keyCode: 38\n          break;\n        case 'arrowdown':\n          try {\n            this.videoPlayerElement.volume -= .2\n          } catch (e) {\n            this.videoPlayerElement.volume = 0\n          }\n          // keyCode: 40\n          break;\n        case 'arrowleft':\n          try {\n            this.videoPlayerElement.currentTime -= 10\n          } catch (e) {\n            this.videoPlayerElement.currentTime = 0\n          }\n\n          // keyCode: 37\n          // toggl2e fullscreen\n          break;\n        case 'arrowright':\n          try {\n            this.videoPlayerElement.currentTime += 10\n          } catch (e) {\n            this.videoPlayerElement.currentTime = this.videoPlayerElement.duration\n          }\n          // keyCode: 39\n          break;\n        case 'pageup':\n          this.videoPlayerElement.volume = '1'\n          break;\n        case 'pagedown':\n          this.videoPlayerElement.volume = '0'\n          break;\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n          // duration selector, 1 for 10% of duration, 2 20%, etc.\n          this.videoPlayerElement.currentTime = parseFloat('.' + key) * this.videoPlayerElement.duration\n          break;\n        case '0':\n        case 'home':\n          // start of the video\n          this.videoPlayerElement.currentTime = '0'\n          break;\n        case 'end':\n          // end of the video\n          this.videoPlayerElement.currentTime = this.videoPlayerElement.duration\n          break;\n        default:\n          GeneralUtil.DEBUG.log('no hotkey')\n          break;\n      }\n    }\n  }\n\n  updateWatchedStatus(val: any) {\n\n    // id: string // also use in Doc Id\n    // tmdbId: number,\n    // imdbId?: string,\n    // title: string,\n    // year: number,\n    // // id?: string,\n    // cre8Ts?: number, // create timestamp\n    // timestamp?: number,\n    // percentage: string,\n    let watchedObj = {\n      id: '',\n      tmdbId: this.tmdbId,\n      imdbId: this.imdbId,\n      title: '',\n      percentage: this.videoPlayerElement.currentTime,\n      year: 0\n      // percentage: Math.floor(this.videoPlayerElement.currentTime / this.videoPlayerElement.duration * 100)\n    }\n    GeneralUtil.DEBUG.log('updating watched', watchedObj);\n    this.watchedService.saveWatched(watchedObj);\n  }\n\n  togglePlay() {\n    const isPlaying = this.videoPlayerElement.currentTime > 0 && !this.videoPlayerElement.paused && !this.videoPlayerElement.ended\n      && this.videoPlayerElement.readyState > 2;\n    GeneralUtil.DEBUG.log('5. togglePlay, isPlaying: ', isPlaying)\n    // safely autoplay\n    // if (!isPlaying && this.canPlay) {\n    //   this.videoPlayerElement.play();\n    // } else {\n    //   this.videoPlayerElement.pause();\n    // }\n  }\n\n  /**\n   * Toggles fullscreen for #videoPlayerOuter.\n   * TODO: exit fullscreen functionality.\n   */\n  toggleFullScreen() {\n\n    const playerOuter = this.elementRef.nativeElement.querySelector('#videoPlayerOuter')\n    // if (playerOuter.fullscreenElement) {\n    if (document['webkitIsFullScreen']) {\n      document.exitFullscreen();\n      // }\n    } else {\n      if (playerOuter.requestFullscreen) {\n        playerOuter.requestFullscreen();\n      } else if (playerOuter.mozRequestFullScreen) {\n        playerOuter.mozRequestFullScreen();\n      }\n      else if (playerOuter.msRequestFullscreen) {\n        playerOuter.msRequestFullscreen();\n      }\n    }\n  }\n\n  onSeek(seekValue: number) {\n    this.videoPlayerElement.currentTime = seekValue;\n  }\n\n  /**\n   * Open file selector from electron side and return fullfilepath.\n   */\n  async onChangeCc(filePath) {\n\n    // let filePath = 'Aliens.Directors.Cut.1986.1080p.BRrip.x264.GAZ.YIFY.srt'\n    // let filePath = ''\n    // let filePath = 'Cinema Paradiso-English.srt'\n    // filePath = '../../../../assets/tmp/' + filePath\n\n    // filePath = await this.ipcService.changeSubtitle()\n    // GeneralUtil.DEBUG.log('filePath', filePath)\n\n    const fileStr = await this.movieService.getSubtitleFileString(filePath).toPromise()\n    let encodingStr = 'UTF-8'\n    try {\n      encodingStr = jschardet.detect(fileStr, { minimumThreshold: 0 }).encoding // errors with subs with `ó`\n    } catch {\n      const encodingAlt = chardet.analyse(fileStr)\n      GeneralUtil.DEBUG.log(encodingAlt)\n      if (encodingAlt.length > 1) {\n        encodingStr = encodingAlt[0].name\n      //   encodingStr = encodingAlt[1].name\n      // } else if (encodingAlt.length === 1) {\n      //   encodingStr = encodingAlt[0].name\n      }\n    }\n    const file = await this.movieService.getSubtitleFile(filePath).toPromise()\n\n    let resultFileStr\n    const fileReader = new FileReader()\n\n    fileReader.readAsText(file, encodingStr);\n    const root = this\n    fileReader.onloadend = function (x) {\n      resultFileStr = fileReader.result\n      GeneralUtil.DEBUG.log(resultFileStr)\n      resultFileStr = resultFileStr.replace(/[\\r]+/g, '')\n      root.subtitleMap = SubtitlesUtil.mapSubtitle(resultFileStr)\n      GeneralUtil.DEBUG.log(\"subtitleMap!\", root.subtitleMap)\n    };\n  }\n\n  changeVolume(source: number) {\n    this.volume = source\n    this.videoPlayerElement.volume = this.volume * 0.01\n  }\n\n  toggleMute() {\n    this.videoPlayerElement.muted = !this.videoPlayerElement.muted\n  }\n\n  updateProgressBar() {\n    const DURATION = this.videoPlayerElement.duration\n    const BUFFERED = this.videoPlayerElement.buffered\n\n    this.progressBar.played = GeneralUtil.getPercentage(this.videoPlayerElement.currentTime, DURATION) + '%'\n    if (BUFFERED.length > 0) {\n      this.progressBar.buffered = GeneralUtil.getPercentage(BUFFERED.end(0), DURATION) + '%';\n      let currentBufferHealth = 0\n      for (let index = 0; index < BUFFERED.length; index++) {\n        const bufferStart = BUFFERED.start(index);\n        const bufferEnd = BUFFERED.end(index);\n        currentBufferHealth += bufferEnd - bufferStart;\n      }\n      this.statsForNerds.bufferhealth = currentBufferHealth + 's | ' +\n        GeneralUtil.getPercentage(currentBufferHealth, DURATION) + '%'\n    }\n  }\n\n  updateDisplaySubtitle(val1: string, val2: string) {\n    this.subtitleLine1 = val1\n    this.subtitleLine2 = val2\n  }\n\n  /**\n   * converts HH:mm:ss format to seconds float.\n   * @param hms time in HH:mm:ss format\n   * @returns seconds equivalent\n   */\n  convertToSeconds(hms: string) {\n    hms = hms.replace(',', '.');\n    const a = hms.split(':'); // split it at the colons\n    // minutes are worth 60 seconds. Hours are worth 60 minutes.\n    const seconds = (+a[0]) * 60 * 60 + (+a[1]) * 60 + (+a[2]);\n    return seconds\n  }\n\n  savePreferences() {\n    this.preferencesService.preferences['subtitle'] = this.subtitleDisplaySettings\n    this.preferencesService.preferences['playBack'] = this.playbackSettings\n  }\n\n  changeFontSize(size: string) {\n    this.setProperties('font-size', size)\n    this.subtitleDisplaySettings.fontSize = size\n  }\n  changeFontColor(color: string) {\n    this.setProperties('color', 'rgba(' + color + ',1)');\n    this.subtitleDisplaySettings.fontColor = color\n  }\n  // font outline, shadow, family,\n  changeBackgroundColor(color: string) {\n    this.setProperties('background-color', 'rgba(' + color + ',' + this.subtitleDisplaySettings.backgroundOpacity + ')')\n    // this.setProperties('', 'rgba(' + this.subtitleDisplaySettings.fontColor + ',' + color + ')'))\n    this.subtitleDisplaySettings.backgroundColor = color\n  }\n  changeBackgroundOpacity(percentage: string) {\n    this.setProperties('background-color', 'rgba(' + this.subtitleDisplaySettings.backgroundColor + ',' + percentage + ')');\n    this.subtitleDisplaySettings.backgroundOpacity = percentage;\n  }\n  // background outline\n  // window\n  private setProperties(propName: string, propValue: string) {\n    this.subtitleSpanElementsList.forEach(element => {\n      element.style.setProperty(propName, propValue)\n    });\n  }\n}\n\ninterface Stats {\n  bufferhealth: string // in seconds\n  connectionSpeed: string // might remove\n  downloadedPieces: number // (pieces have.)\n  downSpeed: string // leech speed\n  upSpeed: string // seed speed\n  ratio: string // downloaded/uploaded ratio\n  // codec\n  id: string // hash/id\n  source: string; // stream link\n  size: string;\n  resolution: string\n}\n",
            "properties": [
                {
                    "name": "bufferhealth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 534
                },
                {
                    "name": "connectionSpeed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 535
                },
                {
                    "name": "downloadedPieces",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 536
                },
                {
                    "name": "downSpeed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 537
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 541
                },
                {
                    "name": "ratio",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 539
                },
                {
                    "name": "resolution",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 544
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 543
                },
                {
                    "name": "source",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 542
                },
                {
                    "name": "upSpeed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 538
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Subtitle",
            "id": "interface-Subtitle-58456d2b0434b5951afc94d517c96b0d47f6cb534c6a1a2840f14626bc671bf581da2474ca7cb5de1d524dc9b84553fae53c01ad3b77cfd9c8b7d2530fb3f004",
            "file": "src/app/models/subtitle.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Subtitle {\n  sequenceNo: number\n  startTime: string\n  endTime: string\n  captionText1: string\n  captionText2: string\n}\n",
            "properties": [
                {
                    "name": "captionText1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "captionText2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "endTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "sequenceNo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "startTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "TMDB_External_Id",
            "id": "interface-TMDB_External_Id-2c15f6b492321d82ae9250a1d3bc7ad95e8d2b126637ecfda5c6a188131b1525ea57e563f53a85de7a7983c0c72090f8b89cd83c3acfab790be27430814435c3",
            "file": "src/app/models/tmdb-external-id.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface TMDB_External_Id {\n  id:           number;\n  imdb_id:      string;\n  facebook_id:  string;\n  instagram_id: null;\n  twitter_id:   null;\n}\n",
            "properties": [
                {
                    "name": "facebook_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "imdb_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "instagram_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "twitter_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "TmdbMovieListModel",
            "id": "interface-TmdbMovieListModel-bb8938fc05476f502fde700913c0a29bbf004c0e99184d0d4bf3dba9e2c8fd013b6c1fdcc5da021cbab33cd5998c86eaa741a98471ad767ca6dda3279b896d23",
            "file": "src/app/services/movie/interface/movie.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ID } from \"@datorama/akita\";\nimport { MDBMovie } from \"@models/mdb-movie.model\";\n\n\nexport interface TmdbMovieModel {\n  id: ID,\n  movie: any;\n}\n\nexport interface MDBMovieModel {\n  id: ID,\n  movie: MDBMovie;\n}\n\n\nexport interface TmdbMovieListModel {\n  id: ID,\n  movies: any[];\n}\n\n\nexport interface MDBMovieListModel {\n  id: ID,\n  movies: MDBMovie[];\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "movies",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "TmdbMovieModel",
            "id": "interface-TmdbMovieModel-bb8938fc05476f502fde700913c0a29bbf004c0e99184d0d4bf3dba9e2c8fd013b6c1fdcc5da021cbab33cd5998c86eaa741a98471ad767ca6dda3279b896d23",
            "file": "src/app/services/movie/interface/movie.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ID } from \"@datorama/akita\";\nimport { MDBMovie } from \"@models/mdb-movie.model\";\n\n\nexport interface TmdbMovieModel {\n  id: ID,\n  movie: any;\n}\n\nexport interface MDBMovieModel {\n  id: ID,\n  movie: MDBMovie;\n}\n\n\nexport interface TmdbMovieListModel {\n  id: ID,\n  movies: any[];\n}\n\n\nexport interface MDBMovieListModel {\n  id: ID,\n  movies: MDBMovie[];\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "movie",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "TmdbMovieState",
            "id": "interface-TmdbMovieState-003356e894d6d3fd8e699789e15f6942809cf8b544dbfcd102ceb5a241798a30c7e4b55fa4b0d72866404b32e84c9ff40d963c066d471ae956a9f77f45b3a8a9",
            "file": "src/app/services/movie/movie.store.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport { EntityState, EntityStore, StoreConfig } from \"@datorama/akita\";\nimport { MDBMovieListModel, MDBMovieModel, TmdbMovieModel } from \"./interface/movie\";\n\nexport interface TmdbMovieState extends EntityState<TmdbMovieModel> { }\n\n@Injectable({ providedIn: 'root' })\n@StoreConfig({ name: 'tmdbMovie' })\nexport class TMDBMovieStore extends EntityStore<TmdbMovieState, TmdbMovieModel>{\n  constructor() {\n    super();\n  }\n}\n\nexport interface MDBMovieState extends EntityState<MDBMovieModel> { }\n@Injectable({ providedIn: 'root' })\n@StoreConfig({ name: 'mdbMovie' })\nexport class MDBMovieStore extends EntityStore<MDBMovieState, MDBMovieModel>{\n  constructor() {\n    super();\n  }\n}\n\nexport interface MDBMovieSearchState extends EntityState<MDBMovieListModel> { }\n@Injectable({ providedIn: 'root' })\n@StoreConfig({ name: 'mdbSearchMovie' })\nexport class MDBMovieSearchStore extends EntityStore<MDBMovieSearchState, MDBMovieListModel>{\n  constructor() {\n    super();\n  }\n}\n\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "EntityState"
        },
        {
            "name": "User",
            "id": "interface-User-9c7e5f1bbbab702cb032307d130876cb68969b0cd4eedef32a0c8cad8081a54e5f8f577ed6ad4539c1b99a1d246cb34031d198c2ea8eba440e64e91b14f01fdc",
            "file": "src/stories/User.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        },
        {
            "name": "Watched",
            "id": "interface-Watched-1864c2d5448e0c9450395f701045f267f35956627df366578c5a166274ffa8e8faf40cc47d8b234217c9f617306668665f329af03586e3cd1f8d89f5686324b7",
            "file": "src/app/models/profile-data.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Review } from \"./review.model\";\n\nexport class IProfileData {\n\n  tmdbId?: number;\n  bookmark?: Bookmark;\n  favorite?: Favorite;\n  watched?: Watched;\n  listLinkMovie?: ListLinkMovie;\n  review?: Review;\n  isBookmark?: boolean;\n  isFavorite?: boolean;\n  library?: any\n  // isBookmark?: boolean;\n}\n\ninterface Bookmark {\n  id: string\n}\ninterface Favorite {\n  id: string\n}\ninterface Watched {\n  id?: string\n  percentage: number\n}\nexport interface ListLinkMovie {\n  id: number\n  listId: number\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "percentage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "WatchList",
            "id": "interface-WatchList-584d54738f93e2af94202069b5eddb4cab23bb2dfec2ff69f24ebaf881c252f94680b4cd6cec302796817692570a31bedafc5d74fed1cf6488a895dbf372e23d",
            "file": "src/app/models/interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IMdbMovieDetails {\n  awards?: string\n  backgroundPath: string;\n  belongsToCollection?: []\n  boxOffice?: string | number // tmdb:revenue(number)\n  budget?: number\n  country?: string\n  director?: string\n  dvd?: string // dvd release\n  genres?: string[] | string | IGenre[]\n  imdbId?: string\n  imdbRating?: string\n  imdbVotes?: string\n  isAdult?: boolean;\n  isAvailable?: boolean;\n  languages?: string[]\n  libraryInfo?: ILibraryInfo\n  metascore?: string // metacritic score\\\n  originalLanguage?: string // tmdb:\"en\",omdb:\"English\"\n  originalTitle?: string\n  plot?: string // plot or overview\n  popularity?: number\n  posterPath: string\n  production?: string // company; i.e. Walt Disney Pictures\n  rated?: string // rated or certificate\n  ratings?: IRating[]\n  releaseDate?: string // omdb:\"05 May 2017\"; tmdb:\"1999-10-15\"\n  releaseYear?: number | string\n  response: string\n  runtime?: string\n  starring?: string // Actors field in omdb\n  status?: string // released/Post\n  tagline?: string;\n  tmdbId?: number\n  title: string\n  type?: string // movie/tvmovie/series\n  video?: boolean; // unknown\n  // voteAverage: number; // tmdb votes\n  // voteCount: number; // tmdb votes\n  website?: string\n  writer?: string // omdb\n  [propName: string]: any;\n}\n\nexport interface IRating {\n  Source: string\n  Value: string\n}\n\nexport interface LibraryInfo {\n  tmdbId?: null | number | string\n  imdbID?: string\n  title?: string\n  year?: number\n  directoryList?: string[]\n  _id: string\n}\n\nexport interface MovieGenre {\n  id: number\n  code: string\n  description: string\n  isChecked: boolean\n}\n\nexport interface WatchList {\n  id: number\n  movieList: string[]\n}\n\nexport interface ILibraryInfo {\n  tmdbId?: null | number | string\n  imdbID?: string\n  title?: string\n  year?: number\n  directoryList?: string[]\n  _id: string\n}\n\nexport interface ICollection {\n  id: number,\n  name: string\n}\n\nexport interface IProductionCompany {\n  id: number;\n  logo_path: null | string;\n  name: string;\n  origin_country: string;\n}\n\nexport interface IProductionCountry {\n  iso_3166_1: string;\n  name: string;\n}\n\nexport interface ISpokenLanguage {\n  iso_639_1: string;\n  name: string;\n}\n\nexport interface IOmdbMovieDetail {\n  Title: string\n  Year?: string\n  Rated?: string\n  Released?: string // \"05 May 2017\"\n  Runtime?: string\n  Genre?: string\n  Director?: string\n  Writer?: string\n  Actors?: string\n  Plot?: string\n  Language?: string\n  Country?: string\n  Awards?: string\n  Poster?: string\n  Ratings?: IRating[]\n  Metascore?: string\n  imdbRating?: string\n  imdbVotes?: string\n  imdbID: string\n  Type?: string\n  DVD?: string\n  BoxOffice?: string\n  Production?: string\n  Website?: string\n  Response: string\n}\n\nexport interface ITmdbMovieDetail {\n  adult: boolean;\n  backdrop_path: string;\n  belongs_to_collection: null;\n  budget: number;\n  genres: IGenre[];\n  homepage: string;\n  id: number;\n  imdb_id: string;\n  original_language: string;\n  original_title: string;\n  overview: string;\n  popularity: number;\n  poster_path: string;\n  production_companies: IProductionCompany[];\n  production_countries: IProductionCountry[];\n  release_date: string;\n  revenue: number;\n  runtime: number;\n  spoken_languages: ISpokenLanguage[];\n  status: string;\n  tagline: string;\n  title: string;\n  video: boolean;\n  vote_average: number;\n  vote_count: number;\n}\n\nexport interface MdbMovieDetails {\n  adult?: boolean;\n  title: string\n  releaseYear?: string\n  releaseDate?: string\n  rated?: string // rated or certificate\n  runtime?: string\n  genres?: string\n  director?: string\n  writer?: string\n  Actors?: string\n  plot?: string // plot or overview\n  Language?: string\n  Country?: string\n  Awards?: string\n  Poster?: string\n  Ratings?: IRating[]\n  Metascore?: string\n  imdbRating?: string\n  imdbVotes?: string\n  imdbID: string\n  tmdbID: number\n  Type?: string\n  DVD?: string\n  BoxOffice?: string\n  Production?: string\n  website?: string\n  response: string\n  libraryInfo?: ILibraryInfo\n}\n\n// // adult: boolean;\n// //backdrop_path: string;\n// belongs_to_collection: null;\n// // budget: number;\n// genres: Genre[];\n// // homepage: string;\n// // id: number;\n// // imdb_id: string;\n// original_language: string;\n// original_title: string;\n// // overview: string;\n// // popularity: number;\n// // poster_path: string;\n// production_companies: ProductionCompany[];\n// production_countries: ProductionCountry[];\n// // release_date: string;\n// // revenue: number;\n// // runtime: number;\n// spoken_languages: SpokenLanguage[];\n// // status: string;\n// // tagline: string;\n// // title: string;\n// // video: boolean;\n// // vote_average: number;\n// // vote_count: number;\n\nexport interface ITmdbResultObject {\n  page: number;\n  total_results: number;\n  total_pages: number;\n  results: ITmdbResult[];\n}\n\nexport interface ITmdbResult {\n  popularity: number\n  vote_count: number\n  video: boolean\n  poster_path: string\n  id: number\n  adult: boolean\n  backdrop_path: string\n  original_language: string\n  original_title: string\n  genre_ids: number[]\n  title: string\n  vote_average: number\n  overview: string\n  release_date: string\n  isAvailable?: boolean\n  isHighlighted?: boolean\n}\n\nexport interface ILibraryMovie {\n  tmdbId?: number,\n  title: string,\n  year: number,\n  imdbId?: string,\n  directory: string[]\n}\n\nexport interface IGenre {\n  id: number\n  name: string\n}\n\nexport interface Credits {\n  id: number;\n  cast: CastElement[];\n  crew: Crew[];\n}\n\ninterface CastElement {\n  cast_id: number;\n  character: string;\n  credit_id: string;\n  gender: number;\n  id: number;\n  name: string;\n  order: number;\n  profile_path: null | string;\n}\n\ninterface Crew {\n  credit_id: string;\n  department: Department;\n  gender: number;\n  id: number;\n  job: string;\n  name: string;\n  profile_path: null | string;\n}\n\nexport enum Department {\n  Art = 'Art',\n  Camera = 'Camera',\n  CostumeMakeUp = 'Costume & Make-Up',\n  Crew = 'Crew',\n  Directing = 'Directing',\n  Editing = 'Editing',\n  Lighting = 'Lighting',\n  Production = 'Production',\n  Sound = 'Sound',\n  VisualEffects = 'Visual Effects',\n  Writing = 'Writing',\n}\n\nexport class MDBTorrent {\n  id?: string\n  name?: string\n  size?: string\n  hash: string\n  url?: string\n  quality?: string\n  type?: string\n  seeds?: number\n  peers?: number\n  sizeBytes?: number\n  added?: string\n  dateUploaded?: string\n  dateUploadedUnix?: number\n  isYts?: boolean\n  magnetLink?: string\n}\n\nexport class ITPBTorrent {\n  id?: number\n  name?: string\n  hash: string\n  sizeBytes?: number\n  added?: string\n}\n\nexport interface ISearch {\n  page: number\n}\n\nexport enum OmdbParameters {\n  ApiKey = 'apikey',\n  ImdbId = 'i',\n  Title = 't',\n  Type = 'type',\n  Year = 'y',\n  Plot = 'plot',\n  Return = 'r',\n  Callback = 'callback',\n  Version = 'v',\n}\n\nexport enum TmdbParameters {\n  ApiKey = 'api_key',\n  AppendToResponse = 'append_to_response',\n  Language = 'language',\n  Region = 'region',\n  SortBy = 'sort_by',\n  CertificationCountry = 'certification_country',\n  Certification = 'certification',\n  CertificationLess = 'certification.lte',\n  CertificationGreater = 'certification.gte',\n  IncludeAdult = 'include_adult',\n  IncludeVideo = 'include_video',\n  Page = 'page',\n  PrimaryReleaseYear = 'primary_release_year',\n  PrimaryReleaseDateGreater = 'primary_release_date.gte',\n  PrimaryReleaseDateLess = 'primary_release_date.lte',\n  ReleaseDateGreater = 'release_date.gte',\n  ReleaseDateLess = 'release_date.lte',\n  WithReleaseType = 'with_release_type',\n  Year = 'year',\n  VoteCountGreater = 'vote_count.gte',\n  VoteCountLess = 'vote_count.lte',\n  VoteAverageGreater = 'vote_average.gte',\n  VoteAverageLess = 'vote_average.lte',\n  WithCast = 'with_cast',\n  WithCrew = 'with_crew',\n  WithPeople = 'with_people',\n  WithCompanies = 'with_companies',\n  WithGenres = 'with_genres',\n  WithoutGenres = 'without_genres',\n  WithKeywords = 'with_keywords',\n  WithoutKeywords = 'without_keywords',\n  WithRuntimeGreater = 'with_runtime.gte',\n  WithRuntimeLess = 'with_runtime.lte',\n  WithOriginalLanguage = 'with_original_language',\n  WithWatchProviders = 'with_watch_providers',\n  WatchRegion = 'watch_region'\n}\n\nexport enum TmdbSearchMovieParameters {\n  ApiKey = 'api_key',\n  Language = 'language', // Pass a ISO 639 - 1 value to display translated data for the fields that support it. minLength: 2 pattern: ([a - z]{ 2 }) -([A - Z]{ 2 }) default: en - US\n  Query = 'query',\n  Page = 'page', // minimum: 1 maximum: 1000\n  IncludeAdult = 'include_adult',\n  Region = 'region',\n  // Specify a ISO 3166 - 1 code to filter release dates.Must be uppercase. pattern: ^ [A - Z]{ 2 } $\n  Year = 'year',\n  PrimaryReleaseYear = 'primary_release_year'\n}\n\nenum TmdbAppendToResponseParameters {\n  AccountStates = 'account_states',\n  Videos = 'videos',\n  Images = 'images',\n  Credits = 'credits',\n  Changes = 'changes',\n  Translations = 'translations',\n  Similar = 'similar',\n  ExternalIds = 'external_ids',\n  AlternativeTitles = 'alternative_titles',\n  Keywords = 'keywords',\n  Reviews = 'reviews',\n  Recommendations = 'recommendations',\n  ReleaseDates = 'release_dates',\n  Lists = 'lists'\n}\n\nenum TmdbReleaseTypes {\n  PREMIERE = 'Premiere',  // 1\n  THEATRICAL_LIMITED = 'Theatrical(limited)', // 2\n  THEATRICAL = 'Theatrical', // 3\n  DIGITAL = 'Digital', // 4\n  PHYSICAL = 'Physical', // 5\n  TV = 'TV', // 6\n}\n\nexport interface IPersonDetails {\n  birthday: string;\n  known_for_department: string;\n  id: number;\n  movie_credits?: IPersonCredits;\n  tv_credits?: IPersonCredits;\n  combined_credits?: IPersonCredits;\n  homepage?: any;\n  profile_path: string;\n  imdb_id: string;\n  deathday?: any;\n  images?: IImages;\n  external_ids?: IExternalids;\n  name: string;\n  also_known_as: string[];\n  biography: string;\n  adult: boolean;\n  gender: number;\n  place_of_birth: string;\n  popularity: number;\n}\n\nexport interface IPersonCredits {\n  cast: IPersonCastCrew[];\n  crew: IPersonCastCrew[];\n  id?: number;\n}\n\nexport interface IPersonCastCrew {\n  id?: number;\n  original_language: string;\n  episode_count?: number;\n  overview: string;\n  origin_country?: string[];\n  original_name?: string;\n  genre_ids: number[];\n  name?: string;\n  media_type: string;\n  poster_path: null | string;\n  first_air_date?: string;\n  vote_average: number;\n  vote_count: number;\n  character?: string;\n  backdrop_path: null | string;\n  popularity: number;\n  credit_id: string;\n  original_title?: string;\n  video?: boolean;\n  release_date?: string;\n  title?: string;\n  adult?: boolean;\n  department?: string;\n  job?: string;\n}\n\nexport interface IExternalids {\n  id?: number;\n  freebase_id: string;\n  instagram_id: string;\n  tvrage_id: number;\n  twitter_id: string;\n  freebase_mid: string;\n  imdb_id: string;\n  facebook_id: string;\n}\n\nexport interface IImages {\n  id?: number;\n  profiles: IProfile[];\n}\n\nexport interface IProfile {\n  iso_639_1?: any;\n  aspect_ratio: number;\n  vote_count: number;\n  height: number;\n  vote_average: number;\n  file_path: string;\n  width: number;\n}\n\nexport interface ICredits {\n  cast: ICast[];\n  crew: ICrew[];\n}\n\ninterface ICast {\n  poster_path?: string;\n  adult: boolean;\n  backdrop_path?: string;\n  vote_count: number;\n  video: boolean;\n  id: number;\n  media_type?: string;\n  popularity: number;\n  genre_ids: number[];\n  original_language: string;\n  title: string;\n  original_title: string;\n  release_date: string;\n  character: string;\n  vote_average: number;\n  overview: string;\n  credit_id: string;\n}\n\ninterface ICrew {\n  id: number;\n  department: string;\n  original_language: string;\n  original_title: string;\n  job: string;\n  overview: string;\n  genre_ids: number[];\n  video: boolean;\n  episode_count: number\n  media_type?: string;\n  credit_id: string;\n  poster_path?: string;\n  popularity: number;\n  backdrop_path?: string;\n  vote_count: number;\n  title: string;\n  adult: boolean;\n  vote_average: number;\n  release_date: string;\n}\n\nexport interface IUserSavedData {\n  id?: string,\n  title: string,\n  year: number,\n  tmdbId: number,\n}\n\nexport enum GenreCodes {\n  Action = 28,\n  Adventure = 12,\n  Animation = 16,\n  Comedy = 35,\n  Crime = 80,\n  Documentary = 99,\n  Drama = 18,\n  Family = 10751,\n  Fantasy = 14,\n  History = 36,\n  Horror = 27,\n  Music = 10402,\n  Mystery = 9648,\n  Romance = 10749,\n  ScienceFiction = 878,\n  TVMovie = 10770,\n  Thriller = 53,\n  War = 10752,\n  Western = 37,\n  // mdb reserved\n  FilmNoir = 20000,\n  // similar genre: Music id:10402\n  Musical = 20001,\n  News = 20002,\n  RealityTV = 20003,\n  // similar genre: Science Fiction id:878\n  SciFi = 20004,\n  // another media type\n  Short = 20005,\n  Sport = 20006,\n}\n\n\n\n/**\nexport enum Department {\n    Art = \"Art\",\n    Camera = \"Camera\",\n    CostumeMakeUp = \"Costume & Make-Up\",\n    Crew = \"Crew\",\n    Directing = \"Directing\",\n    Editing = \"Editing\",\n    Lighting = \"Lighting\",\n    Production = \"Production\",\n    Sound = \"Sound\",\n    VisualEffects = \"Visual Effects\",\n    Writing = \"Writing\",\n}\n\nexport interface ExternalIDS {\n    imdb_id:      string;\n    facebook_id:  null;\n    instagram_id: null;\n    twitter_id:   null;\n}\n\nexport interface Genre {\n    id:   number;\n    name: string;\n}\n\nexport interface Images {\n    backdrops: any[];\n    posters:   any[];\n}\n\nexport enum OriginalLanguage {\n    En = \"en\",\n    Es = \"es\",\n    Fr = \"fr\",\n}\n\nexport interface ProductionCompany {\n    id:             number;\n    logo_path:      string;\n    name:           string;\n    origin_country: string;\n}\n\nexport interface ProductionCountry {\n    iso_3166_1: string;\n    name:       string;\n}\n\nexport interface Recommendations {\n    page:          number;\n    results:       RecommendationsResult[];\n    total_pages:   number;\n    total_results: number;\n}\n\nexport interface RecommendationsResult {\n    id:                number;\n    video:             boolean;\n    vote_count:        number;\n    vote_average:      number;\n    title:             string;\n    release_date:      string;\n    original_language: OriginalLanguage;\n    original_title:    string;\n    genre_ids:         number[];\n    backdrop_path:     string;\n    adult:             boolean;\n    overview:          string;\n    poster_path:       string;\n    popularity:        number;\n}\n\nexport interface SpokenLanguage {\n    iso_639_1: OriginalLanguage;\n    name:      string;\n}\n\nexport interface Videos {\n    results: VideosResult[];\n}\n\nexport interface VideosResult {\n    id:         string;\n    iso_639_1:  OriginalLanguage;\n    iso_3166_1: string;\n    key:        string;\n    name:       string;\n    site:       string;\n    size:       number;\n    type:       string;\n}\n */\n\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "movieList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 69
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "BookmarkService",
            "id": "injectable-BookmarkService-4d3baab43a719a7e64890c2cb33421aeea7cd4449ea56201bb74b07da209afa55488be828fa32b14fca8c2c1f67bfffdb805ef9f3146d54beb7f0a86745079a0",
            "file": "src/app/services/bookmark.service.ts",
            "properties": [
                {
                    "name": "bookmarkObservable",
                    "defaultValue": "new Observable<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methods": [
                {
                    "name": "getBookmark",
                    "args": [
                        {
                            "name": "id",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBookmarksInList",
                    "args": [
                        {
                            "name": "idList",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<firebase.firestore.QuerySnapshot | any>",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets multiple bookmarks by list of ids.\n",
                    "description": "<p>Gets multiple bookmarks by list of ids.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1594,
                                "end": 1600,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "idList"
                            },
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1588,
                                "end": 1593,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>list of ids to fetch.</p>\n"
                        }
                    ]
                },
                {
                    "name": "getBookmarksPaginated",
                    "args": [
                        {
                            "name": "lastVal",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets multiple bookmarks.\n",
                    "description": "<p>Gets multiple bookmarks.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "lastVal",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBookmarksPaginatedFirstPage",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeBookmark",
                    "args": [
                        {
                            "name": "type",
                            "type": "\"id\" | \"tmdbId\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRemoves bookmark.\n",
                    "description": "<p>Removes bookmark.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "\"id\" | \"tmdbId\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": {
                                "pos": 1095,
                                "end": 1097,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "id"
                            },
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1089,
                                "end": 1094,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>watched id/_id/tmdbId to remove.</p>\n"
                        }
                    ]
                },
                {
                    "name": "saveBookmark",
                    "args": [
                        {
                            "name": "data",
                            "type": "IBookmark",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "IBookmark",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveBookmarkMulti",
                    "args": [
                        {
                            "name": "data",
                            "type": "object[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "object[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { IUserSavedData } from '@models/interfaces';\nimport { environment } from '@environments/environment';\nimport { Injectable } from '@angular/core';\nimport { FirebaseService, FirebaseOperator, CollectionName, FieldName } from './firebase.service'\nimport { IpcService } from './ipc.service'\nimport { Observable } from 'rxjs';\n@Injectable({\n  providedIn: 'root'\n})\nexport class BookmarkService {\n\n  bookmarkObservable = new Observable<any>()\n\n  constructor(\n    private firebaseService: FirebaseService,\n    private ipcService: IpcService) { }\n\n  getBookmark(id) {\n    if (environment.runConfig.firebaseMode) {\n      return this.firebaseService.getFromFirestore(CollectionName.Bookmark, FieldName.TmdbId, FirebaseOperator.Equal, id)\n    } else {\n      // this.ipcService.call(IPCCommand.)\n    }\n  }\n\n  saveBookmark(data: IBookmark): Promise<any> {\n    if (environment.runConfig.firebaseMode) {\n      return this.firebaseService.insertIntoFirestore(CollectionName.Bookmark, data)\n    } else {\n      return this.ipcService.saveBookmark(data)\n    }\n  }\n\n  /**\n   * Removes bookmark.\n   * @param id watched id/_id/tmdbId to remove.\n   */\n  removeBookmark(type: 'id' | 'tmdbId', id: string | number) {\n    if (environment.runConfig.firebaseMode) {\n      return this.firebaseService.deleteFromFirestore(CollectionName.Bookmark, id)\n    } else {\n      return this.ipcService.removeBookmark(type, id)\n    }\n  }\n\n  saveBookmarkMulti(data: object[]) {\n    this.firebaseService.insertIntoFirestoreMulti(CollectionName.Bookmark, data)\n  }\n\n  /**\n   * Gets multiple bookmarks by list of ids.\n   * @param idList list of ids to fetch.\n   */\n  getBookmarksInList(idList: number[]): Promise<firebase.firestore.QuerySnapshot | any> {\n    console.log('getBookmarksInList...', idList);\n    const myFunction = environment.runConfig.firebaseMode ?\n      this.firebaseService.getFromFirestoreMultiple(CollectionName.Bookmark, FieldName.TmdbId, idList) :\n      this.ipcService.getBookmarkInList(idList);\n    return myFunction\n  }\n\n  getBookmarksPaginatedFirstPage(): Promise<any> {\n    const myFunction = environment.runConfig.firebaseMode ?\n      this.firebaseService.getFromFirestoreMultiplePaginatedFirst(CollectionName.Bookmark, FieldName.TmdbId, 20) :\n      this.ipcService.getMultiplePaginatedFirst(CollectionName.Bookmark, FieldName.TmdbId, 20)\n    return myFunction\n  }\n\n  /**\n   * Gets multiple bookmarks.\n   */\n  getBookmarksPaginated(lastVal: string | number): Promise<any> {\n    if (environment.runConfig.firebaseMode) {\n      return this.firebaseService.getFromFirestoreMultiplePaginated(CollectionName.Bookmark, FieldName.TmdbId, 20, lastVal)\n    } else {\n    }\n  }\n\n}\n\nexport interface IBookmark extends IUserSavedData {\n  id?: string,\n  tmdbId: number,\n  imdbId?: string,\n  title: string,\n  year: number,\n  cr8Ts?: number,\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "firebaseService",
                        "type": "FirebaseService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ipcService",
                        "type": "IpcService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "firebaseService",
                        "type": "FirebaseService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ipcService",
                        "type": "IpcService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "CacheService",
            "id": "injectable-CacheService-01fee42da407fce23e5b372cd022cc6fd3154e535fd2b3abc642366c5cbcd889c49ba7ae3c1a3420dceab7e02f48caddc502a236638ca2a839b2fb25b3c55081",
            "file": "src/app/services/cache.service.ts",
            "properties": [
                {
                    "name": "cache",
                    "defaultValue": "new Map<string, ICacheContent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | ICacheContent>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "DEFAULT_MAX_AGE",
                    "defaultValue": "43200000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "inFlightObservables",
                    "defaultValue": "new Map<string, Subject<any>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<string | Subject<any>>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fallback",
                            "type": "Observable<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "maxAge",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable | Subject",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fallback",
                            "type": "Observable<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "maxAge",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hasValidCachedValue",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isEmpty",
                    "args": [
                        {
                            "name": "obj",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "notifyInFlightObservers",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "set",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "maxAge",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this.DEFAULT_MAX_AGE"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "maxAge",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this.DEFAULT_MAX_AGE",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Observable, of, Subject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n/**\n * Data sharing service.\n */\nimport { Injectable } from '@angular/core'\nimport { BehaviorSubject } from 'rxjs'\n\ninterface ICacheContent {\n  expiry: number;\n  value: any;\n}\n@Injectable({ providedIn: 'root' })\nexport class CacheService {\n  private cache: Map<string, ICacheContent> = new Map<string, ICacheContent>();\n  private inFlightObservables: Map<string, Subject<any>> = new Map<string, Subject<any>>();\n\n  // readonly DEFAULT_MAX_AGE: number = 900000;\n  readonly DEFAULT_MAX_AGE: number = 43200000; // 12 hours\n  constructor() { }\n\n  get(key: string, fallback?: Observable<any>, maxAge?: number): Observable<any> | Subject<any> {\n\n    if (this.hasValidCachedValue(key)) {\n      // console.log(`Getting from cache: Key - ${key}`);\n      const cacheValue = this.cache.get(key).value;\n      return of(cacheValue);\n    }\n\n    if (!maxAge) {\n      maxAge = this.DEFAULT_MAX_AGE;\n    }\n\n    if (this.inFlightObservables.has(key)) {\n      const inFlight = this.inFlightObservables.get(key);\n      const observersCount = inFlight.observers.length;\n      if (this.isEmpty(observersCount)) {\n        return fallback.pipe(tap((value) => { this.set(key, value, maxAge) }));\n      }\n      return inFlight;\n    } else if (fallback && fallback instanceof Observable) {\n      this.inFlightObservables.set(key, new Subject());\n      // console.log(`Calling api for ${key}`);\n      return fallback.pipe(tap((value) =>  this.set(key, value, maxAge) ));\n    } else {\n      return Observable.throw(`Requested key (${key}) is not available in Cache`);\n    }\n\n  }\n  set(key: string, value: any, maxAge: number = this.DEFAULT_MAX_AGE): void {\n    this.cache.set(key, { value, expiry: Date.now() + maxAge });\n    this.notifyInFlightObservers(key, value);\n  }\n\n\n  isEmpty(obj) {\n    if (obj === null || obj === undefined) {\n      return true;\n    }\n\n    if (Array.isArray(obj)) {\n      return obj.length === 0;\n    }\n\n    switch (typeof(obj)) {\n      case 'object':\n        return Object.keys(obj).length === 0;\n      case 'string':\n        return obj.length === 0;\n      case 'number':\n        return obj === 0;\n      case 'boolean':\n      case 'function':\n      case 'symbol':\n      default:\n        return false;\n    }\n  }\n\n  private notifyInFlightObservers(key: string, value: any): void {\n    if (this.inFlightObservables.has(key)) {\n      const inFlight = this.inFlightObservables.get(key);\n      const observersCount = inFlight.observers.length;\n      if (observersCount) {\n        // console.log(`Notifying ${inFlight.observers.length} flight subscribers for ${key}`);\n        inFlight.next(value);\n      }\n      inFlight.complete();\n      this.inFlightObservables.delete(key);\n    }\n  }\n  private hasValidCachedValue(key: string): boolean {\n    if (this.cache.has(key)) {\n      if (this.cache.get(key).expiry < Date.now()) {\n        this.cache.delete(key);\n        return false;\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 19
            },
            "type": "injectable"
        },
        {
            "name": "CredentialsValidator",
            "id": "injectable-CredentialsValidator-e272057aaee562163eb5e7cad65ca8e86f5a384c64a12bad2101cdea86449775045a7b25bd072da71321f64dc31e5c77c46b180e40a2deab102f6de2b3250ba7",
            "file": "src/app/directives/credentials.directive.ts",
            "properties": [],
            "methods": [
                {
                    "name": "myValidate",
                    "args": [
                        {
                            "name": "ctrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ctrl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validate",
                    "args": [
                        {
                            "name": "ctrl",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise | Observable",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ctrl",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, forwardRef, Injectable } from '@angular/core';\nimport { AsyncValidator, AbstractControl, NG_ASYNC_VALIDATORS, ValidationErrors } from '@angular/forms'\nimport { catchError, map } from 'rxjs/operators'\nimport { Observable, of } from 'rxjs'\n// import { UniqueAlterEgoValidator } from './alter-ego.directive';\nimport { delay } from 'rxjs/operators';\n\n@Injectable({ providedIn: 'root' })\nexport class CredentialsValidator implements AsyncValidator {\n  constructor() { }\n  validate(ctrl: AbstractControl): Promise<ValidationErrors | null> | Observable<ValidationErrors | null> {\n\n    // return this.myValidate(ctrl.value).pipe(map(isCredentialsValid => (isCredentialsValid ? { credentialsValid: true } : null)), catchError(() => null)\n    return null\n  }\n  // myValidate(): Observable<boolean> {\n  myValidate(ctrl: string): Observable<boolean> {\n    return of(true).pipe(delay(400));\n  }\n}\n\n@Directive({\n  selector: '[appCredentials]',\n  providers: [{\n    provide: NG_ASYNC_VALIDATORS,\n    useExisting: forwardRef(() => CredentialsValidator),\n    multi: true\n  }]\n})\nexport class CredentialsDirective {\n\n  constructor(private validator: CredentialsValidator) {\n  }\n\n  validate(control: AbstractControl) {\n    this.validator.validate(control)\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "type": "injectable"
        },
        {
            "name": "DataService",
            "id": "injectable-DataService-6fd5853cc4f9187e6a5b342949c970f5beb4d48b18a97944791bb16b9730588acdffdf3845a49fc9ab0a1b97a0da41352df28df4a5403b50d093cf4ab7efa5a9",
            "file": "src/app/services/data.service.ts",
            "properties": [
                {
                    "name": "currentMovie",
                    "defaultValue": "this.selectedMovieSource.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "currentSearchResults",
                    "defaultValue": "this.searchResultsSource.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "dashboardData",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "discoverMoviesSource",
                    "defaultValue": "new BehaviorSubject<any>('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "discoverQuery",
                    "defaultValue": "this.discoverMoviesSource.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "previewMovie",
                    "defaultValue": "this.previewMovieSource.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "previewMovieSource",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "searchQuery",
                    "defaultValue": "this.searchQuerySource.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "searchQuerySource",
                    "defaultValue": "new BehaviorSubject<any>('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "searchResultsSource",
                    "defaultValue": "new BehaviorSubject<any>('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "selectedMovies",
                    "defaultValue": "this.selectedMoviesSource.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "selectedMovieSource",
                    "defaultValue": "new BehaviorSubject<any>('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "selectedMoviesSource",
                    "defaultValue": "new BehaviorSubject<any>('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addDashboardData",
                    "args": [
                        {
                            "name": "data",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDashboardData",
                    "args": [],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getDiscoverQuery",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getSearchQuery",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "hasDashboardData",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setDashboardData",
                    "args": [
                        {
                            "name": "data",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSearchQuery",
                    "args": [
                        {
                            "name": "val",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateDiscoverQuery",
                    "args": [
                        {
                            "name": "val",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateHighlightedMovie",
                    "args": [
                        {
                            "name": "val",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updatePreviewMovie",
                    "args": [
                        {
                            "name": "val",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateSearchQuery",
                    "args": [
                        {
                            "name": "val",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateSearchResults",
                    "args": [
                        {
                            "name": "val",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateSelectedMovies",
                    "args": [
                        {
                            "name": "val",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Observable, Subject } from 'rxjs';\n/**\n * Data sharing service.\n */\nimport { Injectable } from '@angular/core'\nimport { BehaviorSubject } from 'rxjs'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService {\n  dashboardData = []\n\n  // private isDesktop = new BehaviorSubject<any>('')\n  // currentMovie = this.isDesktop.asObservable()\n\n  private previewMovieSource = new Subject()\n  // previewMovie = null\n  previewMovie = this.previewMovieSource.asObservable()\n\n  private selectedMovieSource = new BehaviorSubject<any>('')\n  currentMovie = this.selectedMovieSource.asObservable()\n\n  private searchQuerySource = new BehaviorSubject<any>('')\n  searchQuery = this.searchQuerySource.asObservable()\n\n  private searchResultsSource = new BehaviorSubject<any>('')\n  currentSearchResults = this.searchResultsSource.asObservable()\n\n  private selectedMoviesSource = new BehaviorSubject<any>('')\n  selectedMovies = this.selectedMoviesSource.asObservable()\n\n  private discoverMoviesSource = new BehaviorSubject<any>('')\n  discoverQuery = this.discoverMoviesSource.asObservable()\n\n  constructor() { }\n\n\n  updatePreviewMovie(val: any) {\n    console.log('updatedHighlightedMovie ', val)\n    // this.previewMovieSource..next(val)\n    // this.previewMovieSource.\n    // this.selectedMovieSource.value\n    this.previewMovieSource.next(val)\n  }\n\n\n  setDashboardData(data: any[]) {\n    this.dashboardData = data\n  }\n  addDashboardData(data: any[]) {\n    console.log('pushing ', data)\n    this.dashboardData.push(data)\n  }\n  getDashboardData() {\n    return this.dashboardData\n  }\n\n  hasDashboardData() {\n    console.log(\n      'dashboard data has value',\n      this.dashboardData && this.dashboardData.length\n    )\n    return this.dashboardData && this.dashboardData.length\n  }\n\n  setSearchQuery(val) {\n    this.searchQuery = val;\n  }\n\n  getSearchQuery() {\n    return this.searchQuery;\n  }\n\n  updateHighlightedMovie(val: any) {\n    this.selectedMovieSource.next(val)\n  }\n\n  updateSearchQuery(val: any) {\n    this.searchQuerySource.next(val)\n  }\n\n  updateSearchResults(val: any) {\n    this.searchResultsSource.next(val)\n  }\n  updateSelectedMovies(val: any) {\n    this.selectedMoviesSource.next(val)\n  }\n\n  // updateDiscoverQuery(type: string, val: string | null | number) {\n  updateDiscoverQuery(val: { type: string, value: any, name: string, paramMap?: any }) {\n    // this.discoverQuery = val;\n    this.discoverMoviesSource.next(val)\n  }\n\n  getDiscoverQuery() {\n    return this.discoverQuery;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 34
            },
            "type": "injectable"
        },
        {
            "name": "DisplayedTorrent",
            "id": "injectable-DisplayedTorrent-717ea551e1e6c980a437687032f45a57f5a494c3cd7f84384e3500d4815856380ca6a5f5438aa33a3d82fbc9ce78a3e5830b0720148c508b423cb665b89194d4",
            "file": "src/app/mock-data.ts",
            "properties": [
                {
                    "name": "added",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 297,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "hash",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 298,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 299,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 300,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getAdded",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 307,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getHash",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 310,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getName",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 313,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getSize",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 316,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { ITmdbResultObject, ILibraryMovie, MDBTorrent, IOmdbMovieDetail } from '@models/interfaces'\nimport { Injectable } from '@angular/core'\nimport { IYTSSingleQuery } from '@models/yts-torrent.model'\nimport { IProfileData } from '@models/profile-data.model'\n\nexport const TEST_LIBRARY_MOVIES: ILibraryMovie[] = [\n  {\n    tmdbId: 0,\n    imdbId: 'tt0095956',\n    title: 'Titanic',\n    year: 0,\n    directory: ['D:\\\\media server\\\\movies\\\\titanic.mp4']\n  },\n  {\n    tmdbId: 0,\n    imdbId: 'tt0133093',\n    title: 'Guardians of the Galaxy',\n    year: 0,\n    directory: ['D:\\\\media server\\\\movies\\\\guardians of the galaxy.mp4']\n  },\n  {\n    tmdbId: 680,\n    imdbId: 'tt0110912',\n    title: 'Pulp Fiction',\n    year: 1994,\n    directory: ['D:\\\\media server\\\\movies\\\\pulp fiction.mp4']\n  }\n]\n\nexport const TEST_OMDB_MOVIE_DETAIL = {\n  Title: 'WALL·E',\n  Year: '2008',\n  Rated: 'G',\n  Released: '27 Jun 2008',\n  Runtime: '98 min',\n  Genre: 'Animation, Adventure, Family, Sci-Fi',\n  Director: 'Andrew Stanton',\n  Writer:\n    'Andrew Stantoyzn (original story by), Pete Docter (original story by), Andrew Stanton (screenplay by), Jim Reardon (screenplay by)',\n  Actors: 'Ben Burtt, Elissa Knight, Jeff Garlin, Fred Willard',\n  Plot:\n    'In the distant future, a small waste-collecting robot inadvertently embarks on a space journey that will ultimately decide the fate of mankind.',\n  Language: 'English',\n  Country: 'USA',\n  Awards: 'Won 1 Oscar. Another 89 wins & 90 nominations.',\n  Poster:\n    'https://m.media-amazon.com/images/M/MV5BMjExMTg5OTU0NF5BMl5BanBnXkFtZTcwMjMxMzMzMw@@._V1_SX300.jpg',\n  Ratings: [\n    {\n      Source: 'Internet Movie Database',\n      Value: '8.4/10'\n    },\n    {\n      Source: 'Rotten Tomatoes',\n      Value: '95%'\n    },\n    {\n      Source: 'Metacritic',\n      Value: '95/100'\n    }\n  ],\n  Metascore: '95',\n  imdbRating: '8.4',\n  imdbVotes: '919,942',\n  imdbID: 'tt0910970',\n  Type: 'movie',\n  DVD: '18 Nov 2008',\n  BoxOffice: '$223,749,872',\n  Production: 'Walt Disney Pictures',\n  Website: 'http://www.wall-e.com/',\n  Response: 'True'\n}\n\nexport const MOCK_MOVIE_DETAIL = {\n  id: 1,\n  Title: 'Reservoir Dogs',\n  Year: 1992,\n  Plot:\n    `Eight men eat breakfast at a Los Angeles diner before carrying out a diamond heist. Mob boss Joe Cabot and his son and underboss 'Nice Guy' Eddie Cabot are responsible for planning the job. The rest of the men use aliases issued by Joe Cabot: Mr. Brown, Mr. White, Mr. Blonde, Mr. Blue, Mr. Orange and Mr. Pink.`,\n  genre: '',\n  isAvailable: true,\n  imageDirectory: '',\n  Runtime: '99',\n  Genre: 'Adventure',\n  Director: 'Quentin Tarantino',\n  Writer: 'Quentin Tarantino',\n  Poster: '',\n  torrents: '',\n  backgroundImageDirectory: ''\n}\n\nexport const MOCK_BULK_DOWNLOAD_TORRENTS = [\n  {\n    id: 1,\n    name: 'Guardians of the Galaxy (2014) 1080p BrRip x264 - YIFY',\n    size: 1988939229,\n    hash: '11A2AC68A11634E980F265CB1433C599D017A759',\n    checked: false\n  },\n  {\n    id: 1,\n    name: 'Guardians of the Galaxy Vol. 2 (2017) 720p BrRip x264 - VPPV',\n    size: 1215947108,\n    hash: '68132C479348C1AA2618D55C8BBEC6EB2597A5BA',\n    checked: false\n  },\n  {\n    id: 1,\n    name: 'The.Wailing.2016.1080p.BluRay.10bit.HEVC-MkvCage [aka Gokseong]',\n    size: 3976321027,\n    hash: '2F157306E5114EA8044302586A89FDC4E0FAC2A1',\n    checked: false\n  },\n  {\n    id: 1,\n    name: 'First.Man.2018.HC.HDRip.XviD.AC3-EVO',\n    size: 1474599225,\n    hash: '885CCCAD7F1942A515DA564FCF62933A105931DB',\n    checked: false\n  },\n  {\n    id: 2,\n    name: 'First.Man.2018.720p.BRRip.x264.MkvCage',\n    size: 1375985558,\n    hash: '712837DCAA3F4275B89E640EB21DAE72D2E0C38B',\n    checked: false\n  },\n  {\n    id: 1,\n    name: 'Home Alone (1990) 1080p BrRip x264 - YIFY',\n    size: 1767740507,\n    hash: '5FEFAC61C0F42FFC43946B3379A540D1A38F6480',\n    checked: false\n  }\n]\n\nexport const MOVIEGENRES = [\n  { id: 1, code: 'ACT', description: 'Action', isChecked: true },\n  { id: 2, code: 'ADV', description: 'Adventure', isChecked: false },\n  { id: 3, code: 'DOC', description: 'Documentary', isChecked: false },\n  { id: 4, code: 'DRA', description: 'Drama', isChecked: false },\n  { id: 5, code: 'HOR', description: 'Horror', isChecked: false },\n  { id: 6, code: 'SCI', description: 'Sci-Fi', isChecked: true },\n  { id: 7, code: 'THR', description: 'Thriller', isChecked: false }\n]\n\nexport let DISPLAYEDMOVIES = [\n  {\n    title: 'Guardians of the Galaxy',\n    year: 2014,\n    plot:\n      'A group of intergalactic criminals must pull together to stop a fanatical warrior with plans to purge the universe.',\n    imdbId: 'tt2015381',\n    torrents: [],\n    id: 118340\n  },\n  {\n    title: 'The Wailing',\n    year: 2016,\n    plot:\n      'Soon after a stranger arrives in a little village, a mysterious sickness starts spreading. A policeman, drawn into the incident, is forced to solve the mystery in order to save his daughter.',\n    imdbId: 'tt5215952',\n    torrents: [],\n    id: 293670\n  },\n  {\n    title: 'First Man',\n    year: 2018,\n    plot:\n      'A look at the life of the astronaut, Neil Armstrong, and the legendary space mission that led him to become the first man to walk on the Moon on July 20, 1969.',\n    imdbId: 'tt1213641',\n    torrents: [],\n    id: 369972\n  },\n  {\n    title: 'The Karate Kid',\n    year: 1984,\n    plot:\n      'A Japanese martial arts instructor agrees to teach karate to a bullied teenager.',\n    imdbId: 'tt0087538',\n    torrents: [],\n    id: 1885\n  },\n  {\n    title: 'Top Gun',\n    year: 1986,\n    plot: `As students at the United States Navys elite fighter weapons school compete to be best in the class, one daring young pilot learns a few things from a civilian instructor that are not taught in the classroom.\n    `,\n    imdbId: 'tt0092099',\n    torrents: [],\n    id: 744\n  },\n  {\n    title: 'Reservoir Dogs',\n    year: 1992,\n    plot:\n      'When a simple jewelry heist goes horribly wrong, the surviving criminals begin to suspect that one of them is a police informant.',\n    imdbId: 'tt0105236',\n    torrents: [],\n    id: 500\n  },\n  {\n    title: 'Spider-Man',\n    year: 2002,\n    plot:\n      'When bitten by a genetically modified spider, a nerdy, shy, and awkward high school student gains spider-like abilities that he eventually must use to fight evil as a superhero after tragedy befalls his family.',\n    imdbId: 'tt0145487',\n    torrents: [],\n    id: 557\n  },\n  {\n    title: 'Superman Returns',\n    year: 2006,\n    plot:\n      'Superman returns to Earth after spending five years in space examining his homeworld Krypton. But he finds things have changed while he was gone, and he must once again prove himself important to the world.',\n    imdbId: 'tt0348150',\n    torrents: [],\n    id: 1452\n  },\n  {\n    title: 'Home Alone',\n    year: 1990,\n    plot:\n      'An eight-year-old troublemaker must protect his house from a pair of burglars when he is accidentally left home alone by his family during Christmas vacation.',\n    imdbId: 'tt0099785',\n    torrents: [],\n    id: 771\n  }\n]\n// used in top-nav for search\nexport const MOVIES: IOmdbMovieDetail[] = [\n  // { id: 1, Title: 'Face Off', Year: 1997, Plot: '', genre: 'Action', isAvailable: false, imageDirectory: './assets/images/1997-face-off-poster1.jpg', Runtime: '156', Genre: '', Director: '', Writer: '', Poster: '', imdbID: '' },\n  // { id: 2, Title: 'Nacho Libre', Year: 2006, Plot: '', genre: 'Comedy', isAvailable: true, imageDirectory: './assets/images/2006-nacho_libre-1.jpg', Runtime: '120', Genre: '', Director: '', Writer: '', Poster: '', imdbID: '' },\n  // { id: 3, Title: 'Salt', Year: 2006, Plot: '', genre: 'Action', isAvailable: false, imageDirectory: './assets/images/2006-salt-1.jpg', Runtime: '110', Genre: '', Director: '', Writer: '', Poster: '', imdbID: '' },\n  // { id: 4, Title: 'Valkyrie', Year: 2008, Plot: '', genre: 'Action', isAvailable: true, imageDirectory: './assets/images/2008-valkyrie-1.jpg', Runtime: '124', Genre: '', Director: '', Writer: '', Poster: '', imdbID: '' },\n  // { id: 5, Title: 'Jaws 2', Year: 1978, Plot: '', genre: 'Thriller', isAvailable: false, imageDirectory: './assets/images/1978-jaws_2.jpg', Runtime: '120', Genre: '', Director: '', Writer: '', Poster: '', imdbID: '' },\n  // { id: 6, Title: 'Paper Towns', Year: 2015, Plot: '', genre: 'Drama', isAvailable: true, imageDirectory: './assets/images/2015-paper_towns.jpg', Runtime: '120', Genre: '', Director: '', Writer: '', Poster: '', imdbID: '' },\n  // { id: 7, Title: 'Good Morning Vietnam', Year: 1987, Plot: '', genre: 'Action', isAvailable: false, imageDirectory: './assets/images/1987-good_morning_vietnam.jpg', Runtime: '120', Genre: '', Director: '', Writer: '', Poster: '', imdbID: '' },\n  // { id: 8, Title: 'Three Musketeers', Year: 2011, Plot: '', genre: 'Action', isAvailable: true, imageDirectory: './assets/images/2011-three_musketeers.jpg', Runtime: '180', Genre: '', Director: '', Writer: '', Poster: '', imdbID: '' }\n]\n\nexport const TORRENTS: MDBTorrent[] = [\n  //   {\n  //   id: 1,\n  //   name: 'Valkyrie.DVD-R.NTSC.2008',\n  //   size: 4681064562,\n  //   hash: 'hh9rPLQdJPYDq/dmDuTMogqQYDk='\n  // },\n  // {\n  //   id: 1,\n  //   name: 'Valkyrie.2008.Bluray.1080p.DTS-HD.x264-Grym',\n  //   size: 21702179889,\n  //   hash: '8KBwA9eFjEJgN6/RZSSJP80t91s='\n  // },\n  // {\n  //   id: 1,\n  //   name: 'Valkyrie.2008.BluRay.1080p.x264.AAC.5.1.-.Hon3y',\n  //   size: 2996573771,\n  //   hash: 'HHn7J1vN1Y8nGXJqVz0ZrgwWeJE='\n  // }, {\n  //   id: 1,\n  //   name: 'Valkyrie (2008) 1080p BrRip x264 - 1.70GB - YIFY',\n  //   size: 1827526513,\n  //   hash: 'lop06WdSY2yjNig+yeQrj1wm6jY='\n  // },\n]\n\n@Injectable()\nexport class StartTimeStamp {\n  private startTimeStamp: number\n  setStartTimeStamp(val: number): void {\n    this.startTimeStamp = val\n  }\n  getStartTimeStamp(): number {\n    return this.startTimeStamp\n  }\n}\n\n@Injectable()\nexport class DisplayedTorrents {\n  private myDisplayedTorrents: DisplayedTorrent[]\n  // add(val: DisplayedTorrent) {\n  //   val = new DisplayedTorrent()\n  //   this.myDisplayedTorrents.push(val)\n  // }\n  getDisplayedTorrents() {\n    return this.myDisplayedTorrents\n  }\n}\n\n@Injectable()\nexport class DisplayedTorrent {\n  private added?: string\n  private hash: string\n  private name: string\n  private size: number\n  constructor(added: string, hash: string, name?: string, size?: number) {\n    this.added = added\n    this.hash = hash\n    this.name = name\n    this.size = size\n  }\n  getAdded(): string {\n    return this.added\n  }\n  getHash(): string {\n    return this.hash\n  }\n  getName(): string {\n    return this.name\n  }\n  getSize(): number {\n    return this.size\n  }\n}\n\n\nexport let TMDB_SEARCH_RESULTS: ITmdbResultObject = {\n  page: 1,\n  total_results: 3810,\n  total_pages: 191,\n  results: [\n    {\n      popularity: 47.572,\n      vote_count: 13899,\n      video: false,\n      poster_path: '/hbhFnRzzg6ZDmm8YAmxBnQpQIPh.jpg',\n      id: 278,\n      adult: false,\n      backdrop_path: '/x7O7oJO7BeXWvqXpLa5YoJd8ZD5.jpg',\n      original_language: 'en',\n      original_title: 'The Shawshank Redemption',\n      genre_ids: [80, 18],\n      title: 'The Shawshank Redemption',\n      vote_average: 8.7,\n      overview:\n        'Framed in the 1940s for the double murder of his wife and her lover, upstanding banker Andy Dufresne begins a new life at the Shawshank prison, where he puts his accounting skills to work for an amoral warden. During his long stretch in prison, Dufresne comes to be admired by the other inmates -- including an older prisoner named Red -- for his integrity and unquenchable sense of hope.',\n      release_date: '1994-09-23'\n    },\n    {\n      popularity: 30.437,\n      vote_count: 16212,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 680,\n      adult: false,\n      backdrop_path: '/4cDFJr4HnXN5AdPw4AKrmLlMWdO.jpg',\n      original_language: 'en',\n      original_title: 'Pulp Fiction',\n      genre_ids: [80, 53],\n      title: 'Pulp Fiction',\n      vote_average: 8.4,\n      overview:\n        `A burger-loving hit man, his philosophical partner, a drug-addled gangster's moll and a washed-up boxer converge in this sprawling, comedic crime caper. Their adventures unfurl in three stories that ingeniously trip back and forth in time.`,\n      release_date: '1994-10-14'\n    },\n    {\n      popularity: 30.008,\n      vote_count: 10939,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 8587,\n      adult: false,\n      backdrop_path: '/kZ9CKeZeKMUtrjZ7RuArjVMTDF4.jpg',\n      original_language: 'en',\n      original_title: 'The Lion King',\n      genre_ids: [16, 18, 10751],\n      title: 'The Lion King',\n      vote_average: 8.2,\n      overview:\n        'A young lion cub named Simba can\\'t wait to be king. But his uncle craves the title for himself and will stop at nothing to get it.',\n      release_date: '1994-06-23'\n    },\n    {\n      popularity: 34.399,\n      id: 101,\n      video: false,\n      vote_count: 8176,\n      vote_average: 8.3,\n      title: 'Léon: The Professional',\n      release_date: '1994-11-18',\n      original_language: 'fr',\n      original_title: 'Léon',\n      genre_ids: [53, 80, 18],\n      backdrop_path: '/dXQ7HILRK1Tg33RT64JwbQI7Osh.jpg',\n      adult: false,\n      overview:\n        'Léon, the top hit man in New York, has earned a rep as an effective \"cleaner\". But when his next-door neighbors are wiped out by a loose-cannon DEA agent, he becomes the unwilling custodian of 12-year-old Mathilda. Before long, Mathilda\\'s thoughts turn to revenge, and she considers following in Léon\\'s footsteps.',\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      isAvailable: true\n    },\n    {\n      popularity: 31.962,\n      vote_count: 15752,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 13,\n      adult: false,\n      backdrop_path: '/wMgbnUVS9wbRGAdki8fqxKU1O0N.jpg',\n      original_language: 'en',\n      original_title: 'Forrest Gump',\n      genre_ids: [35, 18, 10749],\n      title: 'Forrest Gump',\n      vote_average: 8.4,\n      overview:\n        'A man with a low IQ has accomplished great things in his life and been present during significant historic events—in each case, far exceeding what anyone imagined he could do. But despite all he has achieved, his one true love eludes him.',\n      release_date: '1994-07-06'\n    },\n    {\n      popularity: 24.394,\n      vote_count: 5628,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 854,\n      adult: false,\n      backdrop_path: '/oYVf9gqxZduttG6HW2Qo4ZUxLWW.jpg',\n      original_language: 'en',\n      original_title: 'The Mask',\n      genre_ids: [35, 80, 14, 10749],\n      title: 'The Mask',\n      vote_average: 6.8,\n      overview:\n        'When timid bank clerk Stanley Ipkiss discovers a magical mask containing the spirit of the Norse god Loki, his entire life changes. While wearing the mask, Ipkiss becomes a supernatural playboy exuding charm and confidence which allows him to catch the eye of local nightclub singer Tina Carlyle. Unfortunately, under the mask\\'s influence, Ipkiss also robs a bank, which angers junior crime lord Dorian Tyrell, whose goons get blamed for the heist.',\n      release_date: '1994-07-29'\n    },\n    {\n      popularity: 26.233,\n      vote_count: 4409,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 408,\n      adult: false,\n      backdrop_path: '/c66otZnSdri67kR7ps92kRX849o.jpg',\n      original_language: 'en',\n      original_title: 'Snow White and the Seven Dwarfs',\n      genre_ids: [16, 14, 10751],\n      title: 'Snow White and the Seven Dwarfs',\n      vote_average: 7,\n      overview:\n        'A beautiful girl, Snow White, takes refuge in the forest in the house of seven dwarfs to hide from her stepmother, the wicked Queen. The Queen is jealous because she wants to be known as \"the fairest in the land,\" and Snow White\\'s beauty surpasses her own.',\n      release_date: '1937-12-21'\n    },\n    {\n      popularity: 25.24,\n      vote_count: 8547,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 424,\n      adult: false,\n      backdrop_path: '/cTNYRUTXkBgPH3wP3kmPUB5U6dA.jpg',\n      original_language: 'en',\n      original_title: 'Schindler\\'s List',\n      genre_ids: [18, 36, 10752],\n      title: 'Schindler\\'s List',\n      vote_average: 8.6,\n      overview:\n        'The true story of how businessman Oskar Schindler saved over a thousand Jewish lives from the Nazis while they worked as slaves in his factory during World War II.',\n      release_date: '1993-12-15'\n    },\n    {\n      popularity: 20.34,\n      vote_count: 7817,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 500,\n      adult: false,\n      backdrop_path: '/fupyzBwFAn1PoeCXhp54bYVM2ER.jpg',\n      original_language: 'en',\n      original_title: 'Reservoir Dogs',\n      genre_ids: [80, 53],\n      title: 'Reservoir Dogs',\n      vote_average: 8.2,\n      overview:\n        'A botched robbery indicates a police informant, and the pressure mounts in the aftermath at a warehouse. Crime begets violence as the survivors -- veteran Mr. White, newcomer Mr. Orange, psychopathic parolee Mr. Blonde, bickering weasel Mr. Pink and Nice Guy Eddie -- unravel.',\n      release_date: '1992-10-23'\n    },\n    {\n      popularity: 11.398,\n      vote_count: 1295,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 888,\n      adult: false,\n      backdrop_path: '/vbWvWqZJiEiffj8xag0owDExRVg.jpg',\n      original_language: 'en',\n      original_title: 'The Flintstones',\n      genre_ids: [35, 14, 10751],\n      title: 'The Flintstones',\n      vote_average: 5.2,\n      overview:\n        'Modern Stone Age family the Flintstones hit the big screen in this live-action version of the classic cartoon. Fred helps Barney adopt a child. Barney sees an opportunity to repay him when Slate Mining tests its employees to find a new executive. But no good deed goes unpunished.',\n      release_date: '1994-05-26'\n    },\n    {\n      popularity: 13.378,\n      id: 9739,\n      video: false,\n      vote_count: 1801,\n      vote_average: 6.5,\n      title: 'Demolition Man',\n      release_date: '1993-10-08',\n      original_language: 'en',\n      original_title: 'Demolition Man',\n      genre_ids: [80, 28, 878],\n      backdrop_path: '/2p5rA1NRoyyAFfzdHl1Ab1RN3qr.jpg',\n      adult: false,\n      overview:\n        'Simon Phoenix, a violent criminal cryogenically frozen in 1996, escapes during a parole hearing in 2032 in the utopia of San Angeles. Police are incapable of dealing with his violent ways and turn to his captor, who had also been cryogenically frozen after being wrongfully accused of killing 30 innocent people while apprehending Phoenix.',\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg'\n    },\n    {\n      popularity: 13.039,\n      vote_count: 2070,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 36955,\n      adult: false,\n      backdrop_path: '/o2agns0LEqyEUCByMT8ViIOio7r.jpg',\n      original_language: 'en',\n      original_title: 'True Lies',\n      genre_ids: [28, 53],\n      title: 'True Lies',\n      vote_average: 6.9,\n      overview:\n        'Harry Tasker is a secret agent for the United States Government. For years, he has kept his job from his wife, but is forced to reveal his identity and try to stop nuclear terrorists when he and his wife are kidnapped by them.',\n      release_date: '1994-07-15'\n    },\n    {\n      popularity: 16.688,\n      vote_count: 2909,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 10112,\n      adult: false,\n      backdrop_path: '/fojdVtSsZa7fXyJQ6w1Exw7GWum.jpg',\n      original_language: 'en',\n      original_title: 'The Aristocats',\n      genre_ids: [12, 16, 35, 10751],\n      title: 'The Aristocats',\n      vote_average: 7.3,\n      overview:\n        'When Madame Adelaide Bonfamille leaves her fortune to Duchess and her children—Bonfamille’s beloved family of cats—the butler plots to steal the money and kidnaps the legatees, leaving them out on a country road. All seems lost until the wily Thomas O’Malley Cat and his jazz-playing alley cats come to the aristocats’ rescue.',\n      release_date: '1970-12-24'\n    },\n    {\n      popularity: 20.126,\n      vote_count: 4866,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 620,\n      adult: false,\n      backdrop_path: '/qmDy6Rdom8d8UFj9GeAAtVIjTRT.jpg',\n      original_language: 'en',\n      original_title: 'Ghostbusters',\n      genre_ids: [35, 14],\n      title: 'Ghostbusters',\n      vote_average: 7.4,\n      overview:\n        'After losing their academic posts at a prestigious university, a team of parapsychologists goes into business as proton-pack-toting \"ghostbusters\" who exterminate ghouls, hobgoblins and supernatural pests of all stripes. An ad campaign pays off when a knockout cellist hires the squad to purge her swanky digs of demons that appear to be living in her refrigerator.',\n      release_date: '1984-06-08'\n    },\n    {\n      popularity: 15.25,\n      id: 2758,\n      video: false,\n      vote_count: 1312,\n      vote_average: 6.7,\n      title: 'Addams Family Values',\n      release_date: '1993-11-19',\n      original_language: 'en',\n      original_title: 'Addams Family Values',\n      genre_ids: [35, 10751, 14],\n      backdrop_path: '/i84FfYcljpH9FOO26PdvBWzLGRl.jpg',\n      adult: false,\n      overview:\n        'Siblings Wednesday and Pugsley Addams will stop at nothing to get rid of Pubert, the new baby boy adored by parents Gomez and Morticia. Things go from bad to worse when the new \"black widow\" nanny, Debbie Jellinsky, launches her plan to add Fester to her collection of dead husbands.',\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg'\n    },\n    {\n      popularity: 18.017,\n      vote_count: 3184,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 3170,\n      adult: false,\n      backdrop_path: '/zM2Rdsh4kiTEXPkkO9lWBzZpwAH.jpg',\n      original_language: 'en',\n      original_title: 'Bambi',\n      genre_ids: [16, 18, 10751],\n      title: 'Bambi',\n      vote_average: 6.9,\n      overview:\n        `Bambi's tale unfolds from season to season as the young prince of the forest learns about life, love, and friends.`,\n      release_date: '1942-08-21'\n    },\n    {\n      popularity: 13.155,\n      vote_count: 461,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 10438,\n      adult: false,\n      backdrop_path: '/1MaJH9m8TfmwLgS98kcjU4faiMg.jpg',\n      original_language: 'en',\n      original_title: 'Beethoven\\'s 2nd',\n      genre_ids: [35, 10751],\n      title: 'Beethoven\\'s 2nd',\n      vote_average: 5.2,\n      overview:\n        `Beethoven is back -- and this time, he has a whole brood with him now that he's met his canine match, Missy, and fathered a family. The only problem is that Missy's owner, Regina, wants to sell the puppies and tear the clan apart. It's up to Beethoven and the Newton kids to save the day and keep everyone together.`,\n      release_date: '1993-12-16'\n    },\n    {\n      popularity: 13.779,\n      id: 44251,\n      video: false,\n      vote_count: 281,\n      vote_average: 6.5,\n      title: 'Dragon Ball Z: Broly – Second Coming',\n      release_date: '1994-03-12',\n      original_language: 'ja',\n      original_title: 'ドラゴンボールＺ 危険なふたり！超戦士はねむれない',\n      genre_ids: [28, 16, 878],\n      backdrop_path: '/d0A7xd5Qnm6CCH25HXKHmcBDmmm.jpg',\n      adult: false,\n      overview:\n        'A Saiyan Space pod crash-lands on Earth out of which a wounded Saiyan crawls: Broly, the Legendary Super Saiyan. The wounded Broly shouts out in frustration and turns into normal form. The place soon freezes, trapping him in it and he falls into a coma.',\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg'\n    },\n    {\n      popularity: 14.604,\n      vote_count: 3268,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 1637,\n      adult: false,\n      backdrop_path: '/pGVpDc6MgLRtOYdxsA5fhj1SZki.jpg',\n      original_language: 'en',\n      original_title: 'Speed',\n      genre_ids: [28, 12, 80],\n      title: 'Speed',\n      vote_average: 6.9,\n      overview:\n        `Los Angeles SWAT cop Jack Traven is up against bomb expert Howard Payne, who's after major ransom money. First it's a rigged elevator in a very tall building. Then it's a rigged bus--if it slows, it will blow, bad enough any day, but a nightmare in LA traffic. And that's still not the end.`,\n      release_date: '1994-06-09'\n    },\n    {\n      popularity: 21.341,\n      vote_count: 4964,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 9479,\n      adult: false,\n      backdrop_path: '/16lk65YfrDFIr6evkWRjSeOOSws.jpg',\n      original_language: 'en',\n      original_title: 'The Nightmare Before Christmas',\n      genre_ids: [16, 14, 10751],\n      title: 'The Nightmare Before Christmas',\n      vote_average: 7.8,\n      overview:\n        `Tired of scaring humans every October 31 with the same old bag of tricks, Jack Skellington, the spindly king of Halloween Town, kidnaps Santa Claus and plans to deliver shrunken heads and other ghoulish gifts to children on Christmas morning. But as Christmas approaches, Jack's rag-doll girlfriend, Sally, tries to foil his misguided plans.`,\n      release_date: '1993-10-09'\n    }\n  ]\n}\nexport const TEST_TMDB_SINGLE_RESULT =\n{\n  popularity: 28.872, vote_count: 13772, video: false, poster_path: '\\/nk11pvocdb5zbFhX5oq5YiLPYMo.jpg', id: 14160, adult: false, backdrop_path: '\\/6fX7NF6IUJCTVssei7Shgl9J6LL.jpg', original_language: 'en', original_title: 'Up', genre_ids: [12, 16, 35, 10751], title: 'Up', vote_average: 7.9, overview: 'Carl Fredricksen spent his entire life dreaming of exploring the globe and experiencing life to its fullest. But at age 78, life seems to have passed him by, until a twist of fate (and a persistent 8-year old Wilderness Explorer named Russell) gives him a new lease on life.', release_date: '2009-05-28'\n}\nexport const TEST_TMDB_MOVIE_DETAILS = {\n  adult: false,\n  backdrop_path: '/wMgbnUVS9wbRGAdki8fqxKU1O0N.jpg',\n  belongs_to_collection: null,\n  budget: 55000000,\n  genres: [{\n    id: 35,\n    name: 'Comedy'\n  }, {\n    id: 18,\n    name: 'Drama'\n  }, {\n    id: 10749,\n    name: 'Romance'\n  }],\n  homepage: null,\n  id: 13,\n  imdb_id: 'tt0109830',\n  original_language: 'en',\n  original_title: 'Forrest Gump',\n  overview: 'A man with a low IQ has accomplished great things in his life and been present during significant historic events—in each case, far exceeding what anyone imagined he could do. But despite all he has achieved, his one true love eludes him.',\n  popularity: 23.858,\n  poster_path: '/yE5d3BUhE8hCnkMUJOo1QDoOGNz.jpg',\n  production_companies: [{\n    id: 4,\n    logo_path: '/fycMZt242LVjagMByZOLUGbCvv3.png',\n    name: 'Paramount',\n    origin_country: 'US'\n  }],\n  production_countries: [{\n    iso_3166_1: 'US',\n    name: 'United States of America'\n  }],\n  release_date: '1994-07-06',\n  revenue: 677945399,\n  runtime: 142,\n  spoken_languages: [{\n    iso_639_1: 'en',\n    name: 'English'\n  }],\n  status: 'Released',\n  tagline: `Life is like a box of chocolates...you never know what you're gonna get.`,\n  title: 'Forrest Gump',\n  video: false,\n  vote_average: 8.4,\n  vote_count: 15996\n}\n\n\nconst TEST_TMDB_MOVIE_DETAIL2 = {\n  adult: false,\n  backdrop_path: '/mMZRKb3NVo5ZeSPEIaNW9buLWQ0.jpg',\n  belongs_to_collection: null,\n  budget: 63000000,\n  genres: [\n    {\n      id: 18,\n      name: 'Drama'\n    }\n  ],\n  homepage: 'http://www.foxmovies.com/movies/fight-club',\n  id: 550,\n  imdb_id: 'tt0137523',\n  original_language: 'en',\n  original_title: 'Fight Club',\n  overview: 'A ticking-time-bomb insomniac and a slippery soap salesman channel primal male aggression into a shocking new form of therapy. Their concept catches on, with underground \\'fight clubs\\' forming in every town, until an eccentric gets in the way and ignites an out-of-control spiral toward oblivion.',\n  popularity: 36.556,\n  poster_path: '/adw6Lq9FiC9zjYEpOqfq03ituwp.jpg',\n  production_companies: [\n    {\n      id: 508,\n      logo_path: '/7PzJdsLGlR7oW4J0J5Xcd0pHGRg.png',\n      name: 'Regency Enterprises',\n      origin_country: 'US'\n    },\n    {\n      id: 711,\n      logo_path: '/tEiIH5QesdheJmDAqQwvtN60727.png',\n      name: 'Fox 2000 Pictures',\n      origin_country: 'US'\n    },\n    {\n      id: 20555,\n      logo_path: '/hD8yEGUBlHOcfHYbujp71vD8gZp.png',\n      name: 'Taurus Film',\n      origin_country: 'DE'\n    },\n    {\n      id: 54051,\n      logo_path: null,\n      name: 'Atman Entertainment',\n      origin_country: ''\n    },\n    {\n      id: 54052,\n      logo_path: null,\n      name: 'Knickerbocker Films',\n      origin_country: 'US'\n    },\n    {\n      id: 25,\n      logo_path: '/qZCc1lty5FzX30aOCVRBLzaVmcp.png',\n      name: '20th Century Fox',\n      origin_country: 'US'\n    },\n    {\n      id: 4700,\n      logo_path: '/A32wmjrs9Psf4zw0uaixF0GXfxq.png',\n      name: 'The Linson Company',\n      origin_country: ''\n    }\n  ],\n  production_countries: [\n    {\n      iso_3166_1: 'DE',\n      name: 'Germany'\n    },\n    {\n      iso_3166_1: 'US',\n      name: 'United States of America'\n    }],\n  release_date: '1999-10-15',\n  revenue: 100853753,\n  runtime: 139,\n  spoken_languages: [\n    {\n      iso_639_1: 'en',\n      name: 'English'\n    }\n  ],\n  status: 'Released',\n  tagline: 'Mischief. Mayhem. Soap.',\n  title: 'Fight Club',\n  video: false,\n  vote_average: 8.4,\n  vote_count: 17355\n}\n\n\nexport const YTS_TORRENT_SINGLE_RESULT: IYTSSingleQuery = {\n  \"status\": \"ok\",\n  \"status_message\": \"Query was successful\",\n  \"data\": {\n    \"movie_count\": 1,\n    \"limit\": 20,\n    \"page_number\": 1,\n    \"movies\": [\n      {\n        \"id\": 3897,\n        \"url\": \"https:\\/\\/yts.mx\\/movies\\/titanic-1997\",\n        \"imdb_code\": \"tt0120338\",\n        \"title\": \"Titanic\",\n        \"title_english\": \"Titanic\",\n        \"title_long\": \"Titanic (1997)\",\n        \"slug\": \"titanic-1997\",\n        \"year\": 1997,\n        \"rating\": 7.8,\n        \"runtime\": 194,\n        \"genres\": [\n          \"Action\",\n          \"Drama\",\n          \"Romance\"\n        ],\n        \"summary\": \"84 years later, a 100 year-old woman named Rose DeWitt Bukater tells the story to her granddaughter Lizzy Calvert, Brock Lovett, Lewis Bodine, Bobby Buell and Anatoly Mikailavich on the Keldysh about her life set in April 10th 1912, on a ship called Titanic when young Rose boards the departing ship with the upper-class passengers and her mother, Ruth DeWitt Bukater, and her fianc\\u00e9, Caledon Hockley. Meanwhile, a drifter and artist named Jack Dawson and his best friend Fabrizio De Rossi win third-class tickets to the ship in a game. And she explains the whole story from departure until the death of Titanic on its first and last voyage April 15th, 1912 at 2:20 in the morning.\",\n        \"description_full\": \"84 years later, a 100 year-old woman named Rose DeWitt Bukater tells the story to her granddaughter Lizzy Calvert, Brock Lovett, Lewis Bodine, Bobby Buell and Anatoly Mikailavich on the Keldysh about her life set in April 10th 1912, on a ship called Titanic when young Rose boards the departing ship with the upper-class passengers and her mother, Ruth DeWitt Bukater, and her fianc\\u00e9, Caledon Hockley. Meanwhile, a drifter and artist named Jack Dawson and his best friend Fabrizio De Rossi win third-class tickets to the ship in a game. And she explains the whole story from departure until the death of Titanic on its first and last voyage April 15th, 1912 at 2:20 in the morning.\",\n        \"synopsis\": \"84 years later, a 100 year-old woman named Rose DeWitt Bukater tells the story to her granddaughter Lizzy Calvert, Brock Lovett, Lewis Bodine, Bobby Buell and Anatoly Mikailavich on the Keldysh about her life set in April 10th 1912, on a ship called Titanic when young Rose boards the departing ship with the upper-class passengers and her mother, Ruth DeWitt Bukater, and her fianc\\u00e9, Caledon Hockley. Meanwhile, a drifter and artist named Jack Dawson and his best friend Fabrizio De Rossi win third-class tickets to the ship in a game. And she explains the whole story from departure until the death of Titanic on its first and last voyage April 15th, 1912 at 2:20 in the morning.\",\n        \"yt_trailer_code\": \"CHekzSiZjrY\",\n        \"language\": \"English\",\n        \"mpa_rating\": \"PG-13\",\n        \"background_image\": \"https:\\/\\/yts.mx\\/assets\\/images\\/movies\\/Titanic_1997\\/background.jpg\",\n        \"background_image_original\": \"https:\\/\\/yts.mx\\/assets\\/images\\/movies\\/Titanic_1997\\/background.jpg\",\n        \"small_cover_image\": \"https:\\/\\/yts.mx\\/assets\\/images\\/movies\\/Titanic_1997\\/small-cover.jpg\",\n        \"medium_cover_image\": \"https:\\/\\/yts.mx\\/assets\\/images\\/movies\\/Titanic_1997\\/medium-cover.jpg\",\n        \"large_cover_image\": \"https:\\/\\/yts.mx\\/assets\\/images\\/movies\\/Titanic_1997\\/large-cover.jpg\",\n        \"state\": \"ok\",\n        \"torrents\": [\n          {\n            \"url\": \"https:\\/\\/yts.mx\\/torrent\\/download\\/237457BA8029DEF449A0D3EF5B7E508780AC68DB\",\n            \"hash\": \"237457BA8029DEF449A0D3EF5B7E508780AC68DB\",\n            \"quality\": \"3D\",\n            \"type\": \"bluray\",\n            \"seeds\": 75,\n            \"peers\": 13,\n            \"size\": \"2.80 GB\",\n            \"size_bytes\": 3006477107,\n            \"date_uploaded\": \"2015-11-02 04:25:37\",\n            \"date_uploaded_unix\": 1446434737\n          },\n          {\n            \"url\": \"https:\\/\\/yts.mx\\/torrent\\/download\\/A86B4ADB83506BB12CEABAC2F42AE480BA44ECFA\",\n            \"hash\": \"A86B4ADB83506BB12CEABAC2F42AE480BA44ECFA\",\n            \"quality\": \"720p\",\n            \"type\": \"bluray\",\n            \"seeds\": 326,\n            \"peers\": 52,\n            \"size\": \"1.4 GB\",\n            \"size_bytes\": 1503238554,\n            \"date_uploaded\": \"2017-08-11 19:25:11\",\n            \"date_uploaded_unix\": 1502472311\n          },\n          {\n            \"url\": \"https:\\/\\/yts.mx\\/torrent\\/download\\/98CD5D90252265F1C59AB47330FF4C39F48CCC78\",\n            \"hash\": \"98CD5D90252265F1C59AB47330FF4C39F48CCC78\",\n            \"quality\": \"1080p\",\n            \"type\": \"bluray\",\n            \"seeds\": 408,\n            \"peers\": 63,\n            \"size\": \"2.97 GB\",\n            \"size_bytes\": 3189013217,\n            \"date_uploaded\": \"2017-08-12 02:14:57\",\n            \"date_uploaded_unix\": 1502496897\n          }\n        ],\n        \"date_uploaded\": \"2017-08-11 19:25:11\",\n        \"date_uploaded_unix\": 1502472311\n      }\n    ]\n  },\n  \"@meta\": {\n    \"server_time\": 1598788840,\n    \"server_timezone\": \"CET\",\n    \"api_version\": 2,\n    \"execution_time\": \"0 ms\"\n  }\n}\n\nexport const MOCK_USER_DATA_LIST: IProfileData[] = [\n  {\n    tmdbId: 597, //titanic\n    isFavorite: true,\n    watched: {\n      percentage: 100\n    }\n  },\n  {\n    tmdbId: 857, // svpr\n    isFavorite: true,\n    watched: {\n      percentage: 100\n    }\n  },\n  {\n    tmdbId: 24428, // avengers\n    isBookmark: true,\n  },\n  {\n    tmdbId: 579, // jaws\n    isBookmark: true\n  },\n  {\n    tmdbId: 769, // goodfellas\n    isBookmark: true,\n    watched: {\n      percentage: 51\n    }\n  },\n  {\n    tmdbId: 775996, // goodfellas\n    watched: {\n      percentage: 75\n    },\n    review: {\n      content: 'confusing',\n      rating: 3,\n      id: 213\n    }\n  },\n]\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "added",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "hash",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "size",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 300,
                "jsdoctags": [
                    {
                        "name": "added",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "hash",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "size",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "DisplayedTorrents",
            "id": "injectable-DisplayedTorrents-717ea551e1e6c980a437687032f45a57f5a494c3cd7f84384e3500d4815856380ca6a5f5438aa33a3d82fbc9ce78a3e5830b0720148c508b423cb665b89194d4",
            "file": "src/app/mock-data.ts",
            "properties": [
                {
                    "name": "myDisplayedTorrents",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DisplayedTorrent[]",
                    "optional": false,
                    "description": "",
                    "line": 285,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getDisplayedTorrents",
                    "args": [],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 290,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { ITmdbResultObject, ILibraryMovie, MDBTorrent, IOmdbMovieDetail } from '@models/interfaces'\nimport { Injectable } from '@angular/core'\nimport { IYTSSingleQuery } from '@models/yts-torrent.model'\nimport { IProfileData } from '@models/profile-data.model'\n\nexport const TEST_LIBRARY_MOVIES: ILibraryMovie[] = [\n  {\n    tmdbId: 0,\n    imdbId: 'tt0095956',\n    title: 'Titanic',\n    year: 0,\n    directory: ['D:\\\\media server\\\\movies\\\\titanic.mp4']\n  },\n  {\n    tmdbId: 0,\n    imdbId: 'tt0133093',\n    title: 'Guardians of the Galaxy',\n    year: 0,\n    directory: ['D:\\\\media server\\\\movies\\\\guardians of the galaxy.mp4']\n  },\n  {\n    tmdbId: 680,\n    imdbId: 'tt0110912',\n    title: 'Pulp Fiction',\n    year: 1994,\n    directory: ['D:\\\\media server\\\\movies\\\\pulp fiction.mp4']\n  }\n]\n\nexport const TEST_OMDB_MOVIE_DETAIL = {\n  Title: 'WALL·E',\n  Year: '2008',\n  Rated: 'G',\n  Released: '27 Jun 2008',\n  Runtime: '98 min',\n  Genre: 'Animation, Adventure, Family, Sci-Fi',\n  Director: 'Andrew Stanton',\n  Writer:\n    'Andrew Stantoyzn (original story by), Pete Docter (original story by), Andrew Stanton (screenplay by), Jim Reardon (screenplay by)',\n  Actors: 'Ben Burtt, Elissa Knight, Jeff Garlin, Fred Willard',\n  Plot:\n    'In the distant future, a small waste-collecting robot inadvertently embarks on a space journey that will ultimately decide the fate of mankind.',\n  Language: 'English',\n  Country: 'USA',\n  Awards: 'Won 1 Oscar. Another 89 wins & 90 nominations.',\n  Poster:\n    'https://m.media-amazon.com/images/M/MV5BMjExMTg5OTU0NF5BMl5BanBnXkFtZTcwMjMxMzMzMw@@._V1_SX300.jpg',\n  Ratings: [\n    {\n      Source: 'Internet Movie Database',\n      Value: '8.4/10'\n    },\n    {\n      Source: 'Rotten Tomatoes',\n      Value: '95%'\n    },\n    {\n      Source: 'Metacritic',\n      Value: '95/100'\n    }\n  ],\n  Metascore: '95',\n  imdbRating: '8.4',\n  imdbVotes: '919,942',\n  imdbID: 'tt0910970',\n  Type: 'movie',\n  DVD: '18 Nov 2008',\n  BoxOffice: '$223,749,872',\n  Production: 'Walt Disney Pictures',\n  Website: 'http://www.wall-e.com/',\n  Response: 'True'\n}\n\nexport const MOCK_MOVIE_DETAIL = {\n  id: 1,\n  Title: 'Reservoir Dogs',\n  Year: 1992,\n  Plot:\n    `Eight men eat breakfast at a Los Angeles diner before carrying out a diamond heist. Mob boss Joe Cabot and his son and underboss 'Nice Guy' Eddie Cabot are responsible for planning the job. The rest of the men use aliases issued by Joe Cabot: Mr. Brown, Mr. White, Mr. Blonde, Mr. Blue, Mr. Orange and Mr. Pink.`,\n  genre: '',\n  isAvailable: true,\n  imageDirectory: '',\n  Runtime: '99',\n  Genre: 'Adventure',\n  Director: 'Quentin Tarantino',\n  Writer: 'Quentin Tarantino',\n  Poster: '',\n  torrents: '',\n  backgroundImageDirectory: ''\n}\n\nexport const MOCK_BULK_DOWNLOAD_TORRENTS = [\n  {\n    id: 1,\n    name: 'Guardians of the Galaxy (2014) 1080p BrRip x264 - YIFY',\n    size: 1988939229,\n    hash: '11A2AC68A11634E980F265CB1433C599D017A759',\n    checked: false\n  },\n  {\n    id: 1,\n    name: 'Guardians of the Galaxy Vol. 2 (2017) 720p BrRip x264 - VPPV',\n    size: 1215947108,\n    hash: '68132C479348C1AA2618D55C8BBEC6EB2597A5BA',\n    checked: false\n  },\n  {\n    id: 1,\n    name: 'The.Wailing.2016.1080p.BluRay.10bit.HEVC-MkvCage [aka Gokseong]',\n    size: 3976321027,\n    hash: '2F157306E5114EA8044302586A89FDC4E0FAC2A1',\n    checked: false\n  },\n  {\n    id: 1,\n    name: 'First.Man.2018.HC.HDRip.XviD.AC3-EVO',\n    size: 1474599225,\n    hash: '885CCCAD7F1942A515DA564FCF62933A105931DB',\n    checked: false\n  },\n  {\n    id: 2,\n    name: 'First.Man.2018.720p.BRRip.x264.MkvCage',\n    size: 1375985558,\n    hash: '712837DCAA3F4275B89E640EB21DAE72D2E0C38B',\n    checked: false\n  },\n  {\n    id: 1,\n    name: 'Home Alone (1990) 1080p BrRip x264 - YIFY',\n    size: 1767740507,\n    hash: '5FEFAC61C0F42FFC43946B3379A540D1A38F6480',\n    checked: false\n  }\n]\n\nexport const MOVIEGENRES = [\n  { id: 1, code: 'ACT', description: 'Action', isChecked: true },\n  { id: 2, code: 'ADV', description: 'Adventure', isChecked: false },\n  { id: 3, code: 'DOC', description: 'Documentary', isChecked: false },\n  { id: 4, code: 'DRA', description: 'Drama', isChecked: false },\n  { id: 5, code: 'HOR', description: 'Horror', isChecked: false },\n  { id: 6, code: 'SCI', description: 'Sci-Fi', isChecked: true },\n  { id: 7, code: 'THR', description: 'Thriller', isChecked: false }\n]\n\nexport let DISPLAYEDMOVIES = [\n  {\n    title: 'Guardians of the Galaxy',\n    year: 2014,\n    plot:\n      'A group of intergalactic criminals must pull together to stop a fanatical warrior with plans to purge the universe.',\n    imdbId: 'tt2015381',\n    torrents: [],\n    id: 118340\n  },\n  {\n    title: 'The Wailing',\n    year: 2016,\n    plot:\n      'Soon after a stranger arrives in a little village, a mysterious sickness starts spreading. A policeman, drawn into the incident, is forced to solve the mystery in order to save his daughter.',\n    imdbId: 'tt5215952',\n    torrents: [],\n    id: 293670\n  },\n  {\n    title: 'First Man',\n    year: 2018,\n    plot:\n      'A look at the life of the astronaut, Neil Armstrong, and the legendary space mission that led him to become the first man to walk on the Moon on July 20, 1969.',\n    imdbId: 'tt1213641',\n    torrents: [],\n    id: 369972\n  },\n  {\n    title: 'The Karate Kid',\n    year: 1984,\n    plot:\n      'A Japanese martial arts instructor agrees to teach karate to a bullied teenager.',\n    imdbId: 'tt0087538',\n    torrents: [],\n    id: 1885\n  },\n  {\n    title: 'Top Gun',\n    year: 1986,\n    plot: `As students at the United States Navys elite fighter weapons school compete to be best in the class, one daring young pilot learns a few things from a civilian instructor that are not taught in the classroom.\n    `,\n    imdbId: 'tt0092099',\n    torrents: [],\n    id: 744\n  },\n  {\n    title: 'Reservoir Dogs',\n    year: 1992,\n    plot:\n      'When a simple jewelry heist goes horribly wrong, the surviving criminals begin to suspect that one of them is a police informant.',\n    imdbId: 'tt0105236',\n    torrents: [],\n    id: 500\n  },\n  {\n    title: 'Spider-Man',\n    year: 2002,\n    plot:\n      'When bitten by a genetically modified spider, a nerdy, shy, and awkward high school student gains spider-like abilities that he eventually must use to fight evil as a superhero after tragedy befalls his family.',\n    imdbId: 'tt0145487',\n    torrents: [],\n    id: 557\n  },\n  {\n    title: 'Superman Returns',\n    year: 2006,\n    plot:\n      'Superman returns to Earth after spending five years in space examining his homeworld Krypton. But he finds things have changed while he was gone, and he must once again prove himself important to the world.',\n    imdbId: 'tt0348150',\n    torrents: [],\n    id: 1452\n  },\n  {\n    title: 'Home Alone',\n    year: 1990,\n    plot:\n      'An eight-year-old troublemaker must protect his house from a pair of burglars when he is accidentally left home alone by his family during Christmas vacation.',\n    imdbId: 'tt0099785',\n    torrents: [],\n    id: 771\n  }\n]\n// used in top-nav for search\nexport const MOVIES: IOmdbMovieDetail[] = [\n  // { id: 1, Title: 'Face Off', Year: 1997, Plot: '', genre: 'Action', isAvailable: false, imageDirectory: './assets/images/1997-face-off-poster1.jpg', Runtime: '156', Genre: '', Director: '', Writer: '', Poster: '', imdbID: '' },\n  // { id: 2, Title: 'Nacho Libre', Year: 2006, Plot: '', genre: 'Comedy', isAvailable: true, imageDirectory: './assets/images/2006-nacho_libre-1.jpg', Runtime: '120', Genre: '', Director: '', Writer: '', Poster: '', imdbID: '' },\n  // { id: 3, Title: 'Salt', Year: 2006, Plot: '', genre: 'Action', isAvailable: false, imageDirectory: './assets/images/2006-salt-1.jpg', Runtime: '110', Genre: '', Director: '', Writer: '', Poster: '', imdbID: '' },\n  // { id: 4, Title: 'Valkyrie', Year: 2008, Plot: '', genre: 'Action', isAvailable: true, imageDirectory: './assets/images/2008-valkyrie-1.jpg', Runtime: '124', Genre: '', Director: '', Writer: '', Poster: '', imdbID: '' },\n  // { id: 5, Title: 'Jaws 2', Year: 1978, Plot: '', genre: 'Thriller', isAvailable: false, imageDirectory: './assets/images/1978-jaws_2.jpg', Runtime: '120', Genre: '', Director: '', Writer: '', Poster: '', imdbID: '' },\n  // { id: 6, Title: 'Paper Towns', Year: 2015, Plot: '', genre: 'Drama', isAvailable: true, imageDirectory: './assets/images/2015-paper_towns.jpg', Runtime: '120', Genre: '', Director: '', Writer: '', Poster: '', imdbID: '' },\n  // { id: 7, Title: 'Good Morning Vietnam', Year: 1987, Plot: '', genre: 'Action', isAvailable: false, imageDirectory: './assets/images/1987-good_morning_vietnam.jpg', Runtime: '120', Genre: '', Director: '', Writer: '', Poster: '', imdbID: '' },\n  // { id: 8, Title: 'Three Musketeers', Year: 2011, Plot: '', genre: 'Action', isAvailable: true, imageDirectory: './assets/images/2011-three_musketeers.jpg', Runtime: '180', Genre: '', Director: '', Writer: '', Poster: '', imdbID: '' }\n]\n\nexport const TORRENTS: MDBTorrent[] = [\n  //   {\n  //   id: 1,\n  //   name: 'Valkyrie.DVD-R.NTSC.2008',\n  //   size: 4681064562,\n  //   hash: 'hh9rPLQdJPYDq/dmDuTMogqQYDk='\n  // },\n  // {\n  //   id: 1,\n  //   name: 'Valkyrie.2008.Bluray.1080p.DTS-HD.x264-Grym',\n  //   size: 21702179889,\n  //   hash: '8KBwA9eFjEJgN6/RZSSJP80t91s='\n  // },\n  // {\n  //   id: 1,\n  //   name: 'Valkyrie.2008.BluRay.1080p.x264.AAC.5.1.-.Hon3y',\n  //   size: 2996573771,\n  //   hash: 'HHn7J1vN1Y8nGXJqVz0ZrgwWeJE='\n  // }, {\n  //   id: 1,\n  //   name: 'Valkyrie (2008) 1080p BrRip x264 - 1.70GB - YIFY',\n  //   size: 1827526513,\n  //   hash: 'lop06WdSY2yjNig+yeQrj1wm6jY='\n  // },\n]\n\n@Injectable()\nexport class StartTimeStamp {\n  private startTimeStamp: number\n  setStartTimeStamp(val: number): void {\n    this.startTimeStamp = val\n  }\n  getStartTimeStamp(): number {\n    return this.startTimeStamp\n  }\n}\n\n@Injectable()\nexport class DisplayedTorrents {\n  private myDisplayedTorrents: DisplayedTorrent[]\n  // add(val: DisplayedTorrent) {\n  //   val = new DisplayedTorrent()\n  //   this.myDisplayedTorrents.push(val)\n  // }\n  getDisplayedTorrents() {\n    return this.myDisplayedTorrents\n  }\n}\n\n@Injectable()\nexport class DisplayedTorrent {\n  private added?: string\n  private hash: string\n  private name: string\n  private size: number\n  constructor(added: string, hash: string, name?: string, size?: number) {\n    this.added = added\n    this.hash = hash\n    this.name = name\n    this.size = size\n  }\n  getAdded(): string {\n    return this.added\n  }\n  getHash(): string {\n    return this.hash\n  }\n  getName(): string {\n    return this.name\n  }\n  getSize(): number {\n    return this.size\n  }\n}\n\n\nexport let TMDB_SEARCH_RESULTS: ITmdbResultObject = {\n  page: 1,\n  total_results: 3810,\n  total_pages: 191,\n  results: [\n    {\n      popularity: 47.572,\n      vote_count: 13899,\n      video: false,\n      poster_path: '/hbhFnRzzg6ZDmm8YAmxBnQpQIPh.jpg',\n      id: 278,\n      adult: false,\n      backdrop_path: '/x7O7oJO7BeXWvqXpLa5YoJd8ZD5.jpg',\n      original_language: 'en',\n      original_title: 'The Shawshank Redemption',\n      genre_ids: [80, 18],\n      title: 'The Shawshank Redemption',\n      vote_average: 8.7,\n      overview:\n        'Framed in the 1940s for the double murder of his wife and her lover, upstanding banker Andy Dufresne begins a new life at the Shawshank prison, where he puts his accounting skills to work for an amoral warden. During his long stretch in prison, Dufresne comes to be admired by the other inmates -- including an older prisoner named Red -- for his integrity and unquenchable sense of hope.',\n      release_date: '1994-09-23'\n    },\n    {\n      popularity: 30.437,\n      vote_count: 16212,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 680,\n      adult: false,\n      backdrop_path: '/4cDFJr4HnXN5AdPw4AKrmLlMWdO.jpg',\n      original_language: 'en',\n      original_title: 'Pulp Fiction',\n      genre_ids: [80, 53],\n      title: 'Pulp Fiction',\n      vote_average: 8.4,\n      overview:\n        `A burger-loving hit man, his philosophical partner, a drug-addled gangster's moll and a washed-up boxer converge in this sprawling, comedic crime caper. Their adventures unfurl in three stories that ingeniously trip back and forth in time.`,\n      release_date: '1994-10-14'\n    },\n    {\n      popularity: 30.008,\n      vote_count: 10939,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 8587,\n      adult: false,\n      backdrop_path: '/kZ9CKeZeKMUtrjZ7RuArjVMTDF4.jpg',\n      original_language: 'en',\n      original_title: 'The Lion King',\n      genre_ids: [16, 18, 10751],\n      title: 'The Lion King',\n      vote_average: 8.2,\n      overview:\n        'A young lion cub named Simba can\\'t wait to be king. But his uncle craves the title for himself and will stop at nothing to get it.',\n      release_date: '1994-06-23'\n    },\n    {\n      popularity: 34.399,\n      id: 101,\n      video: false,\n      vote_count: 8176,\n      vote_average: 8.3,\n      title: 'Léon: The Professional',\n      release_date: '1994-11-18',\n      original_language: 'fr',\n      original_title: 'Léon',\n      genre_ids: [53, 80, 18],\n      backdrop_path: '/dXQ7HILRK1Tg33RT64JwbQI7Osh.jpg',\n      adult: false,\n      overview:\n        'Léon, the top hit man in New York, has earned a rep as an effective \"cleaner\". But when his next-door neighbors are wiped out by a loose-cannon DEA agent, he becomes the unwilling custodian of 12-year-old Mathilda. Before long, Mathilda\\'s thoughts turn to revenge, and she considers following in Léon\\'s footsteps.',\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      isAvailable: true\n    },\n    {\n      popularity: 31.962,\n      vote_count: 15752,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 13,\n      adult: false,\n      backdrop_path: '/wMgbnUVS9wbRGAdki8fqxKU1O0N.jpg',\n      original_language: 'en',\n      original_title: 'Forrest Gump',\n      genre_ids: [35, 18, 10749],\n      title: 'Forrest Gump',\n      vote_average: 8.4,\n      overview:\n        'A man with a low IQ has accomplished great things in his life and been present during significant historic events—in each case, far exceeding what anyone imagined he could do. But despite all he has achieved, his one true love eludes him.',\n      release_date: '1994-07-06'\n    },\n    {\n      popularity: 24.394,\n      vote_count: 5628,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 854,\n      adult: false,\n      backdrop_path: '/oYVf9gqxZduttG6HW2Qo4ZUxLWW.jpg',\n      original_language: 'en',\n      original_title: 'The Mask',\n      genre_ids: [35, 80, 14, 10749],\n      title: 'The Mask',\n      vote_average: 6.8,\n      overview:\n        'When timid bank clerk Stanley Ipkiss discovers a magical mask containing the spirit of the Norse god Loki, his entire life changes. While wearing the mask, Ipkiss becomes a supernatural playboy exuding charm and confidence which allows him to catch the eye of local nightclub singer Tina Carlyle. Unfortunately, under the mask\\'s influence, Ipkiss also robs a bank, which angers junior crime lord Dorian Tyrell, whose goons get blamed for the heist.',\n      release_date: '1994-07-29'\n    },\n    {\n      popularity: 26.233,\n      vote_count: 4409,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 408,\n      adult: false,\n      backdrop_path: '/c66otZnSdri67kR7ps92kRX849o.jpg',\n      original_language: 'en',\n      original_title: 'Snow White and the Seven Dwarfs',\n      genre_ids: [16, 14, 10751],\n      title: 'Snow White and the Seven Dwarfs',\n      vote_average: 7,\n      overview:\n        'A beautiful girl, Snow White, takes refuge in the forest in the house of seven dwarfs to hide from her stepmother, the wicked Queen. The Queen is jealous because she wants to be known as \"the fairest in the land,\" and Snow White\\'s beauty surpasses her own.',\n      release_date: '1937-12-21'\n    },\n    {\n      popularity: 25.24,\n      vote_count: 8547,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 424,\n      adult: false,\n      backdrop_path: '/cTNYRUTXkBgPH3wP3kmPUB5U6dA.jpg',\n      original_language: 'en',\n      original_title: 'Schindler\\'s List',\n      genre_ids: [18, 36, 10752],\n      title: 'Schindler\\'s List',\n      vote_average: 8.6,\n      overview:\n        'The true story of how businessman Oskar Schindler saved over a thousand Jewish lives from the Nazis while they worked as slaves in his factory during World War II.',\n      release_date: '1993-12-15'\n    },\n    {\n      popularity: 20.34,\n      vote_count: 7817,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 500,\n      adult: false,\n      backdrop_path: '/fupyzBwFAn1PoeCXhp54bYVM2ER.jpg',\n      original_language: 'en',\n      original_title: 'Reservoir Dogs',\n      genre_ids: [80, 53],\n      title: 'Reservoir Dogs',\n      vote_average: 8.2,\n      overview:\n        'A botched robbery indicates a police informant, and the pressure mounts in the aftermath at a warehouse. Crime begets violence as the survivors -- veteran Mr. White, newcomer Mr. Orange, psychopathic parolee Mr. Blonde, bickering weasel Mr. Pink and Nice Guy Eddie -- unravel.',\n      release_date: '1992-10-23'\n    },\n    {\n      popularity: 11.398,\n      vote_count: 1295,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 888,\n      adult: false,\n      backdrop_path: '/vbWvWqZJiEiffj8xag0owDExRVg.jpg',\n      original_language: 'en',\n      original_title: 'The Flintstones',\n      genre_ids: [35, 14, 10751],\n      title: 'The Flintstones',\n      vote_average: 5.2,\n      overview:\n        'Modern Stone Age family the Flintstones hit the big screen in this live-action version of the classic cartoon. Fred helps Barney adopt a child. Barney sees an opportunity to repay him when Slate Mining tests its employees to find a new executive. But no good deed goes unpunished.',\n      release_date: '1994-05-26'\n    },\n    {\n      popularity: 13.378,\n      id: 9739,\n      video: false,\n      vote_count: 1801,\n      vote_average: 6.5,\n      title: 'Demolition Man',\n      release_date: '1993-10-08',\n      original_language: 'en',\n      original_title: 'Demolition Man',\n      genre_ids: [80, 28, 878],\n      backdrop_path: '/2p5rA1NRoyyAFfzdHl1Ab1RN3qr.jpg',\n      adult: false,\n      overview:\n        'Simon Phoenix, a violent criminal cryogenically frozen in 1996, escapes during a parole hearing in 2032 in the utopia of San Angeles. Police are incapable of dealing with his violent ways and turn to his captor, who had also been cryogenically frozen after being wrongfully accused of killing 30 innocent people while apprehending Phoenix.',\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg'\n    },\n    {\n      popularity: 13.039,\n      vote_count: 2070,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 36955,\n      adult: false,\n      backdrop_path: '/o2agns0LEqyEUCByMT8ViIOio7r.jpg',\n      original_language: 'en',\n      original_title: 'True Lies',\n      genre_ids: [28, 53],\n      title: 'True Lies',\n      vote_average: 6.9,\n      overview:\n        'Harry Tasker is a secret agent for the United States Government. For years, he has kept his job from his wife, but is forced to reveal his identity and try to stop nuclear terrorists when he and his wife are kidnapped by them.',\n      release_date: '1994-07-15'\n    },\n    {\n      popularity: 16.688,\n      vote_count: 2909,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 10112,\n      adult: false,\n      backdrop_path: '/fojdVtSsZa7fXyJQ6w1Exw7GWum.jpg',\n      original_language: 'en',\n      original_title: 'The Aristocats',\n      genre_ids: [12, 16, 35, 10751],\n      title: 'The Aristocats',\n      vote_average: 7.3,\n      overview:\n        'When Madame Adelaide Bonfamille leaves her fortune to Duchess and her children—Bonfamille’s beloved family of cats—the butler plots to steal the money and kidnaps the legatees, leaving them out on a country road. All seems lost until the wily Thomas O’Malley Cat and his jazz-playing alley cats come to the aristocats’ rescue.',\n      release_date: '1970-12-24'\n    },\n    {\n      popularity: 20.126,\n      vote_count: 4866,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 620,\n      adult: false,\n      backdrop_path: '/qmDy6Rdom8d8UFj9GeAAtVIjTRT.jpg',\n      original_language: 'en',\n      original_title: 'Ghostbusters',\n      genre_ids: [35, 14],\n      title: 'Ghostbusters',\n      vote_average: 7.4,\n      overview:\n        'After losing their academic posts at a prestigious university, a team of parapsychologists goes into business as proton-pack-toting \"ghostbusters\" who exterminate ghouls, hobgoblins and supernatural pests of all stripes. An ad campaign pays off when a knockout cellist hires the squad to purge her swanky digs of demons that appear to be living in her refrigerator.',\n      release_date: '1984-06-08'\n    },\n    {\n      popularity: 15.25,\n      id: 2758,\n      video: false,\n      vote_count: 1312,\n      vote_average: 6.7,\n      title: 'Addams Family Values',\n      release_date: '1993-11-19',\n      original_language: 'en',\n      original_title: 'Addams Family Values',\n      genre_ids: [35, 10751, 14],\n      backdrop_path: '/i84FfYcljpH9FOO26PdvBWzLGRl.jpg',\n      adult: false,\n      overview:\n        'Siblings Wednesday and Pugsley Addams will stop at nothing to get rid of Pubert, the new baby boy adored by parents Gomez and Morticia. Things go from bad to worse when the new \"black widow\" nanny, Debbie Jellinsky, launches her plan to add Fester to her collection of dead husbands.',\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg'\n    },\n    {\n      popularity: 18.017,\n      vote_count: 3184,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 3170,\n      adult: false,\n      backdrop_path: '/zM2Rdsh4kiTEXPkkO9lWBzZpwAH.jpg',\n      original_language: 'en',\n      original_title: 'Bambi',\n      genre_ids: [16, 18, 10751],\n      title: 'Bambi',\n      vote_average: 6.9,\n      overview:\n        `Bambi's tale unfolds from season to season as the young prince of the forest learns about life, love, and friends.`,\n      release_date: '1942-08-21'\n    },\n    {\n      popularity: 13.155,\n      vote_count: 461,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 10438,\n      adult: false,\n      backdrop_path: '/1MaJH9m8TfmwLgS98kcjU4faiMg.jpg',\n      original_language: 'en',\n      original_title: 'Beethoven\\'s 2nd',\n      genre_ids: [35, 10751],\n      title: 'Beethoven\\'s 2nd',\n      vote_average: 5.2,\n      overview:\n        `Beethoven is back -- and this time, he has a whole brood with him now that he's met his canine match, Missy, and fathered a family. The only problem is that Missy's owner, Regina, wants to sell the puppies and tear the clan apart. It's up to Beethoven and the Newton kids to save the day and keep everyone together.`,\n      release_date: '1993-12-16'\n    },\n    {\n      popularity: 13.779,\n      id: 44251,\n      video: false,\n      vote_count: 281,\n      vote_average: 6.5,\n      title: 'Dragon Ball Z: Broly – Second Coming',\n      release_date: '1994-03-12',\n      original_language: 'ja',\n      original_title: 'ドラゴンボールＺ 危険なふたり！超戦士はねむれない',\n      genre_ids: [28, 16, 878],\n      backdrop_path: '/d0A7xd5Qnm6CCH25HXKHmcBDmmm.jpg',\n      adult: false,\n      overview:\n        'A Saiyan Space pod crash-lands on Earth out of which a wounded Saiyan crawls: Broly, the Legendary Super Saiyan. The wounded Broly shouts out in frustration and turns into normal form. The place soon freezes, trapping him in it and he falls into a coma.',\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg'\n    },\n    {\n      popularity: 14.604,\n      vote_count: 3268,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 1637,\n      adult: false,\n      backdrop_path: '/pGVpDc6MgLRtOYdxsA5fhj1SZki.jpg',\n      original_language: 'en',\n      original_title: 'Speed',\n      genre_ids: [28, 12, 80],\n      title: 'Speed',\n      vote_average: 6.9,\n      overview:\n        `Los Angeles SWAT cop Jack Traven is up against bomb expert Howard Payne, who's after major ransom money. First it's a rigged elevator in a very tall building. Then it's a rigged bus--if it slows, it will blow, bad enough any day, but a nightmare in LA traffic. And that's still not the end.`,\n      release_date: '1994-06-09'\n    },\n    {\n      popularity: 21.341,\n      vote_count: 4964,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 9479,\n      adult: false,\n      backdrop_path: '/16lk65YfrDFIr6evkWRjSeOOSws.jpg',\n      original_language: 'en',\n      original_title: 'The Nightmare Before Christmas',\n      genre_ids: [16, 14, 10751],\n      title: 'The Nightmare Before Christmas',\n      vote_average: 7.8,\n      overview:\n        `Tired of scaring humans every October 31 with the same old bag of tricks, Jack Skellington, the spindly king of Halloween Town, kidnaps Santa Claus and plans to deliver shrunken heads and other ghoulish gifts to children on Christmas morning. But as Christmas approaches, Jack's rag-doll girlfriend, Sally, tries to foil his misguided plans.`,\n      release_date: '1993-10-09'\n    }\n  ]\n}\nexport const TEST_TMDB_SINGLE_RESULT =\n{\n  popularity: 28.872, vote_count: 13772, video: false, poster_path: '\\/nk11pvocdb5zbFhX5oq5YiLPYMo.jpg', id: 14160, adult: false, backdrop_path: '\\/6fX7NF6IUJCTVssei7Shgl9J6LL.jpg', original_language: 'en', original_title: 'Up', genre_ids: [12, 16, 35, 10751], title: 'Up', vote_average: 7.9, overview: 'Carl Fredricksen spent his entire life dreaming of exploring the globe and experiencing life to its fullest. But at age 78, life seems to have passed him by, until a twist of fate (and a persistent 8-year old Wilderness Explorer named Russell) gives him a new lease on life.', release_date: '2009-05-28'\n}\nexport const TEST_TMDB_MOVIE_DETAILS = {\n  adult: false,\n  backdrop_path: '/wMgbnUVS9wbRGAdki8fqxKU1O0N.jpg',\n  belongs_to_collection: null,\n  budget: 55000000,\n  genres: [{\n    id: 35,\n    name: 'Comedy'\n  }, {\n    id: 18,\n    name: 'Drama'\n  }, {\n    id: 10749,\n    name: 'Romance'\n  }],\n  homepage: null,\n  id: 13,\n  imdb_id: 'tt0109830',\n  original_language: 'en',\n  original_title: 'Forrest Gump',\n  overview: 'A man with a low IQ has accomplished great things in his life and been present during significant historic events—in each case, far exceeding what anyone imagined he could do. But despite all he has achieved, his one true love eludes him.',\n  popularity: 23.858,\n  poster_path: '/yE5d3BUhE8hCnkMUJOo1QDoOGNz.jpg',\n  production_companies: [{\n    id: 4,\n    logo_path: '/fycMZt242LVjagMByZOLUGbCvv3.png',\n    name: 'Paramount',\n    origin_country: 'US'\n  }],\n  production_countries: [{\n    iso_3166_1: 'US',\n    name: 'United States of America'\n  }],\n  release_date: '1994-07-06',\n  revenue: 677945399,\n  runtime: 142,\n  spoken_languages: [{\n    iso_639_1: 'en',\n    name: 'English'\n  }],\n  status: 'Released',\n  tagline: `Life is like a box of chocolates...you never know what you're gonna get.`,\n  title: 'Forrest Gump',\n  video: false,\n  vote_average: 8.4,\n  vote_count: 15996\n}\n\n\nconst TEST_TMDB_MOVIE_DETAIL2 = {\n  adult: false,\n  backdrop_path: '/mMZRKb3NVo5ZeSPEIaNW9buLWQ0.jpg',\n  belongs_to_collection: null,\n  budget: 63000000,\n  genres: [\n    {\n      id: 18,\n      name: 'Drama'\n    }\n  ],\n  homepage: 'http://www.foxmovies.com/movies/fight-club',\n  id: 550,\n  imdb_id: 'tt0137523',\n  original_language: 'en',\n  original_title: 'Fight Club',\n  overview: 'A ticking-time-bomb insomniac and a slippery soap salesman channel primal male aggression into a shocking new form of therapy. Their concept catches on, with underground \\'fight clubs\\' forming in every town, until an eccentric gets in the way and ignites an out-of-control spiral toward oblivion.',\n  popularity: 36.556,\n  poster_path: '/adw6Lq9FiC9zjYEpOqfq03ituwp.jpg',\n  production_companies: [\n    {\n      id: 508,\n      logo_path: '/7PzJdsLGlR7oW4J0J5Xcd0pHGRg.png',\n      name: 'Regency Enterprises',\n      origin_country: 'US'\n    },\n    {\n      id: 711,\n      logo_path: '/tEiIH5QesdheJmDAqQwvtN60727.png',\n      name: 'Fox 2000 Pictures',\n      origin_country: 'US'\n    },\n    {\n      id: 20555,\n      logo_path: '/hD8yEGUBlHOcfHYbujp71vD8gZp.png',\n      name: 'Taurus Film',\n      origin_country: 'DE'\n    },\n    {\n      id: 54051,\n      logo_path: null,\n      name: 'Atman Entertainment',\n      origin_country: ''\n    },\n    {\n      id: 54052,\n      logo_path: null,\n      name: 'Knickerbocker Films',\n      origin_country: 'US'\n    },\n    {\n      id: 25,\n      logo_path: '/qZCc1lty5FzX30aOCVRBLzaVmcp.png',\n      name: '20th Century Fox',\n      origin_country: 'US'\n    },\n    {\n      id: 4700,\n      logo_path: '/A32wmjrs9Psf4zw0uaixF0GXfxq.png',\n      name: 'The Linson Company',\n      origin_country: ''\n    }\n  ],\n  production_countries: [\n    {\n      iso_3166_1: 'DE',\n      name: 'Germany'\n    },\n    {\n      iso_3166_1: 'US',\n      name: 'United States of America'\n    }],\n  release_date: '1999-10-15',\n  revenue: 100853753,\n  runtime: 139,\n  spoken_languages: [\n    {\n      iso_639_1: 'en',\n      name: 'English'\n    }\n  ],\n  status: 'Released',\n  tagline: 'Mischief. Mayhem. Soap.',\n  title: 'Fight Club',\n  video: false,\n  vote_average: 8.4,\n  vote_count: 17355\n}\n\n\nexport const YTS_TORRENT_SINGLE_RESULT: IYTSSingleQuery = {\n  \"status\": \"ok\",\n  \"status_message\": \"Query was successful\",\n  \"data\": {\n    \"movie_count\": 1,\n    \"limit\": 20,\n    \"page_number\": 1,\n    \"movies\": [\n      {\n        \"id\": 3897,\n        \"url\": \"https:\\/\\/yts.mx\\/movies\\/titanic-1997\",\n        \"imdb_code\": \"tt0120338\",\n        \"title\": \"Titanic\",\n        \"title_english\": \"Titanic\",\n        \"title_long\": \"Titanic (1997)\",\n        \"slug\": \"titanic-1997\",\n        \"year\": 1997,\n        \"rating\": 7.8,\n        \"runtime\": 194,\n        \"genres\": [\n          \"Action\",\n          \"Drama\",\n          \"Romance\"\n        ],\n        \"summary\": \"84 years later, a 100 year-old woman named Rose DeWitt Bukater tells the story to her granddaughter Lizzy Calvert, Brock Lovett, Lewis Bodine, Bobby Buell and Anatoly Mikailavich on the Keldysh about her life set in April 10th 1912, on a ship called Titanic when young Rose boards the departing ship with the upper-class passengers and her mother, Ruth DeWitt Bukater, and her fianc\\u00e9, Caledon Hockley. Meanwhile, a drifter and artist named Jack Dawson and his best friend Fabrizio De Rossi win third-class tickets to the ship in a game. And she explains the whole story from departure until the death of Titanic on its first and last voyage April 15th, 1912 at 2:20 in the morning.\",\n        \"description_full\": \"84 years later, a 100 year-old woman named Rose DeWitt Bukater tells the story to her granddaughter Lizzy Calvert, Brock Lovett, Lewis Bodine, Bobby Buell and Anatoly Mikailavich on the Keldysh about her life set in April 10th 1912, on a ship called Titanic when young Rose boards the departing ship with the upper-class passengers and her mother, Ruth DeWitt Bukater, and her fianc\\u00e9, Caledon Hockley. Meanwhile, a drifter and artist named Jack Dawson and his best friend Fabrizio De Rossi win third-class tickets to the ship in a game. And she explains the whole story from departure until the death of Titanic on its first and last voyage April 15th, 1912 at 2:20 in the morning.\",\n        \"synopsis\": \"84 years later, a 100 year-old woman named Rose DeWitt Bukater tells the story to her granddaughter Lizzy Calvert, Brock Lovett, Lewis Bodine, Bobby Buell and Anatoly Mikailavich on the Keldysh about her life set in April 10th 1912, on a ship called Titanic when young Rose boards the departing ship with the upper-class passengers and her mother, Ruth DeWitt Bukater, and her fianc\\u00e9, Caledon Hockley. Meanwhile, a drifter and artist named Jack Dawson and his best friend Fabrizio De Rossi win third-class tickets to the ship in a game. And she explains the whole story from departure until the death of Titanic on its first and last voyage April 15th, 1912 at 2:20 in the morning.\",\n        \"yt_trailer_code\": \"CHekzSiZjrY\",\n        \"language\": \"English\",\n        \"mpa_rating\": \"PG-13\",\n        \"background_image\": \"https:\\/\\/yts.mx\\/assets\\/images\\/movies\\/Titanic_1997\\/background.jpg\",\n        \"background_image_original\": \"https:\\/\\/yts.mx\\/assets\\/images\\/movies\\/Titanic_1997\\/background.jpg\",\n        \"small_cover_image\": \"https:\\/\\/yts.mx\\/assets\\/images\\/movies\\/Titanic_1997\\/small-cover.jpg\",\n        \"medium_cover_image\": \"https:\\/\\/yts.mx\\/assets\\/images\\/movies\\/Titanic_1997\\/medium-cover.jpg\",\n        \"large_cover_image\": \"https:\\/\\/yts.mx\\/assets\\/images\\/movies\\/Titanic_1997\\/large-cover.jpg\",\n        \"state\": \"ok\",\n        \"torrents\": [\n          {\n            \"url\": \"https:\\/\\/yts.mx\\/torrent\\/download\\/237457BA8029DEF449A0D3EF5B7E508780AC68DB\",\n            \"hash\": \"237457BA8029DEF449A0D3EF5B7E508780AC68DB\",\n            \"quality\": \"3D\",\n            \"type\": \"bluray\",\n            \"seeds\": 75,\n            \"peers\": 13,\n            \"size\": \"2.80 GB\",\n            \"size_bytes\": 3006477107,\n            \"date_uploaded\": \"2015-11-02 04:25:37\",\n            \"date_uploaded_unix\": 1446434737\n          },\n          {\n            \"url\": \"https:\\/\\/yts.mx\\/torrent\\/download\\/A86B4ADB83506BB12CEABAC2F42AE480BA44ECFA\",\n            \"hash\": \"A86B4ADB83506BB12CEABAC2F42AE480BA44ECFA\",\n            \"quality\": \"720p\",\n            \"type\": \"bluray\",\n            \"seeds\": 326,\n            \"peers\": 52,\n            \"size\": \"1.4 GB\",\n            \"size_bytes\": 1503238554,\n            \"date_uploaded\": \"2017-08-11 19:25:11\",\n            \"date_uploaded_unix\": 1502472311\n          },\n          {\n            \"url\": \"https:\\/\\/yts.mx\\/torrent\\/download\\/98CD5D90252265F1C59AB47330FF4C39F48CCC78\",\n            \"hash\": \"98CD5D90252265F1C59AB47330FF4C39F48CCC78\",\n            \"quality\": \"1080p\",\n            \"type\": \"bluray\",\n            \"seeds\": 408,\n            \"peers\": 63,\n            \"size\": \"2.97 GB\",\n            \"size_bytes\": 3189013217,\n            \"date_uploaded\": \"2017-08-12 02:14:57\",\n            \"date_uploaded_unix\": 1502496897\n          }\n        ],\n        \"date_uploaded\": \"2017-08-11 19:25:11\",\n        \"date_uploaded_unix\": 1502472311\n      }\n    ]\n  },\n  \"@meta\": {\n    \"server_time\": 1598788840,\n    \"server_timezone\": \"CET\",\n    \"api_version\": 2,\n    \"execution_time\": \"0 ms\"\n  }\n}\n\nexport const MOCK_USER_DATA_LIST: IProfileData[] = [\n  {\n    tmdbId: 597, //titanic\n    isFavorite: true,\n    watched: {\n      percentage: 100\n    }\n  },\n  {\n    tmdbId: 857, // svpr\n    isFavorite: true,\n    watched: {\n      percentage: 100\n    }\n  },\n  {\n    tmdbId: 24428, // avengers\n    isBookmark: true,\n  },\n  {\n    tmdbId: 579, // jaws\n    isBookmark: true\n  },\n  {\n    tmdbId: 769, // goodfellas\n    isBookmark: true,\n    watched: {\n      percentage: 51\n    }\n  },\n  {\n    tmdbId: 775996, // goodfellas\n    watched: {\n      percentage: 75\n    },\n    review: {\n      content: 'confusing',\n      rating: 3,\n      id: 213\n    }\n  },\n]\n",
            "type": "injectable"
        },
        {
            "name": "FavoriteService",
            "id": "injectable-FavoriteService-f8e70be7dbef8dffdec60b4cc242e7f35e2b44e445a35a494c1f03ccef2de27e18f9ecbab3892b5a9b54420132e8f732733273f3c8c14b386f56dd643677de83",
            "file": "src/app/services/favorite.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getFavoritePaginated",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets paginated favorite.\n",
                    "description": "<p>Gets paginated favorite.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeFavorite",
                    "args": [
                        {
                            "name": "type",
                            "type": "\"id\" | \"tmdbId\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRemoves watched.\n",
                    "description": "<p>Removes watched.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1562,
                                "end": 1566,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 151,
                                "escapedText": "type"
                            },
                            "type": "\"id\" | \"tmdbId\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1556,
                                "end": 1561,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 1579,
                                "end": 1581,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "id"
                            },
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1573,
                                "end": 1578,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>watched id/_id/tmdbId to remove.</p>\n"
                        }
                    ]
                },
                {
                    "name": "saveFavorite",
                    "args": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleFavorite",
                    "args": [
                        {
                            "name": "movie",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "movie",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { FirebaseService, CollectionName, FieldName } from './firebase.service';\nimport { environment } from '@environments/environment';\nimport { IpcService, IUserDataPaginated } from './ipc.service';\nimport { MdbApiService } from './mdb-api.service';\nimport GeneralUtil from '@utils/general.util';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FavoriteService {\n\n  constructor(\n    private ipcService: IpcService,\n    private mdbApiService: MdbApiService) { }\n\n  async toggleFavorite(movie) {\n    let fDocId\n    if (!movie.favorite || !movie.favorite.id) {\n      const rDate = movie.release_date ? movie.release_date : movie.releaseDate\n      const releaseYear = parseInt(GeneralUtil.getYear(rDate), 10)\n      const data = {\n        title: movie.title,\n        tmdbId: movie.id ? movie.id : movie.tmdbId,\n        imdbId: movie.imdbId ? movie.imdbId : '',\n        year: releaseYear ? releaseYear : 0,\n      }\n      fDocId = await this.saveFavorite(data)\n      movie.favorite = fDocId\n    } else {\n      const type = movie.favorite && movie.favorite.id ? 'id' : 'tmdbId'\n      const id = type === 'id' ? movie.favorite.id : movie.tmdbId\n      fDocId = await this.removeFavorite(type, id)\n      movie.favorite.id = ''\n    }\n    return fDocId;\n  }\n\n  saveFavorite(data: any): Promise<any> {\n    if (environment.runConfig.springMode) {\n      return this.mdbApiService.saveFavorite(data).toPromise()\n    }\n    else {\n      return this.ipcService.saveFavorite(data)\n    }\n  }\n\n  /**\n   * Removes watched.\n   * @param type\n   * @param id watched id/_id/tmdbId to remove.\n   */\n  removeFavorite(type: 'id' | 'tmdbId', id: string | number) {\n    if (environment.runConfig.springMode) {\n      return this.mdbApiService.deleteFavorite(id).toPromise()\n    }\n    else {\n      return this.ipcService.removeWatched(type, id)\n    }\n  }\n\n\n  /**\n   * Gets paginated favorite.\n   * @param lastVal the last value to start with.\n   */\n  getFavoritePaginated(page: number): Promise<any> {\n    console.log('getting multiplewatched page...', page);\n\n    if (environment.runConfig.firebaseMode) {\n    } else {\n      return this.ipcService.getMultiplePaginatedFirst(CollectionName.Watched, FieldName.TmdbId, 20)\n    }\n    return null\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "ipcService",
                        "type": "IpcService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "mdbApiService",
                        "type": "MdbApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "ipcService",
                        "type": "IpcService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mdbApiService",
                        "type": "MdbApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "FirebaseService",
            "id": "injectable-FirebaseService-f1264c0be8b52549bc2714b6c839883a2863b33eef274f268d169f6e723f52e422665ecd243554a453777a48d3adf0a906d3d2ade094b9d75e9652deec484602",
            "file": "src/app/services/firebase.service.ts",
            "properties": [
                {
                    "name": "batch",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "BOOKMARK",
                    "defaultValue": "'BOOKMARK'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "bookmarkDeleteList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "bookmarkInsertList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "bookmarkList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "bookmarkUpdateList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "db",
                    "defaultValue": "this.angularFirestore.firestore",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "procSync",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methods": [
                {
                    "name": "countAll",
                    "args": [
                        {
                            "name": "collectionName",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<number>",
                    "typeParameters": [],
                    "line": 296,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "collectionName",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteFromFirestore",
                    "args": [
                        {
                            "name": "collectionName",
                            "type": "CollectionName",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "docId",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 159,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDeletes a value from firestore\n",
                    "description": "<p>Deletes a value from firestore</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5419,
                                "end": 5433,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "collectionName"
                            },
                            "type": "CollectionName",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5413,
                                "end": 5418,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>name of collection/column</p>\n"
                        },
                        {
                            "name": {
                                "pos": 5472,
                                "end": 5477,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "docId"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5466,
                                "end": 5471,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>doc id to remote</p>\n"
                        }
                    ]
                },
                {
                    "name": "deleteFromFirestoreByTmdbId",
                    "args": [
                        {
                            "name": "collectionName",
                            "type": "CollectionName",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "tmdbId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 176,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n!NOT WORKING RIGHT NOW\nDeletes a value from firestore\n",
                    "description": "<p>!NOT WORKING RIGHT NOW\nDeletes a value from firestore</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5935,
                                "end": 5949,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "collectionName"
                            },
                            "type": "CollectionName",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5929,
                                "end": 5934,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>name of collection/column</p>\n"
                        },
                        {
                            "name": {
                                "pos": 5988,
                                "end": 5994,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "tmdbId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5982,
                                "end": 5987,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>tmdb id to remote</p>\n"
                        }
                    ]
                },
                {
                    "name": "deleteItemsFromFirestore",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 207,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getEmpty",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 282,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getFromFirestore",
                    "args": [
                        {
                            "name": "collectionName",
                            "type": "CollectionName",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fieldName",
                            "type": "FieldName",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "operator",
                            "type": "FirebaseOperator",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets item from firestore.\n",
                    "description": "<p>Gets item from firestore.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "collectionName",
                            "type": "CollectionName",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fieldName",
                            "type": "FieldName",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": {
                                "pos": 2207,
                                "end": 2215,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "operator"
                            },
                            "type": "FirebaseOperator",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2201,
                                "end": 2206,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>firebase operator</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2246,
                                "end": 2251,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2240,
                                "end": 2245,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>value to compare</p>\n"
                        }
                    ]
                },
                {
                    "name": "getFromFirestoreMultiple",
                    "args": [
                        {
                            "name": "collectionName",
                            "type": "CollectionName",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fieldName",
                            "type": "FieldName",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "list",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<Array<QueryDocumentSnapshot<any>>>",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "collectionName",
                            "type": "CollectionName",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fieldName",
                            "type": "FieldName",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "list",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFromFirestoreMultiplePaginated",
                    "args": [
                        {
                            "name": "collectionName",
                            "type": "CollectionName",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "order",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "lastVal",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIN PROGRESS.\n",
                    "description": "<p>IN PROGRESS.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3816,
                                "end": 3830,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "collectionName"
                            },
                            "type": "CollectionName",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3810,
                                "end": 3815,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>name of the collection</p>\n"
                        },
                        {
                            "name": {
                                "pos": 3866,
                                "end": 3871,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "order"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3860,
                                "end": 3865,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>order</p>\n"
                        },
                        {
                            "name": {
                                "pos": 3890,
                                "end": 3895,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "limit"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 3884,
                                "end": 3889,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the limit</p>\n"
                        },
                        {
                            "name": {
                                "pos": 3918,
                                "end": 3925,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "lastVal"
                            },
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 3912,
                                "end": 3917,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>last value of previous page</p>\n"
                        }
                    ]
                },
                {
                    "name": "getFromFirestoreMultiplePaginatedFirst",
                    "args": [
                        {
                            "name": "collectionName",
                            "type": "CollectionName",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "order",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIN PROGRESS.\n",
                    "description": "<p>IN PROGRESS.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4533,
                                "end": 4547,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "collectionName"
                            },
                            "type": "CollectionName",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4527,
                                "end": 4532,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>name of the collection</p>\n"
                        },
                        {
                            "name": {
                                "pos": 4583,
                                "end": 4588,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "order"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4577,
                                "end": 4582,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>order</p>\n"
                        },
                        {
                            "name": {
                                "pos": 4607,
                                "end": 4612,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "limit"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 4601,
                                "end": 4606,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the limit</p>\n"
                        }
                    ]
                },
                {
                    "name": "getMovieUserData",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUser",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 304,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getUserDataMultiple",
                    "args": [
                        {
                            "name": "idList",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "idList",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "insertIntoFirestore",
                    "args": [
                        {
                            "name": "collection",
                            "type": "CollectionName",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInserts data into firestore.\n",
                    "description": "<p>Inserts data into firestore.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5012,
                                "end": 5022,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "collection"
                            },
                            "type": "CollectionName",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5006,
                                "end": 5011,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>name of the collection</p>\n"
                        },
                        {
                            "name": {
                                "pos": 5058,
                                "end": 5062,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "data"
                            },
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5052,
                                "end": 5057,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>data to insert/add</p>\n"
                        }
                    ]
                },
                {
                    "name": "insertIntoFirestoreMulti",
                    "args": [
                        {
                            "name": "collectionName",
                            "type": "CollectionName",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "object[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 192,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInserts data into firestore.\n",
                    "description": "<p>Inserts data into firestore.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6448,
                                "end": 6462,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "collectionName"
                            },
                            "type": "CollectionName",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6442,
                                "end": 6447,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>name of the collection</p>\n"
                        },
                        {
                            "name": {
                                "pos": 6498,
                                "end": 6502,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "data"
                            },
                            "type": "object[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6492,
                                "end": 6497,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>data to insert/add</p>\n"
                        }
                    ]
                },
                {
                    "name": "insertItemsToFirestore",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 201,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSync",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "signIn",
                    "args": [
                        {
                            "name": "emailUsername",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 220,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "emailUsername",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "signInWithGoogle",
                    "args": [
                        {
                            "name": "provider",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 240,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "provider",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "signOut",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 264,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "signUp",
                    "args": [
                        {
                            "name": "emailUsername",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 254,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "emailUsername",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "synchronizeBookmarks",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSyncs bookmarks to and from cloud then executing batch commit.\n",
                    "description": "<p>Syncs bookmarks to and from cloud then executing batch commit.</p>\n"
                },
                {
                    "name": "uploadToStorage",
                    "args": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 314,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { AngularFireAuth } from '@angular/fire/auth'\nimport { AngularFireModule } from '@angular/fire/'\nimport { AngularFirestore, } from '@angular/fire/firestore'\nimport { QueryDocumentSnapshot } from '@angular/fire/firestore/interfaces';\nimport * as firebase from 'firebase';\nimport { IpcService, BookmarkChanges } from './ipc.service';\nimport { RemoveUser } from '../app.actions';\nimport { combineLatest } from 'rxjs';\n@Injectable({\n  providedIn: 'root'\n})\nexport class FirebaseService {\n\n  BOOKMARK = 'BOOKMARK'\n  bookmarkDeleteList = []\n  bookmarkInsertList = []\n  bookmarkUpdateList = []\n  bookmarkList = []\n  procSync = false\n  db = this.angularFirestore.firestore\n  batch\n\n  constructor(\n    private angularFirestore: AngularFirestore,\n    private ipcService: IpcService,\n    private auth: AngularFireAuth,\n    private afm: AngularFireModule,\n  ) { this.db = this.angularFirestore.firestore }\n\n  onSync() {\n\n  }\n\n  /**\n   * Syncs bookmarks to and from cloud then executing batch commit.\n   */\n  synchronizeBookmarks() {\n    // this.ipcService.call(this.ipcService.IPCCommand.GetBookmarkChanges)\n    this.batch = this.db.batch()\n    this.ipcService.bookmarkChanges.subscribe(e => {\n      this.bookmarkInsertList = e.filter((v) => v.change === BookmarkChanges.INSERT)\n      this.bookmarkDeleteList = e.filter((v) => v.change === BookmarkChanges.DELETE)\n      this.bookmarkUpdateList = e.filter((v) => v.change === BookmarkChanges.UPDATE)\n      this.batch = this.db.batch()\n      this.insertItemsToFirestore()\n      this.deleteItemsFromFirestore()\n      this.batch.commit()\n    })\n  }\n\n  getMovieUserData(id: number) {\n    const bookmarkQuery = this.getFromFirestore(CollectionName.Bookmark, FieldName.TmdbId, FirebaseOperator.Equal, id)\n    const watchedQuery = this.getFromFirestore(CollectionName.Watched, FieldName.TmdbId, FirebaseOperator.Equal, id)\n    return new Promise<any>((resolve, reject) => {\n      combineLatest([bookmarkQuery, watchedQuery]).toPromise().then(([val, val2]) => { resolve([val, val2]) })\n    })\n  }\n\n  /**\n   * Gets item from firestore.\n   * @param collection name of collection\n   * @param columnName name of column\n   * @param operator firebase operator\n   * @param value value to compare\n   */\n  getFromFirestore(collectionName: CollectionName, fieldName: FieldName, operator: FirebaseOperator, value: any) {\n    return new Promise(resolve => {\n      this.db.collection(collectionName).where(fieldName, operator, value).get().then((snapshot) => {\n        console.log('SNAPSHOT: ', snapshot);\n        if (!snapshot.empty) {\n          const objectToReturn = snapshot.docs[0].data()\n          objectToReturn['id'] = snapshot.docs[0].id\n          resolve(objectToReturn)\n        } else {\n          resolve(null)\n        }\n      }).catch(err => {\n        console.log('Error getting document', err);\n      });\n    })\n  }\n\n  getUserDataMultiple(idList: any[]): Promise<any> {\n    const bookmarkQuery = this.getFromFirestoreMultiple(CollectionName.Bookmark, FieldName.TmdbId, idList)\n    const watchedQuery = this.getFromFirestoreMultiple(CollectionName.Watched, FieldName.TmdbId, idList)\n    return new Promise<any>((resolve, reject) => {\n      combineLatest([bookmarkQuery, watchedQuery]).toPromise().then((val) => { resolve({ isFirebaseData: true, data: val }) })\n    })\n  }\n\n  getFromFirestoreMultiple(collectionName: CollectionName, fieldName: FieldName, list: any[]): Promise<Array<QueryDocumentSnapshot<any>>> {\n    return new Promise((resolve, reject) => {\n      this.db.collection(collectionName).where(fieldName, FirebaseOperator.In, list).get().then((snapshot: firebase.firestore.QuerySnapshot) => {\n        resolve(snapshot.docs)\n      }).catch(err => {\n        reject(err)\n      })\n    })\n  }\n\n  /**\n   * IN PROGRESS.\n   * @param collectionName name of the collection\n   * @param order order\n   * @param limit the limit\n   * @param lastVal last value of previous page\n   */\n  getFromFirestoreMultiplePaginated(collectionName: CollectionName, order: string, limit?: number, lastVal?: string | number) {\n    const defaultLimit = 20\n\n    return new Promise(resolve => {\n      lastVal = lastVal ? lastVal : 0\n      // this.db.collection(collectionName).startAfter(lastDocId).orderBy(order, 'asc').limit(defaultLimit).get().then(snapshot => {\n      this.db.collection(collectionName).orderBy(order).startAfter(lastVal).limit(defaultLimit).get().then(snapshot => {\n        resolve(snapshot.docs)\n      })\n    })\n  }\n\n  /**\n   * IN PROGRESS.\n   * @param collectionName name of the collection\n   * @param order order\n   * @param limit the limit\n   */\n  getFromFirestoreMultiplePaginatedFirst(collectionName: CollectionName, order: string, limit?: number) {\n    const defaultLimit = 20\n    return new Promise(resolve => {\n      this.db.collection(collectionName).orderBy(order, 'asc').limit(defaultLimit).get().then(snapshot => {\n        resolve(snapshot.docs)\n      })\n    })\n\n  }\n\n  /**\n   * Inserts data into firestore.\n   * @param collection name of the collection\n   * @param data data to insert/add\n   */\n  insertIntoFirestore(collection: CollectionName, data: object) {\n    return new Promise(resolve => {\n      this.db.collection(collection).add(data).then(e => {\n        if (e.id) {\n          resolve(e.id)\n        } else {\n          resolve(null)\n        }\n      })\n    })\n  }\n\n  /**\n   * Deletes a value from firestore\n   * @param collectionName name of collection/column\n   * @param docId doc id to remote\n   */\n  deleteFromFirestore(collectionName: CollectionName, docId: any) {\n    return new Promise(resolve => {\n      this.db.collection(collectionName).doc(docId).delete().then((e) => {\n        console.error('DELETE DOC: ', e);\n        resolve(null)\n      }).catch((error) => {\n        console.error('Error removing document: ', error);\n      });\n    })\n  }\n\n  /**\n   * !NOT WORKING RIGHT NOW\n   * Deletes a value from firestore\n   * @param collectionName name of collection/column\n   * @param tmdbId tmdb id to remote\n   */\n  deleteFromFirestoreByTmdbId(collectionName: CollectionName, tmdbId: number) {\n    return new Promise(resolve => {\n      // this.db.collection(collectionName).doc(docId).delete().then((e) => {\n      //   console.error('DELETE DOC: ', e);\n      resolve(null)\n      // }).catch((error) => {\n      //   console.error('Error removing document: ', error);\n      // });\n    })\n  }\n\n  /**\n   * Inserts data into firestore.\n   * @param collectionName name of the collection\n   * @param data data to insert/add\n   */\n  insertIntoFirestoreMulti(collectionName: CollectionName, data: object[]) {\n    const myBatch = this.db.batch()\n    data.forEach(element => {\n      const bookmarkRef = this.db.collection(collectionName).doc();\n      // myBatch.set(bookmarkRef, element)\n    })\n    // myBatch.commit()\n  }\n\n  insertItemsToFirestore() {\n    this.bookmarkInsertList.forEach(val => {\n      this.db.collection('data').doc().set(val).then().catch()\n    })\n  }\n\n  deleteItemsFromFirestore() {\n    const val = this.bookmarkDeleteList\n    val.forEach(element => {\n      const removeBookmarkRef = this.db.collection('bookmark').where(FieldName.TmdbId, FirebaseOperator.Equal, element.tmdbId).get().then(snapshot => {\n        snapshot.forEach(e => {\n          const ref = this.db.collection('bookmark').doc(e.id)\n          this.batch.delete(ref);\n        })\n      });\n      this.batch.commit()\n    })\n  }\n\n  signIn(emailUsername: string, password: string) {\n    const auth = this.auth.auth.signInWithEmailAndPassword(emailUsername, password).then((e) => {\n\n      console.log(e.additionalUserInfo);\n      console.log(e.credential);\n      console.log(e.operationType);\n      console.log(e.user);\n\n    }).catch((e) => {\n      {\n        if (e.code === 'auth/user-not-found') {\n          // need to login\n        } else if (e.code === 'auth/wrong-password') {\n\n        }\n        console.log('in catch', e);\n      }\n    })\n  }\n\n  signInWithGoogle(provider) {\n    this.auth.auth.signInWithPopup(provider).then((e) => {\n      console.log(e)\n      localStorage.setItem('user', JSON.stringify(e.user))\n      localStorage.setItem('uid', e.user.uid)\n      localStorage.setItem('displayName', e.user.displayName)\n      localStorage.setItem('email', e.user.email)\n    }).catch((e) => {\n      {\n        console.log('in catch', e);\n      }\n    })\n  }\n\n  signUp(emailUsername, password) {\n    return new Promise((resolve, reject) => {\n      this.auth.auth.createUserWithEmailAndPassword(emailUsername, password).then((e) => {\n        resolve(e)\n      }).catch((e) => {\n        reject(e.message)\n      })\n    })\n  }\n\n  signOut() {\n    // return new Promise(resolve => {\n    // this.angularFirestore.\n    // this.afm().\n    this.auth.auth.signOut().then(e => {\n      console.log('SIGNOUT SUCCESS ', e);\n      localStorage.removeItem('user')\n      localStorage.removeItem('uid')\n      localStorage.removeItem('displayName')\n      localStorage.removeItem('email')\n      // this.store.dispatch(new RemoveUser(e))\n      // resolve(e)\n    }).catch(e => {\n      console.log('SIGNOUT CATCH ', e);\n    })\n    // })\n  }\n\n  getEmpty() {\n    this.db.collection('watched').get().then(snapshot => {\n      console.log(' getEmpty():', snapshot.docs);\n      const myBatch = this.db.batch()\n      snapshot.docs.forEach(element => {\n        const bookmarkRef = element.ref\n        const myData = element.data()\n        myData.percentage = 100\n        myBatch.set(bookmarkRef, myData)\n      })\n      myBatch.commit()\n    })\n  }\n\n  countAll(collectionName): Promise<number> {\n    return new Promise((resolve, reject) => {\n      this.db.collection(collectionName).where('tmdbId', FirebaseOperator.GreaterThanEqual, 0).get().then(snapshot => {\n        resolve(snapshot.size)\n      })\n    })\n  }\n\n  getUser(): Promise<any> {\n    return new Promise(resolve => {\n      this.auth.user.subscribe(e => {\n        console.log('the user', e);\n        console.log(e.toJSON())\n        resolve(e)\n      })\n    })\n  }\n\n  uploadToStorage(data) {\n    console.log(data)\n    const storageRef = firebase.storage().ref()\n    storageRef.put(data).then(e => {\n      console.log(e)\n    }).catch(err => {\n      console.log('error', err)\n    })\n  }\n}\n\nexport enum FirebaseOperator {\n  Equal = '==',\n  LessThan = '<',\n  LessThanEqual = '<=',\n  GreaterThan = '>',\n  GreaterThanEqual = '>=',\n  ArrayContains = 'array-contains',\n  In = 'in',\n  ArrayContainsAny = 'array-contains-any'\n  // <, <=, ==, >, >=, array - contains, in, or array - contains - any\n}\n\nexport const FirebaseListMax = 10\n\nexport enum CollectionName {\n  Bookmark = 'bookmark',\n  UserName = '',\n  Watched = 'watched',\n  User = 'user',\n  Config = 'config',\n  Video = 'video',\n  Library = 'library',\n  Favorite = 'favorite'\n}\n\nexport enum FieldName {\n  Bookmark = 'bookmark',\n  Username = 'username',\n  EmailAddress = 'emailAddress',\n  TmdbId = 'tmdbId'\n}\n\nexport interface IBookmark {\n  tmdbId: number,\n  imdbId: string,\n  userId: string,\n  createTs?: Date,\n  updateTs?: Date,\n  change: 'add' | 'delete' | 'update',\n}\nexport interface FirebaseData {\n  data(): void\n  id: string\n  [x: string]: any\n}\n\n/**\n * CHANGES FROM CURRENT MACHINE:\n * 1 bookmarksOrig.db\n * 2 bookmarksTemp.db\n * 3 bookmarksChanges.db\n * copy 1 and make 2\n * all changes apply to 2\n * during sync, create 3, scan diff between 1 and 2 then apply to 3\n * TODO: CHANGES FROM UPSTREAM\n */\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "angularFirestore",
                        "type": "AngularFirestore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ipcService",
                        "type": "IpcService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "auth",
                        "type": "AngularFireAuth",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "afm",
                        "type": "AngularFireModule",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "angularFirestore",
                        "type": "AngularFirestore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ipcService",
                        "type": "IpcService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "auth",
                        "type": "AngularFireAuth",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "afm",
                        "type": "AngularFireModule",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "IpcService",
            "id": "injectable-IpcService-88e397b48570501d2155099bb31f9322acc23bd18595d1aca93c37f8404b5193d4990a928e2ef0f2759f3078524d816543be05c53659fcf0f24800e145c77598",
            "file": "src/app/services/ipc.service.ts",
            "properties": [
                {
                    "name": "bookmarkChanges",
                    "defaultValue": "new BehaviorSubject<IBookmarkChanges[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "IPCChannel",
                    "defaultValue": "IPCMainChannel['default']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 343
                },
                {
                    "name": "IPCCommand",
                    "defaultValue": "IPCRendererChannel['default']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 342
                },
                {
                    "name": "ipcRenderer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "libraryMovie",
                    "defaultValue": "new BehaviorSubject<string[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "libraryMovies",
                    "defaultValue": "new BehaviorSubject<string[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "movieIdentified",
                    "defaultValue": "new BehaviorSubject<any>({ id: 0 })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "preferences",
                    "defaultValue": "new BehaviorSubject<any>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "searchList",
                    "defaultValue": "new BehaviorSubject<any>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "statsForNerds",
                    "defaultValue": "new BehaviorSubject<any>({})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "statsForNerdsSubscribable",
                    "defaultValue": "this.statsForNerds.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "streamLink",
                    "defaultValue": "new BehaviorSubject<any>('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "torrentVideo",
                    "defaultValue": "new BehaviorSubject<string[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "methods": [
                {
                    "name": "changeSubtitle",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 299,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "exitApp",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 310,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getBookmark",
                    "args": [
                        {
                            "name": "data",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBookmarkInList",
                    "args": [
                        {
                            "name": "idList",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 154,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "idList",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFiles",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ]
                },
                {
                    "name": "getMovieFromLibrary",
                    "args": [
                        {
                            "name": "arg",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<IRawLibrary>",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIpc renderer that sends command to main renderer to get specified movie from library db.\nReplies offline library object(s).\n",
                    "description": "<p>Ipc renderer that sends command to main renderer to get specified movie from library db.\nReplies offline library object(s).</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4665,
                                "end": 4668,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "arg"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4659,
                                "end": 4664,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>imdb id or movie title and release year or tmdb id</p>\n"
                        }
                    ]
                },
                {
                    "name": "getMoviesFromLibraryInList",
                    "args": [
                        {
                            "name": "idList",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIpc renderer that sends command to main renderer to get movies from library db.\n",
                    "description": "<p>Ipc renderer that sends command to main renderer to get movies from library db.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3285,
                                "end": 3291,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "idList"
                            },
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3279,
                                "end": 3284,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "getMovieUserData",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<IProfileData>",
                    "typeParameters": [],
                    "line": 222,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n\n",
                    "description": "",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 7183,
                                "end": 7185,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "id"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7177,
                                "end": 7182,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>tmdb id</p>\n"
                        }
                    ]
                },
                {
                    "name": "getMovieUserDataInList",
                    "args": [
                        {
                            "name": "idList",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<IProfileData[]>",
                    "typeParameters": [],
                    "line": 231,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "idList",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMultiplePaginated",
                    "args": [
                        {
                            "name": "collectionName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "sort",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "lastVal",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<IUserDataPaginated>",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPaginated, NOT first page.\n",
                    "description": "<p>Paginated, NOT first page.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4059,
                                "end": 4073,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "collectionName"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4053,
                                "end": 4058,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": "sort",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": {
                                "pos": 4104,
                                "end": 4109,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "limit"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 4098,
                                "end": 4103,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 4122,
                                "end": 4129,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "lastVal"
                            },
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 4116,
                                "end": 4121,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "getMultiplePaginatedFirst",
                    "args": [
                        {
                            "name": "collectionName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "sort",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "size",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<IUserDataPaginated>",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPaginated, first page.\n",
                    "description": "<p>Paginated, first page.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3607,
                                "end": 3621,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "collectionName"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3601,
                                "end": 3606,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": "sort",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": {
                                "pos": 3652,
                                "end": 3656,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "size"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 3646,
                                "end": 3651,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "getPlayTorrent",
                    "args": [
                        {
                            "name": "hash",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 263,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "hash",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPreferences",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 277,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getSystemDrives",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets the drives in the system.\n",
                    "description": "<p>Gets the drives in the system.</p>\n",
                    "modifierKind": [
                        131
                    ]
                },
                {
                    "name": "getWatched",
                    "args": [
                        {
                            "name": "data",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 177,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getWatchedInList",
                    "args": [
                        {
                            "name": "idList",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 188,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIpc renderer that sends command to main renderer to get movies from library db.\n",
                    "description": "<p>Ipc renderer that sends command to main renderer to get movies from library db.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6304,
                                "end": 6310,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "idList"
                            },
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6298,
                                "end": 6303,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "listenOnce",
                    "args": [
                        {
                            "name": "channel",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 328,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "channel",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "minimizeRestoreWindow",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 307,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "minimizeWindow",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 304,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openFolder",
                    "args": [
                        {
                            "name": "data",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOpens the folder\n",
                    "description": "<p>Opens the folder</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3029,
                                "end": 3033,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "data"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3023,
                                "end": 3028,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>folder directory</p>\n"
                        }
                    ]
                },
                {
                    "name": "playOfflineVideo",
                    "args": [
                        {
                            "name": "docId",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 272,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "docId",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeBookmark",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 170,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeListener",
                    "args": [
                        {
                            "name": "channel",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 314,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "channel",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeWatched",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 210,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTODO: remove type\n",
                    "description": "<p>TODO: remove type</p>\n",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveBookmark",
                    "args": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 163,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveFavorite",
                    "args": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 240,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "savePreferences",
                    "args": [
                        {
                            "name": "val",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 290,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveWatched",
                    "args": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 197,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sendToMain",
                    "args": [
                        {
                            "name": "channel",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "headers",
                            "type": "Headers | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "body",
                            "type": "Body",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 319,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "channel",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "headers",
                            "type": "Headers | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "body",
                            "type": "Body",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "startScanLibrary",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 247,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "stopScanLibrary",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 259,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "stopStream",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 268,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateWatchedStatus",
                    "args": [
                        {
                            "name": "val",
                            "type": "IWatched",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 203,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "IWatched",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { environment } from '@environments/environment';\nimport * as IPCRendererChannel from '../../assets/IPCRendererChannel.json';\nimport * as IPCMainChannel from '../../assets/IPCMainChannel.json';\nimport { v4 as uuidv4 } from 'uuid'\nimport { Injectable } from '@angular/core'\nimport { BehaviorSubject, Observable, fromEvent } from 'rxjs'\nimport { ipcRenderer } from 'electron'\nimport { ILibraryInfo } from '@models/interfaces'\nimport { IRawLibrary } from './library.service';\nimport { IWatched } from './watched.service';\nimport { Review } from '@models/review.model';\nimport { IProfileData, ListLinkMovie } from '@models/profile-data.model';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class IpcService {\n\n  libraryMovies = new BehaviorSubject<string[]>([])\n  libraryMovie = new BehaviorSubject<string[]>([])\n  bookmarkChanges = new BehaviorSubject<IBookmarkChanges[]>([])\n  movieIdentified = new BehaviorSubject<any>({ id: 0 })\n  searchList = new BehaviorSubject<any>([])\n  torrentVideo = new BehaviorSubject<string[]>([])\n  preferences = new BehaviorSubject<any>([])\n  streamLink = new BehaviorSubject<any>('')\n  private statsForNerds = new BehaviorSubject<any>({})\n  statsForNerdsSubscribable = this.statsForNerds.asObservable()\n  private ipcRenderer: typeof ipcRenderer\n\n  constructor() {\n    if (environment.runConfig.electron) {\n\n      console.log((window as any).require('electron'))\n\n      this.ipcRenderer = (window as any).require('electron').ipcRenderer\n\n      this.ipcRenderer.on('torrent-video', (event, data: any) => {\n        console.log('event: ', event)\n        console.log('data: ', data)\n        this.torrentVideo.next(data)\n      })\n\n      this.ipcRenderer.on(IPCMainChannel.PREFERENCES_GET_COMPLETE, (event: Electron.IpcRendererEvent, data) => {\n        this.preferences.next(data)\n        console.log('IPCMainChannel.PREFERENCES_COMPLETE ', data)\n      })\n      this.ipcRenderer.on(IPCMainChannel.STREAM_LINK, (event: Electron.IpcRendererEvent, data) => {\n        this.streamLink.next(data)\n        console.log('IPCMainChannel.STREAM_LINK ', data)\n      })\n      this.ipcRenderer.on(IPCMainChannel.STATS, (event: Electron.IpcRendererEvent, data) => {\n        this.statsForNerds.next(data)\n        console.log('IPCMainChannel.STATS ', data)\n      })\n    }\n  }\n\n  async getFiles() {\n    // return new Promise<string[]>((resolve, reject) => {\n    //   this.ipcRenderer.once('library-folders', (event, arg) => {\n    //     resolve(arg);\n    //   });\n    //   this.ipcRenderer.send('retrieve-library-folders');\n    // });\n  }\n\n  /**\n   * Gets the drives in the system.\n   */\n  async getSystemDrives() {\n    // return new Promise<string[]>((resolve, reject) => {\n    //   this.ipcRenderer.once('system-drives', (event, arg) => {\n    //     resolve(arg);\n    //   });\n    // });\n    // this.ipcRenderer.send('get-drives')\n  }\n  /**\n   * Opens the folder\n   * @param data folder directory\n   */\n  openFolder(data: string) {\n    console.log('open', data)\n    // this.ipcRenderer.send('go-to-folder', ['open', data])\n  }\n\n  /**\n   * Ipc renderer that sends command to main renderer to get movies from library db.\n   * @param idList\n   */\n  getMoviesFromLibraryInList(idList: number[]): Promise<any> {\n    const theUuid = uuidv4()\n    this.sendToMain('library', { operation: IpcOperations.FIND_IN_LIST, uuid: theUuid },\n      { idList: idList });\n    return this.listenOnce(`library-${theUuid}`);\n  }\n\n  /**\n   * Paginated, first page.\n   * @param collectionName\n   * @param order\n   * @param size\n   */\n  getMultiplePaginatedFirst(collectionName: string, sort: string, size?: number): Promise<IUserDataPaginated> {\n    const theUuid = uuidv4()\n    this.sendToMain(collectionName, { operation: IpcOperations.GET_BY_PAGE, uuid: theUuid },\n      { sort: sort, size: size, lastVal: 0 });\n    return this.listenOnce(`${collectionName}-${theUuid}`);\n  }\n\n  /**\n   * Paginated, NOT first page.\n   * @param collectionName\n   * @param order\n   * @param limit\n   * @param lastVal\n   */\n  getMultiplePaginated(collectionName: string, sort: string, limit?: number, lastVal?: string | number): Promise<IUserDataPaginated> {\n    const theUuid = uuidv4()\n    this.sendToMain(collectionName, { operation: IpcOperations.GET_BY_PAGE, uuid: theUuid },\n      { sort: sort, limit: limit, lastVal: lastVal });\n    return this.listenOnce(`${collectionName}-${theUuid}`);\n  }\n\n  /**\n   * Ipc renderer that sends command to main renderer to get specified movie from library db.\n   * Replies offline library object(s).\n   * @param arg imdb id or movie title and release year or tmdb id\n   */\n  getMovieFromLibrary(arg): Promise<IRawLibrary> {\n    const theUuid = uuidv4()\n    this.sendToMain('library', { operation: IpcOperations.FIND, uuid: theUuid },\n      { tmdbId: arg });\n    return this.listenOnce(`library-${theUuid}`);\n  }\n\n  // // user services; watchlist/bookmarks, watched\n  getBookmark(data: number) {\n    const theUuid = uuidv4()\n    this.sendToMain('bookmark', { operation: IpcOperations.FIND_ONE, uuid: theUuid },\n      { tmdbId: data })\n    return this.listenOnce(`bookmark-${theUuid}`);\n  }\n\n  getBookmarkInList(idList: number[]): Promise<any> {\n    const theUuid = uuidv4()\n    this.sendToMain('bookmark', {\n      operation: IpcOperations.FIND_IN_LIST,\n      uuid: theUuid\n    }, { idList: idList });\n    return this.listenOnce(`bookmark-${theUuid}`);\n  }\n\n  saveBookmark(data) {\n    const theUuid = uuidv4()\n    this.sendToMain('bookmark', { operation: IpcOperations.SAVE, uuid: theUuid },\n      data);\n    return this.listenOnce(`bookmark-${theUuid}`);\n  }\n\n  removeBookmark(type: string, id: string | number) {\n    const theUuid = uuidv4()\n    this.sendToMain('bookmark', { operation: IpcOperations.REMOVE, uuid: theUuid }, { type: type, id: id });\n    return this.listenOnce(`bookmark-${theUuid}`);\n  }\n\n  // ----- WATCHED\n  getWatched(data: number) {\n    const theUuid = uuidv4()\n    this.sendToMain('watched', { operation: IpcOperations.FIND_ONE, uuid: theUuid },\n      { tmdbId: data })\n    return this.listenOnce(`watched-${theUuid}`);\n  }\n\n  /**\n   * Ipc renderer that sends command to main renderer to get movies from library db.\n   * @param idList\n   */\n  getWatchedInList(idList: number[]): Promise<any> {\n    const theUuid = uuidv4()\n    this.sendToMain('watched', {\n      operation: IpcOperations.FIND_IN_LIST,\n      uuid: theUuid\n    }, { idList: idList });\n    return this.listenOnce(`watched-${theUuid}`);\n  }\n\n  saveWatched(data) {\n    const theUuid = uuidv4()\n    this.sendToMain('watched', { operation: IpcOperations.SAVE, uuid: theUuid }, data);\n    return this.listenOnce(`watched-${theUuid}`);\n  }\n\n  updateWatchedStatus(val: IWatched) {\n    this.ipcRenderer.send('', val)\n  }\n\n  /**\n   * TODO: remove type\n   */\n  removeWatched(type: string, id: string | number) {\n    const theUuid = uuidv4()\n    this.sendToMain('watched', { operation: IpcOperations.REMOVE, uuid: theUuid }, { type: type, id: id });\n    return this.listenOnce(`watched-${theUuid}`);\n  }\n\n\n  // ----- END OF WATCHED\n  /**\n   *\n   * @param id tmdb id\n   */\n  getMovieUserData(id: number): Promise<IProfileData> {\n    const theUuid = uuidv4()\n    this.sendToMain('user-data', {\n      operation: IpcOperations.FIND,\n      uuid: theUuid\n    }, { tmdbId: id });\n    return this.listenOnce(`user-data-${theUuid}`);\n  }\n\n  getMovieUserDataInList(idList: number[]): Promise<IProfileData[]> {\n    const theUuid = uuidv4()\n    this.sendToMain('user-data', {\n      operation: IpcOperations.FIND_IN_LIST,\n      uuid: theUuid\n    }, { idList: idList });\n    return this.listenOnce(`user-data-${theUuid}`)\n  }\n\n  saveFavorite(data) {\n    const theUuid = uuidv4()\n    this.sendToMain('favorite', { operation: IpcOperations.SAVE, uuid: theUuid }, data);\n    return this.listenOnce(`favorite-${theUuid}`);\n  }\n\n  // ----- END OF USER DATA\n  startScanLibrary() {\n\n    this.sendToMain(IPCRendererChannel.SCAN_LIBRARY_START)\n    this.ipcRenderer.on(IPCMainChannel.ScanLibraryResult, e => {\n      console.log(IPCMainChannel.ScanLibraryResult, e)\n    })\n    this.ipcRenderer.once(IPCMainChannel.ScanLibraryComplete, e => {\n      console.log('completscan')\n      this.ipcRenderer.removeListener(IPCMainChannel.ScanLibraryResult, d => { })\n    })\n  }\n\n  stopScanLibrary() {\n    this.sendToMain(IPCRendererChannel.SCAN_LIBRARY_STOP)\n  }\n\n  getPlayTorrent(hash: string): Promise<any> {\n    this.sendToMain(IPCRendererChannel.PLAY_TORRENT, hash)\n    return this.listenOnce(`stream-link`);\n  }\n\n  stopStream() {\n    this.sendToMain(IPCRendererChannel.STOP_STREAM)\n  }\n\n  playOfflineVideo(docId): Promise<any> {\n    this.sendToMain(IPCRendererChannel.PLAY_OFFLINE_VIDEO_STREAM, docId);\n    return this.listenOnce(`stream-link`);\n  }\n\n  getPreferences() {\n\n    this.sendToMain(IPCRendererChannel.PREFERENCES_GET)\n    // this.ipcRenderer.addListener(IPCMainChannel.PREFERENCES_GET_COMPLETE, this.pref)\n\n    // (event, data: any) => {\n    // console.log('IPCMainChannel.PREFERENCES_COMPLETE ', data)\n    // this.pref()\n    // this.preferences.next(data)\n    // this.ipcRenderer.removeListener(IPCMainChannel.PREFERENCES_GET_COMPLETE, e => { })\n    // })\n  }\n\n  savePreferences(val) {\n    this.sendToMain(IPCRendererChannel.PREFERENCES_SET, val)\n    // this.ipcRenderer.on(IPCMainChannel.PREFERENCES_SET_COMPLETE, (event, data: any) => {\n    //   console.log('IPCMainChannel.PREFERENCES_SET_COMPLETE ', data)\n    //   this.preferences.next(data)\n    //   this.ipcRenderer.removeListener(IPCMainChannel.PREFERENCES_SET_COMPLETE, d => { })\n    // })\n  }\n\n  changeSubtitle(): Promise<any> {\n    this.sendToMain(\"get-subtitle\")\n    return this.listenOnce('subtitle-path')\n  }\n\n  minimizeWindow() {\n    this.sendToMain(this.IPCCommand.MinimizeApp)\n  }\n  minimizeRestoreWindow() {\n    this.sendToMain(this.IPCCommand.RestoreApp)\n  }\n  exitApp() {\n    this.sendToMain(this.IPCCommand.ExitApp)\n  }\n\n  private removeListener(channel: string) {\n    console.log('REMOVING LISTENER', channel)\n    this.ipcRenderer.removeListener(channel, d => { })\n  }\n\n  private sendToMain(channel: string, headers?: Headers | string, body?: Body) {\n    try {\n      this.ipcRenderer.send(channel, [headers, body])\n      console.log('sent to ipc... ', channel, [headers, body])\n    } catch {\n      console.log('failed to send Ipc: ', channel, [headers, body])\n    }\n  }\n\n  private listenOnce(channel: string) {\n    return new Promise<any>((resolve, reject) => {\n      try {\n        this.ipcRenderer.once(channel, (event, arg) => {\n          console.log('channel: ', channel, ' arg: ', arg)\n          resolve(arg);\n        });\n      } catch {\n        resolve(null);\n        console.log(`listen ${channel} failed`)\n      }\n    });\n  }\n\n  IPCCommand = IPCRendererChannel['default']\n  IPCChannel = IPCMainChannel['default']\n}\n\ninterface Headers {\n  operation: IpcOperations,\n  uuid: string\n}\n\ninterface Body {\n  tmdbId?: number\n  idList?: number[]\n  [x: string]: any\n}\n\nenum IpcOperations {\n  FIND = 'find',\n  FIND_ONE = 'find-one',\n  FIND_IN_LIST = 'find-in-list',\n  UPDATE = 'update',\n  SAVE = 'save',\n  REMOVE = 'remove',\n  GET_BY_PAGE = 'get-by-page',\n  COUNT = 'count'\n}\nexport interface IBookmarkChanges {\n  change: BookmarkChanges\n}\n\nexport enum BookmarkChanges {\n  UPDATE = 'update',\n  DELETE = 'delete',\n  INSERT = 'insert'\n}\n\nexport interface IBookmark {\n  tmdbId: number,\n  imdbId: string,\n  id: string\n}\n\n\n\ninterface ILibrary {\n  title?: string,\n  year?: number,\n  tmdbId?: number,\n  imdbId?: string,\n  libraryList: ILibraryData[]\n}\n\ninterface ILibraryData {\n  fullFilePath: string,\n  _id: string\n}\n\nexport interface IUserDataPaginated {\n  totalPages: number,\n  totalResults: number,\n  page?: number,\n  results: any[],\n}\n\ninterface SortObject {\n  [x: string]: 1 | -1\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 37
            },
            "type": "injectable"
        },
        {
            "name": "LibraryService",
            "id": "injectable-LibraryService-1fe741c1bd1cbf7dcb5ab651b5e2a2c1698d17be281716ce1ab4567a992d5520dc1c378f451304d3cc61240d75f5ce4cde0ba3b3567c3c1bfce3d16871d2e55e",
            "file": "src/app/services/library.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getLibraryPaginated",
                    "args": [
                        {
                            "name": "lastVal",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets multiple library.\n",
                    "description": "<p>Gets multiple library.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2599,
                                "end": 2606,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "lastVal"
                            },
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2593,
                                "end": 2598,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the last value to start with.</p>\n"
                        }
                    ]
                },
                {
                    "name": "getLibraryPaginatedFirstPage",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets first page of list. Gets multiple videos. Movie(s) eventually becomes available in status.\n",
                    "description": "<p>Gets first page of list. Gets multiple videos. Movie(s) eventually becomes available in status.</p>\n"
                },
                {
                    "name": "getMovieFromLibrary",
                    "args": [
                        {
                            "name": "id",
                            "type": "number | string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets movie library.\n",
                    "description": "<p>Gets movie library.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1281,
                                "end": 1283,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "id"
                            },
                            "type": "number | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1275,
                                "end": 1280,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>tmdbId or imdbId</li>\n</ul>\n"
                        }
                    ]
                },
                {
                    "name": "getMoviesFromLibraryInList",
                    "args": [
                        {
                            "name": "idList",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets multiple library using list. Movie(s) eventually becomes available in status.\n",
                    "description": "<p>Gets multiple library using list. Movie(s) eventually becomes available in status.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1723,
                                "end": 1729,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "idList"
                            },
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1717,
                                "end": 1722,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "openVideoStream",
                    "args": [
                        {
                            "name": "id",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOpens a video stream to watch.\n",
                    "description": "<p>Opens a video stream to watch.</p>\n",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 528,
                                "end": 530,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "id"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 522,
                                "end": 527,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>library id to open stream</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 563,
                                "end": 570,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>stream link/url</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { IUserSavedData } from '@models/interfaces';\nimport { environment } from '@environments/environment';\nimport { Injectable } from '@angular/core';\nimport { IpcService } from './ipc.service';\nimport { FirebaseService, CollectionName, FieldName, FirebaseOperator } from './firebase.service';\n\n@Injectable({ providedIn: 'root' })\nexport class LibraryService {\n\n  constructor(\n    private ipcService: IpcService,\n    private firebaseService: FirebaseService,\n  ) {\n\n  }\n\n  /**\n   * Opens a video stream to watch.\n   * @param id library id to open stream\n   * @returns stream link/url\n   */\n  async openVideoStream(id) {\n    // this.ipcService.playOfflineVideo(id) // commented to make way for torrent-play\n    return this.ipcService.playOfflineVideo(id)\n    // return new Promise((resolve, reject) => {\n    //   if (environment.runConfig.firebaseMode) {\n    //     this.firebaseService.getFromFirestore(CollectionName.Library, FieldName.TmdbId, FirebaseOperator.Equal, id).then(e => {\n    //       resolve(e)\n    //     }).catch(e => {\n    //       reject(e)\n    //     })\n    //     // })\n    //   } else {\n    //     this.ipcService.LibraryFile.toPromise().then(e => {\n    //       resolve(e)\n    //     })\n    //   }\n    // })\n  }\n\n  /**\n   * Gets movie library.\n   * @param id - tmdbId or imdbId\n   */\n  getMovieFromLibrary(id: number | string): Promise<any> {\n    const myFunction = environment.runConfig.firebaseMode ?\n      this.firebaseService.getFromFirestore(CollectionName.Library, FieldName.TmdbId, FirebaseOperator.Equal, id) :\n      this.ipcService.getMovieFromLibrary(id)\n    return myFunction\n  }\n\n  /**\n   * Gets multiple library using list. Movie(s) eventually becomes available in status.\n   * @param idList\n   */\n  getMoviesFromLibraryInList(idList: number[]): Promise<any> {\n    console.log('getting multiplevideos...', idList);\n    const myFunction = environment.runConfig.firebaseMode ?\n      this.firebaseService.getFromFirestoreMultiple(CollectionName.Library, FieldName.TmdbId, idList) :\n      this.ipcService.getMoviesFromLibraryInList(idList)\n    return myFunction\n  }\n\n  /**\n   * Gets first page of list. Gets multiple videos. Movie(s) eventually becomes available in status.\n   */\n  getLibraryPaginatedFirstPage(): Promise<any> {\n    const myFunction = environment.runConfig.firebaseMode ? null : this.ipcService.getMultiplePaginatedFirst(CollectionName.Library, FieldName.TmdbId, 20)\n    // this.firebaseService.getFromFirestoreMultiplePaginated(CollectionName.Library, FieldName.TmdbId, 20)\n    return myFunction\n  }\n\n  /**\n   * Gets multiple library.\n   * @param lastVal the last value to start with.\n   */\n  getLibraryPaginated(lastVal: string | number): Promise<any> {\n    console.log('getVideoPaginated...', lastVal);\n    const myFunction = environment.runConfig.firebaseMode ?\n      this.firebaseService.getFromFirestoreMultiplePaginated(CollectionName.Library, FieldName.TmdbId, 20, lastVal) :\n      this.ipcService.getMultiplePaginated(CollectionName.Library, FieldName.TmdbId, 20, lastVal)\n    return myFunction\n  }\n\n}\n\nexport interface IVideo extends IUserSavedData {\n  tmdbId: number,\n  imdbId?: string,\n  title: string,\n  year: number,\n  id: string,\n  videoUrl: string,\n  filePath?: string,\n  cre8Ts?: number, // create timestamp\n  timestamp?: number,\n}\n\nexport interface IRawLibrary {\n  fullFilePath: string,\n  title: string,\n  year: number,\n  tmdbId: number,\n  _id: string\n}\n\ninterface Library {\n  type: 'movie' | 'video' | 'audio' | 'music' | 'podcast' | 'videogame',\n  source: 'local' | 'online',\n  id: string,\n  title: string\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "ipcService",
                        "type": "IpcService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "firebaseService",
                        "type": "FirebaseService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "ipcService",
                        "type": "IpcService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "firebaseService",
                        "type": "FirebaseService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "LoggerService",
            "id": "injectable-LoggerService-18937168795451d01302c848fd273b1195f70d5b2eac9a1d5fac1a4a05a7a191821d7d9b70868105df55400427fed58792d614b7bbbbe41ef252e6c5bebfa32a",
            "file": "src/app/core/logger.service.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoggerService {\n  constructor(\n  ) { }\n}\n\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 6
            },
            "type": "injectable"
        },
        {
            "name": "MdbApiService",
            "id": "injectable-MdbApiService-386d7e269c530e10c32373347ca9bff5aaa5425f9fcc6edb7263342fa375fb21f6c6dcb6bc5c891861829511d2075eef4dc5aa5e9aa533a49d42c1df1eb9c4b4",
            "file": "src/app/services/mdb-api.service.ts",
            "properties": [
                {
                    "name": "httpParam",
                    "defaultValue": "new HttpParams()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methods": [
                {
                    "name": "deleteBookmark",
                    "args": [
                        {
                            "name": "bookmarkId",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "bookmarkId",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteFavorite",
                    "args": [
                        {
                            "name": "favId",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "favId",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteList",
                    "args": [
                        {
                            "name": "listId",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "listId",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteWatched",
                    "args": [
                        {
                            "name": "watchedBody",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "watchedBody",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProfileDataByTmdbId",
                    "args": [
                        {
                            "name": "tmdbId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IProfileData>",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tmdbId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProfileDataByTmdbIdList",
                    "args": [
                        {
                            "name": "tmdbIdList",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IProfileData[]>",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tmdbIdList",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "operation",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'operation'"
                        },
                        {
                            "name": "result",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "(error: any) => Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nError handler.\n",
                    "description": "<p>Error handler.</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4253,
                                "end": 4262,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "operation"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'operation'",
                            "tagName": {
                                "pos": 4247,
                                "end": 4252,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the operation</p>\n"
                        },
                        {
                            "name": {
                                "pos": 4289,
                                "end": 4295,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "result"
                            },
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 4283,
                                "end": 4288,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the result</p>\n"
                        }
                    ]
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "payload",
                            "type": "LoginUser",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "payload",
                            "type": "LoginUser",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerUser",
                    "args": [
                        {
                            "name": "payload",
                            "type": "RegisterUser",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "payload",
                            "type": "RegisterUser",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeFromList",
                    "args": [
                        {
                            "name": "listLinkMovie",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "listLinkMovie",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveBookmark",
                    "args": [
                        {
                            "name": "bookmarkBody",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "bookmarkBody",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveFavorite",
                    "args": [
                        {
                            "name": "favBody",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "favBody",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveList",
                    "args": [
                        {
                            "name": "listBody",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "listBody",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveToList",
                    "args": [
                        {
                            "name": "listLinkMovie",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "listLinkMovie",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveWatched",
                    "args": [
                        {
                            "name": "watchedBody",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "watchedBody",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams, } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { IpcService } from '../services/ipc.service';\nimport { STRING_REGEX_IMDB_ID, MDB_API_URL } from '../shared/constants';\nimport { IProfileData } from '../models/profile-data.model';\n\nconst JSON_CONTENT_TYPE_HEADER = new HttpHeaders({ 'Content-Type': 'application/json' })\n\n@Injectable({ providedIn: 'root' })\nexport class MdbApiService {\n\n  constructor(\n    private http: HttpClient\n  ) { }\n\n  httpParam = new HttpParams()\n\n  saveBookmark(bookmarkBody: any): Observable<any> {\n    return this.http.post<any>(`${MDB_API_URL}\\\\profileData\\\\bookmark`, bookmarkBody).pipe(tap(_ => this.log('')),\n      catchError(this.handleError<any>('saveFavorite')))\n  }\n\n  deleteBookmark(bookmarkId: any): Observable<any> {\n    let httpParams = new HttpParams().set('id', bookmarkId);\n    return this.http.delete<any>(`${MDB_API_URL}\\\\profileData\\\\bookmark`, { params: httpParams }).pipe(tap(_ => this.log('')),\n      catchError(this.handleError<any>('deleteFavorite')))\n  }\n  saveFavorite(favBody: any): Observable<any> {\n    return this.http.post<any>(`${MDB_API_URL}\\\\profileData\\\\favorite`, favBody).pipe(tap(_ => this.log('')),\n      catchError(this.handleError<any>('saveFavorite')))\n  }\n  deleteFavorite(favId: any): Observable<any> {\n    let httpParams = new HttpParams().set('id', favId);\n    return this.http.delete<any>(`${MDB_API_URL}\\\\profileData\\\\favorite`, { params: httpParams }).pipe(tap(_ => this.log('')),\n      catchError(this.handleError<any>('deleteFavorite')))\n  }\n  saveToList(listLinkMovie: any): Observable<any> {\n    return this.http.post<any>(`${MDB_API_URL}\\\\profileData\\\\list\\\\add`, listLinkMovie).pipe(tap(_ => this.log('')),\n      catchError(this.handleError<any>('saveFavorite')))\n  }\n  removeFromList(listLinkMovie: any): Observable<any> {\n    return this.http.post<any>(`${MDB_API_URL}\\\\profileData\\\\list\\\\remove`, listLinkMovie).pipe(tap(_ => this.log('')),\n      catchError(this.handleError<any>('saveFavorite')))\n  }\n  saveList(listBody: any): Observable<any> {\n    return this.http.post<any>(`${MDB_API_URL}\\\\profileData\\\\list`, listBody).pipe(tap(_ => this.log('')),\n      catchError(this.handleError<any>('saveFavorite')))\n  }\n  deleteList(listId: any): Observable<any> {\n    let httpParams = new HttpParams().set('id', listId);\n    return this.http.delete<any>(`${MDB_API_URL}\\\\profileData\\\\list`, { params: httpParams }).pipe(tap(_ => this.log('')),\n      catchError(this.handleError<any>('deleteFavorite')))\n  }\n  saveWatched(watchedBody: any): Observable<any> {\n    return this.http.post<any>(`${MDB_API_URL}\\\\profileData\\\\watched`, watchedBody).pipe(tap(_ => this.log('')),\n      catchError(this.handleError<any>('saveFavorite')))\n  }\n  deleteWatched(watchedBody: any): Observable<any> {\n    return this.http.delete<any>(`${MDB_API_URL}\\\\profileData\\\\watched`, watchedBody).pipe(tap(_ => this.log('')),\n      catchError(this.handleError<any>('deleteFavorite')))\n  }\n\n  getProfileDataByTmdbId(tmdbId: number): Observable<IProfileData> {\n\n    return this.http.get<any>(`${MDB_API_URL}\\\\profileData\\\\media\\\\${tmdbId}`).pipe(tap(_ => this.log('')),\n      catchError(this.handleError<any>('getProfileDataByTmdbId')))\n  }\n\n  getProfileDataByTmdbIdList(tmdbIdList: number[]): Observable<IProfileData[]> {\n\n    return this.http.get<any>(`${MDB_API_URL}\\\\profileData\\\\media\\\\list\\\\${tmdbIdList}`).pipe(tap(_ => this.log('')),\n      catchError(this.handleError<any>('getProfileDataByTmdbIdList')))\n  }\n\n  registerUser(payload: RegisterUser) {\n    return this.http.post<any>(`mdb/user/register`, payload).pipe(tap(_ => this.log('')),\n      catchError(this.handleError<any>('registerUser')))\n  }\n\n  logout() {\n    return this.http.post<any>(`mdb/user/logout`, {}).pipe(tap(_ => this.log('')),\n      catchError(this.handleError<any>('logout')))\n  }\n\n  login(payload: LoginUser) {\n    return this.http.post<any>(`mdb/user/login`, payload).pipe(tap(_ => this.log('')),\n      catchError(this.handleError<any>('logout')))\n  }\n\n  /**\n   * Error handler.\n   * @param operation the operation\n   * @param result the result\n   */\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n      console.error(error); // log to console instead\n      this.log(`${operation} failed: ${error.message}`);\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n\n  private log(message: string) {\n    console.log(`MovieService: ${message} `);\n  }\n}\n\nexport interface LoginUser {\n  userName: string;\n  password: string;\n  type?: string;\n  token?: string;\n}\nexport interface RegisterUser {\n  password: string;\n  userName: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  avatar: string;\n  contactNumber?: string;\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MDBMovieQuery",
            "id": "injectable-MDBMovieQuery-444816693d68c2967bdb9eeec3621030ba9ef09281aa71107c42347c0c55152beef01a6611055b55fb3a9b8212b16ed696a8e6c2e90eb6bc125e8c3ff8bdba4e",
            "file": "src/app/services/movie/movie.query.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { QueryEntity } from '@datorama/akita';\nimport { MDBMovie } from '@models/mdb-movie.model';\nimport { MDBMovieListModel, MDBMovieModel, TmdbMovieModel } from './interface/movie';\nimport { MDBMovieState, MDBMovieStore, TMDBMovieStore, TmdbMovieState as TMDBMovieState, MDBMovieSearchState, MDBMovieSearchStore } from './movie.store';\n\n@Injectable({ providedIn: 'root' })\nexport class TMDBMovieQuery extends QueryEntity<TMDBMovieState, TmdbMovieModel> {\n  constructor(protected store: TMDBMovieStore) {\n    super(store);\n  }\n}\n\n@Injectable({ providedIn: 'root' })\nexport class MDBMovieQuery extends QueryEntity<MDBMovieState, MDBMovieModel> {\n  constructor(protected store: MDBMovieStore) {\n    super(store);\n  }\n}\n\n// @Injectable({ providedIn: 'root' })\n// export class DiscoverMovieQuery extends QueryEntity<MDBMovieState, TmdbMovieModel> {\n//   constructor(protected store: MDBMovieStore) {\n//     super(store);\n//   }\n// }\n\n@Injectable({ providedIn: 'root' })\nexport class SearchMovieQuery extends QueryEntity<MDBMovieSearchState, MDBMovieListModel> {\n  constructor(protected store: MDBMovieSearchStore) {\n    super(store);\n  }\n}\n\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "MDBMovieStore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "MDBMovieStore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "QueryEntity",
            "type": "injectable"
        },
        {
            "name": "MDBMovieSearchStore",
            "id": "injectable-MDBMovieSearchStore-003356e894d6d3fd8e699789e15f6942809cf8b544dbfcd102ceb5a241798a30c7e4b55fa4b0d72866404b32e84c9ff40d963c066d471ae956a9f77f45b3a8a9",
            "file": "src/app/services/movie/movie.store.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport { EntityState, EntityStore, StoreConfig } from \"@datorama/akita\";\nimport { MDBMovieListModel, MDBMovieModel, TmdbMovieModel } from \"./interface/movie\";\n\nexport interface TmdbMovieState extends EntityState<TmdbMovieModel> { }\n\n@Injectable({ providedIn: 'root' })\n@StoreConfig({ name: 'tmdbMovie' })\nexport class TMDBMovieStore extends EntityStore<TmdbMovieState, TmdbMovieModel>{\n  constructor() {\n    super();\n  }\n}\n\nexport interface MDBMovieState extends EntityState<MDBMovieModel> { }\n@Injectable({ providedIn: 'root' })\n@StoreConfig({ name: 'mdbMovie' })\nexport class MDBMovieStore extends EntityStore<MDBMovieState, MDBMovieModel>{\n  constructor() {\n    super();\n  }\n}\n\nexport interface MDBMovieSearchState extends EntityState<MDBMovieListModel> { }\n@Injectable({ providedIn: 'root' })\n@StoreConfig({ name: 'mdbSearchMovie' })\nexport class MDBMovieSearchStore extends EntityStore<MDBMovieSearchState, MDBMovieListModel>{\n  constructor() {\n    super();\n  }\n}\n\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 27
            },
            "extends": "EntityStore",
            "type": "injectable"
        },
        {
            "name": "MDBMovieStore",
            "id": "injectable-MDBMovieStore-003356e894d6d3fd8e699789e15f6942809cf8b544dbfcd102ceb5a241798a30c7e4b55fa4b0d72866404b32e84c9ff40d963c066d471ae956a9f77f45b3a8a9",
            "file": "src/app/services/movie/movie.store.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport { EntityState, EntityStore, StoreConfig } from \"@datorama/akita\";\nimport { MDBMovieListModel, MDBMovieModel, TmdbMovieModel } from \"./interface/movie\";\n\nexport interface TmdbMovieState extends EntityState<TmdbMovieModel> { }\n\n@Injectable({ providedIn: 'root' })\n@StoreConfig({ name: 'tmdbMovie' })\nexport class TMDBMovieStore extends EntityStore<TmdbMovieState, TmdbMovieModel>{\n  constructor() {\n    super();\n  }\n}\n\nexport interface MDBMovieState extends EntityState<MDBMovieModel> { }\n@Injectable({ providedIn: 'root' })\n@StoreConfig({ name: 'mdbMovie' })\nexport class MDBMovieStore extends EntityStore<MDBMovieState, MDBMovieModel>{\n  constructor() {\n    super();\n  }\n}\n\nexport interface MDBMovieSearchState extends EntityState<MDBMovieListModel> { }\n@Injectable({ providedIn: 'root' })\n@StoreConfig({ name: 'mdbSearchMovie' })\nexport class MDBMovieSearchStore extends EntityStore<MDBMovieSearchState, MDBMovieListModel>{\n  constructor() {\n    super();\n  }\n}\n\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 18
            },
            "extends": "EntityStore",
            "type": "injectable"
        },
        {
            "name": "MockMovieService",
            "id": "injectable-MockMovieService-fa9172cdc7c813e44137a1c977af719e47ba0ed29d98c830abb2087b397b47c245efb80cdf14afce208220021b152df423666e3daaba5effa6fef72b069b9240",
            "file": "src/app/services/mock/services/mock-movie.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getMovieDetails",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { } from 'rxjs';\nimport { first, map } from 'rxjs/operators';\n\n\n@Injectable({ providedIn: 'root' })\nexport class MockMovieService {\n  constructor(\n    private http: HttpClient\n  ) {\n\n  }\n\n  getMovieDetails() {\n    return this.http.get<any>('').pipe(\n      first(),\n      map((data) => {\n\n      })\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MovieService",
            "id": "injectable-MovieService-d2c2c181bac782f81e091c360236e80d414b846d2cdbf43e3d11ccbcb471dd25d2d03a7b6fdda63a78be2e72ab36ad05ad73a26324daa3c76daab619d1f3cf37",
            "file": "src/app/services/movie/movie.service.ts",
            "properties": [
                {
                    "name": "httpParam",
                    "defaultValue": "new HttpParams()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "methods": [
                {
                    "name": "appendMappedParameters",
                    "args": [
                        {
                            "name": "paramMap",
                            "type": "Map<TmdbParameters | TmdbSearchMovieParameters | any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "myHttpParam",
                            "type": "HttpParams",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "HttpParams",
                    "typeParameters": [],
                    "line": 283,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAppends parameters list into http param object.\n",
                    "description": "<p>Appends parameters list into http param object.</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 9686,
                                "end": 9694,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "paramMap"
                            },
                            "type": "Map<TmdbParameters | TmdbSearchMovieParameters | any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 9680,
                                "end": 9685,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>parameters key-value pair list</p>\n"
                        },
                        {
                            "name": {
                                "pos": 9738,
                                "end": 9749,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "myHttpParam"
                            },
                            "type": "HttpParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 9732,
                                "end": 9737,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>http param to append to</p>\n"
                        }
                    ]
                },
                {
                    "name": "externalId",
                    "args": [
                        {
                            "name": "tmdbId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<TMDB_External_Id>",
                    "typeParameters": [],
                    "line": 345,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "tmdbId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getExternalId",
                    "args": [
                        {
                            "name": "tmdbId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<TMDB_External_Id>",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets IMDB id\n\n",
                    "description": "<p>Gets IMDB id</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3424,
                                "end": 3430,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "tmdbId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3418,
                                "end": 3423,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>tmdbId</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 3444,
                                "end": 3451,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>external ids</p>\n"
                        }
                    ]
                },
                {
                    "name": "getFindMovie",
                    "args": [
                        {
                            "name": "val",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 140,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets movie with external id.(IMDb ID, TVDB ID, facebook,twitter,instagram)\n",
                    "description": "<p>Gets movie with external id.(IMDb ID, TVDB ID, facebook,twitter,instagram)</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4800,
                                "end": 4803,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "val"
                            },
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4794,
                                "end": 4799,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>external id</p>\n"
                        }
                    ]
                },
                {
                    "name": "getImages",
                    "args": [
                        {
                            "name": "val",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMovieBackdrop",
                    "args": [
                        {
                            "name": "val",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMovieByImdbId",
                    "args": [
                        {
                            "name": "val",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IOmdbMovieDetail>",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets movie details by imdb id\n",
                    "description": "<p>Gets movie details by imdb id</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2067,
                                "end": 2070,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "val"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2061,
                                "end": 2066,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>imdb id</p>\n"
                        }
                    ]
                },
                {
                    "name": "getMovieByTitle",
                    "args": [
                        {
                            "name": "val",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IOmdbMovieDetail>",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nmost probably will not be used\n",
                    "description": "<p>most probably will not be used</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2656,
                                "end": 2659,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "val"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2650,
                                "end": 2655,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Movie title</p>\n"
                        }
                    ]
                },
                {
                    "name": "getMovieDetails",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "appendToResponse",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "refresh",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MDBMovie>",
                    "typeParameters": [],
                    "line": 176,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n\n",
                    "description": "",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5875,
                                "end": 5877,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "id"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5869,
                                "end": 5874,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>tmdbId,imdbId, etc.</p>\n"
                        },
                        {
                            "name": {
                                "pos": 5910,
                                "end": 5926,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "appendToResponse"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 5904,
                                "end": 5909,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 5939,
                                "end": 5946,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "refresh"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "pos": 5933,
                                "end": 5938,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "tagName": {
                                "pos": 5953,
                                "end": 5960,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "getMovieFromLibrary",
                    "args": [
                        {
                            "name": "val",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMovieInfo",
                    "args": [
                        {
                            "name": "val",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets movie info. First it gets from offline source,\nif there is none, it gets from online source (OMDB)\n",
                    "description": "<p>Gets movie info. First it gets from offline source,\nif there is none, it gets from online source (OMDB)</p>\n",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMoviePoster",
                    "args": [
                        {
                            "name": "posterLink",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "posterLink",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMoviesDiscover",
                    "args": [
                        {
                            "name": "paramMap",
                            "type": "Map<TmdbParameters | any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 234,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGet movies discover by genre, year, etc.\n",
                    "description": "<p>Get movies discover by genre, year, etc.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "paramMap",
                            "type": "Map<TmdbParameters | any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getOmdbMovieDetails",
                    "args": [
                        {
                            "name": "imdbId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets movie details from omdb.\n",
                    "description": "<p>Gets movie details from omdb.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4245,
                                "end": 4251,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "imdbId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4239,
                                "end": 4244,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the imdb id.</p>\n"
                        }
                    ]
                },
                {
                    "name": "getRandomVideoClip",
                    "args": [
                        {
                            "name": "query",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 294,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets movie clips from YouTube.\n",
                    "description": "<p>Gets movie clips from YouTube.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 10097,
                                "end": 10102,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "query"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 10091,
                                "end": 10096,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>query to search</p>\n"
                        }
                    ]
                },
                {
                    "name": "getRelatedClips",
                    "args": [
                        {
                            "name": "tmdbId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "refresh",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 157,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTODO: add akita caching\nGets related videos from TMDB.\n",
                    "description": "<p>TODO: add akita caching\nGets related videos from TMDB.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5409,
                                "end": 5415,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "tmdbId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5403,
                                "end": 5408,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the tmdb id.</p>\n"
                        },
                        {
                            "name": "refresh",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSubtitleFile",
                    "args": [
                        {
                            "name": "filePath",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 312,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filePath",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSubtitleFileString",
                    "args": [
                        {
                            "name": "filePath",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 316,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filePath",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTmdbMovieSmallDetails",
                    "args": [
                        {
                            "name": "tmdbId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "val",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "appendToResponse",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 207,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n!UNUSED\nGets movie details.\n",
                    "description": "<p>!UNUSED\nGets movie details.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6813,
                                "end": 6819,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "tmdbId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6807,
                                "end": 6812,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the tmdb id.</p>\n"
                        },
                        {
                            "name": {
                                "pos": 6845,
                                "end": 6848,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "val"
                            },
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 6839,
                                "end": 6844,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>list of key object pair.<code>[key,object]</code></p>\n"
                        },
                        {
                            "name": {
                                "pos": 6900,
                                "end": 6916,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "appendToResponse"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 6894,
                                "end": 6899,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>optional append to response</p>\n"
                        }
                    ]
                },
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "operation",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'operation'"
                        },
                        {
                            "name": "result",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "(error: any) => Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 369,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nError handler.\n",
                    "description": "<p>Error handler.</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 12882,
                                "end": 12891,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "operation"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'operation'",
                            "tagName": {
                                "pos": 12876,
                                "end": 12881,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the operation</p>\n"
                        },
                        {
                            "name": {
                                "pos": 12918,
                                "end": 12924,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "result"
                            },
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 12912,
                                "end": 12917,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>result</p>\n"
                        }
                    ]
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 378,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "movieDiscover",
                    "args": [
                        {
                            "name": "paramMap",
                            "type": "Map<TmdbParameters | any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 351,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "paramMap",
                            "type": "Map<TmdbParameters | any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "proxyTest",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 320,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "searchMovie",
                    "args": [
                        {
                            "name": "parameters",
                            "type": "Map<TmdbParameters | TmdbSearchMovieParameters | any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "refresh",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 249,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTODO: Create akita caching.\n\n",
                    "description": "<p>TODO: Create akita caching.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 8438,
                                "end": 8448,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "parameters"
                            },
                            "type": "Map<TmdbParameters | TmdbSearchMovieParameters | any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 8432,
                                "end": 8437,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 8461,
                                "end": 8468,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "refresh"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "pos": 8455,
                                "end": 8460,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "tagName": {
                                "pos": 8475,
                                "end": 8482,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "searchSubtitleById",
                    "args": [
                        {
                            "name": "val",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams, } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { catchError, first, map, tap } from 'rxjs/operators';\nimport { IpcService } from '@services/ipc.service';\nimport { IOmdbMovieDetail, TmdbParameters, OmdbParameters, TmdbSearchMovieParameters, ITmdbResultObject } from '@models/interfaces';\nimport { OMDB_API_KEY, TMDB_API_KEY, FANART_TV_API_KEY, OMDB_URL, TMDB_URL, FANART_TV_URL, STRING_REGEX_IMDB_ID, YOUTUBE_API_KEY } from '../../shared/constants';\nimport { TMDB_External_Id } from '@models/tmdb-external-id.model';\nimport { CacheService } from '../cache.service';\nimport { MDBMovieQuery, SearchMovieQuery } from './movie.query';\nimport { environment } from '@environments/environment';\nimport { MDBMovieSearchStore, MDBMovieStore } from './movie.store';\nimport { MDBMovie } from '@models/mdb-movie.model';\nimport { TmdbService } from '@services/tmdb/tmdb.service';\n\nconst JSON_CONTENT_TYPE_HEADER = new HttpHeaders({ 'Content-Type': 'application/json' });\n\n@Injectable({ providedIn: 'root' })\nexport class MovieService {\n\n  constructor(\n    private http: HttpClient,\n    private cacheService: CacheService,\n    private ipcService: IpcService,\n    private mdbMovieQuery: MDBMovieQuery,\n    private mdbMovieSearchQuery: SearchMovieQuery,\n    private mdbMovieStore: MDBMovieStore,\n    private mdbMovieSearchStore: MDBMovieSearchStore,\n    private tmdbService: TmdbService,\n  ) { }\n\n  httpParam = new HttpParams();\n\n  /**\n   * Gets movie info. First it gets from offline source,\n   * if there is none, it gets from online source (OMDB)\n   */\n  getMovieInfo(val: string): Observable<any> {\n    let result;\n    const REGEX_IMDB_ID = new RegExp(STRING_REGEX_IMDB_ID, `gi`);\n    if (val.trim().match(REGEX_IMDB_ID)) {\n      result = this.getMovieByImdbId(val);\n    } else {\n      result = this.getMovieByTitle(val);\n    }\n    return result;\n  }\n\n  /**\n   * Gets movie details by imdb id\n   * @param val imdb id\n   */\n  getMovieByImdbId(val: string): Observable<IOmdbMovieDetail> {\n    const url = `${OMDB_URL}/?i=${val}&apikey=${OMDB_API_KEY}&plot=full`;\n    return this.http.get<IOmdbMovieDetail>(url).pipe(\n      map(data => {\n        console.log(data);\n        return data;\n      }),\n      tap(_ => this.log(``)),\n      catchError(this.handleError<IOmdbMovieDetail>('getMovie')));\n    // return this.http.get<OmdbMovie>(url).pipe(\n    //   tap(_ => this.log(``)),\n    //   catchError(this.handleError<OmdbMovie>('getMovie')))\n  }\n\n  /**\n   * most probably will not be used\n   * @param val Movie title\n   */\n  getMovieByTitle(val: string): Observable<IOmdbMovieDetail> {\n    const url = `${OMDB_URL}/?t=${val}&apikey=${OMDB_API_KEY}`;\n    return this.http.get<IOmdbMovieDetail>(url).pipe(tap(_ => this.log(`getMovie ${val}`)),\n      catchError(this.handleError<IOmdbMovieDetail>('getMovie')));\n  }\n\n  getMovieFromLibrary(val) {\n    this.ipcService.getMovieFromLibrary(val);\n  }\n\n  getImages(val: any): Observable<any> {\n    const url = `${OMDB_URL}/?t=${val}&apikey=${TMDB_API_KEY}`;\n    return this.http.get<IOmdbMovieDetail>(url).pipe(tap(_ => this.log(`getMovie ${val}`)),\n      catchError(this.handleError<IOmdbMovieDetail>('getMovie')));\n  }\n\n  searchSubtitleById(val: string) {\n    // insert code here\n  }\n\n  /**\n   * Gets IMDB id\n   *\n   * @param tmdbId tmdbId\n   * @returns external ids\n   */\n  getExternalId(tmdbId: number): Observable<TMDB_External_Id> {\n    return this.cacheService.get(tmdbId + '_EXTERNAL_ID', this.externalId(tmdbId));\n  }\n\n  getMovieBackdrop(val: string): Observable<any> {\n    const url = `${FANART_TV_URL}/${val}?api_key=${FANART_TV_API_KEY}`;\n    return this.http.get<any>(url).pipe(tap(_ => this.log('')),\n      catchError(this.handleError<any>('getMovieBackdrop')));\n  }\n\n  getMoviePoster(posterLink: string) {\n    const url = `https://image.tmdb.org/t/p/w600_and_h900_bestv2/biH5hW1BRfEr13oCizuAzpdBf2l.jpg`;\n    return this.http.get<any>(url, {\n      observe: 'response'\n    }).pipe(map(data => {\n      console.log(data);\n    }, catchError(this.handleError('getposter')))\n    );\n  }\n\n  /**\n   * Gets movie details from omdb.\n   * @param imdbId the imdb id.\n   */\n  getOmdbMovieDetails(imdbId: number): Observable<any> {\n    const url = `${OMDB_URL}/`;\n    const httpParam = new HttpParams().append(OmdbParameters.ApiKey, OMDB_API_KEY);\n\n    const myOmdbHttpOptions = {\n      headers: JSON_CONTENT_TYPE_HEADER,\n      params: httpParam\n    };\n    return this.http.get<any>(url, myOmdbHttpOptions).pipe(tap(_ => this.log('')),\n      catchError(this.handleError<any>('getOmdbMovieDetails')));\n  }\n\n  /**\n   * Gets movie with external id.(IMDb ID, TVDB ID, facebook,twitter,instagram)\n   * @param val external id\n   */\n  getFindMovie(val: string | number): Observable<any> {\n    const url = `${TMDB_URL}/find/${val}`;\n    let myHttpParam = new HttpParams().append(TmdbParameters.ApiKey, TMDB_API_KEY);\n    myHttpParam = myHttpParam.append('external_source', 'imdb_id');\n    const tmdbHttpOptions = {\n      headers: JSON_CONTENT_TYPE_HEADER,\n      params: myHttpParam\n    };\n    return this.http.get<any>(url, tmdbHttpOptions).pipe(tap(_ => this.log('')),\n      catchError(this.handleError<any>('getMoviesDiscover')));\n  }\n\n  /**\n   * TODO: add akita caching\n   * Gets related videos from TMDB.\n   * @param tmdbId the tmdb id.\n   */\n  getRelatedClips(tmdbId: number, refresh: boolean = false): Observable<any> {\n    let theFunction: Observable<any>;\n\n    // if (!this.mdbMovieQuery.hasEntity(tmdbId) || refresh) {\n    if (environment.dataSource.toString() === \"TMDB\") {\n      theFunction = this.tmdbService.getTmdbVideos(tmdbId);\n    }\n\n    // }\n    return this.cacheService.get(tmdbId + '_TMDB_VIDEOS', this.tmdbService.getTmdbVideos(tmdbId));\n  }\n\n  /**\n   *\n   * @param id tmdbId,imdbId, etc.\n   * @param appendToResponse\n   * @param refresh\n   * @returns\n   */\n  getMovieDetails(id: number, appendToResponse?: string, refresh: boolean = false): Observable<MDBMovie> {\n    let theFunction: Observable<any>;\n\n    if (!this.mdbMovieQuery.hasEntity(id) || refresh) {\n      if (environment.dataSource.toString() === \"TMDB\") {\n        theFunction = this.tmdbService.getTmdbMovieDetails(id, appendToResponse);\n      }\n      return theFunction.pipe(\n        first(),\n        map(data => {\n          let newData = new MDBMovie(data);\n          const store = {\n            id: id,\n            movie: newData\n          };\n          this.mdbMovieStore.add(store);\n          return this.mdbMovieQuery.getEntity(id).movie;\n        }),\n        catchError(this.handleError<any>('getMovieDetails')));\n    }\n    return of(this.mdbMovieQuery.getEntity(id).movie);\n\n  }\n\n  /**\n   * !UNUSED\n   * Gets movie details.\n   * @param tmdbId the tmdb id.\n   * @param val list of key object pair.`[key,object]`\n   * @param appendToResponse optional append to response\n   */\n  getTmdbMovieSmallDetails(tmdbId: number, val?: any[], appendToResponse?: string): Observable<any> {\n    const url = `${TMDB_URL}/movie/${tmdbId}`;\n    let myHttpParam = new HttpParams().append(TmdbParameters.ApiKey, TMDB_API_KEY);\n    // videos, images, credits, translations, similar, external_ids, alternative_titles,recommendations\n    //   keywords, reviews\n    if (!appendToResponse) {\n      const fullAppendToResponse = 'videos,images,credits,similar,external_ids,recommendations,release_dates';\n      myHttpParam = myHttpParam.append(TmdbParameters.AppendToResponse, fullAppendToResponse);\n    } else {\n      myHttpParam = myHttpParam.append(TmdbParameters.AppendToResponse, appendToResponse);\n    }\n\n    if (val && val.length > 0) {\n      // myHttpParam = this.appendParameters(val, myHttpParam)\n    }\n    const tmdbHttpOptions = {\n      headers: JSON_CONTENT_TYPE_HEADER,\n      params: myHttpParam\n    };\n    return this.http.get<any>(url, tmdbHttpOptions).pipe(tap(_ => this.log('')),\n      catchError(this.handleError<any>('getTmdbMovieDetails')));\n  }\n\n  /**\n   * Get movies discover by genre, year, etc.\n   * @param val parameter map\n   */\n  getMoviesDiscover(paramMap: Map<TmdbParameters, any>): Observable<any> {\n    let key = '';\n    for (let entry of paramMap.entries()) {\n      key += entry[0] + '_' + entry[1];\n    }\n    return this.cacheService.get(key + '_TMDB_DISCOVER', this.movieDiscover(paramMap));\n  }\n\n  /**\n   * TODO: Create akita caching.\n   *\n   * @param parameters\n   * @param refresh\n   * @returns\n   */\n  searchMovie(parameters: Map<TmdbParameters | TmdbSearchMovieParameters, any>, refresh: boolean = false): Observable<any> {\n    let theFunction: Observable<any>;\n    let queryId = `${parameters.get(TmdbSearchMovieParameters.Query)}_${parameters.get(TmdbSearchMovieParameters.Page)}`;\n    if (environment.dataSource.toString() === \"TMDB\") {\n      if (!this.mdbMovieQuery.hasEntity(queryId) || refresh) {\n        theFunction = this.tmdbService.searchTmdb(parameters);\n        return theFunction.pipe(\n          first(),\n          map((data: ITmdbResultObject) => {\n            let newData = [];\n            data.results.forEach(e => {\n              newData.push(new MDBMovie(e));\n            });\n            const store = {\n              id: queryId,\n              movie: newData,\n\n            };\n            // this.mdbMovieSearchStore.add(store);\n            return data;\n            // return this.mdbMovieSearchQuery.getEntity(queryId).movie;\n          }),\n          catchError(this.handleError<any>('getMovieDetails')));\n      }\n    }\n    // return of(this.mdbMovieSearchQuery.getEntity(id).movie);\n    // return [];\n  }\n\n  /**\n   * Appends parameters list into http param object.\n   * @param paramMap parameters key-value pair list\n   * @param myHttpParam http param to append to\n   */\n  private appendMappedParameters(paramMap: Map<TmdbParameters | TmdbSearchMovieParameters, any>, myHttpParam: HttpParams) {\n    for (let entry of paramMap.entries()) {\n      myHttpParam = myHttpParam.append(entry[0], entry[1]);\n    }\n    return myHttpParam;\n  }\n\n  /**\n   * Gets movie clips from YouTube.\n   * @param query query to search\n   */\n  getRandomVideoClip(query: string) {\n    const index = Math.round(Math.random() * (25));\n    console.log(index);\n    const baseUrl = 'https://www.googleapis.com/youtube/v3/search';\n    let myHttpParam = new HttpParams().append('part', 'snippet');\n    myHttpParam = myHttpParam.append('key', YOUTUBE_API_KEY);\n    myHttpParam = myHttpParam.append('q', query);\n    myHttpParam = myHttpParam.append('maxResults', '50');\n    myHttpParam = myHttpParam.append('order', 'relevance');\n    myHttpParam = myHttpParam.append('type', 'video');\n    const httpOptions = {\n      headers: JSON_CONTENT_TYPE_HEADER,\n      params: myHttpParam\n    };\n    // https://www.googleapis.com/youtube/v3/search?part=snippet&key=AIzaSyAC1kcZu_DoO7mbrMxMuCpO57iaDByGKV0&q=Toy%20Story%204%202019&maxResults=50&order=relevance&type=video\n    return this.http.get<any>(baseUrl, httpOptions).pipe(map((e) => e.items));\n  }\n\n  getSubtitleFile(filePath: string): Observable<any> {\n    return this.http.get<any>(filePath, { responseType: 'blob' as 'json' });\n  };\n\n  getSubtitleFileString(filePath: string): Observable<any> {\n    return this.http.get<any>(filePath, { responseType: 'text' as 'json' });\n  };\n\n  proxyTest() {\n\n    const tmdbHttpOptions = {\n      headers: JSON_CONTENT_TYPE_HEADER,\n      // params: myHttpParam\n\n    };\n    // return this.http.get<any>(\"/mdb/media/1234\", tmdbHttpOptions).pipe(tap(_ => this.log('')),\n    //   catchError(this.handleError<any>('proxyTest')))\n\n\n    // \"userName   \": \"myusername2\",\n    // \"password\": \"Password!123\",\n    // \"email\": \"asdasd@gmail.com\",\n    // \"firstName\": \"abraham\",\n    // \"lastName\": \"lincoln\"\n    // saveBookmark(bookmarkBody: any): Observable<any> {\n    return this.http.post<any>(`mdb\\\\profileData\\\\bookmark`, {\n      \"tmdbId   \": 123,\n      \"imdbId\": \"Password!123\",\n    }).pipe(tap(_ => this.log('')),\n      catchError(this.handleError<any>('saveFavorite')));\n    // }\n  }\n\n  private externalId(tmdbId: number): Observable<TMDB_External_Id> {\n    const url = `${TMDB_URL}/movie/${tmdbId}/external_ids?api_key=${TMDB_API_KEY}`;\n    return this.http.get<TMDB_External_Id>(url).pipe(tap(_ => this.log('')),\n      catchError(this.handleError<any>('getExternalId')));\n  }\n\n  private movieDiscover(paramMap: Map<TmdbParameters, any>) {\n\n    const url = `${TMDB_URL}/discover/movie`;\n    let myHttpParam = new HttpParams().append(TmdbParameters.ApiKey, TMDB_API_KEY);\n    myHttpParam = this.appendMappedParameters(paramMap, myHttpParam);\n    const tmdbHttpOptions = {\n      headers: JSON_CONTENT_TYPE_HEADER,\n      params: myHttpParam\n    };\n    return this.http.get<any>(url, tmdbHttpOptions).pipe(tap(_ => this.log('')),\n      catchError(this.handleError<any>('getMoviesDiscover')));\n  }\n\n  /**\n   * Error handler.\n   * @param operation the operation\n   * @param result result\n   */\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n      console.error(error); // log to console instead\n      this.log(`${operation} failed: ${error.message}`);\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n\n  private log(message: string) {\n    console.log(`MovieService: ${message} `);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cacheService",
                        "type": "CacheService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ipcService",
                        "type": "IpcService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "mdbMovieQuery",
                        "type": "MDBMovieQuery",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "mdbMovieSearchQuery",
                        "type": "SearchMovieQuery",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "mdbMovieStore",
                        "type": "MDBMovieStore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "mdbMovieSearchStore",
                        "type": "MDBMovieSearchStore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "tmdbService",
                        "type": "TmdbService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cacheService",
                        "type": "CacheService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ipcService",
                        "type": "IpcService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mdbMovieQuery",
                        "type": "MDBMovieQuery",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mdbMovieSearchQuery",
                        "type": "SearchMovieQuery",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mdbMovieStore",
                        "type": "MDBMovieStore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mdbMovieSearchStore",
                        "type": "MDBMovieSearchStore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tmdbService",
                        "type": "TmdbService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "NavigationService",
            "id": "injectable-NavigationService-5394148cf0988c3aaed39fcb2e8a4b0d3d3351ad3eb6443bc0ea7b9d653e0f3c9eb899b006f7f86e1309a6d322118203bbfec258ca235e1ff2b19dcd0261dd89",
            "file": "src/app/services/navigation.service.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NavigationService {\n  // currentPage: string\n  // private root\n  // private previousPages: string[]\n  // private nextPages: string[]\n\n  constructor() { }\n  // constructor(root, location) {\n  //   // console.log(typeof root);\n  //   // console.log(typeof location);\n  // }\n\n  // goToPage(val: string) {\n  //   this.previousPages.push(this.currentPage)\n  //   this.currentPage = val\n  //   this.nextPages = []\n  // }\n\n  // nextPage() {\n  //   this.previousPages.push(this.currentPage)\n  //   // this.currentPage\n  // }\n  // previousPage() { }\n  // getPreviousPagesLength() { return this.previousPages.length }\n  // getNextPagesLength() { return this.nextPages.length }\n}\n\n\n// no use yet.\n\nexport interface INavigation {\n  currentPage: string,\n  // previousPages: string[],\n  // nextPages: string[]\n}\n\nexport class Navigation implements INavigation {\n  currentPage: string\n  private previousPages: string[]\n  private nextPages: string[]\n\n  constructor(root, location) {\n\n  }\n\n  goToPage(val: string) {\n    this.previousPages.push(this.currentPage)\n    this.currentPage = val\n    this.nextPages = []\n  }\n  nextPage() {\n    this.previousPages.push(this.currentPage)\n    // this.currentPage\n  }\n  previousPage() { }\n  getPreviousPagesLength() { return this.previousPages.length }\n  getNextPagesLength() { return this.nextPages.length }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 6
            },
            "type": "injectable"
        },
        {
            "name": "NotificationService",
            "id": "injectable-NotificationService-d96e8bee881de68768193c2f139fdd00eb236e61c7a0d7d7c80d236b2d4f9c6ff53f30a851d0a7c58730449b8e4e63f9f19454f3373692adfa2c0b0e1140f3ee",
            "file": "src/app/services/notification.service.ts",
            "properties": [
                {
                    "name": "bookmarkObservable",
                    "defaultValue": "new Observable<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methods": [
                {
                    "name": "setNotification",
                    "args": [
                        {
                            "name": "notif",
                            "type": "INotification",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "notif",
                            "type": "INotification",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { IUserSavedData } from '@models/interfaces';\nimport { environment } from '@environments/environment';\nimport { Injectable } from '@angular/core';\nimport { FirebaseService, FirebaseOperator, CollectionName, FieldName } from './firebase.service';\nimport { IpcService } from './ipc.service';\nimport { Observable } from 'rxjs';\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotificationService {\n\n  bookmarkObservable = new Observable<any>();\n\n  constructor(\n    private firebaseService: FirebaseService,\n    private ipcService: IpcService) { }\n\n\n  setNotification(notif: INotification) {\n\n  }\n\n}\nenum NotificationType {\n  ERROR = 'error',\n  INFO = 'info',\n  WARNING = 'warning',\n}\n\nexport interface INotification extends IUserSavedData {\n  type: NotificationType,\n  message: string,\n  description?: string;\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "firebaseService",
                        "type": "FirebaseService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ipcService",
                        "type": "IpcService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "firebaseService",
                        "type": "FirebaseService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ipcService",
                        "type": "IpcService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "PersonService",
            "id": "injectable-PersonService-cdc6e19214578d3f1b7f05e88f4098d7acbaa60d4506d811e7cb9bc08b701a2dc176788d857a703c50391f89145fc8bccc8fb1c8a8adeced0ddca969dd034d56",
            "file": "src/app/services/person.service.ts",
            "properties": [
                {
                    "name": "httpParam",
                    "defaultValue": "new HttpParams()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "omdbUrl",
                    "defaultValue": "'http://www.omdbapi.com'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "tmdbUrl",
                    "defaultValue": "'https://api.themoviedb.org/3'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methods": [
                {
                    "name": "getPersonDetails",
                    "args": [
                        {
                            "name": "id",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "language",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets the person details.\n",
                    "description": "<p>Gets the person details.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 697,
                                "end": 699,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "id"
                            },
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 691,
                                "end": 696,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>tmdb person_id</p>\n"
                        },
                        {
                            "name": {
                                "pos": 727,
                                "end": 735,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "language"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 721,
                                "end": 726,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>language, if blank, it is defaulted to <code>en-US</code></p>\n"
                        }
                    ]
                },
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "operation",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'operation'"
                        },
                        {
                            "name": "result",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "(error: any) => Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "operation",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'operation'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "result",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams, } from '@angular/common/http';\nimport { Observable, of, Subscriber, forkJoin } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { TmdbParameters } from '@models/interfaces'\nimport { TMDB_API_KEY } from '@shared/constants';\n\nconst jsonContentType = new HttpHeaders({ 'Content-Type': 'application/json' })\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PersonService {\n  httpParam = new HttpParams()\n  omdbUrl = 'http://www.omdbapi.com'\n  tmdbUrl = 'https://api.themoviedb.org/3'\n  constructor(\n    private http: HttpClient) { }\n\n  /**\n   * Gets the person details.\n   * @param id tmdb person_id\n   * @param language language, if blank, it is defaulted to `en-US`\n   */\n  getPersonDetails(id: string | number, language?: string) {\n    console.log('in getPersonDetails');\n    const url = `${this.tmdbUrl}/person/${id}`\n    let myHttpParam = new HttpParams().append(TmdbParameters.ApiKey, TMDB_API_KEY)\n    if (!language) {\n      language = 'en-US'\n    }\n    // const appendToResponse = 'movie_credits,tv_credits,combined_credits,external_ids,images,tagged_images'\n    const appendToResponse = 'movie_credits,external_ids,images'\n    myHttpParam = myHttpParam.append(TmdbParameters.Language, language)\n    myHttpParam = myHttpParam.append(TmdbParameters.AppendToResponse, appendToResponse)\n    const tmdbHttpOptions = {\n      headers: jsonContentType,\n      params: myHttpParam\n    };\n    return this.http.get<any>(url, tmdbHttpOptions).pipe(tap(_ => this.log('')),\n      catchError(this.handleError<any>('getPersonDetails')))\n  }\n\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n      console.error(error); // log to console instead\n      this.log(`${operation} failed: ${error.message}`);\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n\n  private log(message: string) {\n    console.log(`MovieService: ${message} `);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "PreferencesService",
            "id": "injectable-PreferencesService-4e29b453d27338683a88facd61a9ea632d602204a3f2e36e2c012dedec96a92cd6e4ff92a3664465c51d05590eab877b5a767e417147256a7bedfd6c0b44cbd9",
            "file": "src/app/services/preferences.service.ts",
            "properties": [
                {
                    "name": "isGetTorrentFromMovieCard",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "preferences",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPreferences",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [
                {
                    "name": "getPreferences",
                    "args": [],
                    "optional": false,
                    "returnType": "IPreferences",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "pullPreferences",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPull preferences from file or online source.\n",
                    "description": "<p>Pull preferences from file or online source.</p>\n"
                },
                {
                    "name": "resetPreferences",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "savePreferences",
                    "args": [
                        {
                            "name": "prefrences",
                            "type": "IPreferences",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "prefrences",
                            "type": "IPreferences",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Observable, Subject } from 'rxjs';\nimport { Injectable } from '@angular/core'\nimport { IPreferences } from '@models/preferences.model';\nimport { DEFAULT_PREFERENCES } from '@shared/constants';\n\n@Injectable({ providedIn: 'root' })\nexport class PreferencesService {\n  isGetTorrentFromMovieCard = false\n\n  preferences: IPreferences\n  constructor() { }\n\n  /**\n   * Pull preferences from file or online source.\n   */\n  pullPreferences() { }\n\n  getPreferences() {\n    if (!this.preferences) this.preferences = DEFAULT_PREFERENCES\n    return this.preferences\n  }\n\n  savePreferences(prefrences: IPreferences) {\n    // this.ipcService.savePreferences(DEFAULT_PREFERENCES)\n    // this.ipcService.preferences.subscribe(e => {\n    //   console.log('this.ipcService.preferences ', e)\n    //   this.preferencesObject = e\n    // })\n    // this.preferencesObject.libraryFolders = this.libraryFolders\n    // this.ipcService.call(this.ipcService.IPCCommand.PREFERENCES_SET, this.preferencesObject)\n  }\n\n  resetPreferences() {\n    this.preferences = DEFAULT_PREFERENCES\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "type": "injectable"
        },
        {
            "name": "SearchMovieQuery",
            "id": "injectable-SearchMovieQuery-444816693d68c2967bdb9eeec3621030ba9ef09281aa71107c42347c0c55152beef01a6611055b55fb3a9b8212b16ed696a8e6c2e90eb6bc125e8c3ff8bdba4e",
            "file": "src/app/services/movie/movie.query.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { QueryEntity } from '@datorama/akita';\nimport { MDBMovie } from '@models/mdb-movie.model';\nimport { MDBMovieListModel, MDBMovieModel, TmdbMovieModel } from './interface/movie';\nimport { MDBMovieState, MDBMovieStore, TMDBMovieStore, TmdbMovieState as TMDBMovieState, MDBMovieSearchState, MDBMovieSearchStore } from './movie.store';\n\n@Injectable({ providedIn: 'root' })\nexport class TMDBMovieQuery extends QueryEntity<TMDBMovieState, TmdbMovieModel> {\n  constructor(protected store: TMDBMovieStore) {\n    super(store);\n  }\n}\n\n@Injectable({ providedIn: 'root' })\nexport class MDBMovieQuery extends QueryEntity<MDBMovieState, MDBMovieModel> {\n  constructor(protected store: MDBMovieStore) {\n    super(store);\n  }\n}\n\n// @Injectable({ providedIn: 'root' })\n// export class DiscoverMovieQuery extends QueryEntity<MDBMovieState, TmdbMovieModel> {\n//   constructor(protected store: MDBMovieStore) {\n//     super(store);\n//   }\n// }\n\n@Injectable({ providedIn: 'root' })\nexport class SearchMovieQuery extends QueryEntity<MDBMovieSearchState, MDBMovieListModel> {\n  constructor(protected store: MDBMovieSearchStore) {\n    super(store);\n  }\n}\n\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "MDBMovieSearchStore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "MDBMovieSearchStore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "QueryEntity",
            "type": "injectable"
        },
        {
            "name": "StartTimeStamp",
            "id": "injectable-StartTimeStamp-717ea551e1e6c980a437687032f45a57f5a494c3cd7f84384e3500d4815856380ca6a5f5438aa33a3d82fbc9ce78a3e5830b0720148c508b423cb665b89194d4",
            "file": "src/app/mock-data.ts",
            "properties": [
                {
                    "name": "startTimeStamp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 274,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getStartTimeStamp",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 278,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setStartTimeStamp",
                    "args": [
                        {
                            "name": "val",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 275,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { ITmdbResultObject, ILibraryMovie, MDBTorrent, IOmdbMovieDetail } from '@models/interfaces'\nimport { Injectable } from '@angular/core'\nimport { IYTSSingleQuery } from '@models/yts-torrent.model'\nimport { IProfileData } from '@models/profile-data.model'\n\nexport const TEST_LIBRARY_MOVIES: ILibraryMovie[] = [\n  {\n    tmdbId: 0,\n    imdbId: 'tt0095956',\n    title: 'Titanic',\n    year: 0,\n    directory: ['D:\\\\media server\\\\movies\\\\titanic.mp4']\n  },\n  {\n    tmdbId: 0,\n    imdbId: 'tt0133093',\n    title: 'Guardians of the Galaxy',\n    year: 0,\n    directory: ['D:\\\\media server\\\\movies\\\\guardians of the galaxy.mp4']\n  },\n  {\n    tmdbId: 680,\n    imdbId: 'tt0110912',\n    title: 'Pulp Fiction',\n    year: 1994,\n    directory: ['D:\\\\media server\\\\movies\\\\pulp fiction.mp4']\n  }\n]\n\nexport const TEST_OMDB_MOVIE_DETAIL = {\n  Title: 'WALL·E',\n  Year: '2008',\n  Rated: 'G',\n  Released: '27 Jun 2008',\n  Runtime: '98 min',\n  Genre: 'Animation, Adventure, Family, Sci-Fi',\n  Director: 'Andrew Stanton',\n  Writer:\n    'Andrew Stantoyzn (original story by), Pete Docter (original story by), Andrew Stanton (screenplay by), Jim Reardon (screenplay by)',\n  Actors: 'Ben Burtt, Elissa Knight, Jeff Garlin, Fred Willard',\n  Plot:\n    'In the distant future, a small waste-collecting robot inadvertently embarks on a space journey that will ultimately decide the fate of mankind.',\n  Language: 'English',\n  Country: 'USA',\n  Awards: 'Won 1 Oscar. Another 89 wins & 90 nominations.',\n  Poster:\n    'https://m.media-amazon.com/images/M/MV5BMjExMTg5OTU0NF5BMl5BanBnXkFtZTcwMjMxMzMzMw@@._V1_SX300.jpg',\n  Ratings: [\n    {\n      Source: 'Internet Movie Database',\n      Value: '8.4/10'\n    },\n    {\n      Source: 'Rotten Tomatoes',\n      Value: '95%'\n    },\n    {\n      Source: 'Metacritic',\n      Value: '95/100'\n    }\n  ],\n  Metascore: '95',\n  imdbRating: '8.4',\n  imdbVotes: '919,942',\n  imdbID: 'tt0910970',\n  Type: 'movie',\n  DVD: '18 Nov 2008',\n  BoxOffice: '$223,749,872',\n  Production: 'Walt Disney Pictures',\n  Website: 'http://www.wall-e.com/',\n  Response: 'True'\n}\n\nexport const MOCK_MOVIE_DETAIL = {\n  id: 1,\n  Title: 'Reservoir Dogs',\n  Year: 1992,\n  Plot:\n    `Eight men eat breakfast at a Los Angeles diner before carrying out a diamond heist. Mob boss Joe Cabot and his son and underboss 'Nice Guy' Eddie Cabot are responsible for planning the job. The rest of the men use aliases issued by Joe Cabot: Mr. Brown, Mr. White, Mr. Blonde, Mr. Blue, Mr. Orange and Mr. Pink.`,\n  genre: '',\n  isAvailable: true,\n  imageDirectory: '',\n  Runtime: '99',\n  Genre: 'Adventure',\n  Director: 'Quentin Tarantino',\n  Writer: 'Quentin Tarantino',\n  Poster: '',\n  torrents: '',\n  backgroundImageDirectory: ''\n}\n\nexport const MOCK_BULK_DOWNLOAD_TORRENTS = [\n  {\n    id: 1,\n    name: 'Guardians of the Galaxy (2014) 1080p BrRip x264 - YIFY',\n    size: 1988939229,\n    hash: '11A2AC68A11634E980F265CB1433C599D017A759',\n    checked: false\n  },\n  {\n    id: 1,\n    name: 'Guardians of the Galaxy Vol. 2 (2017) 720p BrRip x264 - VPPV',\n    size: 1215947108,\n    hash: '68132C479348C1AA2618D55C8BBEC6EB2597A5BA',\n    checked: false\n  },\n  {\n    id: 1,\n    name: 'The.Wailing.2016.1080p.BluRay.10bit.HEVC-MkvCage [aka Gokseong]',\n    size: 3976321027,\n    hash: '2F157306E5114EA8044302586A89FDC4E0FAC2A1',\n    checked: false\n  },\n  {\n    id: 1,\n    name: 'First.Man.2018.HC.HDRip.XviD.AC3-EVO',\n    size: 1474599225,\n    hash: '885CCCAD7F1942A515DA564FCF62933A105931DB',\n    checked: false\n  },\n  {\n    id: 2,\n    name: 'First.Man.2018.720p.BRRip.x264.MkvCage',\n    size: 1375985558,\n    hash: '712837DCAA3F4275B89E640EB21DAE72D2E0C38B',\n    checked: false\n  },\n  {\n    id: 1,\n    name: 'Home Alone (1990) 1080p BrRip x264 - YIFY',\n    size: 1767740507,\n    hash: '5FEFAC61C0F42FFC43946B3379A540D1A38F6480',\n    checked: false\n  }\n]\n\nexport const MOVIEGENRES = [\n  { id: 1, code: 'ACT', description: 'Action', isChecked: true },\n  { id: 2, code: 'ADV', description: 'Adventure', isChecked: false },\n  { id: 3, code: 'DOC', description: 'Documentary', isChecked: false },\n  { id: 4, code: 'DRA', description: 'Drama', isChecked: false },\n  { id: 5, code: 'HOR', description: 'Horror', isChecked: false },\n  { id: 6, code: 'SCI', description: 'Sci-Fi', isChecked: true },\n  { id: 7, code: 'THR', description: 'Thriller', isChecked: false }\n]\n\nexport let DISPLAYEDMOVIES = [\n  {\n    title: 'Guardians of the Galaxy',\n    year: 2014,\n    plot:\n      'A group of intergalactic criminals must pull together to stop a fanatical warrior with plans to purge the universe.',\n    imdbId: 'tt2015381',\n    torrents: [],\n    id: 118340\n  },\n  {\n    title: 'The Wailing',\n    year: 2016,\n    plot:\n      'Soon after a stranger arrives in a little village, a mysterious sickness starts spreading. A policeman, drawn into the incident, is forced to solve the mystery in order to save his daughter.',\n    imdbId: 'tt5215952',\n    torrents: [],\n    id: 293670\n  },\n  {\n    title: 'First Man',\n    year: 2018,\n    plot:\n      'A look at the life of the astronaut, Neil Armstrong, and the legendary space mission that led him to become the first man to walk on the Moon on July 20, 1969.',\n    imdbId: 'tt1213641',\n    torrents: [],\n    id: 369972\n  },\n  {\n    title: 'The Karate Kid',\n    year: 1984,\n    plot:\n      'A Japanese martial arts instructor agrees to teach karate to a bullied teenager.',\n    imdbId: 'tt0087538',\n    torrents: [],\n    id: 1885\n  },\n  {\n    title: 'Top Gun',\n    year: 1986,\n    plot: `As students at the United States Navys elite fighter weapons school compete to be best in the class, one daring young pilot learns a few things from a civilian instructor that are not taught in the classroom.\n    `,\n    imdbId: 'tt0092099',\n    torrents: [],\n    id: 744\n  },\n  {\n    title: 'Reservoir Dogs',\n    year: 1992,\n    plot:\n      'When a simple jewelry heist goes horribly wrong, the surviving criminals begin to suspect that one of them is a police informant.',\n    imdbId: 'tt0105236',\n    torrents: [],\n    id: 500\n  },\n  {\n    title: 'Spider-Man',\n    year: 2002,\n    plot:\n      'When bitten by a genetically modified spider, a nerdy, shy, and awkward high school student gains spider-like abilities that he eventually must use to fight evil as a superhero after tragedy befalls his family.',\n    imdbId: 'tt0145487',\n    torrents: [],\n    id: 557\n  },\n  {\n    title: 'Superman Returns',\n    year: 2006,\n    plot:\n      'Superman returns to Earth after spending five years in space examining his homeworld Krypton. But he finds things have changed while he was gone, and he must once again prove himself important to the world.',\n    imdbId: 'tt0348150',\n    torrents: [],\n    id: 1452\n  },\n  {\n    title: 'Home Alone',\n    year: 1990,\n    plot:\n      'An eight-year-old troublemaker must protect his house from a pair of burglars when he is accidentally left home alone by his family during Christmas vacation.',\n    imdbId: 'tt0099785',\n    torrents: [],\n    id: 771\n  }\n]\n// used in top-nav for search\nexport const MOVIES: IOmdbMovieDetail[] = [\n  // { id: 1, Title: 'Face Off', Year: 1997, Plot: '', genre: 'Action', isAvailable: false, imageDirectory: './assets/images/1997-face-off-poster1.jpg', Runtime: '156', Genre: '', Director: '', Writer: '', Poster: '', imdbID: '' },\n  // { id: 2, Title: 'Nacho Libre', Year: 2006, Plot: '', genre: 'Comedy', isAvailable: true, imageDirectory: './assets/images/2006-nacho_libre-1.jpg', Runtime: '120', Genre: '', Director: '', Writer: '', Poster: '', imdbID: '' },\n  // { id: 3, Title: 'Salt', Year: 2006, Plot: '', genre: 'Action', isAvailable: false, imageDirectory: './assets/images/2006-salt-1.jpg', Runtime: '110', Genre: '', Director: '', Writer: '', Poster: '', imdbID: '' },\n  // { id: 4, Title: 'Valkyrie', Year: 2008, Plot: '', genre: 'Action', isAvailable: true, imageDirectory: './assets/images/2008-valkyrie-1.jpg', Runtime: '124', Genre: '', Director: '', Writer: '', Poster: '', imdbID: '' },\n  // { id: 5, Title: 'Jaws 2', Year: 1978, Plot: '', genre: 'Thriller', isAvailable: false, imageDirectory: './assets/images/1978-jaws_2.jpg', Runtime: '120', Genre: '', Director: '', Writer: '', Poster: '', imdbID: '' },\n  // { id: 6, Title: 'Paper Towns', Year: 2015, Plot: '', genre: 'Drama', isAvailable: true, imageDirectory: './assets/images/2015-paper_towns.jpg', Runtime: '120', Genre: '', Director: '', Writer: '', Poster: '', imdbID: '' },\n  // { id: 7, Title: 'Good Morning Vietnam', Year: 1987, Plot: '', genre: 'Action', isAvailable: false, imageDirectory: './assets/images/1987-good_morning_vietnam.jpg', Runtime: '120', Genre: '', Director: '', Writer: '', Poster: '', imdbID: '' },\n  // { id: 8, Title: 'Three Musketeers', Year: 2011, Plot: '', genre: 'Action', isAvailable: true, imageDirectory: './assets/images/2011-three_musketeers.jpg', Runtime: '180', Genre: '', Director: '', Writer: '', Poster: '', imdbID: '' }\n]\n\nexport const TORRENTS: MDBTorrent[] = [\n  //   {\n  //   id: 1,\n  //   name: 'Valkyrie.DVD-R.NTSC.2008',\n  //   size: 4681064562,\n  //   hash: 'hh9rPLQdJPYDq/dmDuTMogqQYDk='\n  // },\n  // {\n  //   id: 1,\n  //   name: 'Valkyrie.2008.Bluray.1080p.DTS-HD.x264-Grym',\n  //   size: 21702179889,\n  //   hash: '8KBwA9eFjEJgN6/RZSSJP80t91s='\n  // },\n  // {\n  //   id: 1,\n  //   name: 'Valkyrie.2008.BluRay.1080p.x264.AAC.5.1.-.Hon3y',\n  //   size: 2996573771,\n  //   hash: 'HHn7J1vN1Y8nGXJqVz0ZrgwWeJE='\n  // }, {\n  //   id: 1,\n  //   name: 'Valkyrie (2008) 1080p BrRip x264 - 1.70GB - YIFY',\n  //   size: 1827526513,\n  //   hash: 'lop06WdSY2yjNig+yeQrj1wm6jY='\n  // },\n]\n\n@Injectable()\nexport class StartTimeStamp {\n  private startTimeStamp: number\n  setStartTimeStamp(val: number): void {\n    this.startTimeStamp = val\n  }\n  getStartTimeStamp(): number {\n    return this.startTimeStamp\n  }\n}\n\n@Injectable()\nexport class DisplayedTorrents {\n  private myDisplayedTorrents: DisplayedTorrent[]\n  // add(val: DisplayedTorrent) {\n  //   val = new DisplayedTorrent()\n  //   this.myDisplayedTorrents.push(val)\n  // }\n  getDisplayedTorrents() {\n    return this.myDisplayedTorrents\n  }\n}\n\n@Injectable()\nexport class DisplayedTorrent {\n  private added?: string\n  private hash: string\n  private name: string\n  private size: number\n  constructor(added: string, hash: string, name?: string, size?: number) {\n    this.added = added\n    this.hash = hash\n    this.name = name\n    this.size = size\n  }\n  getAdded(): string {\n    return this.added\n  }\n  getHash(): string {\n    return this.hash\n  }\n  getName(): string {\n    return this.name\n  }\n  getSize(): number {\n    return this.size\n  }\n}\n\n\nexport let TMDB_SEARCH_RESULTS: ITmdbResultObject = {\n  page: 1,\n  total_results: 3810,\n  total_pages: 191,\n  results: [\n    {\n      popularity: 47.572,\n      vote_count: 13899,\n      video: false,\n      poster_path: '/hbhFnRzzg6ZDmm8YAmxBnQpQIPh.jpg',\n      id: 278,\n      adult: false,\n      backdrop_path: '/x7O7oJO7BeXWvqXpLa5YoJd8ZD5.jpg',\n      original_language: 'en',\n      original_title: 'The Shawshank Redemption',\n      genre_ids: [80, 18],\n      title: 'The Shawshank Redemption',\n      vote_average: 8.7,\n      overview:\n        'Framed in the 1940s for the double murder of his wife and her lover, upstanding banker Andy Dufresne begins a new life at the Shawshank prison, where he puts his accounting skills to work for an amoral warden. During his long stretch in prison, Dufresne comes to be admired by the other inmates -- including an older prisoner named Red -- for his integrity and unquenchable sense of hope.',\n      release_date: '1994-09-23'\n    },\n    {\n      popularity: 30.437,\n      vote_count: 16212,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 680,\n      adult: false,\n      backdrop_path: '/4cDFJr4HnXN5AdPw4AKrmLlMWdO.jpg',\n      original_language: 'en',\n      original_title: 'Pulp Fiction',\n      genre_ids: [80, 53],\n      title: 'Pulp Fiction',\n      vote_average: 8.4,\n      overview:\n        `A burger-loving hit man, his philosophical partner, a drug-addled gangster's moll and a washed-up boxer converge in this sprawling, comedic crime caper. Their adventures unfurl in three stories that ingeniously trip back and forth in time.`,\n      release_date: '1994-10-14'\n    },\n    {\n      popularity: 30.008,\n      vote_count: 10939,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 8587,\n      adult: false,\n      backdrop_path: '/kZ9CKeZeKMUtrjZ7RuArjVMTDF4.jpg',\n      original_language: 'en',\n      original_title: 'The Lion King',\n      genre_ids: [16, 18, 10751],\n      title: 'The Lion King',\n      vote_average: 8.2,\n      overview:\n        'A young lion cub named Simba can\\'t wait to be king. But his uncle craves the title for himself and will stop at nothing to get it.',\n      release_date: '1994-06-23'\n    },\n    {\n      popularity: 34.399,\n      id: 101,\n      video: false,\n      vote_count: 8176,\n      vote_average: 8.3,\n      title: 'Léon: The Professional',\n      release_date: '1994-11-18',\n      original_language: 'fr',\n      original_title: 'Léon',\n      genre_ids: [53, 80, 18],\n      backdrop_path: '/dXQ7HILRK1Tg33RT64JwbQI7Osh.jpg',\n      adult: false,\n      overview:\n        'Léon, the top hit man in New York, has earned a rep as an effective \"cleaner\". But when his next-door neighbors are wiped out by a loose-cannon DEA agent, he becomes the unwilling custodian of 12-year-old Mathilda. Before long, Mathilda\\'s thoughts turn to revenge, and she considers following in Léon\\'s footsteps.',\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      isAvailable: true\n    },\n    {\n      popularity: 31.962,\n      vote_count: 15752,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 13,\n      adult: false,\n      backdrop_path: '/wMgbnUVS9wbRGAdki8fqxKU1O0N.jpg',\n      original_language: 'en',\n      original_title: 'Forrest Gump',\n      genre_ids: [35, 18, 10749],\n      title: 'Forrest Gump',\n      vote_average: 8.4,\n      overview:\n        'A man with a low IQ has accomplished great things in his life and been present during significant historic events—in each case, far exceeding what anyone imagined he could do. But despite all he has achieved, his one true love eludes him.',\n      release_date: '1994-07-06'\n    },\n    {\n      popularity: 24.394,\n      vote_count: 5628,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 854,\n      adult: false,\n      backdrop_path: '/oYVf9gqxZduttG6HW2Qo4ZUxLWW.jpg',\n      original_language: 'en',\n      original_title: 'The Mask',\n      genre_ids: [35, 80, 14, 10749],\n      title: 'The Mask',\n      vote_average: 6.8,\n      overview:\n        'When timid bank clerk Stanley Ipkiss discovers a magical mask containing the spirit of the Norse god Loki, his entire life changes. While wearing the mask, Ipkiss becomes a supernatural playboy exuding charm and confidence which allows him to catch the eye of local nightclub singer Tina Carlyle. Unfortunately, under the mask\\'s influence, Ipkiss also robs a bank, which angers junior crime lord Dorian Tyrell, whose goons get blamed for the heist.',\n      release_date: '1994-07-29'\n    },\n    {\n      popularity: 26.233,\n      vote_count: 4409,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 408,\n      adult: false,\n      backdrop_path: '/c66otZnSdri67kR7ps92kRX849o.jpg',\n      original_language: 'en',\n      original_title: 'Snow White and the Seven Dwarfs',\n      genre_ids: [16, 14, 10751],\n      title: 'Snow White and the Seven Dwarfs',\n      vote_average: 7,\n      overview:\n        'A beautiful girl, Snow White, takes refuge in the forest in the house of seven dwarfs to hide from her stepmother, the wicked Queen. The Queen is jealous because she wants to be known as \"the fairest in the land,\" and Snow White\\'s beauty surpasses her own.',\n      release_date: '1937-12-21'\n    },\n    {\n      popularity: 25.24,\n      vote_count: 8547,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 424,\n      adult: false,\n      backdrop_path: '/cTNYRUTXkBgPH3wP3kmPUB5U6dA.jpg',\n      original_language: 'en',\n      original_title: 'Schindler\\'s List',\n      genre_ids: [18, 36, 10752],\n      title: 'Schindler\\'s List',\n      vote_average: 8.6,\n      overview:\n        'The true story of how businessman Oskar Schindler saved over a thousand Jewish lives from the Nazis while they worked as slaves in his factory during World War II.',\n      release_date: '1993-12-15'\n    },\n    {\n      popularity: 20.34,\n      vote_count: 7817,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 500,\n      adult: false,\n      backdrop_path: '/fupyzBwFAn1PoeCXhp54bYVM2ER.jpg',\n      original_language: 'en',\n      original_title: 'Reservoir Dogs',\n      genre_ids: [80, 53],\n      title: 'Reservoir Dogs',\n      vote_average: 8.2,\n      overview:\n        'A botched robbery indicates a police informant, and the pressure mounts in the aftermath at a warehouse. Crime begets violence as the survivors -- veteran Mr. White, newcomer Mr. Orange, psychopathic parolee Mr. Blonde, bickering weasel Mr. Pink and Nice Guy Eddie -- unravel.',\n      release_date: '1992-10-23'\n    },\n    {\n      popularity: 11.398,\n      vote_count: 1295,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 888,\n      adult: false,\n      backdrop_path: '/vbWvWqZJiEiffj8xag0owDExRVg.jpg',\n      original_language: 'en',\n      original_title: 'The Flintstones',\n      genre_ids: [35, 14, 10751],\n      title: 'The Flintstones',\n      vote_average: 5.2,\n      overview:\n        'Modern Stone Age family the Flintstones hit the big screen in this live-action version of the classic cartoon. Fred helps Barney adopt a child. Barney sees an opportunity to repay him when Slate Mining tests its employees to find a new executive. But no good deed goes unpunished.',\n      release_date: '1994-05-26'\n    },\n    {\n      popularity: 13.378,\n      id: 9739,\n      video: false,\n      vote_count: 1801,\n      vote_average: 6.5,\n      title: 'Demolition Man',\n      release_date: '1993-10-08',\n      original_language: 'en',\n      original_title: 'Demolition Man',\n      genre_ids: [80, 28, 878],\n      backdrop_path: '/2p5rA1NRoyyAFfzdHl1Ab1RN3qr.jpg',\n      adult: false,\n      overview:\n        'Simon Phoenix, a violent criminal cryogenically frozen in 1996, escapes during a parole hearing in 2032 in the utopia of San Angeles. Police are incapable of dealing with his violent ways and turn to his captor, who had also been cryogenically frozen after being wrongfully accused of killing 30 innocent people while apprehending Phoenix.',\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg'\n    },\n    {\n      popularity: 13.039,\n      vote_count: 2070,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 36955,\n      adult: false,\n      backdrop_path: '/o2agns0LEqyEUCByMT8ViIOio7r.jpg',\n      original_language: 'en',\n      original_title: 'True Lies',\n      genre_ids: [28, 53],\n      title: 'True Lies',\n      vote_average: 6.9,\n      overview:\n        'Harry Tasker is a secret agent for the United States Government. For years, he has kept his job from his wife, but is forced to reveal his identity and try to stop nuclear terrorists when he and his wife are kidnapped by them.',\n      release_date: '1994-07-15'\n    },\n    {\n      popularity: 16.688,\n      vote_count: 2909,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 10112,\n      adult: false,\n      backdrop_path: '/fojdVtSsZa7fXyJQ6w1Exw7GWum.jpg',\n      original_language: 'en',\n      original_title: 'The Aristocats',\n      genre_ids: [12, 16, 35, 10751],\n      title: 'The Aristocats',\n      vote_average: 7.3,\n      overview:\n        'When Madame Adelaide Bonfamille leaves her fortune to Duchess and her children—Bonfamille’s beloved family of cats—the butler plots to steal the money and kidnaps the legatees, leaving them out on a country road. All seems lost until the wily Thomas O’Malley Cat and his jazz-playing alley cats come to the aristocats’ rescue.',\n      release_date: '1970-12-24'\n    },\n    {\n      popularity: 20.126,\n      vote_count: 4866,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 620,\n      adult: false,\n      backdrop_path: '/qmDy6Rdom8d8UFj9GeAAtVIjTRT.jpg',\n      original_language: 'en',\n      original_title: 'Ghostbusters',\n      genre_ids: [35, 14],\n      title: 'Ghostbusters',\n      vote_average: 7.4,\n      overview:\n        'After losing their academic posts at a prestigious university, a team of parapsychologists goes into business as proton-pack-toting \"ghostbusters\" who exterminate ghouls, hobgoblins and supernatural pests of all stripes. An ad campaign pays off when a knockout cellist hires the squad to purge her swanky digs of demons that appear to be living in her refrigerator.',\n      release_date: '1984-06-08'\n    },\n    {\n      popularity: 15.25,\n      id: 2758,\n      video: false,\n      vote_count: 1312,\n      vote_average: 6.7,\n      title: 'Addams Family Values',\n      release_date: '1993-11-19',\n      original_language: 'en',\n      original_title: 'Addams Family Values',\n      genre_ids: [35, 10751, 14],\n      backdrop_path: '/i84FfYcljpH9FOO26PdvBWzLGRl.jpg',\n      adult: false,\n      overview:\n        'Siblings Wednesday and Pugsley Addams will stop at nothing to get rid of Pubert, the new baby boy adored by parents Gomez and Morticia. Things go from bad to worse when the new \"black widow\" nanny, Debbie Jellinsky, launches her plan to add Fester to her collection of dead husbands.',\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg'\n    },\n    {\n      popularity: 18.017,\n      vote_count: 3184,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 3170,\n      adult: false,\n      backdrop_path: '/zM2Rdsh4kiTEXPkkO9lWBzZpwAH.jpg',\n      original_language: 'en',\n      original_title: 'Bambi',\n      genre_ids: [16, 18, 10751],\n      title: 'Bambi',\n      vote_average: 6.9,\n      overview:\n        `Bambi's tale unfolds from season to season as the young prince of the forest learns about life, love, and friends.`,\n      release_date: '1942-08-21'\n    },\n    {\n      popularity: 13.155,\n      vote_count: 461,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 10438,\n      adult: false,\n      backdrop_path: '/1MaJH9m8TfmwLgS98kcjU4faiMg.jpg',\n      original_language: 'en',\n      original_title: 'Beethoven\\'s 2nd',\n      genre_ids: [35, 10751],\n      title: 'Beethoven\\'s 2nd',\n      vote_average: 5.2,\n      overview:\n        `Beethoven is back -- and this time, he has a whole brood with him now that he's met his canine match, Missy, and fathered a family. The only problem is that Missy's owner, Regina, wants to sell the puppies and tear the clan apart. It's up to Beethoven and the Newton kids to save the day and keep everyone together.`,\n      release_date: '1993-12-16'\n    },\n    {\n      popularity: 13.779,\n      id: 44251,\n      video: false,\n      vote_count: 281,\n      vote_average: 6.5,\n      title: 'Dragon Ball Z: Broly – Second Coming',\n      release_date: '1994-03-12',\n      original_language: 'ja',\n      original_title: 'ドラゴンボールＺ 危険なふたり！超戦士はねむれない',\n      genre_ids: [28, 16, 878],\n      backdrop_path: '/d0A7xd5Qnm6CCH25HXKHmcBDmmm.jpg',\n      adult: false,\n      overview:\n        'A Saiyan Space pod crash-lands on Earth out of which a wounded Saiyan crawls: Broly, the Legendary Super Saiyan. The wounded Broly shouts out in frustration and turns into normal form. The place soon freezes, trapping him in it and he falls into a coma.',\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg'\n    },\n    {\n      popularity: 14.604,\n      vote_count: 3268,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 1637,\n      adult: false,\n      backdrop_path: '/pGVpDc6MgLRtOYdxsA5fhj1SZki.jpg',\n      original_language: 'en',\n      original_title: 'Speed',\n      genre_ids: [28, 12, 80],\n      title: 'Speed',\n      vote_average: 6.9,\n      overview:\n        `Los Angeles SWAT cop Jack Traven is up against bomb expert Howard Payne, who's after major ransom money. First it's a rigged elevator in a very tall building. Then it's a rigged bus--if it slows, it will blow, bad enough any day, but a nightmare in LA traffic. And that's still not the end.`,\n      release_date: '1994-06-09'\n    },\n    {\n      popularity: 21.341,\n      vote_count: 4964,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 9479,\n      adult: false,\n      backdrop_path: '/16lk65YfrDFIr6evkWRjSeOOSws.jpg',\n      original_language: 'en',\n      original_title: 'The Nightmare Before Christmas',\n      genre_ids: [16, 14, 10751],\n      title: 'The Nightmare Before Christmas',\n      vote_average: 7.8,\n      overview:\n        `Tired of scaring humans every October 31 with the same old bag of tricks, Jack Skellington, the spindly king of Halloween Town, kidnaps Santa Claus and plans to deliver shrunken heads and other ghoulish gifts to children on Christmas morning. But as Christmas approaches, Jack's rag-doll girlfriend, Sally, tries to foil his misguided plans.`,\n      release_date: '1993-10-09'\n    }\n  ]\n}\nexport const TEST_TMDB_SINGLE_RESULT =\n{\n  popularity: 28.872, vote_count: 13772, video: false, poster_path: '\\/nk11pvocdb5zbFhX5oq5YiLPYMo.jpg', id: 14160, adult: false, backdrop_path: '\\/6fX7NF6IUJCTVssei7Shgl9J6LL.jpg', original_language: 'en', original_title: 'Up', genre_ids: [12, 16, 35, 10751], title: 'Up', vote_average: 7.9, overview: 'Carl Fredricksen spent his entire life dreaming of exploring the globe and experiencing life to its fullest. But at age 78, life seems to have passed him by, until a twist of fate (and a persistent 8-year old Wilderness Explorer named Russell) gives him a new lease on life.', release_date: '2009-05-28'\n}\nexport const TEST_TMDB_MOVIE_DETAILS = {\n  adult: false,\n  backdrop_path: '/wMgbnUVS9wbRGAdki8fqxKU1O0N.jpg',\n  belongs_to_collection: null,\n  budget: 55000000,\n  genres: [{\n    id: 35,\n    name: 'Comedy'\n  }, {\n    id: 18,\n    name: 'Drama'\n  }, {\n    id: 10749,\n    name: 'Romance'\n  }],\n  homepage: null,\n  id: 13,\n  imdb_id: 'tt0109830',\n  original_language: 'en',\n  original_title: 'Forrest Gump',\n  overview: 'A man with a low IQ has accomplished great things in his life and been present during significant historic events—in each case, far exceeding what anyone imagined he could do. But despite all he has achieved, his one true love eludes him.',\n  popularity: 23.858,\n  poster_path: '/yE5d3BUhE8hCnkMUJOo1QDoOGNz.jpg',\n  production_companies: [{\n    id: 4,\n    logo_path: '/fycMZt242LVjagMByZOLUGbCvv3.png',\n    name: 'Paramount',\n    origin_country: 'US'\n  }],\n  production_countries: [{\n    iso_3166_1: 'US',\n    name: 'United States of America'\n  }],\n  release_date: '1994-07-06',\n  revenue: 677945399,\n  runtime: 142,\n  spoken_languages: [{\n    iso_639_1: 'en',\n    name: 'English'\n  }],\n  status: 'Released',\n  tagline: `Life is like a box of chocolates...you never know what you're gonna get.`,\n  title: 'Forrest Gump',\n  video: false,\n  vote_average: 8.4,\n  vote_count: 15996\n}\n\n\nconst TEST_TMDB_MOVIE_DETAIL2 = {\n  adult: false,\n  backdrop_path: '/mMZRKb3NVo5ZeSPEIaNW9buLWQ0.jpg',\n  belongs_to_collection: null,\n  budget: 63000000,\n  genres: [\n    {\n      id: 18,\n      name: 'Drama'\n    }\n  ],\n  homepage: 'http://www.foxmovies.com/movies/fight-club',\n  id: 550,\n  imdb_id: 'tt0137523',\n  original_language: 'en',\n  original_title: 'Fight Club',\n  overview: 'A ticking-time-bomb insomniac and a slippery soap salesman channel primal male aggression into a shocking new form of therapy. Their concept catches on, with underground \\'fight clubs\\' forming in every town, until an eccentric gets in the way and ignites an out-of-control spiral toward oblivion.',\n  popularity: 36.556,\n  poster_path: '/adw6Lq9FiC9zjYEpOqfq03ituwp.jpg',\n  production_companies: [\n    {\n      id: 508,\n      logo_path: '/7PzJdsLGlR7oW4J0J5Xcd0pHGRg.png',\n      name: 'Regency Enterprises',\n      origin_country: 'US'\n    },\n    {\n      id: 711,\n      logo_path: '/tEiIH5QesdheJmDAqQwvtN60727.png',\n      name: 'Fox 2000 Pictures',\n      origin_country: 'US'\n    },\n    {\n      id: 20555,\n      logo_path: '/hD8yEGUBlHOcfHYbujp71vD8gZp.png',\n      name: 'Taurus Film',\n      origin_country: 'DE'\n    },\n    {\n      id: 54051,\n      logo_path: null,\n      name: 'Atman Entertainment',\n      origin_country: ''\n    },\n    {\n      id: 54052,\n      logo_path: null,\n      name: 'Knickerbocker Films',\n      origin_country: 'US'\n    },\n    {\n      id: 25,\n      logo_path: '/qZCc1lty5FzX30aOCVRBLzaVmcp.png',\n      name: '20th Century Fox',\n      origin_country: 'US'\n    },\n    {\n      id: 4700,\n      logo_path: '/A32wmjrs9Psf4zw0uaixF0GXfxq.png',\n      name: 'The Linson Company',\n      origin_country: ''\n    }\n  ],\n  production_countries: [\n    {\n      iso_3166_1: 'DE',\n      name: 'Germany'\n    },\n    {\n      iso_3166_1: 'US',\n      name: 'United States of America'\n    }],\n  release_date: '1999-10-15',\n  revenue: 100853753,\n  runtime: 139,\n  spoken_languages: [\n    {\n      iso_639_1: 'en',\n      name: 'English'\n    }\n  ],\n  status: 'Released',\n  tagline: 'Mischief. Mayhem. Soap.',\n  title: 'Fight Club',\n  video: false,\n  vote_average: 8.4,\n  vote_count: 17355\n}\n\n\nexport const YTS_TORRENT_SINGLE_RESULT: IYTSSingleQuery = {\n  \"status\": \"ok\",\n  \"status_message\": \"Query was successful\",\n  \"data\": {\n    \"movie_count\": 1,\n    \"limit\": 20,\n    \"page_number\": 1,\n    \"movies\": [\n      {\n        \"id\": 3897,\n        \"url\": \"https:\\/\\/yts.mx\\/movies\\/titanic-1997\",\n        \"imdb_code\": \"tt0120338\",\n        \"title\": \"Titanic\",\n        \"title_english\": \"Titanic\",\n        \"title_long\": \"Titanic (1997)\",\n        \"slug\": \"titanic-1997\",\n        \"year\": 1997,\n        \"rating\": 7.8,\n        \"runtime\": 194,\n        \"genres\": [\n          \"Action\",\n          \"Drama\",\n          \"Romance\"\n        ],\n        \"summary\": \"84 years later, a 100 year-old woman named Rose DeWitt Bukater tells the story to her granddaughter Lizzy Calvert, Brock Lovett, Lewis Bodine, Bobby Buell and Anatoly Mikailavich on the Keldysh about her life set in April 10th 1912, on a ship called Titanic when young Rose boards the departing ship with the upper-class passengers and her mother, Ruth DeWitt Bukater, and her fianc\\u00e9, Caledon Hockley. Meanwhile, a drifter and artist named Jack Dawson and his best friend Fabrizio De Rossi win third-class tickets to the ship in a game. And she explains the whole story from departure until the death of Titanic on its first and last voyage April 15th, 1912 at 2:20 in the morning.\",\n        \"description_full\": \"84 years later, a 100 year-old woman named Rose DeWitt Bukater tells the story to her granddaughter Lizzy Calvert, Brock Lovett, Lewis Bodine, Bobby Buell and Anatoly Mikailavich on the Keldysh about her life set in April 10th 1912, on a ship called Titanic when young Rose boards the departing ship with the upper-class passengers and her mother, Ruth DeWitt Bukater, and her fianc\\u00e9, Caledon Hockley. Meanwhile, a drifter and artist named Jack Dawson and his best friend Fabrizio De Rossi win third-class tickets to the ship in a game. And she explains the whole story from departure until the death of Titanic on its first and last voyage April 15th, 1912 at 2:20 in the morning.\",\n        \"synopsis\": \"84 years later, a 100 year-old woman named Rose DeWitt Bukater tells the story to her granddaughter Lizzy Calvert, Brock Lovett, Lewis Bodine, Bobby Buell and Anatoly Mikailavich on the Keldysh about her life set in April 10th 1912, on a ship called Titanic when young Rose boards the departing ship with the upper-class passengers and her mother, Ruth DeWitt Bukater, and her fianc\\u00e9, Caledon Hockley. Meanwhile, a drifter and artist named Jack Dawson and his best friend Fabrizio De Rossi win third-class tickets to the ship in a game. And she explains the whole story from departure until the death of Titanic on its first and last voyage April 15th, 1912 at 2:20 in the morning.\",\n        \"yt_trailer_code\": \"CHekzSiZjrY\",\n        \"language\": \"English\",\n        \"mpa_rating\": \"PG-13\",\n        \"background_image\": \"https:\\/\\/yts.mx\\/assets\\/images\\/movies\\/Titanic_1997\\/background.jpg\",\n        \"background_image_original\": \"https:\\/\\/yts.mx\\/assets\\/images\\/movies\\/Titanic_1997\\/background.jpg\",\n        \"small_cover_image\": \"https:\\/\\/yts.mx\\/assets\\/images\\/movies\\/Titanic_1997\\/small-cover.jpg\",\n        \"medium_cover_image\": \"https:\\/\\/yts.mx\\/assets\\/images\\/movies\\/Titanic_1997\\/medium-cover.jpg\",\n        \"large_cover_image\": \"https:\\/\\/yts.mx\\/assets\\/images\\/movies\\/Titanic_1997\\/large-cover.jpg\",\n        \"state\": \"ok\",\n        \"torrents\": [\n          {\n            \"url\": \"https:\\/\\/yts.mx\\/torrent\\/download\\/237457BA8029DEF449A0D3EF5B7E508780AC68DB\",\n            \"hash\": \"237457BA8029DEF449A0D3EF5B7E508780AC68DB\",\n            \"quality\": \"3D\",\n            \"type\": \"bluray\",\n            \"seeds\": 75,\n            \"peers\": 13,\n            \"size\": \"2.80 GB\",\n            \"size_bytes\": 3006477107,\n            \"date_uploaded\": \"2015-11-02 04:25:37\",\n            \"date_uploaded_unix\": 1446434737\n          },\n          {\n            \"url\": \"https:\\/\\/yts.mx\\/torrent\\/download\\/A86B4ADB83506BB12CEABAC2F42AE480BA44ECFA\",\n            \"hash\": \"A86B4ADB83506BB12CEABAC2F42AE480BA44ECFA\",\n            \"quality\": \"720p\",\n            \"type\": \"bluray\",\n            \"seeds\": 326,\n            \"peers\": 52,\n            \"size\": \"1.4 GB\",\n            \"size_bytes\": 1503238554,\n            \"date_uploaded\": \"2017-08-11 19:25:11\",\n            \"date_uploaded_unix\": 1502472311\n          },\n          {\n            \"url\": \"https:\\/\\/yts.mx\\/torrent\\/download\\/98CD5D90252265F1C59AB47330FF4C39F48CCC78\",\n            \"hash\": \"98CD5D90252265F1C59AB47330FF4C39F48CCC78\",\n            \"quality\": \"1080p\",\n            \"type\": \"bluray\",\n            \"seeds\": 408,\n            \"peers\": 63,\n            \"size\": \"2.97 GB\",\n            \"size_bytes\": 3189013217,\n            \"date_uploaded\": \"2017-08-12 02:14:57\",\n            \"date_uploaded_unix\": 1502496897\n          }\n        ],\n        \"date_uploaded\": \"2017-08-11 19:25:11\",\n        \"date_uploaded_unix\": 1502472311\n      }\n    ]\n  },\n  \"@meta\": {\n    \"server_time\": 1598788840,\n    \"server_timezone\": \"CET\",\n    \"api_version\": 2,\n    \"execution_time\": \"0 ms\"\n  }\n}\n\nexport const MOCK_USER_DATA_LIST: IProfileData[] = [\n  {\n    tmdbId: 597, //titanic\n    isFavorite: true,\n    watched: {\n      percentage: 100\n    }\n  },\n  {\n    tmdbId: 857, // svpr\n    isFavorite: true,\n    watched: {\n      percentage: 100\n    }\n  },\n  {\n    tmdbId: 24428, // avengers\n    isBookmark: true,\n  },\n  {\n    tmdbId: 579, // jaws\n    isBookmark: true\n  },\n  {\n    tmdbId: 769, // goodfellas\n    isBookmark: true,\n    watched: {\n      percentage: 51\n    }\n  },\n  {\n    tmdbId: 775996, // goodfellas\n    watched: {\n      percentage: 75\n    },\n    review: {\n      content: 'confusing',\n      rating: 3,\n      id: 213\n    }\n  },\n]\n",
            "type": "injectable"
        },
        {
            "name": "TMDBMovieQuery",
            "id": "injectable-TMDBMovieQuery-444816693d68c2967bdb9eeec3621030ba9ef09281aa71107c42347c0c55152beef01a6611055b55fb3a9b8212b16ed696a8e6c2e90eb6bc125e8c3ff8bdba4e",
            "file": "src/app/services/movie/movie.query.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { QueryEntity } from '@datorama/akita';\nimport { MDBMovie } from '@models/mdb-movie.model';\nimport { MDBMovieListModel, MDBMovieModel, TmdbMovieModel } from './interface/movie';\nimport { MDBMovieState, MDBMovieStore, TMDBMovieStore, TmdbMovieState as TMDBMovieState, MDBMovieSearchState, MDBMovieSearchStore } from './movie.store';\n\n@Injectable({ providedIn: 'root' })\nexport class TMDBMovieQuery extends QueryEntity<TMDBMovieState, TmdbMovieModel> {\n  constructor(protected store: TMDBMovieStore) {\n    super(store);\n  }\n}\n\n@Injectable({ providedIn: 'root' })\nexport class MDBMovieQuery extends QueryEntity<MDBMovieState, MDBMovieModel> {\n  constructor(protected store: MDBMovieStore) {\n    super(store);\n  }\n}\n\n// @Injectable({ providedIn: 'root' })\n// export class DiscoverMovieQuery extends QueryEntity<MDBMovieState, TmdbMovieModel> {\n//   constructor(protected store: MDBMovieStore) {\n//     super(store);\n//   }\n// }\n\n@Injectable({ providedIn: 'root' })\nexport class SearchMovieQuery extends QueryEntity<MDBMovieSearchState, MDBMovieListModel> {\n  constructor(protected store: MDBMovieSearchStore) {\n    super(store);\n  }\n}\n\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "TMDBMovieStore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "TMDBMovieStore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "QueryEntity",
            "type": "injectable"
        },
        {
            "name": "TMDBMovieStore",
            "id": "injectable-TMDBMovieStore-003356e894d6d3fd8e699789e15f6942809cf8b544dbfcd102ceb5a241798a30c7e4b55fa4b0d72866404b32e84c9ff40d963c066d471ae956a9f77f45b3a8a9",
            "file": "src/app/services/movie/movie.store.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport { EntityState, EntityStore, StoreConfig } from \"@datorama/akita\";\nimport { MDBMovieListModel, MDBMovieModel, TmdbMovieModel } from \"./interface/movie\";\n\nexport interface TmdbMovieState extends EntityState<TmdbMovieModel> { }\n\n@Injectable({ providedIn: 'root' })\n@StoreConfig({ name: 'tmdbMovie' })\nexport class TMDBMovieStore extends EntityStore<TmdbMovieState, TmdbMovieModel>{\n  constructor() {\n    super();\n  }\n}\n\nexport interface MDBMovieState extends EntityState<MDBMovieModel> { }\n@Injectable({ providedIn: 'root' })\n@StoreConfig({ name: 'mdbMovie' })\nexport class MDBMovieStore extends EntityStore<MDBMovieState, MDBMovieModel>{\n  constructor() {\n    super();\n  }\n}\n\nexport interface MDBMovieSearchState extends EntityState<MDBMovieListModel> { }\n@Injectable({ providedIn: 'root' })\n@StoreConfig({ name: 'mdbSearchMovie' })\nexport class MDBMovieSearchStore extends EntityStore<MDBMovieSearchState, MDBMovieListModel>{\n  constructor() {\n    super();\n  }\n}\n\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "extends": "EntityStore",
            "type": "injectable"
        },
        {
            "name": "TmdbService",
            "id": "injectable-TmdbService-78a3492fff8a5951bf5223d4c56c82ffd25a28f2be5f6b87d53c3c015bc73a5ccf3a4b21e9231e504ffd670d313c37dca1b533aa4235eae0c48d01354586c435",
            "file": "src/app/services/tmdb/tmdb.service.ts",
            "properties": [
                {
                    "name": "httpParam",
                    "defaultValue": "new HttpParams()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methods": [
                {
                    "name": "appendMappedParameters",
                    "args": [
                        {
                            "name": "paramMap",
                            "type": "Map<TmdbParameters | TmdbSearchMovieParameters | any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "myHttpParam",
                            "type": "HttpParams",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "HttpParams",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAppends parameters list into http param object.\n",
                    "description": "<p>Appends parameters list into http param object.</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4734,
                                "end": 4742,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "paramMap"
                            },
                            "type": "Map<TmdbParameters | TmdbSearchMovieParameters | any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4728,
                                "end": 4733,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>parameters key-value pair list</p>\n"
                        },
                        {
                            "name": {
                                "pos": 4786,
                                "end": 4797,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "myHttpParam"
                            },
                            "type": "HttpParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4780,
                                "end": 4785,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>http param to append to</p>\n"
                        }
                    ]
                },
                {
                    "name": "externalId",
                    "args": [
                        {
                            "name": "tmdbId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<TMDB_External_Id>",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "tmdbId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getExternalId",
                    "args": [
                        {
                            "name": "tmdbId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<TMDB_External_Id>",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets IMDB id\n\n",
                    "description": "<p>Gets IMDB id</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1086,
                                "end": 1092,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "tmdbId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1080,
                                "end": 1085,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>tmdbId</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1106,
                                "end": 1113,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>external ids</p>\n"
                        }
                    ]
                },
                {
                    "name": "getFindMovie",
                    "args": [
                        {
                            "name": "val",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets movie with external id.(IMDb ID, TVDB ID, facebook,twitter,instagram)\n",
                    "description": "<p>Gets movie with external id.(IMDb ID, TVDB ID, facebook,twitter,instagram)</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1384,
                                "end": 1387,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "val"
                            },
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1378,
                                "end": 1383,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>external id</p>\n"
                        }
                    ]
                },
                {
                    "name": "getTmdbMovieDetails",
                    "args": [
                        {
                            "name": "tmdbId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "appendToResponse",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "refresh",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets movie details.\n",
                    "description": "<p>Gets movie details.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1953,
                                "end": 1959,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "tmdbId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1947,
                                "end": 1952,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the tmdb id.</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1985,
                                "end": 2001,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "appendToResponse"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 1979,
                                "end": 1984,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>optional append to response</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2042,
                                "end": 2049,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "refresh"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "pos": 2036,
                                "end": 2041,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>refresh cache</p>\n"
                        }
                    ]
                },
                {
                    "name": "getTmdbVideos",
                    "args": [
                        {
                            "name": "tmdbId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tmdbId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "operation",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'operation'"
                        },
                        {
                            "name": "result",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "(error: any) => Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nError handler.\n",
                    "description": "<p>Error handler.</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5130,
                                "end": 5139,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "operation"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'operation'",
                            "tagName": {
                                "pos": 5124,
                                "end": 5129,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the operation</p>\n"
                        },
                        {
                            "name": {
                                "pos": 5166,
                                "end": 5172,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "result"
                            },
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 5160,
                                "end": 5165,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>result</p>\n"
                        }
                    ]
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "searchTmdb",
                    "args": [
                        {
                            "name": "val",
                            "type": "Map<TmdbParameters | TmdbSearchMovieParameters | any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ITmdbResultObject>",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSearches movie from TMDB api.\n",
                    "description": "<p>Searches movie from TMDB api.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3255,
                                "end": 3258,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "val"
                            },
                            "type": "Map<TmdbParameters | TmdbSearchMovieParameters | any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3249,
                                "end": 3254,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>parameter map</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams, } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { catchError, first, map, tap } from 'rxjs/operators';\nimport { ITmdbResultObject, TmdbParameters, TmdbSearchMovieParameters } from '@models/interfaces';\nimport { TMDB_API_KEY, TMDB_URL } from '../../shared/constants';\nimport { TMDB_External_Id } from '@models/tmdb-external-id.model';\nimport { CacheService } from '../cache.service';\nimport { TMDBMovieQuery } from '../movie/movie.query';\nimport { TMDBMovieStore } from '@services/movie/movie.store';\n\nconst JSON_CONTENT_TYPE_HEADER = new HttpHeaders({ 'Content-Type': 'application/json' });\n\n@Injectable({ providedIn: 'root' })\nexport class TmdbService {\n\n  constructor(\n    private http: HttpClient,\n    private cacheService: CacheService,\n    private tmdbMovieQuery: TMDBMovieQuery,\n    private tmdbMovieStore: TMDBMovieStore,\n  ) { }\n\n  httpParam = new HttpParams();\n\n  /**\n   * Gets IMDB id\n   *\n   * @param tmdbId tmdbId\n   * @returns external ids\n   */\n  getExternalId(tmdbId: number): Observable<TMDB_External_Id> {\n    return this.cacheService.get(tmdbId + '_EXTERNAL_ID', this.externalId(tmdbId));\n  }\n\n  /**\n   * Gets movie with external id.(IMDb ID, TVDB ID, facebook,twitter,instagram)\n   * @param val external id\n   */\n  getFindMovie(val: string | number): Observable<any> {\n    const url = `${TMDB_URL}/find/${val}`;\n    let myHttpParam = new HttpParams().append(TmdbParameters.ApiKey, TMDB_API_KEY);\n    myHttpParam = myHttpParam.append('external_source', 'imdb_id');\n    const tmdbHttpOptions = {\n      headers: JSON_CONTENT_TYPE_HEADER,\n      params: myHttpParam\n    };\n    return this.http.get<any>(url, tmdbHttpOptions).pipe(tap(_ => this.log('')),\n      catchError(this.handleError<any>('getMoviesDiscover')));\n  }\n\n  /**\n   * Gets movie details.\n   * @param tmdbId the tmdb id.\n   * @param appendToResponse optional append to response\n   * @param refresh refresh cache\n   */\n  getTmdbMovieDetails(tmdbId: number, appendToResponse?: string, refresh: boolean = false): Observable<any> {\n    if (!this.tmdbMovieQuery.hasEntity(tmdbId) || refresh) {\n      const url = `${TMDB_URL}/movie/${tmdbId}`;\n      let myHttpParam = new HttpParams().append(TmdbParameters.ApiKey, TMDB_API_KEY);\n      // videos, images, credits, translations, similar, external_ids, alternative_titles,recommendations\n      //   keywords, reviews\n      if (appendToResponse) {\n        myHttpParam = myHttpParam.append(TmdbParameters.AppendToResponse, appendToResponse);\n      }\n      const tmdbHttpOptions = {\n        headers: JSON_CONTENT_TYPE_HEADER,\n        params: myHttpParam\n      };\n      return this.http.get<any>(url, tmdbHttpOptions).pipe(\n        first(),\n        map(data => {\n          const store = {\n            id: tmdbId,\n            movie: data\n          };\n          this.tmdbMovieStore.add(store);\n          return this.tmdbMovieQuery.getEntity(tmdbId).movie;\n        }),\n        catchError(this.handleError<any>('getTmdbMovieDetails2'))\n      );\n    }\n    return of(this.tmdbMovieQuery.getEntity(tmdbId).movie);\n  }\n\n  /**\n   * Searches movie from TMDB api.\n   * @param val parameter map\n   */\n  searchTmdb(val: Map<TmdbParameters | TmdbSearchMovieParameters, any>): Observable<ITmdbResultObject> {\n    const url = `${TMDB_URL}/search/movie`;\n    let myHttpParam = new HttpParams().append(TmdbParameters.ApiKey, TMDB_API_KEY);\n    myHttpParam = this.appendMappedParameters(val, myHttpParam);\n\n    let key = '';\n    for (let entry of val.entries()) {\n      key += entry[0] + '_' + entry[1];\n    }\n    const tmdbHttpOptions = {\n      headers: JSON_CONTENT_TYPE_HEADER,\n      params: myHttpParam\n    };\n    return this.http.get<any>(url, tmdbHttpOptions).pipe(tap(_ => this.log('')),\n      catchError(this.handleError<any>('searchTmdbMovie')));\n  }\n\n  private externalId(tmdbId: number): Observable<TMDB_External_Id> {\n    const url = `${TMDB_URL}/movie/${tmdbId}/external_ids?api_key=${TMDB_API_KEY}`;\n    return this.http.get<TMDB_External_Id>(url).pipe(tap(_ => this.log('')),\n      catchError(this.handleError<any>('getExternalId')));\n  }\n\n  getTmdbVideos(tmdbId: number): Observable<any> {\n    const url = `${TMDB_URL}/movie/${tmdbId}/videos`;\n    const myHttpParam = new HttpParams().append(TmdbParameters.ApiKey, TMDB_API_KEY);\n    const tmdbHttpOptions = {\n      headers: JSON_CONTENT_TYPE_HEADER,\n      params: myHttpParam\n    };\n    return this.http.get<any>(url, tmdbHttpOptions).pipe(tap(_ => this.log('')),\n      catchError(this.handleError<any>('tmdbVideos')));\n  }\n\n  /**\n   * Appends parameters list into http param object.\n   * @param paramMap parameters key-value pair list\n   * @param myHttpParam http param to append to\n   */\n  private appendMappedParameters(paramMap: Map<TmdbParameters | TmdbSearchMovieParameters, any>, myHttpParam: HttpParams) {\n    for (let entry of paramMap.entries()) {\n      myHttpParam = myHttpParam.append(entry[0], entry[1]);\n    }\n    return myHttpParam;\n  }\n\n\n  /**\n   * Error handler.\n   * @param operation the operation\n   * @param result result\n   */\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n      console.error(error); // log to console instead\n      this.log(`${operation} failed: ${error.message}`);\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n\n  private log(message: string) {\n    console.log(`TmdbService: ${message} `);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cacheService",
                        "type": "CacheService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "tmdbMovieQuery",
                        "type": "TMDBMovieQuery",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "tmdbMovieStore",
                        "type": "TMDBMovieStore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cacheService",
                        "type": "CacheService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tmdbMovieQuery",
                        "type": "TMDBMovieQuery",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tmdbMovieStore",
                        "type": "TMDBMovieStore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "TorrentService",
            "id": "injectable-TorrentService-ffdae8c6dcdc6f4c1cd2626447395ec09eec4424cc4d9ebcfa801e6692736cf8489a8c4f40b54ba81cfdc1167a0c50059e9fc7dd5fdffd2c568d8b6880ad636c",
            "file": "src/app/services/torrent/torrent.service.ts",
            "properties": [
                {
                    "name": "assetsDirectory",
                    "defaultValue": "'../assets/'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "displayedTorrentsInfo",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "fileLine",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "fileName",
                    "defaultValue": "'torrent_dump_full.csv'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "testFileName",
                    "defaultValue": "'torrent_dump_mini.csv'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "torrentsInfo",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "trackers",
                    "defaultValue": "[`udp://glotorrents.pw:6969/announce`,\n    `udp://tracker.opentrackr.org:1337/announce`,\n    `udp://torrent.gresille.org:80/announce`,\n    `udp://tracker.openbittorrent.com:80`,\n    `udp://tracker.coppersurfer.tk:6969`,\n    `udp://tracker.leechers-paradise.org:6969`,\n    `udp://p4p.arenabg.ch:1337`,\n    `udp://tracker.internetwarriors.net:1337`]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "ytsUrl",
                    "defaultValue": "'https://yts.mx/api/v2/list_movies.json'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "ytsUrl2",
                    "defaultValue": "'https://yts.am/api/v2/list_movies.json'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 44
                }
            ],
            "methods": [
                {
                    "name": "getInfoHash",
                    "args": [
                        {
                            "name": "base64",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "base64",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMagnetLinkWithImproperHash",
                    "args": [
                        {
                            "name": "base64",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "base64",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMagnetLinkWithProperHash",
                    "args": [
                        {
                            "name": "hash",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "hash",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getStreamLink",
                    "args": [
                        {
                            "name": "hash",
                            "type": "String",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 196,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets the straming link with Hash.\n",
                    "description": "<p>Gets the straming link with Hash.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 7491,
                                "end": 7495,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "hash"
                            },
                            "type": "String",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7485,
                                "end": 7490,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>hash</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 7507,
                                "end": 7514,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>streaming url</p>\n"
                        }
                    ]
                },
                {
                    "name": "getTorrents",
                    "args": [
                        {
                            "name": "query",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "year",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTODO: add checking for online source connnection.\n",
                    "description": "<p>TODO: add checking for online source connnection.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "query",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "year",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTorrentsOffline",
                    "args": [
                        {
                            "name": "val",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "year",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSearches torrents offline\n",
                    "description": "<p>Searches torrents offline</p>\n",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1956,
                                "end": 1959,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "val"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1950,
                                "end": 1955,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>imdb or title</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1986,
                                "end": 1990,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "year"
                            },
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1980,
                                "end": 1985,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>year</p>\n"
                        }
                    ]
                },
                {
                    "name": "getTorrentsOnline",
                    "args": [
                        {
                            "name": "imdbId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IYTSSingleQuery | null>",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets torrent from online.\n",
                    "description": "<p>Gets torrent from online.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "imdbId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "operation",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'operation'"
                        },
                        {
                            "name": "result",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "(error: any) => Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 214,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nError handler.\n",
                    "description": "<p>Error handler.</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 8040,
                                "end": 8049,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "operation"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'operation'",
                            "tagName": {
                                "pos": 8034,
                                "end": 8039,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the operation</p>\n"
                        },
                        {
                            "name": {
                                "pos": 8076,
                                "end": 8082,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "result"
                            },
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 8070,
                                "end": 8075,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>result</p>\n"
                        }
                    ]
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 223,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mapTorrent",
                    "args": [
                        {
                            "name": "rawTorrent",
                            "type": "ITPBTorrent | YTSTorrent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "MDBTorrent",
                    "typeParameters": [],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nConverts trrents to MDB torrent regardless of source. ie thepiratebay, yts\n",
                    "description": "<p>Converts trrents to MDB torrent regardless of source. ie thepiratebay, yts</p>\n",
                    "jsdoctags": [
                        {
                            "name": "rawTorrent",
                            "type": "ITPBTorrent | YTSTorrent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mapTorrentsList",
                    "args": [
                        {
                            "name": "rawTorrents",
                            "type": "YTSTorrent[] | ITPBTorrent[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "MDBTorrent[]",
                    "typeParameters": [],
                    "line": 177,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "rawTorrents",
                            "type": "YTSTorrent[] | ITPBTorrent[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sanitize",
                    "args": [
                        {
                            "name": "torrent",
                            "type": "MDBTorrent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSanitizes magnet link\n",
                    "description": "<p>Sanitizes magnet link</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3230,
                                "end": 3237,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "torrent"
                            },
                            "type": "MDBTorrent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3224,
                                "end": 3229,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Torrent object</p>\n"
                        }
                    ]
                },
                {
                    "name": "searchTorrentsByQuery",
                    "args": [
                        {
                            "name": "val",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "torrentsOnline",
                    "args": [
                        {
                            "name": "imdbId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IYTSSingleQuery | null>",
                    "typeParameters": [],
                    "line": 204,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "imdbId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "urlencode",
                    "args": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Observable, of, Subscriber, forkJoin } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { MDBTorrent, ITPBTorrent } from '@models/interfaces'\nimport { IpcService } from '@services/ipc.service'\nimport { DomSanitizer } from '@angular/platform-browser'\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { STRING_REGEX_IMDB_ID } from '../../shared/constants';\nimport { IYTSSingleQuery, YTSTorrent } from '@models/yts-torrent.model';\nimport { CacheService } from '../cache.service';\nimport GeneralUtil from '@utils/general.util';\n\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TorrentService {\n\n  constructor(\n    private http: HttpClient,\n    private ipcService: IpcService,\n    private cacheService: CacheService,\n    private sanitizer: DomSanitizer) { }\n\n  trackers = [`udp://glotorrents.pw:6969/announce`,\n    `udp://tracker.opentrackr.org:1337/announce`,\n    `udp://torrent.gresille.org:80/announce`,\n    `udp://tracker.openbittorrent.com:80`,\n    `udp://tracker.coppersurfer.tk:6969`,\n    `udp://tracker.leechers-paradise.org:6969`,\n    `udp://p4p.arenabg.ch:1337`,\n    `udp://tracker.internetwarriors.net:1337`]\n  fileName = 'torrent_dump_full.csv'\n  testFileName = 'torrent_dump_mini.csv'\n  assetsDirectory = '../assets/'\n  fileLine: string[]\n  torrentsInfo = []\n  displayedTorrentsInfo = []\n  ytsUrl = 'https://yts.mx/api/v2/list_movies.json'\n  ytsUrl2 = 'https://yts.am/api/v2/list_movies.json'\n\n\n  /**\n   * Gets torrent from online.\n   */\n  getTorrentsOnline(imdbId: string): Observable<IYTSSingleQuery | null> {\n    // tt2015381 - guardians of the galaxy\n    return this.cacheService.get(imdbId + '_YT', this.torrentsOnline(imdbId))\n  }\n  /**\n   * Searches torrents offline\n   * @param val imdb or title\n   * @param year year\n   */\n  async getTorrentsOffline(val: string, year: string | number) {\n    // this.ipcService.call(this.ipcService.IPCCommand.SearchTorrent, [val, year])\n  }\n\n  /**\n   * TODO: add checking for online source connnection.\n   * @param val `[title, year]`\n   */\n  getTorrents(query: string, year?: string | number): Observable<any> {\n    let result\n    const REGEX_IMDB_ID = new RegExp(STRING_REGEX_IMDB_ID, `gi`);\n    if (typeof query === 'string' && query.trim().match(REGEX_IMDB_ID)) {\n      result = this.getTorrentsOnline(query);\n    } else {\n      result = this.getTorrentsOffline(query, year);\n    }\n    // this.sanitize(result)\n    return result\n  }\n\n  searchTorrentsByQuery(val: string): Observable<any> {\n    console.log('insearchtorentsquery')\n    val = 'tt0499549'\n    const url = `${this.ytsUrl}?query_term=${val}`\n    // let result = this.http.get<any>(url).pipe(\n    //   tap(_ => this.log(`searched torrents for ${val}`)),\n    //   catchError(this.handleError<any>('search torrents fail')))\n    const result = this.http.get<any>(url).pipe(map(response => response))\n    // console.log('result: ', JSON.parse(result.))\n    console.log('result: ', result)\n    return result\n  }\n\n  /**\n   * Sanitizes magnet link\n   * @param torrent Torrent object\n   */\n  sanitize(torrent: MDBTorrent) {\n    let val\n    if (torrent.hash.length !== 40) {\n      val = this.getMagnetLinkWithImproperHash(torrent.hash, torrent.name);\n    } else {\n      val = this.getMagnetLinkWithProperHash(torrent.hash);\n    }\n    return this.sanitizer.bypassSecurityTrustUrl(val);\n  }\n\n  getMagnetLinkWithProperHash(hash: string) {\n    const base = `magnet:?xt=urn:btih:${hash}`\n    return base\n  }\n\n  // test value: hKhdWMQTrHqcPpmm4oDz+tlixWQ=;\"Passengers.2016.1080p.Bluray.x265.10bit-z97\"\n  getMagnetLinkWithImproperHash(base64: string, name: string) {\n    let base = 'magnet:?xt=urn:btih:' + this.getInfoHash(base64);\n    let withname = base + '&dn=' + this.urlencode(name);\n    // if (bestTrackers.length > 4){\n    //     for (let c = 0; c < 5; c++) {\n    //         withname = withname + '&tr=' + urlencode(bestTrackers[c].announce)\n    //     }\n    // } else {\n    //     if (allTrackers.length > 0) {\n    //         let i = allTrackers.length > 4 ? 5 : allTrackers.length;\n    //         allTrackers.sort(function(a, b){return 0.5 - Math.random()});\n    //         for (let c = 0; c < i; c++) {\n    //             withname = withname + '&tr=' + urlencode(allTrackers[c])\n    //         }\n    //     } else {\n    //         popMsg('No trackers were found. Magnet link won\\'t contain any trackers. Try updating trackers', 'warning');\n    //     }\n    //     if (!bestTrackers.length > 0){\n    //         popMsg('Keep in mind that if you double-click on the torrent before download, app will select 5 best trackers for the magnet link', 'info');\n    //     }\n    // }\n    return withname;\n  }\n\n  getInfoHash(base64: string) {\n    let raw = atob(base64);\n    let HEX = '';\n    for (let i = 0; i < raw.length; i++) {\n      let _hex = raw.charCodeAt(i).toString(16)\n      HEX += (_hex.length == 2 ? _hex : '0' + _hex);\n    }\n    return HEX.toUpperCase();\n  }\n\n  urlencode(text: string) {\n    return encodeURIComponent(text).replace(/!/g, '%21')\n      .replace(/'/g, '%27')\n      .replace(/\\(/g, '%28')\n      .replace(/\\)/g, '%29')\n      .replace(/\\*/g, '%2A')\n      .replace(/%20/g, '+');\n  }\n\n  /**\n   * Converts trrents to MDB torrent regardless of source. ie thepiratebay, yts\n   */\n  mapTorrent(rawTorrent: ITPBTorrent | YTSTorrent): MDBTorrent {\n    let newTorrent = new MDBTorrent()\n    // check yts properties first\n    newTorrent.hash = rawTorrent.hash\n    newTorrent.sizeBytes = rawTorrent.hasOwnProperty('size_bytes') ? rawTorrent['size_bytes'] : rawTorrent['sizeBytes']\n    newTorrent.size = rawTorrent.hasOwnProperty('size') ? rawTorrent['size'] :\n    GeneralUtil.prettyBytes(rawTorrent['sizeBytes'])\n    newTorrent.name = rawTorrent.hasOwnProperty('name') ? rawTorrent['name'] : null\n    newTorrent.dateUploaded = rawTorrent.hasOwnProperty('date_uploaded') ? rawTorrent['date_uploaded'] : rawTorrent['added']\n    newTorrent.dateUploadedUnix = rawTorrent.hasOwnProperty('date_uploaded_unix') ? rawTorrent['date_uploaded_unix'] : (new Date(rawTorrent['added']).getTime() / 1000)\n    newTorrent.magnetLink = this.getMagnetLinkWithProperHash(rawTorrent.hash)\n    newTorrent.isYts = rawTorrent.hasOwnProperty('url') ? true : false\n    newTorrent.url = rawTorrent.hasOwnProperty('url') ? rawTorrent['url'] : this.getMagnetLinkWithProperHash(rawTorrent.hash)\n    newTorrent.quality = rawTorrent.hasOwnProperty('quality') ? rawTorrent['quality'] : 'unknown'\n    newTorrent.seeds = rawTorrent.hasOwnProperty('seeds') ? rawTorrent['seeds'] : null\n    newTorrent.peers = rawTorrent.hasOwnProperty('peers') ? rawTorrent['peers'] : null\n    return newTorrent;\n  }\n\n  mapTorrentsList(rawTorrents: YTSTorrent[] | ITPBTorrent[]): MDBTorrent[] {\n    let torrents: (ITPBTorrent | YTSTorrent)[] = []\n    if (rawTorrents.hasOwnProperty('@meta') && rawTorrents['data'].count > 0) {  // if yts and has count\n      torrents = rawTorrents['data'].movies[0].torrents // assuming there is only 1 movie or is searched with ID\n    } else if (rawTorrents.length > 0) {\n      torrents = rawTorrents\n    }\n    let newTorrents = []\n    torrents.forEach((torrent: ITPBTorrent | YTSTorrent) => {\n      newTorrents.push(this.mapTorrent(torrent))\n    })\n    return newTorrents;\n  }\n\n  /**\n   * Gets the straming link with Hash.\n   * @param hash hash\n   * @returns streaming url\n   */\n  getStreamLink(hash: String): Observable<any> {\n    // tt2015381 - guardians of the galaxy\n    let url = `http://localhost:3000/getStreamLink/${hash}`\n\n    return this.http.get<string>(url).pipe(tap(_ => this.log('')),\n      catchError(this.handleError<any>('getStreamLink')))\n  }\n\n  private torrentsOnline(imdbId: string): Observable<IYTSSingleQuery | null>  {\n    let url = `${this.ytsUrl}?query_term=${imdbId}`\n    return this.http.get<IYTSSingleQuery>(url)\n  }\n\n  /**\n   * Error handler.\n   * @param operation the operation\n   * @param result result\n   */\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n      console.error(error); // log to console instead\n      this.log(`${operation} failed: ${error.message}`);\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n\n  private log(message: string) {\n    console.log(`TorrentService: ${message} `);\n  }\n}\n\n@Pipe({ name: 'simplifySize' })\nexport class SimplifySizePipe implements PipeTransform {\n  transform(value: number): string {\n    console.log('topipe value: ', value)\n    let output = '';\n    if (value < 1000) {\n      output = value.toFixed(2).toString() + 'bytes';\n    } else if (value >= 1000 && value < 1000000) {\n      value = value / 1000;\n      output = value.toFixed(2).toString() + 'kB';\n    } else if (value >= 1000000 && value < 1000000000) {\n      value = value / 1000000;\n      output = value.toFixed(2).toString() + 'MB';\n    } else if (value >= 100000000) {\n      value = value / 1000000000;\n      output = value.toFixed(2).toString() + 'GB';\n    }\n    return output;\n  }\n}\n\n@Pipe({ name: 'magnet' })\nexport class MagnetPipe implements PipeTransform {\n  transform(value: string): string {\n    let output = '';\n    // let output = 'magnet';\n    // let client = '?xt=urn:btih';\n    let hash = value;\n    let fileName = '&dn=';\n    output += hash;\n\n    return output;\n  }\n}\n// magnet:?xt=urn:btih:TORRENT_HASH&dn=Url+Encoded+Movie+Name&tr=http://track.one:1234/announce&tr=udp://track.two:80\n// BE046ED20B048C4FB86E15838DD69DADB27C5E8A\n// 13-2010\n// &tr=http://track.one:1234/announce&tr=udp://track.two:80\n// magnet:?xt=urn:btih:BE046ED20B048C4FB86E15838DD69DADB27C5E8A&dn=13-2010&tr=http://track.one:1234/announce&tr=udp://track.two:80\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ipcService",
                        "type": "IpcService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cacheService",
                        "type": "CacheService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ipcService",
                        "type": "IpcService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cacheService",
                        "type": "CacheService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "UserDataService",
            "id": "injectable-UserDataService-460e963a74f65093270a7e4ed53a86f7634d9655c0b5324107c44a27ff7005068fd39e4b9b8d363282b5569019b599249a6882ab674a50974629ff400f3e7cc8",
            "file": "src/app/services/user-data/user-data.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getMovieListDetails",
                    "args": [
                        {
                            "name": "dataType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "IUserDataPaginated | any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable | any",
                    "typeParameters": [],
                    "line": 197,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTODO: include libraryFile/libaryObj to the list even if not identified.\n",
                    "description": "<p>TODO: include libraryFile/libaryObj to the list even if not identified.</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "dataType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "IUserDataPaginated | any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMovieUserData",
                    "args": [
                        {
                            "name": "tmdbId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets watched, bookmark, library\n\n",
                    "description": "<p>Gets watched, bookmark, library</p>\n",
                    "jsdoctags": [
                        {
                            "name": "tmdbId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMovieUserDataInList",
                    "args": [
                        {
                            "name": "idList",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets watched, bookmark, library in list\nTODO: remove Promise.resolve(null) and add firebase implementation\n",
                    "description": "<p>Gets watched, bookmark, library in list\nTODO: remove Promise.resolve(null) and add firebase implementation</p>\n",
                    "jsdoctags": [
                        {
                            "name": "idList",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUserDataFirstPage",
                    "args": [
                        {
                            "name": "dataType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "dataType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUserDataMultiple",
                    "args": [
                        {
                            "name": "dataType",
                            "type": "\"library\" | \"bookmark\" | \"watched\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dataType",
                            "type": "\"library\" | \"bookmark\" | \"watched\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUserDataPagination",
                    "args": [
                        {
                            "name": "dataType",
                            "type": "CollectionName",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "lastValue",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 164,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "dataType",
                            "type": "CollectionName",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "lastValue",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeUserData",
                    "args": [
                        {
                            "name": "dataType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dataType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveUserData",
                    "args": [
                        {
                            "name": "dataType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "movie",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n",
                    "description": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1565,
                                "end": 1573,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "dataType"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1559,
                                "end": 1564,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p><code>bookmark</code>/<code>watched</code></p>\n"
                        },
                        {
                            "name": {
                                "pos": 1607,
                                "end": 1612,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "movie"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1601,
                                "end": 1606,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "setDataObject",
                    "args": [
                        {
                            "name": "dataType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dataDoc",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 238,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets the user data object to the\n",
                    "description": "<p>Sets the user data object to the</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 7347,
                                "end": 7355,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "dataType"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7341,
                                "end": 7346,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the data types: bookmark, watched, video, etc.</p>\n"
                        },
                        {
                            "name": {
                                "pos": 7415,
                                "end": 7422,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "dataDoc"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7409,
                                "end": 7414,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "toggleBookmark",
                    "args": [
                        {
                            "name": "movie",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdds or remove bookmark to the movie.\n",
                    "description": "<p>Adds or remove bookmark to the movie.</p>\n",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1060,
                                "end": 1065,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "movie"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1054,
                                "end": 1059,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { LibraryService } from '../library.service';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { IBookmark, BookmarkService } from '../bookmark.service';\nimport { MovieService } from '../movie/movie.service';\nimport { WatchedService, IWatched } from '../watched.service';\nimport { IpcService, IUserDataPaginated } from '../ipc.service';\nimport { environment } from 'environments/environment';\nimport { CollectionName, FirebaseService } from '../firebase.service';\nimport { MdbApiService } from '../mdb-api.service';\nimport GeneralUtil from '@utils/general.util';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserDataService {\n\n  constructor(\n    private bookmarkService: BookmarkService,\n    private firebaseService: FirebaseService,\n    private movieService: MovieService,\n    private watchedService: WatchedService,\n    private libraryService: LibraryService,\n    private ipcService: IpcService,\n    private mdbApiService: MdbApiService\n  ) { }\n\n  /**\n   * Adds or remove bookmark to the movie.\n   * @param movie\n   */\n  async toggleBookmark(movie) {\n    let bmDoc\n    if (!movie.bookmark || !movie.bookmark.id) {\n      bmDoc = await this.saveUserData('bookmark', movie)\n      movie.bookmark = bmDoc\n    } else {\n      if (movie.bookmark && movie.bookmark.id)\n        bmDoc = await this.bookmarkService.removeBookmark('id', movie.bookmark.id)\n      else\n        bmDoc = await this.bookmarkService.removeBookmark('tmdbId', movie.tmdbId)\n      movie.bookmark.id = ''\n    }\n    return bmDoc\n  }\n\n\n  /**\n   * @param dataType `bookmark`/`watched`\n   * @param movie\n   */\n  async saveUserData(dataType: string, movie: any): Promise<any> {\n    const rDate = movie.release_date ? movie.release_date : movie.releaseDate\n    const releaseYear = parseInt(GeneralUtil.getYear(rDate), 10)\n    const tmdbId = movie.id ? movie.id : movie.tmdbId\n    const title = movie.title\n    const year = releaseYear ? releaseYear : 0\n    const uid = localStorage.getItem('uid')\n    const userData = {\n      tmdbId,\n      title,\n      year,\n      user: uid\n    }\n    let docId = ''\n    console.log('object to toggle :', userData);\n    switch (dataType) {\n      case 'bookmark':\n        docId = await this.bookmarkService.saveBookmark(userData)\n        break;\n      // case 'watched': // use watchedService\n      //   userData['percentage'] = userData['percentage'] ? userData['percentage'] : '100%'\n      //   docId = await this.watchedService.saveWatched(userData)\n      //   break;\n      case 'library':\n        // ! video may only be saved from the backend.(for now)\n        break;\n      default:\n        break;\n    }\n    return new Promise((resolve, reject) => {\n      userData['id'] = docId\n      resolve(userData)\n    })\n  }\n\n  removeUserData(dataType: string, id: string) {\n\n  }\n\n  /**\n   * Gets watched, bookmark, library\n   *\n   */\n  getMovieUserData(tmdbId: number) {\n    const myFunction = environment.runConfig.springMode ?\n      this.mdbApiService.getProfileDataByTmdbId(tmdbId).toPromise() :\n      this.ipcService.getMovieUserData(tmdbId)\n    // const myFunction = environment.runConfig.firebaseMode ?\n    //   this.firebaseService.getMovieUserData(tmdbId) :\n    //   this.ipcService.getMovieUserData(tmdbId)\n\n    return myFunction\n  }\n\n  /**\n   * Gets watched, bookmark, library in list\n   * TODO: remove Promise.resolve(null) and add firebase implementation\n   */\n  getMovieUserDataInList(idList: any[]): Promise<any> {\n\n    // const myFunction = environment.runConfig.firebaseMode ?\n    //   this.firebaseService.getUserDataMultiple(idList) :\n    const myFunction = environment.runConfig.springMode ?\n      this.mdbApiService.getProfileDataByTmdbIdList(idList).toPromise() :\n      this.ipcService.getMovieUserDataInList(idList)\n\n      return myFunction\n  }\n\n  getUserDataMultiple(dataType: 'library' | 'bookmark' | 'watched', data: object) {\n    switch (dataType) {\n      case 'library':\n        break;\n      case 'bookmark':\n        break;\n      case 'watched':\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  async getUserDataFirstPage(dataType: string): Promise<any> {\n    console.log('get firstpage: ', dataType);\n\n    let data: IUserDataPaginated | any = []\n    switch (dataType) {\n      case 'bookmark':\n        const bookmarksList = await this.bookmarkService.getBookmarksPaginatedFirstPage()\n        data = bookmarksList\n        break;\n      case 'watched':\n        const watchedList = await this.watchedService.getWatchedPaginatedFirstPage()\n        data = watchedList\n        break;\n      case 'library':\n        const videoList = await this.libraryService.getLibraryPaginatedFirstPage()\n        data = videoList\n        break;\n      default:\n        break;\n    }\n    return new Promise(async (resolve, reject) => {\n      const moviesList = await this.getMovieListDetails(dataType, data)\n      console.log('moviesList paginated:', moviesList)\n      let data2: IUserDataPaginated = data\n      data2.results = moviesList\n      resolve(data2)\n    })\n  }\n\n  async getUserDataPagination(dataType: CollectionName, lastValue: any): Promise<any> {\n    console.log('get firstpage: ', dataType);\n    let dataList = []\n    switch (dataType) {\n      case 'bookmark':\n        dataList = await this.bookmarkService.getBookmarksPaginated(lastValue)\n        break;\n      case 'watched':\n        dataList = await this.watchedService.getWatchedPaginated(lastValue)\n        break;\n      case 'library':\n        dataList = await this.libraryService.getLibraryPaginated(lastValue)\n        break;\n      default:\n        break;\n    }\n    return new Promise(async (resolve, reject) => {\n      const e = await this.getMovieListDetails(dataType, dataList)\n      console.log('e:', e)\n      // IUserDataPaginated {\n      //   totalPages: number,\n      //     totalResults: number,\n      //       page: number,\n      //         results: any[]\n      // }\n\n      resolve(e)\n    })\n  }\n\n  /**\n   * TODO: include libraryFile/libaryObj to the list even if not identified.\n   */\n  private getMovieListDetails(dataType: string, data: IUserDataPaginated | any): Observable<any> | any {\n    // ----------------------------\n    // const fj = forkJoin(obsList)\n    // fj.pipe().subscribe(\n    //   val => {\n    //     console.log('FJ:', val)\n    //     // map(e => { e.bookmark })\n    //     // dataList.forEach(data => {\n    //     map(e => { })\n    //     // });\n    //   },\n    // )\n    // ----------------------------\n    return new Promise(resolve => {\n      const moviesDisplayList = []\n      const isFirebase = data.results ? false : true\n      const dataDocList = isFirebase ? data : data.results\n      const len = dataDocList.length\n      let index = 0\n      dataDocList.forEach(dataDoc => {\n        dataDoc = isFirebase ? dataDoc.data() : dataDoc // firebaseData or offlineData\n        index++\n        if (dataDoc.tmdbId > 0) {\n          this.movieService.getMovieDetails(dataDoc.tmdbId, 'videos,images,credits,similar,external_ids,recommendations').pipe().subscribe(movie => {\n            const userData = this.setDataObject(dataType, dataDoc)\n            movie[dataType] = userData\n            moviesDisplayList.push(movie)\n            if (len === index) {\n              resolve(moviesDisplayList)\n            }\n          })\n        }\n      })\n    })\n  }\n\n  /**\n   * Sets the user data object to the\n   * @param dataType the data types: bookmark, watched, video, etc.\n   * @param dataDoc\n   */\n  private setDataObject(dataType: string, dataDoc) {\n    let userData = null\n    const isFirebaseData = (typeof dataDoc.data === \"function\")\n    const docData = (typeof dataDoc.data === \"function\") ? dataDoc.data() : dataDoc // firebaseData or offlineData\n    const docDataId = dataDoc.id ? dataDoc.id : dataDoc._id;\n    switch (dataType) {\n      case 'bookmark':\n        const bm: IBookmark = {\n          id: docDataId,\n          title: docData.title,\n          year: docData.year,\n          tmdbId: docData.tmdbId,\n        }\n        userData = bm\n        break;\n      case 'watched':\n        const w: IWatched = {\n          id: docDataId,\n          title: docData.title,\n          year: docData.year,\n          tmdbId: docData.tmdbId,\n        }\n        w.percentage = isFirebaseData && docData.percentage ? dataDoc.data().percentage : 100\n        w.percentage = !isFirebaseData && docData.percentage ? docData.percentage : 100\n        userData = w\n        break;\n      case 'library':\n        const v = {\n          id: docDataId,\n          title: docData.title,\n          year: docData.year,\n          tmdbId: docData.tmdbId,\n        }\n        userData = v\n        break;\n    }\n    return userData\n  }\n}\n\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "bookmarkService",
                        "type": "BookmarkService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "firebaseService",
                        "type": "FirebaseService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "movieService",
                        "type": "MovieService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "watchedService",
                        "type": "WatchedService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "libraryService",
                        "type": "LibraryService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ipcService",
                        "type": "IpcService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "mdbApiService",
                        "type": "MdbApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "bookmarkService",
                        "type": "BookmarkService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "firebaseService",
                        "type": "FirebaseService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "movieService",
                        "type": "MovieService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "watchedService",
                        "type": "WatchedService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "libraryService",
                        "type": "LibraryService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ipcService",
                        "type": "IpcService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mdbApiService",
                        "type": "MdbApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "UsernameExistValidator",
            "id": "injectable-UsernameExistValidator-3c87146bc600c1fdb452b0ef87c1707cf40be1e6650774a6def6767476cffd62443c81704224fe0c3c5f0e69bd49c203b1b23459f401d46833c95a11c92aa25e",
            "file": "src/app/directives/username-exist.directive.ts",
            "properties": [],
            "methods": [
                {
                    "name": "validate",
                    "args": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { CollectionName, FirebaseOperator, FieldName } from './../services/firebase.service';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport { Directive, forwardRef, Injectable } from '@angular/core';\nimport { AbstractControl, FormGroup, ValidationErrors, NG_VALIDATORS, Validator, ValidatorFn, NG_ASYNC_VALIDATORS, AsyncValidator } from '@angular/forms';\nimport { Observable, of } from 'rxjs';\nimport { delay, map, catchError, debounceTime, take } from 'rxjs/operators';\n\n@Injectable({ providedIn: 'root' })\nexport class UsernameExistValidator implements AsyncValidator {\n  constructor(private afs: AngularFirestore) { }\n  validate(control: AbstractControl) {\n\n    console.log('CONTROL VALUE2:', control.value)\n    const source = of(1).pipe(delay(400))\n    return of(false).pipe(delay(400),\n      map(isExisting => (isExisting ? { usernameExist: false } : null)),\n      catchError(() => of(null))\n    );\n  }\n}\n\n@Directive({\n  selector: '[appUsernameExist]',\n  providers: [{\n    provide: NG_ASYNC_VALIDATORS,\n    useExisting: forwardRef(() => UsernameExistValidatorDirective),\n    multi: true\n  }]\n})\n\nexport class UsernameExistValidatorDirective {\n\n  constructor(private validator: UsernameExistValidator) { }\n  validate(control: AbstractControl) {\n    console.log('CONTROL VALUE1:', control.value)\n    this.validator.validate(control)\n  }\n}\n\nexport class UsernameExistingValidator {\n  static validateUsername(afs: AngularFirestore) {\n    console.log('UsernameExistingValidator')\n    return (control: AbstractControl) => {\n\n      const username = control.value.toLowerCase();\n      console.log('control username: ', username)\n      return afs.collection(CollectionName.User, ref => ref.where(FieldName.Username, FirebaseOperator.Equal, username))\n        .valueChanges().pipe(\n          debounceTime(500),\n          take(1),\n          map(arr =>\n            arr.length ? { usernameUnavailable: true } : null\n          ),\n        )\n    }\n  }\n}\n\n/*\nCopyright Google LLC. All Rights Reserved.\nUse of this source code is governed by an MIT-style license that\ncan be found in the LICENSE file at http://angular.io/license\n*/\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "afs",
                        "type": "AngularFirestore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "afs",
                        "type": "AngularFirestore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "UtilsService",
            "id": "injectable-UtilsService-af410eb3dec313a8f50b905c5ab0616185c3ff56aa962845137ac0f8be19742e71ae68a8caed8bb45a1cbe32dedf0840851dc2426e29a724b7a1c4ced9b58e74",
            "file": "src/app/services/utils.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getEnvironment",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n!UNUSED\nGets browser environment\n",
                    "description": "<p>!UNUSED\nGets browser environment</p>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 605,
                                "end": 612,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>toReturn desktop or web</p>\n"
                        }
                    ]
                },
                {
                    "name": "hideSnackbar",
                    "args": [
                        {
                            "name": "root",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHides the snackbar.\n",
                    "description": "<p>Hides the snackbar.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 385,
                                "end": 389,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "root"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 379,
                                "end": 384,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>instance method.</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport * as _ from 'lodash';\nimport { STRING_REGEX_YEAR_ONLY, STRING_REGEX_OMDB_RELEASE_DATE, STRING_REGEX_TMDB_RELEASE_DATE } from '../shared/constants';\nimport { FirebaseService } from './firebase.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UtilsService {\n\n  constructor() { }\n\n  /**\n   * Hides the snackbar.\n   * @param root instance method.\n   */\n  hideSnackbar(root) {\n    setTimeout(function () {\n      root.displayMessage = ''\n      root.displaySnackbar = false\n    }, 3000);\n  }\n\n  /**\n   * !UNUSED\n   * Gets browser environment\n   * @returns toReturn desktop or web\n   */\n  getEnvironment(): string {\n    let toReturn = 'desktop'\n    const environment = location.protocol\n    if (environment === 'http:' || environment === 'https:') {\n      toReturn = 'web'\n    } else if (environment === 'file:') {\n      toReturn = 'desktop'\n    }\n    return toReturn\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "type": "injectable"
        },
        {
            "name": "WatchedService",
            "id": "injectable-WatchedService-686c8f4642b49583bb0035cda2ee2245a0462957ebe2212844020167e8641e8edd340c903ae6936a8feb0b9702a2784fe47119cbce52e6394169b3bdcb182de4",
            "file": "src/app/services/watched.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getWatched",
                    "args": [
                        {
                            "name": "id",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getWatchedInList",
                    "args": [
                        {
                            "name": "idList",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets multiple watched movies.\n",
                    "description": "<p>Gets multiple watched movies.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1671,
                                "end": 1677,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "idList"
                            },
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1665,
                                "end": 1670,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "getWatchedPaginated",
                    "args": [
                        {
                            "name": "lastVal",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<IUserDataPaginated | any>",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets multiple watched.\n",
                    "description": "<p>Gets multiple watched.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3331,
                                "end": 3338,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "lastVal"
                            },
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3325,
                                "end": 3330,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the last value to start with.</p>\n"
                        }
                    ]
                },
                {
                    "name": "getWatchedPaginatedFirstPage",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<IUserDataPaginated | any>",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets first page of list.\n",
                    "description": "<p>Gets first page of list.</p>\n"
                },
                {
                    "name": "removeWatched",
                    "args": [
                        {
                            "name": "type",
                            "type": "\"id\" | \"tmdbId\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRemoves watched.\n",
                    "description": "<p>Removes watched.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2265,
                                "end": 2269,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 151,
                                "escapedText": "type"
                            },
                            "type": "\"id\" | \"tmdbId\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2259,
                                "end": 2264,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 2282,
                                "end": 2284,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "id"
                            },
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2276,
                                "end": 2281,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>watched id/_id/tmdbId to remove.</p>\n"
                        }
                    ]
                },
                {
                    "name": "saveWatched",
                    "args": [
                        {
                            "name": "data",
                            "type": "IWatched",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "IWatched",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveWatchedMulti",
                    "args": [
                        {
                            "name": "data",
                            "type": "object[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "object[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleWatched",
                    "args": [
                        {
                            "name": "movie",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "movie",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { FirebaseService, CollectionName, FirebaseOperator, FieldName } from './firebase.service';\nimport { IUserSavedData } from '@models/interfaces';\nimport { environment } from '@environments/environment';\nimport { IpcService, IUserDataPaginated } from '@services/ipc.service';\nimport GeneralUtil from '@utils/general.util';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WatchedService {\n\n  constructor(private firebaseService: FirebaseService,\n    private ipcService: IpcService\n  ) { }\n\n  async toggleWatched(movie) {\n    let wDocId\n    if (!movie.watched || !movie.watched.id) {\n      const rDate = movie.release_date ? movie.release_date : movie.releaseDate\n      const releaseYear = parseInt(GeneralUtil.getYear(rDate), 10)\n      const data: IWatched = {\n        title: movie.title,\n        tmdbId: movie.id ? movie.id : movie.tmdbId,\n        imdbId: movie.imdbId ? movie.imdbId : '',\n        year: releaseYear ? releaseYear : 0,\n        percentage: 100\n      }\n      wDocId = await this.saveWatched(data)\n      movie.watched = wDocId\n    } else {\n      const type = movie.watched && movie.watched.id ? 'id' : 'tmdbId'\n      const id = type === 'id' ? movie.watched.id : movie.tmdbId\n      wDocId = await this.removeWatched(type, id)\n      movie.watched.id = ''\n    }\n    return wDocId;\n  }\n\n  getWatched(id): Promise<any> {\n    if (environment.runConfig.firebaseMode) {\n      return this.firebaseService.getFromFirestore(CollectionName.Watched, FieldName.TmdbId, FirebaseOperator.Equal, id)\n    } else {\n      return this.ipcService.getWatched(id)\n    }\n  }\n\n  /**\n   * Gets multiple watched movies.\n   * @param idList\n   */\n  getWatchedInList(idList: number[]): Promise<any> {\n\n    const myFunction = environment.runConfig.firebaseMode ?\n      this.firebaseService.getFromFirestoreMultiple(CollectionName.Watched, FieldName.TmdbId, idList) :\n      this.ipcService.getWatchedInList(idList);\n\n    return myFunction\n  }\n\n  saveWatched(data: IWatched): Promise<any> {\n    if (environment.runConfig.firebaseMode) {\n      return this.firebaseService.insertIntoFirestore(CollectionName.Watched, data)\n    } else {\n      return this.ipcService.saveWatched(data)\n    }\n  }\n\n  /**\n   * Removes watched.\n   * @param type\n   * @param id watched id/_id/tmdbId to remove.\n   */\n  removeWatched(type: 'id' | 'tmdbId', id: string | number) {\n    if (environment.runConfig.firebaseMode) {\n      return this.firebaseService.deleteFromFirestore(CollectionName.Watched, id)\n    } else {\n      return this.ipcService.removeWatched(type, id)\n    }\n  }\n\n  saveWatchedMulti(data: object[]) {\n    if (environment.runConfig.firebaseMode) {\n      const list = []\n      data.forEach(element => {\n        list.push({ tmdbId: element })\n      })\n      this.firebaseService.insertIntoFirestoreMulti(CollectionName.Watched, list)\n    } else {\n\n    }\n  }\n\n  /**\n   * Gets first page of list.\n   */\n  getWatchedPaginatedFirstPage(): Promise<IUserDataPaginated | any> {\n    if (environment.runConfig.firebaseMode) {\n      return this.firebaseService.getFromFirestoreMultiplePaginatedFirst(CollectionName.Watched, FieldName.TmdbId, 20)\n    } else {\n      return this.ipcService.getMultiplePaginatedFirst(CollectionName.Watched, FieldName.TmdbId, 20)\n    }\n  }\n\n  /**\n   * Gets multiple watched.\n   * @param lastVal the last value to start with.\n   */\n  getWatchedPaginated(lastVal: string | number): Promise<IUserDataPaginated | any> {\n    console.log('getting multiplewatched...', lastVal);\n    return this.firebaseService.getFromFirestoreMultiplePaginated(CollectionName.Watched, FieldName.TmdbId, 20, lastVal)\n  }\n\n}\n\nexport interface IWatched extends IUserSavedData {\n  id?: string // also use in Doc Id\n  tmdbId: number,\n  imdbId?: string,\n  title: string,\n  year: number,\n  percentage?: number,\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "firebaseService",
                        "type": "FirebaseService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ipcService",
                        "type": "IpcService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "firebaseService",
                        "type": "FirebaseService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ipcService",
                        "type": "IpcService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "WebSocketService",
            "id": "injectable-WebSocketService-ffdc31ac7156789dbdb5a41cff0c426fc49200c1bf420301549ef88edc74baeddc72c2024e5b4af9fbe0b91f33c2d29bdfff25eaef0854a198fae125cf29430a",
            "file": "src/app/services/socket.service.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n@Injectable({\n  providedIn: 'root'\n})\nexport class WebSocketService {\n\n\n  constructor(\n  ) {\n    console.log('------------------WEBSOCKET SERVICE----------')\n    // let socket = new WebSocket(\"wss://javascript.info/article/websocket/demo/hello\");\n\n    // socket.onopen = function (e) {\n\n    //   alert(\"[open] Connection established\");\n    //   alert(\"Sending to server\");\n    //   socket.send(\"My name is John\");\n    // }\n    // socket.onmessage = function (event) {\n    //   alert(`[message] Data received from server: ${event.data}`);\n    // };\n\n    // socket.onclose = function (event) {\n    //   if (event.wasClean) {\n    //     alert(`[close] Connection closed cleanly, code=${event.code} reason=${event.reason}`);\n    //   } else {\n    //     // e.g. server process killed or network down\n    //     // event.code is usually 1006 in this case\n    //     alert('[close] Connection died');\n    //   }\n    // };\n\n    // socket.onerror = function (error) {\n    //   alert(`[error] ${error}`);\n    // };\n    let socket2 = new WebSocket(\"ws://localhost:8999\");\n\n    socket2.onopen = function (e) {\n      alert(\"[open] Connection established\");\n      alert(\"Sending to server\");\n      socket2.send(\"connection\");\n    }\n    socket2.onmessage = function (event) {\n      alert(`[message] Data received from server: ${event.data}`);\n      console.log('[message]: ', event.data);\n    };\n\n    socket2.onclose = function (event) {\n      if (event.wasClean) {\n        alert(`[close] Connection closed cleanly, code=${event.code} reason=${event.reason}`);\n      } else {\n        // e.g. server process killed or network down\n        // event.code is usually 1006 in this case\n        alert('[close] Connection died');\n      }\n    };\n\n    socket2.onerror = function (error) {\n      console.log('[error]: ', error);\n    };\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 5
            },
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "MdbGuardGuard",
            "id": "injectable-MdbGuardGuard-c08499a03063fbfcc3ef6af7b9847916ce0aa2d9f3188bcf89c1c013c7149cbe0d3a4db3fe9dbd8cd5efeb9580e3b4994b69895475f8869c801111675caa8b9b",
            "file": "src/app/mdb-guard.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "next",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable | Promise | boolean | UrlTree",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "next",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "canActivateChild",
                    "args": [
                        {
                            "name": "next",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable | Promise | boolean | UrlTree",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "next",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "canLoad",
                    "args": [
                        {
                            "name": "route",
                            "type": "Route",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "segments",
                            "type": "UrlSegment[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable | Promise | boolean",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "Route",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "segments",
                            "type": "UrlSegment[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { CanActivate, CanActivateChild, CanLoad, Route, UrlSegment, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MdbGuardGuard implements CanActivate, CanActivateChild, CanLoad {\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    const user = localStorage.getItem('user')\n    // if (user) {\n    //   return true\n    // } else {\n    //   return false\n    // }\n    return false\n  }\n  canActivateChild(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    return true;\n  }\n  canLoad(\n    route: Route,\n    segments: UrlSegment[]): Observable<boolean> | Promise<boolean> | boolean {\n    return true;\n  }\n}\n",
            "type": "guard"
        }
    ],
    "interceptors": [
        {
            "name": "HttpInterceptorService",
            "id": "injectable-HttpInterceptorService-2042ca213735cce2c82e24fe6abaef8b5aee05a972debdff7bf274af17626670f24c05b516035396661a31cd652162c563434e77ce2ef99ce9b325c91ffcfa53",
            "file": "src/app/services/http-interceptor.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<any>>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HTTP_INTERCEPTORS, HttpInterceptor, HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { environment } from 'environments/environment';\nimport { mockDataFactory } from './mock-data.factory';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HttpInterceptorService implements HttpInterceptor {\n\n  constructor() { }\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    if (environment.runConfig.useTestData) {\n      return mockDataFactory(req, next)\n    } else {\n      return next.handle(req)\n    }\n  }\n}\n\nexport let backendProvider = {\n  provide: HTTP_INTERCEPTORS,\n  useClass: HttpInterceptorService,\n  multi: true,\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "type": "interceptor"
        }
    ],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-6f6ddccb8dac086d8653d3e9647b16eb9a8a76906d1f6c29aa304402f66a693b61f6022368d7207105b1111fa2ef1a2095fce40ee94d442e9905ca97ac305561",
            "file": "e2e/src/app.po.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo() {\n    return browser.get(browser.baseUrl) as Promise<any>;\n  }\n\n  getTitleText() {\n    return element(by.css('app-root h1')).getText() as Promise<string>;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CustomValidator",
            "id": "class-CustomValidator-262313785ca70d6ec44d15ca30b76272c8da306812585d0f7e6330b194810f562ae341bdbbe0c8cfa9e4883d7ce176734a7265af13dae73cc619faf5f36befe6",
            "file": "src/app/modules/user/signin/signin.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { UsernameExistValidator, UsernameExistingValidator } from '@directives/username-exist.directive';\nimport { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, Validators, FormBuilder, AbstractControl } from '@angular/forms'\nimport { repeatPasswordValidator } from '@directives/repeat-password.directive';\nimport { CredentialsValidator } from '@directives/credentials.directive';\nimport * as firebase from 'firebase/app';\nimport { AngularFirestore } from '@angular/fire/firestore'\nimport { AngularFireAuth, AngularFireAuthModule } from '@angular/fire/auth'\nimport { IpcService } from '@services/ipc.service';\nimport { FirebaseService, CollectionName } from '@services/firebase.service';\nimport { UtilsService } from '@services/utils.service';\nimport { repeat, debounceTime, take, map } from 'rxjs/operators';\n\nexport class CustomValidator {\n  static usernameValidate(afs: AngularFirestore) {\n    return (control: AbstractControl) => {\n\n      const username = control.value.toLowerCase();\n      console.log('control username ', username)\n      return afs.collection('user', ref => ref.where('username', '==', username))\n\n        .valueChanges().pipe(\n          debounceTime(500),\n          take(1),\n          map(arr => arr.length ? { usernameAvailable: false } : null),\n        )\n    }\n  }\n}\n\n@Component({\n  selector: 'app-signin',\n  templateUrl: './signin.component.html',\n  styleUrls: ['./signin.component.scss']\n})\nexport class SigninComponent implements OnInit {\n\n  ageList = []\n  user = {\n    emailAddress: '',\n    password: ''\n  }\n  userSignUp = {\n    username: '',\n    emailAddress: '',\n    age: 0,\n    gender: '',\n    authType: '',\n    password: '',\n    repeatPassword: ''\n  }\n  userSignIn = {\n    usernameEmail: '',\n    password: ''\n  }\n  signUpForm: FormGroup\n  signInForm: FormGroup\n  isSignIn = false\n  isOAuthValid = false\n  generalError = ''\n\n  constructor(\n    private credentialValidator: CredentialsValidator,\n    private auth: AngularFireAuth,\n    private authModule: AngularFireAuthModule,\n    private firebaseService: FirebaseService,\n    private ipcService: IpcService,\n    private utilsService: UtilsService,\n    private formBuilder: FormBuilder,\n    private usernameExistValidator: UsernameExistValidator,\n    private afs: AngularFirestore\n  ) { }\n\n  ngOnInit() {\n    // const env = this.utilsService.getEnvironment()\n    // if (env === 'web') {\n    //   this.isOAuthValid = true\n    // }\n\n    this.signUpForm = this.formBuilder.group({\n      username: [this.userSignUp.username, [Validators.required, Validators.minLength(4)], UsernameExistingValidator.validateUsername(this.afs)\n      ],\n      emailAddress: [this.userSignUp.emailAddress, [Validators.required, Validators.minLength(4), Validators.email]],\n\n      password: [this.userSignUp.password, [Validators.required, Validators.minLength(6)]],\n\n      repeatPassword: [this.userSignUp.repeatPassword, [Validators.required, Validators.minLength(6)]],\n    }, { validators: repeatPasswordValidator }\n    )\n\n    this.signInForm = new FormGroup({\n      usernameEmail: new FormControl(this.userSignIn.usernameEmail, [Validators.required]),\n      password: new FormControl(this.userSignIn.password, [Validators.required])\n    },\n    )\n  }\n\n  get username() { return this.signUpForm.get('username'); }\n  get emailAddress() { return this.signUpForm.get('emailAddress'); }\n  get password() { return this.signUpForm.get('password'); }\n  get repeatPassword() { return this.signUpForm.get('repeatPassword'); }\n\n  onSignUp() {\n    console.log('submit');\n    const username = this.signUpForm.get('username').value\n    const emailAddress = this.signUpForm.get('emailAddress').value\n    const password = this.signUpForm.get('password').value\n    this.firebaseService.signUp(emailAddress, password).then(e => {\n      console.log(e)\n      // this.firebaseService.insertIntoFirestore(CollectionName.User, { username, emailAddress })\n    }).catch(e => {\n      this.generalError = e\n      // this.signUpForm.\n      // console.log(this.signUpForm.value('username'))\n      this.signUpForm.setErrors({ generalError: e })\n    })\n  }\n\n  // onSignUpFromLogin() {\n  //   console.log('submit');\n  //   const emailUsername = this.signInForm.get('usernameEmail').value\n  //   const password = this.signInForm.get('password').value\n  //   this.firebaseService.signUp(emailUsername, password)\n  // }\n\n  onSignIn() {\n    console.log('onsignin');\n    const emailUsername = this.signInForm.get('usernameEmail').value\n    const password = this.signInForm.get('password').value\n    this.firebaseService.signIn(emailUsername, password)\n  }\n\n  onSignInGoogle() {\n    const provider = new firebase.auth.GoogleAuthProvider()\n    // this.auth.auth.signInWithRedirect(provider)\n    // firebase.auth().getRedirectResult().then((e) => {\n    this.firebaseService.signInWithGoogle(provider)\n  }\n\n  emailDomainValidator(control: FormControl) {\n    const email = control.value;\n    if (email && email.indexOf(\"@\") != -1) {\n      let [_, domain] = email.split('@');\n      if (domain !== 'codecraft.tv') {\n        const emailDomain = {\n          parsedDomain: domain\n        }\n        console.log(emailDomain)\n        return {\n          emailDomain\n        }\n      }\n    }\n    return null;\n  }\n\n}\n\n\nexport interface SignIn {\n  username: string,\n  emailAddress: string,\n  age: number,\n  gender: string,\n  authType: string,\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "usernameValidate",
                    "args": [
                        {
                            "name": "afs",
                            "type": "AngularFirestore",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "(control: AbstractControl) => any",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "afs",
                            "type": "AngularFirestore",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Data",
            "id": "class-Data-960e320edff913cb6b2adda6237f508f7a8cbe057cb8b134be3d6e920d63ced596dde0f37af6f23d8d4b071199e4c33fa1937fd91e76698c07d258a60f1c2108",
            "file": "src/app/models/yts-torrent.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class IYTSSingleQuery {\n  status: string;\n  status_message: string;\n  data: Data;\n  \"@meta\": Meta;\n}\n\nclass Meta {\n  server_time: number;\n  server_timezone: string;\n  api_version: number;\n  execution_time: string;\n}\n\nclass Data {\n  movie_count: number;\n  limit: number;\n  page_number: number;\n  movies: Movie[];\n}\n\nclass Movie {\n  id: number;\n  url: string;\n  imdb_code: string;\n  title: string;\n  title_english: string;\n  title_long: string;\n  slug: string;\n  year: number;\n  rating: number;\n  runtime: number;\n  genres: string[];\n  summary: string;\n  description_full: string;\n  synopsis: string;\n  yt_trailer_code: string;\n  language: string;\n  mpa_rating: string;\n  background_image: string;\n  background_image_original: string;\n  small_cover_image: string;\n  medium_cover_image: string;\n  large_cover_image: string;\n  state: string;\n  torrents: YTSTorrent[];\n  date_uploaded: string;\n  date_uploaded_unix: number;\n}\n\nexport class YTSTorrent {\n  url: string;\n  hash: string;\n  quality: string;\n  type: string;\n  seeds: number;\n  peers: number;\n  size: string;\n  size_bytes: number;\n  date_uploaded: string;\n  date_uploaded_unix: number;\n}\n",
            "properties": [
                {
                    "name": "limit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "movie_count",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "movies",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Movie[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "page_number",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "EmailAddressExistValidator",
            "id": "class-EmailAddressExistValidator-64f40fc38e12b0c04bb5e9a10807494e16328ed445ebd44d910be39dc4a2bd6361fe72afad493f9d71da8c525e27a8a6a5c8f79998a6b4fdef2c1982cfc66380",
            "file": "src/app/directives/emailAddress-exist.directive.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { CollectionName, FirebaseOperator, FieldName } from './../services/firebase.service';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport { AbstractControl } from '@angular/forms';\nimport { map, debounceTime, take } from 'rxjs/operators';\n\nexport class EmailAddressExistValidator {\n  static validateEmailAddress(afs: AngularFirestore) {\n    return (control: AbstractControl) => {\n\n      const emailAddress = control.value.toLowerCase();\n      return afs.collection(CollectionName.User, ref => ref.where(FieldName.EmailAddress, FirebaseOperator.Equal, emailAddress))\n        .valueChanges().pipe(\n          debounceTime(500),\n          take(1),\n          map(arr =>\n            arr.length ? { emailAddressUnavailable: true } : null\n          ),\n        )\n    }\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "validateEmailAddress",
                    "args": [
                        {
                            "name": "afs",
                            "type": "AngularFirestore",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "(control: AbstractControl) => any",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "afs",
                            "type": "AngularFirestore",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GeneralUtil",
            "id": "class-GeneralUtil-e981639aa853bfb8f006b8097e782d57f1d6f70f9c001ad9a2e706f5eb7cea84c735e7b818dc7ecededa849fad7f5dcfb8488ba18999f1bd9a608dd7627a9618",
            "file": "src/app/utils/general.util.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { STRING_REGEX_YEAR_ONLY, STRING_REGEX_OMDB_RELEASE_DATE, STRING_REGEX_TMDB_RELEASE_DATE } from '../shared/constants';\n\nexport default class GeneralUtil {\n\n  /**\n   * Gets the year.\n   * @param releaseDate release date with format YYYY-MM-DD or 15 October 1999\n   * @returns string value of year with `YYYY` format\n   */\n  static getYear(releaseDate: string) {\n    const REGEX_OMDB_RELEASE_DATE = new RegExp(STRING_REGEX_OMDB_RELEASE_DATE, `gi`);\n    const REGEX_TMDB_RELEASE_DATE = new RegExp(STRING_REGEX_TMDB_RELEASE_DATE, `gi`);\n    const REGEX_YEAR_ONLY = new RegExp(STRING_REGEX_YEAR_ONLY, `gi`)\n    const result1 = REGEX_OMDB_RELEASE_DATE.exec(releaseDate)\n    const result2 = REGEX_TMDB_RELEASE_DATE.exec(releaseDate)\n    const result3 = REGEX_YEAR_ONLY.exec(releaseDate)\n    let toReturn = ''\n    if (result1) {\n      toReturn = releaseDate.substr(releaseDate.lastIndexOf(' ') + 1);\n    } else if (result2) {\n      toReturn = releaseDate.substring(0, releaseDate.indexOf('-'))\n    } else if (result3) {\n      toReturn = releaseDate\n    }\n    return toReturn\n  }\n\n  /**\n   * Converts seconds to HH:mm:ss format.\n   */\n  static convertToHHMMSS(value): string {\n    if (!value) return '00:00'\n    const minSec = new Date(value * 1000).toISOString().substr(14, 5)\n    if (value < 3600) {\n      return minSec\n    }\n    const hour = (value / 3600)\n    return Math.floor(hour) + ':' + minSec\n  }\n\n  /**\n   * Gets the percentage.\n   * @param timestamp timestamp in seconds\n   * @param length movie length in seconds\n   * @returns percentage\n   */\n  static getPercentage(timestamp: number, length: number): number {\n    return (timestamp / length) * 100\n  }\n\n  /**\n   * Gets the timestamp.\n   * @param percentage\n   * @param length movie length in seconds\n   * @returns timestamp in seconds\n   */\n  static getTimestamp(percentage: number, length: number): number {\n    return (percentage / 100) * length\n  }\n  /**\n   * Console log with date time.\n   */\n  static DEBUG = (() => {\n    let timestamp = () => { };\n    timestamp.toString = () => {\n      return \"[DEBUG \" + new Date().toLocaleString() + \"]\";\n    };\n    return {\n      log: console.log.bind(console, \"%s\", timestamp),\n    };\n  })();\n\n  // Human readable bytes util\n  static prettyBytes(num: number): string {\n    let exponent,\n      unit,\n      neg = num < 0,\n      units = [\"B\", \"kB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"];\n    if (neg) num = -num;\n    if (num < 1) return (neg ? \"-\" : \"\") + num + \" B\";\n    exponent = Math.min(\n      Math.floor(Math.log(num) / Math.log(1000)),\n      units.length - 1\n    );\n    num = Number((num / Math.pow(1000, exponent)).toFixed(2));\n    unit = units[exponent];\n    return (neg ? \"-\" : \"\") + num + \" \" + unit;\n  }\n}\n",
            "properties": [
                {
                    "name": "DEBUG",
                    "defaultValue": "(() => {\n    let timestamp = () => { };\n    timestamp.toString = () => {\n      return \"[DEBUG \" + new Date().toLocaleString() + \"]\";\n    };\n    return {\n      log: console.log.bind(console, \"%s\", timestamp),\n    };\n  })()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Console log with date time.</p>\n",
                    "line": 64,
                    "rawdescription": "\n\nConsole log with date time.\n",
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "methods": [
                {
                    "name": "convertToHHMMSS",
                    "args": [
                        {
                            "name": "value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nConverts seconds to HH:mm:ss format.\n",
                    "description": "<p>Converts seconds to HH:mm:ss format.</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPercentage",
                    "args": [
                        {
                            "name": "timestamp",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "length",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets the percentage.\n",
                    "description": "<p>Gets the percentage.</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1451,
                                "end": 1460,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "timestamp"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1445,
                                "end": 1450,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>timestamp in seconds</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1494,
                                "end": 1500,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "length"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1488,
                                "end": 1493,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>movie length in seconds</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1531,
                                "end": 1538,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>percentage</p>\n"
                        }
                    ]
                },
                {
                    "name": "getTimestamp",
                    "args": [
                        {
                            "name": "percentage",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "length",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets the timestamp.\n",
                    "description": "<p>Gets the timestamp.</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1710,
                                "end": 1720,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "percentage"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1704,
                                "end": 1709,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 1733,
                                "end": 1739,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "length"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1727,
                                "end": 1732,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>movie length in seconds</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1770,
                                "end": 1777,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>timestamp in seconds</p>\n"
                        }
                    ]
                },
                {
                    "name": "getYear",
                    "args": [
                        {
                            "name": "releaseDate",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets the year.\n",
                    "description": "<p>Gets the year.</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 202,
                                "end": 213,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "releaseDate"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 196,
                                "end": 201,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>release date with format YYYY-MM-DD or 15 October 1999</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 275,
                                "end": 282,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>string value of year with <code>YYYY</code> format</p>\n"
                        }
                    ]
                },
                {
                    "name": "prettyBytes",
                    "args": [
                        {
                            "name": "num",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "num",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "IProfileData",
            "id": "class-IProfileData-1864c2d5448e0c9450395f701045f267f35956627df366578c5a166274ffa8e8faf40cc47d8b234217c9f617306668665f329af03586e3cd1f8d89f5686324b7",
            "file": "src/app/models/profile-data.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Review } from \"./review.model\";\n\nexport class IProfileData {\n\n  tmdbId?: number;\n  bookmark?: Bookmark;\n  favorite?: Favorite;\n  watched?: Watched;\n  listLinkMovie?: ListLinkMovie;\n  review?: Review;\n  isBookmark?: boolean;\n  isFavorite?: boolean;\n  library?: any\n  // isBookmark?: boolean;\n}\n\ninterface Bookmark {\n  id: string\n}\ninterface Favorite {\n  id: string\n}\ninterface Watched {\n  id?: string\n  percentage: number\n}\nexport interface ListLinkMovie {\n  id: number\n  listId: number\n}\n",
            "properties": [
                {
                    "name": "bookmark",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Bookmark",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "favorite",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Favorite",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "isBookmark",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "isFavorite",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "library",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "listLinkMovie",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ListLinkMovie",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "review",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Review",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "tmdbId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "watched",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Watched",
                    "optional": true,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ITPBTorrent",
            "id": "class-ITPBTorrent-584d54738f93e2af94202069b5eddb4cab23bb2dfec2ff69f24ebaf881c252f94680b4cd6cec302796817692570a31bedafc5d74fed1cf6488a895dbf372e23d",
            "file": "src/app/models/interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export interface IMdbMovieDetails {\n  awards?: string\n  backgroundPath: string;\n  belongsToCollection?: []\n  boxOffice?: string | number // tmdb:revenue(number)\n  budget?: number\n  country?: string\n  director?: string\n  dvd?: string // dvd release\n  genres?: string[] | string | IGenre[]\n  imdbId?: string\n  imdbRating?: string\n  imdbVotes?: string\n  isAdult?: boolean;\n  isAvailable?: boolean;\n  languages?: string[]\n  libraryInfo?: ILibraryInfo\n  metascore?: string // metacritic score\\\n  originalLanguage?: string // tmdb:\"en\",omdb:\"English\"\n  originalTitle?: string\n  plot?: string // plot or overview\n  popularity?: number\n  posterPath: string\n  production?: string // company; i.e. Walt Disney Pictures\n  rated?: string // rated or certificate\n  ratings?: IRating[]\n  releaseDate?: string // omdb:\"05 May 2017\"; tmdb:\"1999-10-15\"\n  releaseYear?: number | string\n  response: string\n  runtime?: string\n  starring?: string // Actors field in omdb\n  status?: string // released/Post\n  tagline?: string;\n  tmdbId?: number\n  title: string\n  type?: string // movie/tvmovie/series\n  video?: boolean; // unknown\n  // voteAverage: number; // tmdb votes\n  // voteCount: number; // tmdb votes\n  website?: string\n  writer?: string // omdb\n  [propName: string]: any;\n}\n\nexport interface IRating {\n  Source: string\n  Value: string\n}\n\nexport interface LibraryInfo {\n  tmdbId?: null | number | string\n  imdbID?: string\n  title?: string\n  year?: number\n  directoryList?: string[]\n  _id: string\n}\n\nexport interface MovieGenre {\n  id: number\n  code: string\n  description: string\n  isChecked: boolean\n}\n\nexport interface WatchList {\n  id: number\n  movieList: string[]\n}\n\nexport interface ILibraryInfo {\n  tmdbId?: null | number | string\n  imdbID?: string\n  title?: string\n  year?: number\n  directoryList?: string[]\n  _id: string\n}\n\nexport interface ICollection {\n  id: number,\n  name: string\n}\n\nexport interface IProductionCompany {\n  id: number;\n  logo_path: null | string;\n  name: string;\n  origin_country: string;\n}\n\nexport interface IProductionCountry {\n  iso_3166_1: string;\n  name: string;\n}\n\nexport interface ISpokenLanguage {\n  iso_639_1: string;\n  name: string;\n}\n\nexport interface IOmdbMovieDetail {\n  Title: string\n  Year?: string\n  Rated?: string\n  Released?: string // \"05 May 2017\"\n  Runtime?: string\n  Genre?: string\n  Director?: string\n  Writer?: string\n  Actors?: string\n  Plot?: string\n  Language?: string\n  Country?: string\n  Awards?: string\n  Poster?: string\n  Ratings?: IRating[]\n  Metascore?: string\n  imdbRating?: string\n  imdbVotes?: string\n  imdbID: string\n  Type?: string\n  DVD?: string\n  BoxOffice?: string\n  Production?: string\n  Website?: string\n  Response: string\n}\n\nexport interface ITmdbMovieDetail {\n  adult: boolean;\n  backdrop_path: string;\n  belongs_to_collection: null;\n  budget: number;\n  genres: IGenre[];\n  homepage: string;\n  id: number;\n  imdb_id: string;\n  original_language: string;\n  original_title: string;\n  overview: string;\n  popularity: number;\n  poster_path: string;\n  production_companies: IProductionCompany[];\n  production_countries: IProductionCountry[];\n  release_date: string;\n  revenue: number;\n  runtime: number;\n  spoken_languages: ISpokenLanguage[];\n  status: string;\n  tagline: string;\n  title: string;\n  video: boolean;\n  vote_average: number;\n  vote_count: number;\n}\n\nexport interface MdbMovieDetails {\n  adult?: boolean;\n  title: string\n  releaseYear?: string\n  releaseDate?: string\n  rated?: string // rated or certificate\n  runtime?: string\n  genres?: string\n  director?: string\n  writer?: string\n  Actors?: string\n  plot?: string // plot or overview\n  Language?: string\n  Country?: string\n  Awards?: string\n  Poster?: string\n  Ratings?: IRating[]\n  Metascore?: string\n  imdbRating?: string\n  imdbVotes?: string\n  imdbID: string\n  tmdbID: number\n  Type?: string\n  DVD?: string\n  BoxOffice?: string\n  Production?: string\n  website?: string\n  response: string\n  libraryInfo?: ILibraryInfo\n}\n\n// // adult: boolean;\n// //backdrop_path: string;\n// belongs_to_collection: null;\n// // budget: number;\n// genres: Genre[];\n// // homepage: string;\n// // id: number;\n// // imdb_id: string;\n// original_language: string;\n// original_title: string;\n// // overview: string;\n// // popularity: number;\n// // poster_path: string;\n// production_companies: ProductionCompany[];\n// production_countries: ProductionCountry[];\n// // release_date: string;\n// // revenue: number;\n// // runtime: number;\n// spoken_languages: SpokenLanguage[];\n// // status: string;\n// // tagline: string;\n// // title: string;\n// // video: boolean;\n// // vote_average: number;\n// // vote_count: number;\n\nexport interface ITmdbResultObject {\n  page: number;\n  total_results: number;\n  total_pages: number;\n  results: ITmdbResult[];\n}\n\nexport interface ITmdbResult {\n  popularity: number\n  vote_count: number\n  video: boolean\n  poster_path: string\n  id: number\n  adult: boolean\n  backdrop_path: string\n  original_language: string\n  original_title: string\n  genre_ids: number[]\n  title: string\n  vote_average: number\n  overview: string\n  release_date: string\n  isAvailable?: boolean\n  isHighlighted?: boolean\n}\n\nexport interface ILibraryMovie {\n  tmdbId?: number,\n  title: string,\n  year: number,\n  imdbId?: string,\n  directory: string[]\n}\n\nexport interface IGenre {\n  id: number\n  name: string\n}\n\nexport interface Credits {\n  id: number;\n  cast: CastElement[];\n  crew: Crew[];\n}\n\ninterface CastElement {\n  cast_id: number;\n  character: string;\n  credit_id: string;\n  gender: number;\n  id: number;\n  name: string;\n  order: number;\n  profile_path: null | string;\n}\n\ninterface Crew {\n  credit_id: string;\n  department: Department;\n  gender: number;\n  id: number;\n  job: string;\n  name: string;\n  profile_path: null | string;\n}\n\nexport enum Department {\n  Art = 'Art',\n  Camera = 'Camera',\n  CostumeMakeUp = 'Costume & Make-Up',\n  Crew = 'Crew',\n  Directing = 'Directing',\n  Editing = 'Editing',\n  Lighting = 'Lighting',\n  Production = 'Production',\n  Sound = 'Sound',\n  VisualEffects = 'Visual Effects',\n  Writing = 'Writing',\n}\n\nexport class MDBTorrent {\n  id?: string\n  name?: string\n  size?: string\n  hash: string\n  url?: string\n  quality?: string\n  type?: string\n  seeds?: number\n  peers?: number\n  sizeBytes?: number\n  added?: string\n  dateUploaded?: string\n  dateUploadedUnix?: number\n  isYts?: boolean\n  magnetLink?: string\n}\n\nexport class ITPBTorrent {\n  id?: number\n  name?: string\n  hash: string\n  sizeBytes?: number\n  added?: string\n}\n\nexport interface ISearch {\n  page: number\n}\n\nexport enum OmdbParameters {\n  ApiKey = 'apikey',\n  ImdbId = 'i',\n  Title = 't',\n  Type = 'type',\n  Year = 'y',\n  Plot = 'plot',\n  Return = 'r',\n  Callback = 'callback',\n  Version = 'v',\n}\n\nexport enum TmdbParameters {\n  ApiKey = 'api_key',\n  AppendToResponse = 'append_to_response',\n  Language = 'language',\n  Region = 'region',\n  SortBy = 'sort_by',\n  CertificationCountry = 'certification_country',\n  Certification = 'certification',\n  CertificationLess = 'certification.lte',\n  CertificationGreater = 'certification.gte',\n  IncludeAdult = 'include_adult',\n  IncludeVideo = 'include_video',\n  Page = 'page',\n  PrimaryReleaseYear = 'primary_release_year',\n  PrimaryReleaseDateGreater = 'primary_release_date.gte',\n  PrimaryReleaseDateLess = 'primary_release_date.lte',\n  ReleaseDateGreater = 'release_date.gte',\n  ReleaseDateLess = 'release_date.lte',\n  WithReleaseType = 'with_release_type',\n  Year = 'year',\n  VoteCountGreater = 'vote_count.gte',\n  VoteCountLess = 'vote_count.lte',\n  VoteAverageGreater = 'vote_average.gte',\n  VoteAverageLess = 'vote_average.lte',\n  WithCast = 'with_cast',\n  WithCrew = 'with_crew',\n  WithPeople = 'with_people',\n  WithCompanies = 'with_companies',\n  WithGenres = 'with_genres',\n  WithoutGenres = 'without_genres',\n  WithKeywords = 'with_keywords',\n  WithoutKeywords = 'without_keywords',\n  WithRuntimeGreater = 'with_runtime.gte',\n  WithRuntimeLess = 'with_runtime.lte',\n  WithOriginalLanguage = 'with_original_language',\n  WithWatchProviders = 'with_watch_providers',\n  WatchRegion = 'watch_region'\n}\n\nexport enum TmdbSearchMovieParameters {\n  ApiKey = 'api_key',\n  Language = 'language', // Pass a ISO 639 - 1 value to display translated data for the fields that support it. minLength: 2 pattern: ([a - z]{ 2 }) -([A - Z]{ 2 }) default: en - US\n  Query = 'query',\n  Page = 'page', // minimum: 1 maximum: 1000\n  IncludeAdult = 'include_adult',\n  Region = 'region',\n  // Specify a ISO 3166 - 1 code to filter release dates.Must be uppercase. pattern: ^ [A - Z]{ 2 } $\n  Year = 'year',\n  PrimaryReleaseYear = 'primary_release_year'\n}\n\nenum TmdbAppendToResponseParameters {\n  AccountStates = 'account_states',\n  Videos = 'videos',\n  Images = 'images',\n  Credits = 'credits',\n  Changes = 'changes',\n  Translations = 'translations',\n  Similar = 'similar',\n  ExternalIds = 'external_ids',\n  AlternativeTitles = 'alternative_titles',\n  Keywords = 'keywords',\n  Reviews = 'reviews',\n  Recommendations = 'recommendations',\n  ReleaseDates = 'release_dates',\n  Lists = 'lists'\n}\n\nenum TmdbReleaseTypes {\n  PREMIERE = 'Premiere',  // 1\n  THEATRICAL_LIMITED = 'Theatrical(limited)', // 2\n  THEATRICAL = 'Theatrical', // 3\n  DIGITAL = 'Digital', // 4\n  PHYSICAL = 'Physical', // 5\n  TV = 'TV', // 6\n}\n\nexport interface IPersonDetails {\n  birthday: string;\n  known_for_department: string;\n  id: number;\n  movie_credits?: IPersonCredits;\n  tv_credits?: IPersonCredits;\n  combined_credits?: IPersonCredits;\n  homepage?: any;\n  profile_path: string;\n  imdb_id: string;\n  deathday?: any;\n  images?: IImages;\n  external_ids?: IExternalids;\n  name: string;\n  also_known_as: string[];\n  biography: string;\n  adult: boolean;\n  gender: number;\n  place_of_birth: string;\n  popularity: number;\n}\n\nexport interface IPersonCredits {\n  cast: IPersonCastCrew[];\n  crew: IPersonCastCrew[];\n  id?: number;\n}\n\nexport interface IPersonCastCrew {\n  id?: number;\n  original_language: string;\n  episode_count?: number;\n  overview: string;\n  origin_country?: string[];\n  original_name?: string;\n  genre_ids: number[];\n  name?: string;\n  media_type: string;\n  poster_path: null | string;\n  first_air_date?: string;\n  vote_average: number;\n  vote_count: number;\n  character?: string;\n  backdrop_path: null | string;\n  popularity: number;\n  credit_id: string;\n  original_title?: string;\n  video?: boolean;\n  release_date?: string;\n  title?: string;\n  adult?: boolean;\n  department?: string;\n  job?: string;\n}\n\nexport interface IExternalids {\n  id?: number;\n  freebase_id: string;\n  instagram_id: string;\n  tvrage_id: number;\n  twitter_id: string;\n  freebase_mid: string;\n  imdb_id: string;\n  facebook_id: string;\n}\n\nexport interface IImages {\n  id?: number;\n  profiles: IProfile[];\n}\n\nexport interface IProfile {\n  iso_639_1?: any;\n  aspect_ratio: number;\n  vote_count: number;\n  height: number;\n  vote_average: number;\n  file_path: string;\n  width: number;\n}\n\nexport interface ICredits {\n  cast: ICast[];\n  crew: ICrew[];\n}\n\ninterface ICast {\n  poster_path?: string;\n  adult: boolean;\n  backdrop_path?: string;\n  vote_count: number;\n  video: boolean;\n  id: number;\n  media_type?: string;\n  popularity: number;\n  genre_ids: number[];\n  original_language: string;\n  title: string;\n  original_title: string;\n  release_date: string;\n  character: string;\n  vote_average: number;\n  overview: string;\n  credit_id: string;\n}\n\ninterface ICrew {\n  id: number;\n  department: string;\n  original_language: string;\n  original_title: string;\n  job: string;\n  overview: string;\n  genre_ids: number[];\n  video: boolean;\n  episode_count: number\n  media_type?: string;\n  credit_id: string;\n  poster_path?: string;\n  popularity: number;\n  backdrop_path?: string;\n  vote_count: number;\n  title: string;\n  adult: boolean;\n  vote_average: number;\n  release_date: string;\n}\n\nexport interface IUserSavedData {\n  id?: string,\n  title: string,\n  year: number,\n  tmdbId: number,\n}\n\nexport enum GenreCodes {\n  Action = 28,\n  Adventure = 12,\n  Animation = 16,\n  Comedy = 35,\n  Crime = 80,\n  Documentary = 99,\n  Drama = 18,\n  Family = 10751,\n  Fantasy = 14,\n  History = 36,\n  Horror = 27,\n  Music = 10402,\n  Mystery = 9648,\n  Romance = 10749,\n  ScienceFiction = 878,\n  TVMovie = 10770,\n  Thriller = 53,\n  War = 10752,\n  Western = 37,\n  // mdb reserved\n  FilmNoir = 20000,\n  // similar genre: Music id:10402\n  Musical = 20001,\n  News = 20002,\n  RealityTV = 20003,\n  // similar genre: Science Fiction id:878\n  SciFi = 20004,\n  // another media type\n  Short = 20005,\n  Sport = 20006,\n}\n\n\n\n/**\nexport enum Department {\n    Art = \"Art\",\n    Camera = \"Camera\",\n    CostumeMakeUp = \"Costume & Make-Up\",\n    Crew = \"Crew\",\n    Directing = \"Directing\",\n    Editing = \"Editing\",\n    Lighting = \"Lighting\",\n    Production = \"Production\",\n    Sound = \"Sound\",\n    VisualEffects = \"Visual Effects\",\n    Writing = \"Writing\",\n}\n\nexport interface ExternalIDS {\n    imdb_id:      string;\n    facebook_id:  null;\n    instagram_id: null;\n    twitter_id:   null;\n}\n\nexport interface Genre {\n    id:   number;\n    name: string;\n}\n\nexport interface Images {\n    backdrops: any[];\n    posters:   any[];\n}\n\nexport enum OriginalLanguage {\n    En = \"en\",\n    Es = \"es\",\n    Fr = \"fr\",\n}\n\nexport interface ProductionCompany {\n    id:             number;\n    logo_path:      string;\n    name:           string;\n    origin_country: string;\n}\n\nexport interface ProductionCountry {\n    iso_3166_1: string;\n    name:       string;\n}\n\nexport interface Recommendations {\n    page:          number;\n    results:       RecommendationsResult[];\n    total_pages:   number;\n    total_results: number;\n}\n\nexport interface RecommendationsResult {\n    id:                number;\n    video:             boolean;\n    vote_count:        number;\n    vote_average:      number;\n    title:             string;\n    release_date:      string;\n    original_language: OriginalLanguage;\n    original_title:    string;\n    genre_ids:         number[];\n    backdrop_path:     string;\n    adult:             boolean;\n    overview:          string;\n    poster_path:       string;\n    popularity:        number;\n}\n\nexport interface SpokenLanguage {\n    iso_639_1: OriginalLanguage;\n    name:      string;\n}\n\nexport interface Videos {\n    results: VideosResult[];\n}\n\nexport interface VideosResult {\n    id:         string;\n    iso_639_1:  OriginalLanguage;\n    iso_3166_1: string;\n    key:        string;\n    name:       string;\n    site:       string;\n    size:       number;\n    type:       string;\n}\n */\n\n",
            "properties": [
                {
                    "name": "added",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 319
                },
                {
                    "name": "hash",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 317
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 315
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 316
                },
                {
                    "name": "sizeBytes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 318
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "IYTSSingleQuery",
            "id": "class-IYTSSingleQuery-960e320edff913cb6b2adda6237f508f7a8cbe057cb8b134be3d6e920d63ced596dde0f37af6f23d8d4b071199e4c33fa1937fd91e76698c07d258a60f1c2108",
            "file": "src/app/models/yts-torrent.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class IYTSSingleQuery {\n  status: string;\n  status_message: string;\n  data: Data;\n  \"@meta\": Meta;\n}\n\nclass Meta {\n  server_time: number;\n  server_timezone: string;\n  api_version: number;\n  execution_time: string;\n}\n\nclass Data {\n  movie_count: number;\n  limit: number;\n  page_number: number;\n  movies: Movie[];\n}\n\nclass Movie {\n  id: number;\n  url: string;\n  imdb_code: string;\n  title: string;\n  title_english: string;\n  title_long: string;\n  slug: string;\n  year: number;\n  rating: number;\n  runtime: number;\n  genres: string[];\n  summary: string;\n  description_full: string;\n  synopsis: string;\n  yt_trailer_code: string;\n  language: string;\n  mpa_rating: string;\n  background_image: string;\n  background_image_original: string;\n  small_cover_image: string;\n  medium_cover_image: string;\n  large_cover_image: string;\n  state: string;\n  torrents: YTSTorrent[];\n  date_uploaded: string;\n  date_uploaded_unix: number;\n}\n\nexport class YTSTorrent {\n  url: string;\n  hash: string;\n  quality: string;\n  type: string;\n  seeds: number;\n  peers: number;\n  size: string;\n  size_bytes: number;\n  date_uploaded: string;\n  date_uploaded_unix: number;\n}\n",
            "properties": [
                {
                    "name": "@meta",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Data",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "status_message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "MDBMovie",
            "id": "class-MDBMovie-ab3c214285c1bfb717ed3d3b0126b69c830be2c667b8ea1793b5a95dd2f4bb2586d106c6397d01b558a5443d11988665d988e81d61dce2a7c48ca0eb54dacd73",
            "file": "src/app/models/mdb-movie.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Department, IRating } from \"./interfaces\"\nimport { TMDB_External_Id } from \"./tmdb-external-id.model\"\nimport { IProfileData } from \"./profile-data.model\"\n\nexport class MDBMovie {\n  mdbId: string\n  imdbId: string\n  tmdbId: number\n  title: string\n  originalTitle: string\n  originalLanguage: string\n  overview: string\n  popularity: number\n  posterPath: string\n  userData: IProfileData\n  backropPath: string\n  credits: ICredits\n  rating: IRating\n  isAdult: boolean\n  vote: IVote\n  releaseDate: string\n  runtime: number // runtme by minutes\n  status: string\n  tagline: string\n  externalIds: TMDB_External_Id\n  genres: any\n  genreIds: number[]\n  // not used much\n  budget: number\n  website: string\n  revenue: number\n  spokenLanguages: any\n  video: boolean\n  // to map further\n  recommendations: any\n  images: any\n  videos: any\n  productionCompanies: any\n  collection: any\n  productionCountries: any\n  releaseDates: any\n\n  constructor(value?: any) {\n    if (value != null) {\n      this.mapToObject(value)\n    }\n  }\n\n  private nestMapper(val: any, ...args) {\n    let toReturn = null\n    try {\n      if (this.getNested(val, args))\n        toReturn = val\n    } catch {\n      toReturn = null\n    }\n    return toReturn\n  }\n\n  getNested(obj, ...args) {\n    return args.reduce((obj, level) => obj && obj[level], obj)\n  }\n  /**\n   * https://stackoverflow.com/questions/47632430/pattern-for-dealing-with-mapping-api-objects-to-ui-model-objects\n   * @param value orig value\n   * @param source tmdb, mdb or omdb\n   */\n  private mapToObject(value: any, source?: string) {\n\n    this.imdbId = value['imdb_id'] || value['imdbId']\n    this.tmdbId = value['id'] || value['tmdbId']\n    this.mdbId = value['tmdbId'] || value['id']\n    this.title = value['title']\n    this.originalTitle = value['original_language'] || value['originalTitle']\n    this.originalLanguage = value['original_title'] || value['originalLanguage']\n    this.overview = value['overview'] || value['plot']\n    this.posterPath = value['poster_path'] || value['posterPath']\n    // this.userData = value['userData'] || value['plot']\n    this.backropPath = value['backdrop_path'] || value['backropPath']\n    this.credits = value['credits']\n    this.rating = value['overview'] || value['plot']\n    this.isAdult = value['adult'] || value['isAdult']\n    this.vote = {\n      voteAverage: value['vote_average'] || this.nestMapper(value, 'vote', 'voteAverage'),\n      voteCount: value['vote_count'] || this.nestMapper(value, 'vote', 'voteCount')\n    }\n    this.releaseDate = value['release_date'] || value['releaseDate']\n    this.runtime = value['runtime']\n    this.status = value['status']\n    this.tagline = value['tagline']\n    this.externalIds = value['external_ids'] || value['externalIds']\n    this.genres = value['genres']\n    this.genreIds = value['genre_ids']\n\n    this.budget = value['budget']\n    this.website = value['homepage'] || value['Website']\n    this.revenue = value['revenue']\n    this.spokenLanguages = value['spoken_languages'] || value['spokenLanguages']\n    this.video = value['video']\n\n    this.recommendations = value['recommendations']\n    this.images = value['images']\n    this.videos = value['videos']\n    this.productionCompanies = value['production_companies'] || value['productionCompanies']\n    this.collection = value['belongs_to_collection'] || value['collection']\n    this.productionCountries = value['production_countries'] || value['productionCountries']\n    this.releaseDates = value['release_dates'] || value['releaseDates']\n\n  }\n}\n\nexport interface ICredits {\n  id: number;\n  cast: ICast[];\n  crew: ICrew[];\n}\n\ninterface ICast {\n  castId: number;\n  character: string;\n  credit_id: string;\n  gender: number;\n  id: number;\n  name: string;\n  order: number;\n  profilePath: null | string;\n}\n\ninterface ICrew {\n  creditId: string;\n  department: Department;\n  gender: number;\n  id: number;\n  job: string;\n  name: string;\n  profilePath: null | string;\n}\n\n\ninterface IVote {\n  voteCount: number\n  voteAverage: number\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "value",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "value",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "backropPath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "budget",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "collection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "credits",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ICredits",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "externalIds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TMDB_External_Id",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "genreIds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "genres",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "images",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "imdbId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "isAdult",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "mdbId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "originalLanguage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "originalTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "overview",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "popularity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "posterPath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "productionCompanies",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "productionCountries",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "rating",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IRating",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "recommendations",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "releaseDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "releaseDates",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "revenue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "runtime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "spokenLanguages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "tagline",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "tmdbId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "userData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IProfileData",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "video",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "videos",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "vote",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IVote",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "website",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methods": [
                {
                    "name": "getNested",
                    "args": [
                        {
                            "name": "obj",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "args",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mapToObject",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "source",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nhttps://stackoverflow.com/questions/47632430/pattern-for-dealing-with-mapping-api-objects-to-ui-model-objects\n",
                    "description": "<p><a href=\"https://stackoverflow.com/questions/47632430/pattern-for-dealing-with-mapping-api-objects-to-ui-model-objects\">https://stackoverflow.com/questions/47632430/pattern-for-dealing-with-mapping-api-objects-to-ui-model-objects</a></p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1449,
                                "end": 1454,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1443,
                                "end": 1448,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>orig value</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1478,
                                "end": 1484,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "source"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 1472,
                                "end": 1477,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>tmdb, mdb or omdb</p>\n"
                        }
                    ]
                },
                {
                    "name": "nestMapper",
                    "args": [
                        {
                            "name": "val",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "args",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "MdbMovieDetails",
            "id": "class-MdbMovieDetails-bf79424ffa17ddc50e07f44fa72a55c5b19d5e41ef9d9271ea723333e2ff2a33326477f49f312d904b8a3db0702265c8b6e22b910f6fbee0253ff5e58d74157f",
            "file": "src/app/classes.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IMdbMovieDetails, IRating, ILibraryInfo, IGenre, ISpokenLanguage } from '@models/interfaces'\nimport { MONTHS, STRING_REGEX_OMDB_RELEASE_DATE, STRING_REGEX_OMDB_BOX_OFFICE } from '@shared/constants'\n\n/**\n * The main class.\n * TODO: add 'N\\A' and null handlers\n */\nexport class MdbMovieDetails implements IMdbMovieDetails {\n  awards?: string\n  private _backgroundPath: string;\n  private _boxOffice?: string | number // tmdb:revenue(number)\n  bookmark: any\n  belongsToCollection?: []\n  budget?: number\n  country?: string\n  director?: string\n  dvd?: string // dvd release\n  genres: []\n  imdbId?: string\n  imdbRating?: string\n  imdbVotes?: string\n  isAdult?: boolean;\n  isAvailable?: boolean\n  originalLanguage?: string // omdb:\"en\",tmdb:\"English\"\n  originalTitle?: string // tmdb:\"en\",omdb\n  private _languages?: string[]\n  libraryInfo?: ILibraryInfo\n  metascore?: string // metacritic score\n  popularity?: number\n  private _posterPath: string\n  plot?: string // plot or overview\n  production?: string // company; i.e. Walt Disney Pictures\n  rated?: string // rated or certificate\n  ratings?: IRating[]\n  private _releaseDate?: string // omdb:\"05 May 2017\"; tmdb:\"1999-10-15\"\n  private _releaseYear?: string | number\n  response: string\n  runtime?: string\n  status?: string // Rumored, Planned, In Production, Post Production, Released, Canceled\n  starring?: string // Actors field in omdb\n  tagline?: string;\n  tmdbId?: number\n  title: string\n  type?: string // movie/tvmovie/series\n  video?: boolean; // unknown\n  voteAverage: number; // tmdb votes\n  voteCount: number; // tmdb votes\n  watched: any\n  website?: string\n  writer?: string // omdb\n  [propName: string]: any;\n\n  constructor() {}\n\n  /**\n   * Converts omdb or tmdb object into Mdb object\n   * @param value omdb or tmdb object.\n   */\n  convertToMdbObject(value) {\n\n    Object.keys(value).forEach(key => {\n      // console.log('key: ', key, ' value: ', value[key], ' ')\n      switch (key) {\n        case 'Actors':\n          this._releaseDate = value[key]\n          break;\n        case 'adult':\n          this.isAdult = value[key]\n          break;\n        case 'Awards':\n          this.awards = value[key]\n          break;\n        case 'backdrop_path':\n          this._backgroundPath = value[key]\n          break;\n        case 'belongs_to_collection':\n          this.belongsToCollection = value[key]\n          break;\n        case 'BoxOffice':\n        case 'revenue':\n          this._boxOffice = value[key]\n          break;\n        case 'Director':\n          this.director = value[key]\n          break;\n        case 'Genre':\n          this.genres = value[key]\n          break;\n        case 'homepage':\n          this.website = value[key]\n          break;\n        case 'id':\n          this.tmdbId = value[key]\n          break;\n        case 'imdb_id':\n        case 'imdbID':\n          this.imdbId = value[key]\n          break;\n        case 'Language':\n        case 'spoken_languages':\n          this._languages = value[key]\n          break;\n        case 'original_language':\n          this.originalLanguage = value[key]\n          break;\n        case 'original_title':\n          this.originalTitle = value[key]\n          break;\n        case 'Poster':\n        case 'poster_path':\n          this._posterPath = value[key]\n          break;\n        case 'Plot':\n        case 'overview':\n          this.plot = value[key]\n          break;\n        case 'Title':\n          this.title = value[key]\n          break;\n        case 'TmdbID':\n          this.tmdbId = value[key]\n          break;\n        case 'release_date':\n        case 'Released':\n          this._releaseDate = value[key]\n          break;\n        case 'vote_average':\n          this.voteAverage = value[key]\n          break;\n        case 'vote_count':\n          this.voteCount = value[key]\n          break;\n        case 'Writer':\n          this.writer = value[key]\n          break;\n        case 'Year':\n          this._releaseYear = value[key]\n          break;\n        default:\n          this[key] = value[key]\n          break;\n      }\n    });\n    // console.log(this)\n    // Object.keys(value).forEach(key => {\n    //   console.log(`movieDetails key ${key} with value `, value[key]);\n    // })\n  }\n\n  set backgroundPath(v: string) {\n    if (v && v.indexOf('/') == 0) {\n      this._backgroundPath = `https://image.tmdb.org/t/p/original/${v}`\n    } else {\n      this._backgroundPath = v\n    }\n  }\n\n  get backgroundPath() {\n    return this._backgroundPath\n  }\n\n  /**\n   * Sets the box office or revenue. Omdb has '$389,804,217' or 'N/A' format and Tmdb has number format\n   * @param v to set gk\n   */\n  set boxOffice(v: string | number) {\n    // just in case to be used in the future\n    const REGEX_OMDB_BOX_OFFICE = new RegExp(STRING_REGEX_OMDB_BOX_OFFICE, `gi`);\n    const omdbBoxOfficeRegex = REGEX_OMDB_BOX_OFFICE\n    if (typeof v === 'string') {\n      if (v === 'N/A') {\n        this._boxOffice = null\n      } else {\n        this._boxOffice = v.replace(/\\$|,/g, '')\n      }\n    } else {\n      this._boxOffice = v\n    }\n  }\n\n  get boxOffice() {\n    return this._boxOffice\n  }\n\n  // /**\n  //  * Sets the genre list. Parameterized by string of genres `'Genre 1, Genre2'` or list of `IGenre`.\n  //  * @param v genres to list.\n  //  */\n  // set genres(v: any) {\n  //   let result: string[] = []\n  //   if (typeof v === 'string') {\n  //     result = v.split(', ')\n  //   } else {\n  //     const localV = v as IGenre[]\n  //     localV.forEach(element => {\n  //       result.push(element.name.toString())\n  //     })\n  //   }\n  //   this._genres = result\n  // }\n\n  // get genres() {\n  //   return this._genres\n  // }\n  /**\n   * Sets the language list. Parameterized by string of languages `'Language, Idioma'` or list of `ISpokenLanguage`.\n   * @param v languages to list.\n   */\n  set languages(v: any) {\n    let result: string[] = []\n    if (typeof v === 'string') {\n      result = v.split(', ')\n    } else if (typeof v === 'object') {\n      const localV = v as ISpokenLanguage[]\n      localV.forEach(element => {\n        result.push(element.name)\n      })\n    }\n    this._languages = result\n  }\n\n  get languages() {\n    return this._languages\n  }\n\n  /**\n   * Sets the online poster path.\n   */\n  set posterPath(v: string) {\n    // /7w2KlTuboB1krEUfy2ggiZzmKRy.jpg\n    // https://m.media-amazon.com/images/M/MV5BMmEzNTkxYjQtZTc0MC00YTVjLTg5ZTEtZWMwOWVlYzY0NWIwXkEyXkFqcGdeQXVyNzkwMjQ5NzM@._V1_SX300.jpg\n    if (v.indexOf('amazon') >= 0) {\n      this._posterPath = v\n    } else {\n      this._posterPath = `https://image.tmdb.org/t/p/w600_and_h900_bestv2/${v}`\n    }\n  }\n\n  get posterPath() {\n    return this._posterPath\n  }\n\n  /**\n   * Sets the release Date. If parameter is in tmdb format, Tmdb: `1999-10-15` convert to Omdb format `15 October 1999`.\n   * @param v date to set\n   */\n  set releaseDate(v: string) {\n\n    const REGEX_OMDB_RELEASE_DATE = new RegExp(STRING_REGEX_OMDB_RELEASE_DATE, `gi`);\n    const regexResults = REGEX_OMDB_RELEASE_DATE.exec(v)\n    if (regexResults != null) {\n      const date = new Date()\n      date.setFullYear(parseInt(regexResults[1], 10))\n      // in Date function, index starts with zero and month 10 returns november,\n      // in tmdb date, index starts with 1 and month 10 is october, so minus 1\n      date.setMonth(parseInt(regexResults[2], 10) - 1)\n      date.setDate(parseInt(regexResults[3], 10))\n      const month = MONTHS[date.getMonth()]\n      this._releaseDate = `${date.getDate()} ${month} ${date.getFullYear()}`\n      // this.releaseYear(2)\n    } else {\n      this._releaseDate = v\n    }\n  }\n\n  get releaseDate() {\n    return this._releaseDate\n  }\n\n  set releaseYear(val: number | string) {\n    this._releaseYear = val\n  }\n\n  get releaseYear(): number | string {\n    let toReturn\n    const releaseYear = this._releaseYear\n    const releaseDate = this._releaseDate\n    if (!releaseDate) {\n      toReturn = releaseDate.substr(releaseDate.lastIndexOf(' ') + 1)\n    } else {\n      toReturn = !releaseYear ? releaseYear : 0\n    }\n    return toReturn\n  }\n}\n\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 53
            },
            "properties": [
                {
                    "name": "_backgroundPath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_boxOffice",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | number",
                    "optional": true,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_languages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_posterPath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_releaseDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_releaseYear",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | number",
                    "optional": true,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "awards",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "belongsToCollection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "bookmark",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "budget",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "country",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "director",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "dvd",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "genres",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "imdbId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "imdbRating",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "imdbVotes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "isAdult",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "isAvailable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "libraryInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ILibraryInfo",
                    "optional": true,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "metascore",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "originalLanguage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "originalTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "plot",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "popularity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "production",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "rated",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "ratings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IRating[]",
                    "optional": true,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "response",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "runtime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "starring",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "tagline",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "tmdbId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "video",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "voteAverage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "voteCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "watched",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "website",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "writer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 52
                }
            ],
            "description": "<p>The main class.\nTODO: add &#39;N\\A&#39; and null handlers</p>\n",
            "rawdescription": "\n\nThe main class.\nTODO: add 'N\\A' and null handlers\n",
            "methods": [
                {
                    "name": "convertToMdbObject",
                    "args": [
                        {
                            "name": "value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nConverts omdb or tmdb object into Mdb object\n",
                    "description": "<p>Converts omdb or tmdb object into Mdb object</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1777,
                                "end": 1782,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1771,
                                "end": 1776,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>omdb or tmdb object.</p>\n"
                        }
                    ]
                }
            ],
            "indexSignatures": [
                {
                    "id": "index-declaration-bf79424ffa17ddc50e07f44fa72a55c5b19d5e41ef9d9271ea723333e2ff2a33326477f49f312d904b8a3db0702265c8b6e22b910f6fbee0253ff5e58d74157f",
                    "args": [
                        {
                            "name": "propName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "any",
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "accessors": {
                "backgroundPath": {
                    "name": "backgroundPath",
                    "setSignature": {
                        "name": "backgroundPath",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 152,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "backgroundPath",
                        "type": "",
                        "returnType": "",
                        "line": 160
                    }
                },
                "boxOffice": {
                    "name": "boxOffice",
                    "setSignature": {
                        "name": "boxOffice",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "string | number",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 168,
                        "rawdescription": "\n\nSets the box office or revenue. Omdb has '$389,804,217' or 'N/A' format and Tmdb has number format\n",
                        "description": "<p>Sets the box office or revenue. Omdb has &#39;$389,804,217&#39; or &#39;N/A&#39; format and Tmdb has number format</p>\n",
                        "jsdoctags": [
                            {
                                "name": {
                                    "pos": 4604,
                                    "end": 4605,
                                    "flags": 4227072,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "v"
                                },
                                "type": "string | number",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "pos": 4598,
                                    "end": 4603,
                                    "flags": 4227072,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "param"
                                },
                                "comment": "<p>to set gk</p>\n"
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "boxOffice",
                        "type": "",
                        "returnType": "",
                        "line": 183
                    }
                },
                "languages": {
                    "name": "languages",
                    "setSignature": {
                        "name": "languages",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 211,
                        "rawdescription": "\n\nSets the language list. Parameterized by string of languages `'Language, Idioma'` or list of `ISpokenLanguage`.\n",
                        "description": "<p>Sets the language list. Parameterized by string of languages <code>&#39;Language, Idioma&#39;</code> or list of <code>ISpokenLanguage</code>.</p>\n",
                        "jsdoctags": [
                            {
                                "name": {
                                    "pos": 5771,
                                    "end": 5772,
                                    "flags": 4227072,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "v"
                                },
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "pos": 5765,
                                    "end": 5770,
                                    "flags": 4227072,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "param"
                                },
                                "comment": "<p>languages to list.</p>\n"
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "languages",
                        "type": "",
                        "returnType": "",
                        "line": 224
                    }
                },
                "posterPath": {
                    "name": "posterPath",
                    "setSignature": {
                        "name": "posterPath",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 231,
                        "rawdescription": "\n\nSets the online poster path.\n",
                        "description": "<p>Sets the online poster path.</p>\n",
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "posterPath",
                        "type": "",
                        "returnType": "",
                        "line": 241
                    }
                },
                "releaseDate": {
                    "name": "releaseDate",
                    "setSignature": {
                        "name": "releaseDate",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 249,
                        "rawdescription": "\n\nSets the release Date. If parameter is in tmdb format, Tmdb: `1999-10-15` convert to Omdb format `15 October 1999`.\n",
                        "description": "<p>Sets the release Date. If parameter is in tmdb format, Tmdb: <code>1999-10-15</code> convert to Omdb format <code>15 October 1999</code>.</p>\n",
                        "jsdoctags": [
                            {
                                "name": {
                                    "pos": 6783,
                                    "end": 6784,
                                    "flags": 4227072,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "v"
                                },
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "pos": 6777,
                                    "end": 6782,
                                    "flags": 4227072,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "param"
                                },
                                "comment": "<p>date to set</p>\n"
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "releaseDate",
                        "type": "",
                        "returnType": "",
                        "line": 268
                    }
                },
                "releaseYear": {
                    "name": "releaseYear",
                    "setSignature": {
                        "name": "releaseYear",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "number | string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 272,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "number | string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "releaseYear",
                        "type": "",
                        "returnType": "number | string",
                        "line": 276
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "IMdbMovieDetails"
            ]
        },
        {
            "name": "MDBTorrent",
            "id": "class-MDBTorrent-584d54738f93e2af94202069b5eddb4cab23bb2dfec2ff69f24ebaf881c252f94680b4cd6cec302796817692570a31bedafc5d74fed1cf6488a895dbf372e23d",
            "file": "src/app/models/interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export interface IMdbMovieDetails {\n  awards?: string\n  backgroundPath: string;\n  belongsToCollection?: []\n  boxOffice?: string | number // tmdb:revenue(number)\n  budget?: number\n  country?: string\n  director?: string\n  dvd?: string // dvd release\n  genres?: string[] | string | IGenre[]\n  imdbId?: string\n  imdbRating?: string\n  imdbVotes?: string\n  isAdult?: boolean;\n  isAvailable?: boolean;\n  languages?: string[]\n  libraryInfo?: ILibraryInfo\n  metascore?: string // metacritic score\\\n  originalLanguage?: string // tmdb:\"en\",omdb:\"English\"\n  originalTitle?: string\n  plot?: string // plot or overview\n  popularity?: number\n  posterPath: string\n  production?: string // company; i.e. Walt Disney Pictures\n  rated?: string // rated or certificate\n  ratings?: IRating[]\n  releaseDate?: string // omdb:\"05 May 2017\"; tmdb:\"1999-10-15\"\n  releaseYear?: number | string\n  response: string\n  runtime?: string\n  starring?: string // Actors field in omdb\n  status?: string // released/Post\n  tagline?: string;\n  tmdbId?: number\n  title: string\n  type?: string // movie/tvmovie/series\n  video?: boolean; // unknown\n  // voteAverage: number; // tmdb votes\n  // voteCount: number; // tmdb votes\n  website?: string\n  writer?: string // omdb\n  [propName: string]: any;\n}\n\nexport interface IRating {\n  Source: string\n  Value: string\n}\n\nexport interface LibraryInfo {\n  tmdbId?: null | number | string\n  imdbID?: string\n  title?: string\n  year?: number\n  directoryList?: string[]\n  _id: string\n}\n\nexport interface MovieGenre {\n  id: number\n  code: string\n  description: string\n  isChecked: boolean\n}\n\nexport interface WatchList {\n  id: number\n  movieList: string[]\n}\n\nexport interface ILibraryInfo {\n  tmdbId?: null | number | string\n  imdbID?: string\n  title?: string\n  year?: number\n  directoryList?: string[]\n  _id: string\n}\n\nexport interface ICollection {\n  id: number,\n  name: string\n}\n\nexport interface IProductionCompany {\n  id: number;\n  logo_path: null | string;\n  name: string;\n  origin_country: string;\n}\n\nexport interface IProductionCountry {\n  iso_3166_1: string;\n  name: string;\n}\n\nexport interface ISpokenLanguage {\n  iso_639_1: string;\n  name: string;\n}\n\nexport interface IOmdbMovieDetail {\n  Title: string\n  Year?: string\n  Rated?: string\n  Released?: string // \"05 May 2017\"\n  Runtime?: string\n  Genre?: string\n  Director?: string\n  Writer?: string\n  Actors?: string\n  Plot?: string\n  Language?: string\n  Country?: string\n  Awards?: string\n  Poster?: string\n  Ratings?: IRating[]\n  Metascore?: string\n  imdbRating?: string\n  imdbVotes?: string\n  imdbID: string\n  Type?: string\n  DVD?: string\n  BoxOffice?: string\n  Production?: string\n  Website?: string\n  Response: string\n}\n\nexport interface ITmdbMovieDetail {\n  adult: boolean;\n  backdrop_path: string;\n  belongs_to_collection: null;\n  budget: number;\n  genres: IGenre[];\n  homepage: string;\n  id: number;\n  imdb_id: string;\n  original_language: string;\n  original_title: string;\n  overview: string;\n  popularity: number;\n  poster_path: string;\n  production_companies: IProductionCompany[];\n  production_countries: IProductionCountry[];\n  release_date: string;\n  revenue: number;\n  runtime: number;\n  spoken_languages: ISpokenLanguage[];\n  status: string;\n  tagline: string;\n  title: string;\n  video: boolean;\n  vote_average: number;\n  vote_count: number;\n}\n\nexport interface MdbMovieDetails {\n  adult?: boolean;\n  title: string\n  releaseYear?: string\n  releaseDate?: string\n  rated?: string // rated or certificate\n  runtime?: string\n  genres?: string\n  director?: string\n  writer?: string\n  Actors?: string\n  plot?: string // plot or overview\n  Language?: string\n  Country?: string\n  Awards?: string\n  Poster?: string\n  Ratings?: IRating[]\n  Metascore?: string\n  imdbRating?: string\n  imdbVotes?: string\n  imdbID: string\n  tmdbID: number\n  Type?: string\n  DVD?: string\n  BoxOffice?: string\n  Production?: string\n  website?: string\n  response: string\n  libraryInfo?: ILibraryInfo\n}\n\n// // adult: boolean;\n// //backdrop_path: string;\n// belongs_to_collection: null;\n// // budget: number;\n// genres: Genre[];\n// // homepage: string;\n// // id: number;\n// // imdb_id: string;\n// original_language: string;\n// original_title: string;\n// // overview: string;\n// // popularity: number;\n// // poster_path: string;\n// production_companies: ProductionCompany[];\n// production_countries: ProductionCountry[];\n// // release_date: string;\n// // revenue: number;\n// // runtime: number;\n// spoken_languages: SpokenLanguage[];\n// // status: string;\n// // tagline: string;\n// // title: string;\n// // video: boolean;\n// // vote_average: number;\n// // vote_count: number;\n\nexport interface ITmdbResultObject {\n  page: number;\n  total_results: number;\n  total_pages: number;\n  results: ITmdbResult[];\n}\n\nexport interface ITmdbResult {\n  popularity: number\n  vote_count: number\n  video: boolean\n  poster_path: string\n  id: number\n  adult: boolean\n  backdrop_path: string\n  original_language: string\n  original_title: string\n  genre_ids: number[]\n  title: string\n  vote_average: number\n  overview: string\n  release_date: string\n  isAvailable?: boolean\n  isHighlighted?: boolean\n}\n\nexport interface ILibraryMovie {\n  tmdbId?: number,\n  title: string,\n  year: number,\n  imdbId?: string,\n  directory: string[]\n}\n\nexport interface IGenre {\n  id: number\n  name: string\n}\n\nexport interface Credits {\n  id: number;\n  cast: CastElement[];\n  crew: Crew[];\n}\n\ninterface CastElement {\n  cast_id: number;\n  character: string;\n  credit_id: string;\n  gender: number;\n  id: number;\n  name: string;\n  order: number;\n  profile_path: null | string;\n}\n\ninterface Crew {\n  credit_id: string;\n  department: Department;\n  gender: number;\n  id: number;\n  job: string;\n  name: string;\n  profile_path: null | string;\n}\n\nexport enum Department {\n  Art = 'Art',\n  Camera = 'Camera',\n  CostumeMakeUp = 'Costume & Make-Up',\n  Crew = 'Crew',\n  Directing = 'Directing',\n  Editing = 'Editing',\n  Lighting = 'Lighting',\n  Production = 'Production',\n  Sound = 'Sound',\n  VisualEffects = 'Visual Effects',\n  Writing = 'Writing',\n}\n\nexport class MDBTorrent {\n  id?: string\n  name?: string\n  size?: string\n  hash: string\n  url?: string\n  quality?: string\n  type?: string\n  seeds?: number\n  peers?: number\n  sizeBytes?: number\n  added?: string\n  dateUploaded?: string\n  dateUploadedUnix?: number\n  isYts?: boolean\n  magnetLink?: string\n}\n\nexport class ITPBTorrent {\n  id?: number\n  name?: string\n  hash: string\n  sizeBytes?: number\n  added?: string\n}\n\nexport interface ISearch {\n  page: number\n}\n\nexport enum OmdbParameters {\n  ApiKey = 'apikey',\n  ImdbId = 'i',\n  Title = 't',\n  Type = 'type',\n  Year = 'y',\n  Plot = 'plot',\n  Return = 'r',\n  Callback = 'callback',\n  Version = 'v',\n}\n\nexport enum TmdbParameters {\n  ApiKey = 'api_key',\n  AppendToResponse = 'append_to_response',\n  Language = 'language',\n  Region = 'region',\n  SortBy = 'sort_by',\n  CertificationCountry = 'certification_country',\n  Certification = 'certification',\n  CertificationLess = 'certification.lte',\n  CertificationGreater = 'certification.gte',\n  IncludeAdult = 'include_adult',\n  IncludeVideo = 'include_video',\n  Page = 'page',\n  PrimaryReleaseYear = 'primary_release_year',\n  PrimaryReleaseDateGreater = 'primary_release_date.gte',\n  PrimaryReleaseDateLess = 'primary_release_date.lte',\n  ReleaseDateGreater = 'release_date.gte',\n  ReleaseDateLess = 'release_date.lte',\n  WithReleaseType = 'with_release_type',\n  Year = 'year',\n  VoteCountGreater = 'vote_count.gte',\n  VoteCountLess = 'vote_count.lte',\n  VoteAverageGreater = 'vote_average.gte',\n  VoteAverageLess = 'vote_average.lte',\n  WithCast = 'with_cast',\n  WithCrew = 'with_crew',\n  WithPeople = 'with_people',\n  WithCompanies = 'with_companies',\n  WithGenres = 'with_genres',\n  WithoutGenres = 'without_genres',\n  WithKeywords = 'with_keywords',\n  WithoutKeywords = 'without_keywords',\n  WithRuntimeGreater = 'with_runtime.gte',\n  WithRuntimeLess = 'with_runtime.lte',\n  WithOriginalLanguage = 'with_original_language',\n  WithWatchProviders = 'with_watch_providers',\n  WatchRegion = 'watch_region'\n}\n\nexport enum TmdbSearchMovieParameters {\n  ApiKey = 'api_key',\n  Language = 'language', // Pass a ISO 639 - 1 value to display translated data for the fields that support it. minLength: 2 pattern: ([a - z]{ 2 }) -([A - Z]{ 2 }) default: en - US\n  Query = 'query',\n  Page = 'page', // minimum: 1 maximum: 1000\n  IncludeAdult = 'include_adult',\n  Region = 'region',\n  // Specify a ISO 3166 - 1 code to filter release dates.Must be uppercase. pattern: ^ [A - Z]{ 2 } $\n  Year = 'year',\n  PrimaryReleaseYear = 'primary_release_year'\n}\n\nenum TmdbAppendToResponseParameters {\n  AccountStates = 'account_states',\n  Videos = 'videos',\n  Images = 'images',\n  Credits = 'credits',\n  Changes = 'changes',\n  Translations = 'translations',\n  Similar = 'similar',\n  ExternalIds = 'external_ids',\n  AlternativeTitles = 'alternative_titles',\n  Keywords = 'keywords',\n  Reviews = 'reviews',\n  Recommendations = 'recommendations',\n  ReleaseDates = 'release_dates',\n  Lists = 'lists'\n}\n\nenum TmdbReleaseTypes {\n  PREMIERE = 'Premiere',  // 1\n  THEATRICAL_LIMITED = 'Theatrical(limited)', // 2\n  THEATRICAL = 'Theatrical', // 3\n  DIGITAL = 'Digital', // 4\n  PHYSICAL = 'Physical', // 5\n  TV = 'TV', // 6\n}\n\nexport interface IPersonDetails {\n  birthday: string;\n  known_for_department: string;\n  id: number;\n  movie_credits?: IPersonCredits;\n  tv_credits?: IPersonCredits;\n  combined_credits?: IPersonCredits;\n  homepage?: any;\n  profile_path: string;\n  imdb_id: string;\n  deathday?: any;\n  images?: IImages;\n  external_ids?: IExternalids;\n  name: string;\n  also_known_as: string[];\n  biography: string;\n  adult: boolean;\n  gender: number;\n  place_of_birth: string;\n  popularity: number;\n}\n\nexport interface IPersonCredits {\n  cast: IPersonCastCrew[];\n  crew: IPersonCastCrew[];\n  id?: number;\n}\n\nexport interface IPersonCastCrew {\n  id?: number;\n  original_language: string;\n  episode_count?: number;\n  overview: string;\n  origin_country?: string[];\n  original_name?: string;\n  genre_ids: number[];\n  name?: string;\n  media_type: string;\n  poster_path: null | string;\n  first_air_date?: string;\n  vote_average: number;\n  vote_count: number;\n  character?: string;\n  backdrop_path: null | string;\n  popularity: number;\n  credit_id: string;\n  original_title?: string;\n  video?: boolean;\n  release_date?: string;\n  title?: string;\n  adult?: boolean;\n  department?: string;\n  job?: string;\n}\n\nexport interface IExternalids {\n  id?: number;\n  freebase_id: string;\n  instagram_id: string;\n  tvrage_id: number;\n  twitter_id: string;\n  freebase_mid: string;\n  imdb_id: string;\n  facebook_id: string;\n}\n\nexport interface IImages {\n  id?: number;\n  profiles: IProfile[];\n}\n\nexport interface IProfile {\n  iso_639_1?: any;\n  aspect_ratio: number;\n  vote_count: number;\n  height: number;\n  vote_average: number;\n  file_path: string;\n  width: number;\n}\n\nexport interface ICredits {\n  cast: ICast[];\n  crew: ICrew[];\n}\n\ninterface ICast {\n  poster_path?: string;\n  adult: boolean;\n  backdrop_path?: string;\n  vote_count: number;\n  video: boolean;\n  id: number;\n  media_type?: string;\n  popularity: number;\n  genre_ids: number[];\n  original_language: string;\n  title: string;\n  original_title: string;\n  release_date: string;\n  character: string;\n  vote_average: number;\n  overview: string;\n  credit_id: string;\n}\n\ninterface ICrew {\n  id: number;\n  department: string;\n  original_language: string;\n  original_title: string;\n  job: string;\n  overview: string;\n  genre_ids: number[];\n  video: boolean;\n  episode_count: number\n  media_type?: string;\n  credit_id: string;\n  poster_path?: string;\n  popularity: number;\n  backdrop_path?: string;\n  vote_count: number;\n  title: string;\n  adult: boolean;\n  vote_average: number;\n  release_date: string;\n}\n\nexport interface IUserSavedData {\n  id?: string,\n  title: string,\n  year: number,\n  tmdbId: number,\n}\n\nexport enum GenreCodes {\n  Action = 28,\n  Adventure = 12,\n  Animation = 16,\n  Comedy = 35,\n  Crime = 80,\n  Documentary = 99,\n  Drama = 18,\n  Family = 10751,\n  Fantasy = 14,\n  History = 36,\n  Horror = 27,\n  Music = 10402,\n  Mystery = 9648,\n  Romance = 10749,\n  ScienceFiction = 878,\n  TVMovie = 10770,\n  Thriller = 53,\n  War = 10752,\n  Western = 37,\n  // mdb reserved\n  FilmNoir = 20000,\n  // similar genre: Music id:10402\n  Musical = 20001,\n  News = 20002,\n  RealityTV = 20003,\n  // similar genre: Science Fiction id:878\n  SciFi = 20004,\n  // another media type\n  Short = 20005,\n  Sport = 20006,\n}\n\n\n\n/**\nexport enum Department {\n    Art = \"Art\",\n    Camera = \"Camera\",\n    CostumeMakeUp = \"Costume & Make-Up\",\n    Crew = \"Crew\",\n    Directing = \"Directing\",\n    Editing = \"Editing\",\n    Lighting = \"Lighting\",\n    Production = \"Production\",\n    Sound = \"Sound\",\n    VisualEffects = \"Visual Effects\",\n    Writing = \"Writing\",\n}\n\nexport interface ExternalIDS {\n    imdb_id:      string;\n    facebook_id:  null;\n    instagram_id: null;\n    twitter_id:   null;\n}\n\nexport interface Genre {\n    id:   number;\n    name: string;\n}\n\nexport interface Images {\n    backdrops: any[];\n    posters:   any[];\n}\n\nexport enum OriginalLanguage {\n    En = \"en\",\n    Es = \"es\",\n    Fr = \"fr\",\n}\n\nexport interface ProductionCompany {\n    id:             number;\n    logo_path:      string;\n    name:           string;\n    origin_country: string;\n}\n\nexport interface ProductionCountry {\n    iso_3166_1: string;\n    name:       string;\n}\n\nexport interface Recommendations {\n    page:          number;\n    results:       RecommendationsResult[];\n    total_pages:   number;\n    total_results: number;\n}\n\nexport interface RecommendationsResult {\n    id:                number;\n    video:             boolean;\n    vote_count:        number;\n    vote_average:      number;\n    title:             string;\n    release_date:      string;\n    original_language: OriginalLanguage;\n    original_title:    string;\n    genre_ids:         number[];\n    backdrop_path:     string;\n    adult:             boolean;\n    overview:          string;\n    poster_path:       string;\n    popularity:        number;\n}\n\nexport interface SpokenLanguage {\n    iso_639_1: OriginalLanguage;\n    name:      string;\n}\n\nexport interface Videos {\n    results: VideosResult[];\n}\n\nexport interface VideosResult {\n    id:         string;\n    iso_639_1:  OriginalLanguage;\n    iso_3166_1: string;\n    key:        string;\n    name:       string;\n    site:       string;\n    size:       number;\n    type:       string;\n}\n */\n\n",
            "properties": [
                {
                    "name": "added",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 307
                },
                {
                    "name": "dateUploaded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 308
                },
                {
                    "name": "dateUploadedUnix",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 309
                },
                {
                    "name": "hash",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 300
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 297
                },
                {
                    "name": "isYts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 310
                },
                {
                    "name": "magnetLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 311
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 298
                },
                {
                    "name": "peers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 305
                },
                {
                    "name": "quality",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 302
                },
                {
                    "name": "seeds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 304
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 299
                },
                {
                    "name": "sizeBytes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 306
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 303
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 301
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Meta",
            "id": "class-Meta-960e320edff913cb6b2adda6237f508f7a8cbe057cb8b134be3d6e920d63ced596dde0f37af6f23d8d4b071199e4c33fa1937fd91e76698c07d258a60f1c2108",
            "file": "src/app/models/yts-torrent.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class IYTSSingleQuery {\n  status: string;\n  status_message: string;\n  data: Data;\n  \"@meta\": Meta;\n}\n\nclass Meta {\n  server_time: number;\n  server_timezone: string;\n  api_version: number;\n  execution_time: string;\n}\n\nclass Data {\n  movie_count: number;\n  limit: number;\n  page_number: number;\n  movies: Movie[];\n}\n\nclass Movie {\n  id: number;\n  url: string;\n  imdb_code: string;\n  title: string;\n  title_english: string;\n  title_long: string;\n  slug: string;\n  year: number;\n  rating: number;\n  runtime: number;\n  genres: string[];\n  summary: string;\n  description_full: string;\n  synopsis: string;\n  yt_trailer_code: string;\n  language: string;\n  mpa_rating: string;\n  background_image: string;\n  background_image_original: string;\n  small_cover_image: string;\n  medium_cover_image: string;\n  large_cover_image: string;\n  state: string;\n  torrents: YTSTorrent[];\n  date_uploaded: string;\n  date_uploaded_unix: number;\n}\n\nexport class YTSTorrent {\n  url: string;\n  hash: string;\n  quality: string;\n  type: string;\n  seeds: number;\n  peers: number;\n  size: string;\n  size_bytes: number;\n  date_uploaded: string;\n  date_uploaded_unix: number;\n}\n",
            "properties": [
                {
                    "name": "api_version",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "execution_time",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "server_time",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "server_timezone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Movie",
            "id": "class-Movie-960e320edff913cb6b2adda6237f508f7a8cbe057cb8b134be3d6e920d63ced596dde0f37af6f23d8d4b071199e4c33fa1937fd91e76698c07d258a60f1c2108",
            "file": "src/app/models/yts-torrent.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class IYTSSingleQuery {\n  status: string;\n  status_message: string;\n  data: Data;\n  \"@meta\": Meta;\n}\n\nclass Meta {\n  server_time: number;\n  server_timezone: string;\n  api_version: number;\n  execution_time: string;\n}\n\nclass Data {\n  movie_count: number;\n  limit: number;\n  page_number: number;\n  movies: Movie[];\n}\n\nclass Movie {\n  id: number;\n  url: string;\n  imdb_code: string;\n  title: string;\n  title_english: string;\n  title_long: string;\n  slug: string;\n  year: number;\n  rating: number;\n  runtime: number;\n  genres: string[];\n  summary: string;\n  description_full: string;\n  synopsis: string;\n  yt_trailer_code: string;\n  language: string;\n  mpa_rating: string;\n  background_image: string;\n  background_image_original: string;\n  small_cover_image: string;\n  medium_cover_image: string;\n  large_cover_image: string;\n  state: string;\n  torrents: YTSTorrent[];\n  date_uploaded: string;\n  date_uploaded_unix: number;\n}\n\nexport class YTSTorrent {\n  url: string;\n  hash: string;\n  quality: string;\n  type: string;\n  seeds: number;\n  peers: number;\n  size: string;\n  size_bytes: number;\n  date_uploaded: string;\n  date_uploaded_unix: number;\n}\n",
            "properties": [
                {
                    "name": "background_image",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "background_image_original",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "date_uploaded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "date_uploaded_unix",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "description_full",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "genres",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "imdb_code",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "language",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "large_cover_image",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "medium_cover_image",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "mpa_rating",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "rating",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "runtime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "slug",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "small_cover_image",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "summary",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "synopsis",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "title_english",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "title_long",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "torrents",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "YTSTorrent[]",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "year",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "yt_trailer_code",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 38
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Navigation",
            "id": "class-Navigation-5394148cf0988c3aaed39fcb2e8a4b0d3d3351ad3eb6443bc0ea7b9d653e0f3c9eb899b006f7f86e1309a6d322118203bbfec258ca235e1ff2b19dcd0261dd89",
            "file": "src/app/services/navigation.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NavigationService {\n  // currentPage: string\n  // private root\n  // private previousPages: string[]\n  // private nextPages: string[]\n\n  constructor() { }\n  // constructor(root, location) {\n  //   // console.log(typeof root);\n  //   // console.log(typeof location);\n  // }\n\n  // goToPage(val: string) {\n  //   this.previousPages.push(this.currentPage)\n  //   this.currentPage = val\n  //   this.nextPages = []\n  // }\n\n  // nextPage() {\n  //   this.previousPages.push(this.currentPage)\n  //   // this.currentPage\n  // }\n  // previousPage() { }\n  // getPreviousPagesLength() { return this.previousPages.length }\n  // getNextPagesLength() { return this.nextPages.length }\n}\n\n\n// no use yet.\n\nexport interface INavigation {\n  currentPage: string,\n  // previousPages: string[],\n  // nextPages: string[]\n}\n\nexport class Navigation implements INavigation {\n  currentPage: string\n  private previousPages: string[]\n  private nextPages: string[]\n\n  constructor(root, location) {\n\n  }\n\n  goToPage(val: string) {\n    this.previousPages.push(this.currentPage)\n    this.currentPage = val\n    this.nextPages = []\n  }\n  nextPage() {\n    this.previousPages.push(this.currentPage)\n    // this.currentPage\n  }\n  previousPage() { }\n  getPreviousPagesLength() { return this.previousPages.length }\n  getNextPagesLength() { return this.nextPages.length }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "root",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "location",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 45,
                "jsdoctags": [
                    {
                        "name": "root",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "location",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "currentPage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "nextPages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "previousPages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getNextPagesLength",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getPreviousPagesLength",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "goToPage",
                    "args": [
                        {
                            "name": "val",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "nextPage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "previousPage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "INavigation"
            ]
        },
        {
            "name": "ObjectUtil",
            "id": "class-ObjectUtil-007b5b00ccc61f769100796d4f2ebc971945417e8ea934bb3c232a3972408448b93fde27e198eccb78cbd7d2cd75eee1ebee939c24e9bbdca908bcd0bec68242",
            "file": "src/app/utils/object.utils.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { QueryDocumentSnapshot } from \"@angular/fire/firestore/interfaces\";\n\nexport default class ObjectUtil {\n  static isListFromFirebase(objList: any): boolean {\n    if (Array.isArray(objList) && (objList.length > 0)) {\n      const obj2: Array<QueryDocumentSnapshot<any>>[] = objList\n\n      for (const subObjList of objList) {\n        for (const subObj of subObjList) {\n          if (typeof subObj.data === \"function\") {\n            return true\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  static isListFromIpc(list: any[]): boolean {\n    return false;\n    // IUserMovieData\n  }\n\n\n  static isEmpty(obj) {\n    if (obj === null || obj === undefined) {\n      return true;\n    }\n\n    if (Array.isArray(obj)) {\n      return obj.length === 0;\n    }\n\n    switch (typeof (obj)) {\n      case 'object':\n        return Object.keys(obj).length === 0;\n      case 'string':\n        return obj.length === 0;\n      case 'number':\n        return obj === 0;\n      case 'boolean':\n      case 'function':\n      case 'symbol':\n      default:\n        return false;\n    }\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "isEmpty",
                    "args": [
                        {
                            "name": "obj",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isListFromFirebase",
                    "args": [
                        {
                            "name": "objList",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "objList",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isListFromIpc",
                    "args": [
                        {
                            "name": "list",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "list",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PlayLink",
            "id": "class-PlayLink-5ec5b7826d8316dc113ac090ae0b81ad59089a8f4378cdfd9c1d305fa1eddcd30bdf017d981fbff11d44ff2740ec7b5cb8ccf347800ca999a326dfb89a7ec8d7",
            "file": "src/app/modules/movie/details/details.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { GenreCodes } from '@models/interfaces';\nimport { IRawLibrary, LibraryService } from '@services/library.service';\nimport {\n  Component, OnInit,\n  OnDestroy,\n} from '@angular/core';\nimport { MDBTorrent } from '@models/interfaces';\nimport { TEST_TMDB_MOVIE_DETAILS } from '../../../mock-data';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { DataService } from '@services/data.service';\nimport { MovieService } from '@services/movie/movie.service';\nimport { TorrentService } from '@services/torrent/torrent.service';\nimport { IpcService } from '@services/ipc.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { TROUBLE_QUOTES } from '@shared/constants';\nimport { UserDataService } from '@services/user-data/user-data.service';\nimport { WatchedService, IWatched } from '@services/watched.service';\nimport { takeUntil } from 'rxjs/operators'\nimport { Subject } from 'rxjs';\nimport { basename } from 'path'\nimport { FavoriteService } from '@services/favorite.service';\nimport { IProfileData } from '@models/profile-data.model';\nimport { MdbApiService } from '@services/mdb-api.service';\nimport { MDBMovie } from '@models/mdb-movie.model';\nimport GeneralUtil from '@utils/general.util'\nimport { environment } from 'environments/environment';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ImagePreviewComponent } from '@shared/components/image-preview/image-preview.component';\n@Component({\n  selector: 'app-details',\n  templateUrl: './details.component.html',\n  styleUrls: ['./details.component.scss'],\n})\n\n/**\n * Get movie info, torrent, links, get if available in local\n */\nexport class DetailsComponent implements OnInit, OnDestroy {\n\n  movieBackdrop;\n  torrents: MDBTorrent[] = [];\n  testSelectedMovie = TEST_TMDB_MOVIE_DETAILS\n  testMovieBackdrop = './assets/test-assets/wall-e_backdrop.jpg'\n  isAvailable = false\n  hasData = false\n  streamLink = ''\n  troubleQuote\n  movieDetailsDirectors\n  movieDetailsWriters\n  movieDetailsProducers\n  movieDetailsCast\n  movieCertification\n  movieDetails = new MDBMovie()\n  userLocation = 'US'\n  procBookmark = false\n  procWatched = false\n  procFavorite = false\n  procVideo = false\n  procPlayLink = false\n  showVideo = false\n  isBookmarked = false\n  isWatched = false\n  isFavorite = false\n  movieTrailer: string\n  hasContinueWatching: boolean\n  playLinks = []\n  bestPlayLink: PlayLink;\n  certification: 'PG'\n  userData: IProfileData = new IProfileData()\n  private ngUnsubscribe = new Subject();\n\n  constructor(\n    private sanitizer: DomSanitizer,\n    private activatedRoute: ActivatedRoute,\n    private dataService: DataService,\n    private movieService: MovieService,\n    private ipcService: IpcService,\n    private torrentService: TorrentService,\n    private userDataService: UserDataService,\n    private libraryService: LibraryService,\n    private watchedService: WatchedService,\n    private favoriteService: FavoriteService,\n    private router: Router,\n    private mdbApiService: MdbApiService,\n    public dialog: MatDialog\n  ) { }\n\n  ngOnInit() {\n    this.activatedRoute.params.subscribe(val => {\n      this.showVideo = false\n      this.getMovieOnline(val['id'])\n    })\n\n  }\n\n  ngOnDestroy(): void {\n    GeneralUtil.DEBUG.log('DETAILS DESTROY')\n    this.ngUnsubscribe.next()\n    this.ngUnsubscribe.complete()\n  }\n\n  /**\n   * Loads minor video data.\n   */\n  loadVideoData() {\n    this.movieDetailsDirectors = this.getDirectors()\n    this.movieDetailsWriters = this.getWriters()\n    this.movieDetailsProducers = this.getProducers()\n    this.movieDetailsCast = this.getCast()\n    // this.movieCertification = this.getMovieCertification()\n    this.getUserMovieData()\n    this.getLibrary()\n    this.displayBackdrop()\n    this.getTrailer()\n\n  }\n\n  getTrailer() {\n    this.movieTrailer = this.movieDetails.videos.results.find((e) => e.type.toLowerCase() === 'trailer')\n  }\n\n  playBestPlayLink() {\n    if (environment.runConfig.useTestData) {\n      this.showVideo = true\n      this.streamLink = 'https://s3.eu-central-1.amazonaws.com/pipe.public.content/short.mp4'\n      GeneralUtil.DEBUG.log('playingbestplaylink')\n    } else {\n      if (this.bestPlayLink.hash) { // is torrent\n        this.playTorrent(this.bestPlayLink.hash)\n      } else {\n        this.playOfflineLibrary(this.bestPlayLink.id);\n      }\n      GeneralUtil.DEBUG.log('playingbestplaylink')\n    }\n  }\n\n  /**\n   * Plays the best possible stream. Offline copy is prioritized first.\n   * @param val hash or id\n   */\n  playMovie(val: PlayLink) {\n    if (val.type === \"torrent\") { // is torrent\n      this.playTorrent(val.hash);\n    } else {\n      this.playOfflineLibrary(val.id);\n    }\n  }\n\n  playOfflineLibrary(val) {\n    this.libraryService.openVideoStream(val).then(e => {\n      GeneralUtil.DEBUG.log('streamlink1:', e)\n      if (e != 0 && e != [] && e != '' && e.length > 0) {\n        this.showVideo = true\n        this.streamLink = e\n      }\n    })\n  }\n\n  /**\n   * Gets the user's watched, bookmark, library data of the movie\n   */\n  getUserMovieData() {\n    this.procVideo, this.procBookmark, this.procWatched = true\n\n    this.mdbApiService.getProfileDataByTmdbId(this.movieDetails.tmdbId).subscribe(userMovieData => {\n      GeneralUtil.DEBUG.log('usermoviedata', userMovieData)\n      if (userMovieData.bookmark) {\n        this.userData.bookmark = userMovieData.bookmark\n        this.isBookmarked = true\n      }\n      if (userMovieData.watched) {\n        this.userData.watched = userMovieData.watched\n        this.isWatched = true\n      }\n      if (userMovieData.favorite) {\n        this.userData.favorite = userMovieData.favorite\n        this.isFavorite = true\n      }\n      if (userMovieData.listLinkMovie) {\n        this.isFavorite = true\n      }\n      if (userMovieData.review) {\n        // this.movieDetails.review = userMovieData.review\n\n        // this.isFavorite = true\n      }\n    })\n  }\n\n  /**\n   * Toggles movie from user's watchlist or bookmarks\n   */\n  async toggleBookmark() {\n\n    this.procBookmark = true\n    let bmDoc\n    bmDoc = await this.userDataService.toggleBookmark(this.movieDetails)\n    this.isBookmarked = !this.isBookmarked\n    GeneralUtil.DEBUG.log('BOOKMARKADD/remove:', bmDoc)\n    this.procBookmark = false\n  }\n\n  async toggleWatched() {\n    this.procWatched = true\n    let wDoc\n\n    wDoc = await this.watchedService.toggleWatched(this.movieDetails)\n    this.isWatched = !this.isWatched\n    GeneralUtil.DEBUG.log('WATCHEDADD/remove:', wDoc)\n    this.procWatched = false\n  }\n\n  async toggleFavorite() {\n    this.procFavorite = true\n    let fDoc\n    fDoc = await this.favoriteService.toggleFavorite(this.movieDetails)\n    this.userData.favorite = fDoc\n    // this.isWatched = !this.isWatched\n    GeneralUtil.DEBUG.log('WATCHEDADD/remove:', fDoc)\n    this.procFavorite = false\n  }\n\n  /**\n   * Gets movie offline\n   * @param val imdb id\n   */\n  getMovieDataOffline(val: any) {\n    // this.ipcService.call(this.ipcService.IPCCommand.MovieMetadata, [this.ipcService.IPCCommand.Get, val])\n  }\n\n  saveMovieDataOffline(val: any) {\n    // this.ipcService.call(this.ipcService.IPCCommand.MovieMetadata, [this.ipcService.IPCCommand.Set, val])\n  }\n\n  /**\n   * Gets movie details, torrents\n   * @param val tmdb id\n   */\n  getMovieOnline(val: number) {\n    // tt2015381 is Guardians of the galaxy 2014; for testing only\n    GeneralUtil.DEBUG.log('getMovie initializing with value...', val);\n\n    this.movieService.getMovieDetails(val, 'videos,images,credits,similar,external_ids,recommendations').subscribe(data => {\n      this.movieDetails = data;\n      this.loadVideoData()\n      this.hasData = true\n      // COMMENTED UNTIL 'error spawn ENAMETOOLONG' is fixed.\n      // this.saveMovieDataOffline(this.movieDetails)\n    });\n  }\n\n  /**\n   * Gets the movie's certification based on user' location.\n   */\n  getMovieCertification() {\n    const myLoc = this.movieDetails.releaseDates.results.find((e) => e.iso_3166_1 === this.userLocation)\n    const toReturn = myLoc.release_dates[0].certification\n    // let toReturn = myLoc.release_dates.find((e) => { return e.type === 3 })\n    // toReturn = toReturn.certification\n    return toReturn\n  }\n\n  /**\n   * Gets the movie poster\n   */\n  getMoviePoster() {\n    // implement offline movie poster\n  }\n\n  /**\n   * !UNUSED\n   * Gets backdrop or background image\n   * @param val IMDb id\n   */\n  getBackdrop(val) {\n    this.movieService.getMovieBackdrop(val.trim()).subscribe(data => {\n      const numberOfBackgrounds = data.moviebackground.length;\n      if (numberOfBackgrounds) {\n        const imageIndex = Math.round(\n          Math.random() * (numberOfBackgrounds - 0) + 0\n        );\n        this.movieBackdrop = data.moviebackground[imageIndex].url;\n      } else {\n        // this.movieBackdrop = this.selectedMovie.Poster;\n      }\n    });\n  }\n\n  /**\n   * Displays backdrop or background image\n   */\n  displayBackdrop() {\n\n    const data = this.movieDetails.images['backdrops']\n    const numberOfBackgrounds = data.length\n    if (numberOfBackgrounds) {\n      const imageIndex = Math.round(\n        Math.random() * (numberOfBackgrounds - 1)\n      );\n      this.movieBackdrop = data[imageIndex].file_path;\n    }\n  }\n\n  /**\n   * TODO: add group async\n   * Gets movie availability. From user library, torrent, etc.\n   * @param val name\n   */\n  getLibrary() {\n    this.procPlayLink = true;\n    this.libraryService.getMovieFromLibrary(this.movieDetails.tmdbId).then((libraryList: IRawLibrary[]) => {\n      GeneralUtil.DEBUG.log(\"libraryList\", libraryList)\n      if (libraryList.length > 0) {\n        this.bestPlayLink = this.mapPlayLink(libraryList[0])\n        this.playLinks = [...this.playLinks, ...this.mapPlayLinkList(libraryList)]\n      }\n    })\n\n    let query\n    query = this.movieDetails.externalIds.imdb_id\n    this.torrentService.getTorrents(query).subscribe(data => {\n      if (data) {\n        this.torrents = this.torrentService.mapTorrentsList(data);\n        this.torrents.sort(function (a, b) { return b.peers - a.peers }); // sort by seeders\n        this.playLinks = [...this.playLinks, ...this.mapPlayLinkList(this.torrents)];\n\n        if (!this.bestPlayLink && this.torrents.length > 0) this.bestPlayLink = this.mapPlayLink(this.torrents[0]); // TODO: add sorting by preferred quality\n      }\n      this.procPlayLink = false;\n    });\n  }\n\n  continueWatching() {\n\n  }\n\n  /**\n   * Plays selected torrent.\n   * @param hash torrent hash\n   */\n  playTorrent(hash: string) {\n    this.ipcService.getPlayTorrent(hash).then(e=>{\n      this.showVideo = true\n      this.streamLink = e\n    })\n    // this.ipcService.streamLink.subscribe(e => {\n    //   GeneralUtil.DEBUG.log('streamlink1:', e)\n    //   if (e != 0 && e != [] && e != '' && e.length > 0) {\n    //     GeneralUtil.DEBUG.log('streamlink2:', e)\n    //     this.showVideo = true\n    //     this.streamLink = e\n    //   }\n    // })\n  }\n\n  /**\n   * Opens link externally\n   * @param linkType link type\n   * @param idParam id\n   */\ngoToLink(linkType: string, idParam?: string) {\n    let url = ''\n    GeneralUtil.DEBUG.log('1:', linkType, ' 2:', idParam);\n    switch (linkType) {\n      case 'google':\n        let releaseYear = this.getYear(this.movieDetails.releaseDate)\n        url = `https://www.google.com/search?q=${this.movieDetails.title} ${releaseYear}`\n        break;\n      case 'imdb':\n        url = `https://www.imdb.com/title/${this.movieDetails.imdbId}/`\n        break;\n      case 'tmdb':\n        url = `https://www.themoviedb.org/movie/${this.movieDetails.tmdbId}`\n        break;\n      case 'facebook':\n        url = `https://www.facebook.com/${this.movieDetails.externalIds.facebook_id}`\n        break;\n      case 'twitter':\n        url = `https://twitter.com/${this.movieDetails.externalIds.twitter_id}`\n        break;\n      case 'instagram':\n        url = `https://instagram.com/${this.movieDetails.externalIds.instagram_id}`\n        break;\n      case 'website':\n        url = `${this.movieDetails.website}`\n        break;\n      default:\n        break;\n    }\n\n    if (environment.runConfig.electron) {\n      // this.ipcService.call(this.ipcService.IPCCommand.OpenLinkExternal, url)\n    } else {\n      window.open(url)\n    }\n  }\n\n  /**\n   * Discovers movies based from criteria.\n   * @param type type of discovery. (year, certification, genre)\n   * @param id value to discover\n   */\n  goToDiscover(type: string, id: string, name?: string) {\n\n    this.dataService.updateDiscoverQuery({ type: type, value: id, name: name })\n    this.router.navigate([`/discover`], { queryParams: { type: type, id: id, name: name } });\n  }\n\n  goToMovie(val: string) {\n    // // this.navigationService.goToPage()\n    // this.router.navigate([`/details/${highlightedId}`], { relativeTo: this.activatedRoute });\n\n    const highlightedId = val\n    this.dataService.updateHighlightedMovie(highlightedId);\n    // this.router.navigate([`./details/${highlightedId}`]);\n    this.router.navigate([`/details/${highlightedId}`], { relativeTo: this.activatedRoute });\n  }\n\n  goToPerson(castId) {\n    this.router.navigate([`/person-details/${castId}`], { relativeTo: this.activatedRoute });\n    // this.router.navigate([`/person-details/${castId}`], { relativeTo: this.activatedRoute });\n  }\n\n  goToFullCredits() {\n    const val = this.movieDetails.tmdbId\n    this.router.navigate([`/credits/${val}`], { relativeTo: this.activatedRoute });\n  }\n\n  /**\n   * Get year from date.\n   */\n  getYear(val: string) {\n    return GeneralUtil.getYear(val)\n  }\n\n  getDirectors() {\n    const toReturn = []\n    this.movieDetails.credits.crew.forEach(crew => {\n      if (crew.job === 'Director') { toReturn.push(crew) }\n    });\n    return toReturn\n  }\n\n  getWriters() {\n    const toReturn = []\n    this.movieDetails.credits.crew.forEach(crew => {\n      if (crew.job === 'Writer' || crew.job === 'Screenplay') { toReturn.push(crew) }\n    });\n    return toReturn\n  }\n\n  getProducers() {\n    const toReturn = []\n    this.movieDetails.credits.crew.forEach(crew => {\n      if (crew.job.toLowerCase().includes('producer')) { toReturn.push(crew) }\n    });\n    return toReturn\n  }\n\n  getCast() {\n    const toReturn = []\n    this.movieDetails.credits.cast.forEach(crew => {\n      toReturn.push(crew)\n    });\n    return toReturn\n  }\n\n  playPreview() {\n    this.dataService.updatePreviewMovie(this.movieDetails)\n  }\n\n  getTroubleQuote() {\n    const length = TROUBLE_QUOTES.length\n    this.troubleQuote = TROUBLE_QUOTES[Math.floor(Math.random() * (-1 - length + 1)) + length]\n  }\n\n  /**\n   * Converts genre code into its genre name equivalent.\n   * @param genreCode genre code origin\n   * @returns genre name\n   */\n  getGenre(genreCode: number) {\n    return GenreCodes[genreCode]\n  }\n\n  sanitize(torrent: MDBTorrent) {\n    return this.torrentService.sanitize(torrent);\n  }\n\n  previewImage() {\n    this.dialog.open(ImagePreviewComponent, { data: { imagePath: this.movieDetails.posterPath } });\n  }\n  /**\n   * Copies link to clipboard\n   * @param magnetLink link top copy\n   */\n  copyToClipboard(magnetLink: string) {\n    const selBox = document.createElement('textarea');\n    selBox.style.position = 'fixed';\n    selBox.style.left = '0';\n    selBox.style.top = '0';\n    selBox.style.opacity = '0';\n    selBox.value = magnetLink;\n    document.body.appendChild(selBox);\n    selBox.focus();\n    selBox.select();\n    document.execCommand('copy');\n    document.body.removeChild(selBox);\n  }\n\n  /**\n   * @param rawLibraryList torrent list or library list\n   */\n  mapPlayLinkList(rawLibraryList: any[]): PlayLink[] {\n    let playLinkList: PlayLink[] = [];\n    rawLibraryList.forEach(rawLibrary => {\n      playLinkList.push(this.mapPlayLink(rawLibrary));\n    })\n    return playLinkList;\n  }\n\n  mapPlayLink(arg: IRawLibrary | MDBTorrent): PlayLink {\n    let playLink = new PlayLink()\n    playLink.id = arg.hasOwnProperty('_id') ? arg['_id'] : null\n    playLink.hash = arg.hasOwnProperty('hash') ? arg['hash'] : null\n    playLink.name = arg.hasOwnProperty('name') ? arg['name'] : basename(arg['fullFilePath'])\n    playLink.quality = arg.hasOwnProperty('quality') ? arg['quality'] : ''\n    playLink.type = arg.hasOwnProperty('hash') ? 'torrent' : 'offline'\n    return playLink\n  }\n}\n\nclass PlayLink {\n\n  id?: string\n  name?: string\n  type: \"torrent\" | \"offline\"\n  [x: string]: any\n  // size?: string\n  hash?: string\n  // url?: string\n  // quality?: string\n  // type?: string\n  // seeds?: number\n  // peers?: number\n  // sizeBytes?: number\n  // added?: string\n  // dateUploaded?: string\n  // dateUploadedUnix?: number\n  // isYts?: boolean\n  // magnetLink?: string,\n  // type: 'offline' | 'torrent'\n  // fullFilePath: string,\n  // title: string,\n  // year: number,\n  // tmdbId: number,\n}\n",
            "properties": [
                {
                    "name": "hash",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 540
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 535
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 536
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"torrent\" | \"offline\"",
                    "optional": false,
                    "description": "",
                    "line": 537
                }
            ],
            "methods": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-5ec5b7826d8316dc113ac090ae0b81ad59089a8f4378cdfd9c1d305fa1eddcd30bdf017d981fbff11d44ff2740ec7b5cb8ccf347800ca999a326dfb89a7ec8d7",
                    "args": [
                        {
                            "name": "x",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "any",
                    "line": 537,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "RemoveUser",
            "id": "class-RemoveUser-a1950a1b4c5489b1600af3ba7e43113298e8013a336f12a6315980c21eb501573b064d5b8c78d00ae6b3262382379d214dc02842b06c89735ca882304ee4e4a5",
            "file": "src/app/app.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class SetUser {\n  static readonly type = '[user] set user'\n  constructor(public payload: any) { }\n}\n\nexport class RemoveUser {\n  static readonly type = '[user] remove user'\n  constructor(public payload: any) { }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[user] remove user'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SelectedMovie",
            "id": "class-SelectedMovie-114bfd406f716566797453175c13f57ad3d29e0165ded715a377106487487c032d53b5225d4f56cc1f7671d74d350ffeac41c7ceb5698c4b0adcfc94ae8b9a2f",
            "file": "src/app/modules/admin/bulk-download/bulk-download.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { IpcService } from '@services/ipc.service'\nimport { DISPLAYEDMOVIES, MOVIEGENRES } from '../../../mock-data'\nimport { Router, ActivatedRoute } from '@angular/router'\nimport { DataService } from '@services/data.service'\nimport { TorrentService } from '@services/torrent/torrent.service'\n\n@Component({\n  selector: 'app-bulk-download',\n  templateUrl: './bulk-download.component.html',\n  styleUrls: ['./bulk-download.component.scss']\n})\nexport class BulkDownloadComponent implements OnInit {\n\n  displayedMovies = DISPLAYEDMOVIES\n  selectedMovie = null;\n  sampleJson = `{\n    \"userId\": 1,\n    \"id\": 1,\n    \"title\": \"delectus aut autem\",\n    \"completed\": false\n  }`\n  result: any\n\n  constructor(\n    private ipcService: IpcService,\n    private router: Router,\n    private activatedRoute: ActivatedRoute,\n    private dataService: DataService) {\n  }\n\n  ngOnInit() {\n\n    this.dataService.selectedMovies.subscribe(data => {\n      data.forEach(element => {\n        element.year = element.release_date.slice(0, element.release_date.indexOf('-'));\n        this.displayedMovies = data;\n      });\n    })\n  }\n  // getTorrent\n\n  getTorrents() {\n    var localDisplayedMovies = this.displayedMovies\n\n    // localDisplayedMovies.forEach(movie => {\n    //   movie.torrents = this.getTorrentByTitle(movie)\n    // });\n  }\n\n  getTorrentByTitle(movie) {\n    const title = movie.title;\n    const year = movie.year;\n    let torrents = null\n    // assuming getting torrent from file now works\n    switch (movie.imdbId) {\n      case 'tt2015381':\n        torrents = [\n          {\n            id: 1,\n            name: 'Guardians of the Galaxy (2014) 1080p BrRip x264 - YIFY',\n            size: 1988939229,\n            hash: '11A2AC68A11634E980F265CB1433C599D017A759',\n            checked: false\n          },\n          {\n            id: 1,\n            name: 'Guardians of the Galaxy Vol. 2 (2017) 720p BrRip x264 - VPPV',\n            size: 1215947108,\n            hash: '68132C479348C1AA2618D55C8BBEC6EB2597A5BA',\n            checked: false\n          },\n        ]\n        break;\n      case 'tt5215952':\n        torrents = [\n          {\n            id: 1,\n            name: 'The.Wailing.2016.1080p.BluRay.10bit.HEVC-MkvCage [aka Gokseong]',\n            size: 3976321027,\n            hash: '2F157306E5114EA8044302586A89FDC4E0FAC2A1',\n            checked: false\n          },\n        ]\n        break;\n      case 'tt1213641':\n        torrents = [\n          {\n            id: 1,\n            name: 'First.Man.2018.HC.HDRip.XviD.AC3-EVO',\n            size: 1474599225,\n            hash: '885CCCAD7F1942A515DA564FCF62933A105931DB',\n            checked: false\n          },\n          {\n            id: 2,\n            name: 'First.Man.2018.720p.BRRip.x264.MkvCage',\n            size: 1375985558,\n            hash: '712837DCAA3F4275B89E640EB21DAE72D2E0C38B',\n            checked: false\n          },\n        ]\n        break;\n      case 'tt0099785':\n        torrents = [\n          {\n            id: 1,\n            name: 'Home Alone (1990) 1080p BrRip x264 - YIFY',\n            size: 1767740507,\n            hash: '5FEFAC61C0F42FFC43946B3379A540D1A38F6480',\n            checked: false\n          }\n        ]\n        break;\n      // case 'tt0087538':\n      //   let torrents = [\n      //     {\n      //       id: 1,\n      //       name: 'Guardians of the Galaxy (2014) 1080p BrRip x264 - YIFY',\n      //       size: 1988939229,\n      //       hash: '11A2AC68A11634E980F265CB1433C599D017A759',\n      //       checked: false\n      //     },\n      //   ]\n      //   return torrents\n\n      //   break;\n      // case 'tt0092099':\n      //   let torrents = [\n      //     {\n      //       id: 1,\n      //       name: 'Top Gun (1986) 1080p BrRip x264 - 1.29GB - YIFY',\n      //       size: 1988939229,\n      //       hash: '11A2AC68A11634E980F265CB1433C599D017A759',\n      //       checked: false\n      //     },\n      //     {\n      //       id: 1,\n      //       name: 'Top Gun (1986) 720p BrRip x264 - 750MB - YIFY',\n      //       size: 786726662,\n      //       hash: '1E450B7823C44962D60932EDADF18E07D2B0A663',\n      //       checked: false\n      //     },\n      //   ]\n      //   return torrents\n\n      //   break;\n      // case 'tt0105236':\n      //   let torrents = [\n      //     {\n      //       id: 1,\n      //       name: 'Guardians of the Galaxy (2014) 1080p BrRip x264 - YIFY',\n      //       size: 1988939229,\n      //       hash: '11A2AC68A11634E980F265CB1433C599D017A759',\n      //       checked: false\n      //     },\n      //   ]\n      //   return torrents\n\n      //   break;\n      // case 'tt0145487':\n      //   let torrents = [\n      //     {\n      //       id: 1,\n      //       name: 'Guardians of the Galaxy (2014) 1080p BrRip x264 - YIFY',\n      //       size: 1988939229,\n      //       hash: '11A2AC68A11634E980F265CB1433C599D017A759',\n      //       checked: false\n      //     },\n      //   ]\n      //   return torrents\n\n      //   break;\n      // case 'tt0348150':\n      //   let torrents = [\n      //     {\n      //       id: 1,\n      //       name: 'Guardians of the Galaxy (2014) 1080p BrRip x264 - YIFY',\n      //       size: 1988939229,\n      //       hash: '11A2AC68A11634E980F265CB1433C599D017A759',\n      //       checked: false\n      //     },\n      //   ]\n      //   return torrents\n\n      //   break;\n      // case 'tt1213641':\n      //   let torrents = [\n      //     {\n      //       id: 1,\n      //       name: 'Guardians of the Galaxy (2014) 1080p BrRip x264 - YIFY',\n      //       size: 1988939229,\n      //       hash: '11A2AC68A11634E980F265CB1433C599D017A759',\n      //       checked: false\n      //     },\n      //   ]\n      //   return torrents\n\n      //   break;\n      // case 'tt0099785':\n      //   let torrents = [\n      //     {\n      //       id: 1,\n      //       name: 'Guardians of the Galaxy (2014) 1080p BrRip x264 - YIFY',\n      //       size: 1988939229,\n      //       hash: '11A2AC68A11634E980F265CB1433C599D017A759',\n      //       checked: false\n      //     },\n      //   ]\n      //   return torrents\n      //   break;\n      default:\n        break;\n    }\n    return torrents\n  }\n\n  getTorrentByQuery() {\n\n  }\n\n  onSelectMovie(movie: any) {\n    this.selectedMovie = movie\n  }\n\n  downloadMovie(movie) {\n    const torrentsToDownload = movie[0].torrents.filter(obj => {\n      return obj.checked === true\n    })\n  }\n\n  /**\n   * Removes movie from the displayed movies list\n   * @param movie movie to remove\n   */\n  removeMovie(movie) {\n    const newDisplayedMovies = this.displayedMovies.filter(obj => {\n      console.log(obj.id != movie.id)\n      return obj.id != movie.id\n    })\n    console.log('newDisplayedMovies', newDisplayedMovies);\n    this.displayedMovies = newDisplayedMovies\n    // const newDisplayedMovies = this.displayedMovies.filter(obj => {\n    //   return obj.imdbId != movie.imdbId\n    // })\n    // this.displayedMovies = newDisplayedMovies\n  }\n\n  /**\n   * Go to movie's detail\n   * @param movie selected movie object\n   */\n  goToMovie(movie) {\n    let tmdbId = movie.id\n    this.router.navigate([`/details/${tmdbId}`], { relativeTo: this.activatedRoute })\n  }\n  // https://yts.lt/api/v2/movie_suggestions.json?movie_id=10\n  /**\n   * Downloads all checked torrents from the front-end\n   */\n  downloadAllChecked() {\n    let torrentsToDownload = [];\n    this.displayedMovies.forEach(movie => {\n      const movieTorrents = movie.torrents\n      if (movieTorrents) {\n        // torrentsToDownload.push(movie.torrents.filter(torrent => {\n        //   return torrent.checked === true;\n        // }));\n        movieTorrents.forEach(torrent => {\n          if (torrent.checked == true) {\n            torrentsToDownload.push(torrent)\n          }\n        });\n      }\n    });\n    console.log(torrentsToDownload);\n  }\n}\n\nexport class SelectedMovie {\n  title: string;\n  year: number;\n  plot: string;\n  imdbId: string;\n}\nexport class TorrentResult {\n  status: string;\n  statusMessage: string;\n}\n\nexport class Test1 {\n  userId: number;\n  id: number;\n  title: string;\n  completed: boolean;\n}\n\nclass SerializationHelper {\n  static toInstance<T>(obj: T, json: string): T {\n    const jsonObj = JSON.parse(json);\n    const fromJSONString = 'fromJSON'\n    if (typeof obj[fromJSONString] === 'function') {\n      obj[fromJSONString](jsonObj);\n    }\n    else {\n      for (var propName in jsonObj) {\n        obj[propName] = jsonObj[propName]\n      }\n    }\n\n    return obj;\n  }\n}\n",
            "properties": [
                {
                    "name": "imdbId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 284
                },
                {
                    "name": "plot",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 283
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 281
                },
                {
                    "name": "year",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 282
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SerializationHelper",
            "id": "class-SerializationHelper-114bfd406f716566797453175c13f57ad3d29e0165ded715a377106487487c032d53b5225d4f56cc1f7671d74d350ffeac41c7ceb5698c4b0adcfc94ae8b9a2f",
            "file": "src/app/modules/admin/bulk-download/bulk-download.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { IpcService } from '@services/ipc.service'\nimport { DISPLAYEDMOVIES, MOVIEGENRES } from '../../../mock-data'\nimport { Router, ActivatedRoute } from '@angular/router'\nimport { DataService } from '@services/data.service'\nimport { TorrentService } from '@services/torrent/torrent.service'\n\n@Component({\n  selector: 'app-bulk-download',\n  templateUrl: './bulk-download.component.html',\n  styleUrls: ['./bulk-download.component.scss']\n})\nexport class BulkDownloadComponent implements OnInit {\n\n  displayedMovies = DISPLAYEDMOVIES\n  selectedMovie = null;\n  sampleJson = `{\n    \"userId\": 1,\n    \"id\": 1,\n    \"title\": \"delectus aut autem\",\n    \"completed\": false\n  }`\n  result: any\n\n  constructor(\n    private ipcService: IpcService,\n    private router: Router,\n    private activatedRoute: ActivatedRoute,\n    private dataService: DataService) {\n  }\n\n  ngOnInit() {\n\n    this.dataService.selectedMovies.subscribe(data => {\n      data.forEach(element => {\n        element.year = element.release_date.slice(0, element.release_date.indexOf('-'));\n        this.displayedMovies = data;\n      });\n    })\n  }\n  // getTorrent\n\n  getTorrents() {\n    var localDisplayedMovies = this.displayedMovies\n\n    // localDisplayedMovies.forEach(movie => {\n    //   movie.torrents = this.getTorrentByTitle(movie)\n    // });\n  }\n\n  getTorrentByTitle(movie) {\n    const title = movie.title;\n    const year = movie.year;\n    let torrents = null\n    // assuming getting torrent from file now works\n    switch (movie.imdbId) {\n      case 'tt2015381':\n        torrents = [\n          {\n            id: 1,\n            name: 'Guardians of the Galaxy (2014) 1080p BrRip x264 - YIFY',\n            size: 1988939229,\n            hash: '11A2AC68A11634E980F265CB1433C599D017A759',\n            checked: false\n          },\n          {\n            id: 1,\n            name: 'Guardians of the Galaxy Vol. 2 (2017) 720p BrRip x264 - VPPV',\n            size: 1215947108,\n            hash: '68132C479348C1AA2618D55C8BBEC6EB2597A5BA',\n            checked: false\n          },\n        ]\n        break;\n      case 'tt5215952':\n        torrents = [\n          {\n            id: 1,\n            name: 'The.Wailing.2016.1080p.BluRay.10bit.HEVC-MkvCage [aka Gokseong]',\n            size: 3976321027,\n            hash: '2F157306E5114EA8044302586A89FDC4E0FAC2A1',\n            checked: false\n          },\n        ]\n        break;\n      case 'tt1213641':\n        torrents = [\n          {\n            id: 1,\n            name: 'First.Man.2018.HC.HDRip.XviD.AC3-EVO',\n            size: 1474599225,\n            hash: '885CCCAD7F1942A515DA564FCF62933A105931DB',\n            checked: false\n          },\n          {\n            id: 2,\n            name: 'First.Man.2018.720p.BRRip.x264.MkvCage',\n            size: 1375985558,\n            hash: '712837DCAA3F4275B89E640EB21DAE72D2E0C38B',\n            checked: false\n          },\n        ]\n        break;\n      case 'tt0099785':\n        torrents = [\n          {\n            id: 1,\n            name: 'Home Alone (1990) 1080p BrRip x264 - YIFY',\n            size: 1767740507,\n            hash: '5FEFAC61C0F42FFC43946B3379A540D1A38F6480',\n            checked: false\n          }\n        ]\n        break;\n      // case 'tt0087538':\n      //   let torrents = [\n      //     {\n      //       id: 1,\n      //       name: 'Guardians of the Galaxy (2014) 1080p BrRip x264 - YIFY',\n      //       size: 1988939229,\n      //       hash: '11A2AC68A11634E980F265CB1433C599D017A759',\n      //       checked: false\n      //     },\n      //   ]\n      //   return torrents\n\n      //   break;\n      // case 'tt0092099':\n      //   let torrents = [\n      //     {\n      //       id: 1,\n      //       name: 'Top Gun (1986) 1080p BrRip x264 - 1.29GB - YIFY',\n      //       size: 1988939229,\n      //       hash: '11A2AC68A11634E980F265CB1433C599D017A759',\n      //       checked: false\n      //     },\n      //     {\n      //       id: 1,\n      //       name: 'Top Gun (1986) 720p BrRip x264 - 750MB - YIFY',\n      //       size: 786726662,\n      //       hash: '1E450B7823C44962D60932EDADF18E07D2B0A663',\n      //       checked: false\n      //     },\n      //   ]\n      //   return torrents\n\n      //   break;\n      // case 'tt0105236':\n      //   let torrents = [\n      //     {\n      //       id: 1,\n      //       name: 'Guardians of the Galaxy (2014) 1080p BrRip x264 - YIFY',\n      //       size: 1988939229,\n      //       hash: '11A2AC68A11634E980F265CB1433C599D017A759',\n      //       checked: false\n      //     },\n      //   ]\n      //   return torrents\n\n      //   break;\n      // case 'tt0145487':\n      //   let torrents = [\n      //     {\n      //       id: 1,\n      //       name: 'Guardians of the Galaxy (2014) 1080p BrRip x264 - YIFY',\n      //       size: 1988939229,\n      //       hash: '11A2AC68A11634E980F265CB1433C599D017A759',\n      //       checked: false\n      //     },\n      //   ]\n      //   return torrents\n\n      //   break;\n      // case 'tt0348150':\n      //   let torrents = [\n      //     {\n      //       id: 1,\n      //       name: 'Guardians of the Galaxy (2014) 1080p BrRip x264 - YIFY',\n      //       size: 1988939229,\n      //       hash: '11A2AC68A11634E980F265CB1433C599D017A759',\n      //       checked: false\n      //     },\n      //   ]\n      //   return torrents\n\n      //   break;\n      // case 'tt1213641':\n      //   let torrents = [\n      //     {\n      //       id: 1,\n      //       name: 'Guardians of the Galaxy (2014) 1080p BrRip x264 - YIFY',\n      //       size: 1988939229,\n      //       hash: '11A2AC68A11634E980F265CB1433C599D017A759',\n      //       checked: false\n      //     },\n      //   ]\n      //   return torrents\n\n      //   break;\n      // case 'tt0099785':\n      //   let torrents = [\n      //     {\n      //       id: 1,\n      //       name: 'Guardians of the Galaxy (2014) 1080p BrRip x264 - YIFY',\n      //       size: 1988939229,\n      //       hash: '11A2AC68A11634E980F265CB1433C599D017A759',\n      //       checked: false\n      //     },\n      //   ]\n      //   return torrents\n      //   break;\n      default:\n        break;\n    }\n    return torrents\n  }\n\n  getTorrentByQuery() {\n\n  }\n\n  onSelectMovie(movie: any) {\n    this.selectedMovie = movie\n  }\n\n  downloadMovie(movie) {\n    const torrentsToDownload = movie[0].torrents.filter(obj => {\n      return obj.checked === true\n    })\n  }\n\n  /**\n   * Removes movie from the displayed movies list\n   * @param movie movie to remove\n   */\n  removeMovie(movie) {\n    const newDisplayedMovies = this.displayedMovies.filter(obj => {\n      console.log(obj.id != movie.id)\n      return obj.id != movie.id\n    })\n    console.log('newDisplayedMovies', newDisplayedMovies);\n    this.displayedMovies = newDisplayedMovies\n    // const newDisplayedMovies = this.displayedMovies.filter(obj => {\n    //   return obj.imdbId != movie.imdbId\n    // })\n    // this.displayedMovies = newDisplayedMovies\n  }\n\n  /**\n   * Go to movie's detail\n   * @param movie selected movie object\n   */\n  goToMovie(movie) {\n    let tmdbId = movie.id\n    this.router.navigate([`/details/${tmdbId}`], { relativeTo: this.activatedRoute })\n  }\n  // https://yts.lt/api/v2/movie_suggestions.json?movie_id=10\n  /**\n   * Downloads all checked torrents from the front-end\n   */\n  downloadAllChecked() {\n    let torrentsToDownload = [];\n    this.displayedMovies.forEach(movie => {\n      const movieTorrents = movie.torrents\n      if (movieTorrents) {\n        // torrentsToDownload.push(movie.torrents.filter(torrent => {\n        //   return torrent.checked === true;\n        // }));\n        movieTorrents.forEach(torrent => {\n          if (torrent.checked == true) {\n            torrentsToDownload.push(torrent)\n          }\n        });\n      }\n    });\n    console.log(torrentsToDownload);\n  }\n}\n\nexport class SelectedMovie {\n  title: string;\n  year: number;\n  plot: string;\n  imdbId: string;\n}\nexport class TorrentResult {\n  status: string;\n  statusMessage: string;\n}\n\nexport class Test1 {\n  userId: number;\n  id: number;\n  title: string;\n  completed: boolean;\n}\n\nclass SerializationHelper {\n  static toInstance<T>(obj: T, json: string): T {\n    const jsonObj = JSON.parse(json);\n    const fromJSONString = 'fromJSON'\n    if (typeof obj[fromJSONString] === 'function') {\n      obj[fromJSONString](jsonObj);\n    }\n    else {\n      for (var propName in jsonObj) {\n        obj[propName] = jsonObj[propName]\n      }\n    }\n\n    return obj;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "toInstance",
                    "args": [
                        {
                            "name": "obj",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "json",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 299,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "json",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SetUser",
            "id": "class-SetUser-a1950a1b4c5489b1600af3ba7e43113298e8013a336f12a6315980c21eb501573b064d5b8c78d00ae6b3262382379d214dc02842b06c89735ca882304ee4e4a5",
            "file": "src/app/app.actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class SetUser {\n  static readonly type = '[user] set user'\n  constructor(public payload: any) { }\n}\n\nexport class RemoveUser {\n  static readonly type = '[user] remove user'\n  constructor(public payload: any) { }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 2,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'[user] set user'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        124,
                        144
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SubtitlesUtil",
            "id": "class-SubtitlesUtil-ac71aa74f24b65fa62fa63a5265ad20df7e0af4346bc5ca1a804985799675caa8a282224d370f1949fd9cc55bf71474635cdb33e1f706d9ed8466e1119bd6306",
            "file": "src/app/utils/subtitles.utils.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Subtitle } from '@models/subtitle.model';\n\nexport default class SubtitlesUtil {\n\n  private static subtitlePattern = /(\\d+)\\n([\\d:.,]+)\\s+-{2}\\>\\s+([\\d:.,]+)\\n([\\s\\S]*?(?=\\n{2}|$))\\n([\\s\\S]*?(?=\\n{2}|$))/gm\n  /**\n   * !TODO: handle/ignore formatting like 00:00:00.000 --> 00:00:04.000 `position:10%`\n   * !TODO: handle dynamic number of captions\n   * @param resultFile\n   */\n  static mapSubtitle(resultFile: string): Map<number, Subtitle> {\n    let subtitleMap = new Map<number, Subtitle>();\n    let matches\n    while ((matches = SubtitlesUtil.subtitlePattern.exec(resultFile)) != null) {\n      const sub = this.toSubtitleObj(matches);\n      subtitleMap.set(sub.sequenceNo, sub)\n    }\n    console.log(subtitleMap)\n    return subtitleMap\n  }\n\n  static toSubtitleObj(group: any[]): Subtitle {\n    return {\n      sequenceNo: group[1],\n      startTime: group[2],\n      endTime: group[3],\n      captionText1: group[4],\n      captionText2: group[5]\n    };\n  }\n\n}\n",
            "properties": [
                {
                    "name": "subtitlePattern",
                    "defaultValue": "/(\\d+)\\n([\\d:.,]+)\\s+-{2}\\>\\s+([\\d:.,]+)\\n([\\s\\S]*?(?=\\n{2}|$))\\n([\\s\\S]*?(?=\\n{2}|$))/gm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        121,
                        124
                    ]
                }
            ],
            "methods": [
                {
                    "name": "mapSubtitle",
                    "args": [
                        {
                            "name": "resultFile",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Map<number, Subtitle>",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n!TODO: handle/ignore formatting like 00:00:00.000 --> 00:00:04.000 `position:10%`\n!TODO: handle dynamic number of captions\n",
                    "description": "<p>!TODO: handle/ignore formatting like 00:00:00.000 --&gt; 00:00:04.000 <code>position:10%</code>\n!TODO: handle dynamic number of captions</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 367,
                                "end": 377,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "resultFile"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 361,
                                "end": 366,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "toSubtitleObj",
                    "args": [
                        {
                            "name": "group",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Subtitle",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "group",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Test1",
            "id": "class-Test1-114bfd406f716566797453175c13f57ad3d29e0165ded715a377106487487c032d53b5225d4f56cc1f7671d74d350ffeac41c7ceb5698c4b0adcfc94ae8b9a2f",
            "file": "src/app/modules/admin/bulk-download/bulk-download.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { IpcService } from '@services/ipc.service'\nimport { DISPLAYEDMOVIES, MOVIEGENRES } from '../../../mock-data'\nimport { Router, ActivatedRoute } from '@angular/router'\nimport { DataService } from '@services/data.service'\nimport { TorrentService } from '@services/torrent/torrent.service'\n\n@Component({\n  selector: 'app-bulk-download',\n  templateUrl: './bulk-download.component.html',\n  styleUrls: ['./bulk-download.component.scss']\n})\nexport class BulkDownloadComponent implements OnInit {\n\n  displayedMovies = DISPLAYEDMOVIES\n  selectedMovie = null;\n  sampleJson = `{\n    \"userId\": 1,\n    \"id\": 1,\n    \"title\": \"delectus aut autem\",\n    \"completed\": false\n  }`\n  result: any\n\n  constructor(\n    private ipcService: IpcService,\n    private router: Router,\n    private activatedRoute: ActivatedRoute,\n    private dataService: DataService) {\n  }\n\n  ngOnInit() {\n\n    this.dataService.selectedMovies.subscribe(data => {\n      data.forEach(element => {\n        element.year = element.release_date.slice(0, element.release_date.indexOf('-'));\n        this.displayedMovies = data;\n      });\n    })\n  }\n  // getTorrent\n\n  getTorrents() {\n    var localDisplayedMovies = this.displayedMovies\n\n    // localDisplayedMovies.forEach(movie => {\n    //   movie.torrents = this.getTorrentByTitle(movie)\n    // });\n  }\n\n  getTorrentByTitle(movie) {\n    const title = movie.title;\n    const year = movie.year;\n    let torrents = null\n    // assuming getting torrent from file now works\n    switch (movie.imdbId) {\n      case 'tt2015381':\n        torrents = [\n          {\n            id: 1,\n            name: 'Guardians of the Galaxy (2014) 1080p BrRip x264 - YIFY',\n            size: 1988939229,\n            hash: '11A2AC68A11634E980F265CB1433C599D017A759',\n            checked: false\n          },\n          {\n            id: 1,\n            name: 'Guardians of the Galaxy Vol. 2 (2017) 720p BrRip x264 - VPPV',\n            size: 1215947108,\n            hash: '68132C479348C1AA2618D55C8BBEC6EB2597A5BA',\n            checked: false\n          },\n        ]\n        break;\n      case 'tt5215952':\n        torrents = [\n          {\n            id: 1,\n            name: 'The.Wailing.2016.1080p.BluRay.10bit.HEVC-MkvCage [aka Gokseong]',\n            size: 3976321027,\n            hash: '2F157306E5114EA8044302586A89FDC4E0FAC2A1',\n            checked: false\n          },\n        ]\n        break;\n      case 'tt1213641':\n        torrents = [\n          {\n            id: 1,\n            name: 'First.Man.2018.HC.HDRip.XviD.AC3-EVO',\n            size: 1474599225,\n            hash: '885CCCAD7F1942A515DA564FCF62933A105931DB',\n            checked: false\n          },\n          {\n            id: 2,\n            name: 'First.Man.2018.720p.BRRip.x264.MkvCage',\n            size: 1375985558,\n            hash: '712837DCAA3F4275B89E640EB21DAE72D2E0C38B',\n            checked: false\n          },\n        ]\n        break;\n      case 'tt0099785':\n        torrents = [\n          {\n            id: 1,\n            name: 'Home Alone (1990) 1080p BrRip x264 - YIFY',\n            size: 1767740507,\n            hash: '5FEFAC61C0F42FFC43946B3379A540D1A38F6480',\n            checked: false\n          }\n        ]\n        break;\n      // case 'tt0087538':\n      //   let torrents = [\n      //     {\n      //       id: 1,\n      //       name: 'Guardians of the Galaxy (2014) 1080p BrRip x264 - YIFY',\n      //       size: 1988939229,\n      //       hash: '11A2AC68A11634E980F265CB1433C599D017A759',\n      //       checked: false\n      //     },\n      //   ]\n      //   return torrents\n\n      //   break;\n      // case 'tt0092099':\n      //   let torrents = [\n      //     {\n      //       id: 1,\n      //       name: 'Top Gun (1986) 1080p BrRip x264 - 1.29GB - YIFY',\n      //       size: 1988939229,\n      //       hash: '11A2AC68A11634E980F265CB1433C599D017A759',\n      //       checked: false\n      //     },\n      //     {\n      //       id: 1,\n      //       name: 'Top Gun (1986) 720p BrRip x264 - 750MB - YIFY',\n      //       size: 786726662,\n      //       hash: '1E450B7823C44962D60932EDADF18E07D2B0A663',\n      //       checked: false\n      //     },\n      //   ]\n      //   return torrents\n\n      //   break;\n      // case 'tt0105236':\n      //   let torrents = [\n      //     {\n      //       id: 1,\n      //       name: 'Guardians of the Galaxy (2014) 1080p BrRip x264 - YIFY',\n      //       size: 1988939229,\n      //       hash: '11A2AC68A11634E980F265CB1433C599D017A759',\n      //       checked: false\n      //     },\n      //   ]\n      //   return torrents\n\n      //   break;\n      // case 'tt0145487':\n      //   let torrents = [\n      //     {\n      //       id: 1,\n      //       name: 'Guardians of the Galaxy (2014) 1080p BrRip x264 - YIFY',\n      //       size: 1988939229,\n      //       hash: '11A2AC68A11634E980F265CB1433C599D017A759',\n      //       checked: false\n      //     },\n      //   ]\n      //   return torrents\n\n      //   break;\n      // case 'tt0348150':\n      //   let torrents = [\n      //     {\n      //       id: 1,\n      //       name: 'Guardians of the Galaxy (2014) 1080p BrRip x264 - YIFY',\n      //       size: 1988939229,\n      //       hash: '11A2AC68A11634E980F265CB1433C599D017A759',\n      //       checked: false\n      //     },\n      //   ]\n      //   return torrents\n\n      //   break;\n      // case 'tt1213641':\n      //   let torrents = [\n      //     {\n      //       id: 1,\n      //       name: 'Guardians of the Galaxy (2014) 1080p BrRip x264 - YIFY',\n      //       size: 1988939229,\n      //       hash: '11A2AC68A11634E980F265CB1433C599D017A759',\n      //       checked: false\n      //     },\n      //   ]\n      //   return torrents\n\n      //   break;\n      // case 'tt0099785':\n      //   let torrents = [\n      //     {\n      //       id: 1,\n      //       name: 'Guardians of the Galaxy (2014) 1080p BrRip x264 - YIFY',\n      //       size: 1988939229,\n      //       hash: '11A2AC68A11634E980F265CB1433C599D017A759',\n      //       checked: false\n      //     },\n      //   ]\n      //   return torrents\n      //   break;\n      default:\n        break;\n    }\n    return torrents\n  }\n\n  getTorrentByQuery() {\n\n  }\n\n  onSelectMovie(movie: any) {\n    this.selectedMovie = movie\n  }\n\n  downloadMovie(movie) {\n    const torrentsToDownload = movie[0].torrents.filter(obj => {\n      return obj.checked === true\n    })\n  }\n\n  /**\n   * Removes movie from the displayed movies list\n   * @param movie movie to remove\n   */\n  removeMovie(movie) {\n    const newDisplayedMovies = this.displayedMovies.filter(obj => {\n      console.log(obj.id != movie.id)\n      return obj.id != movie.id\n    })\n    console.log('newDisplayedMovies', newDisplayedMovies);\n    this.displayedMovies = newDisplayedMovies\n    // const newDisplayedMovies = this.displayedMovies.filter(obj => {\n    //   return obj.imdbId != movie.imdbId\n    // })\n    // this.displayedMovies = newDisplayedMovies\n  }\n\n  /**\n   * Go to movie's detail\n   * @param movie selected movie object\n   */\n  goToMovie(movie) {\n    let tmdbId = movie.id\n    this.router.navigate([`/details/${tmdbId}`], { relativeTo: this.activatedRoute })\n  }\n  // https://yts.lt/api/v2/movie_suggestions.json?movie_id=10\n  /**\n   * Downloads all checked torrents from the front-end\n   */\n  downloadAllChecked() {\n    let torrentsToDownload = [];\n    this.displayedMovies.forEach(movie => {\n      const movieTorrents = movie.torrents\n      if (movieTorrents) {\n        // torrentsToDownload.push(movie.torrents.filter(torrent => {\n        //   return torrent.checked === true;\n        // }));\n        movieTorrents.forEach(torrent => {\n          if (torrent.checked == true) {\n            torrentsToDownload.push(torrent)\n          }\n        });\n      }\n    });\n    console.log(torrentsToDownload);\n  }\n}\n\nexport class SelectedMovie {\n  title: string;\n  year: number;\n  plot: string;\n  imdbId: string;\n}\nexport class TorrentResult {\n  status: string;\n  statusMessage: string;\n}\n\nexport class Test1 {\n  userId: number;\n  id: number;\n  title: string;\n  completed: boolean;\n}\n\nclass SerializationHelper {\n  static toInstance<T>(obj: T, json: string): T {\n    const jsonObj = JSON.parse(json);\n    const fromJSONString = 'fromJSON'\n    if (typeof obj[fromJSONString] === 'function') {\n      obj[fromJSONString](jsonObj);\n    }\n    else {\n      for (var propName in jsonObj) {\n        obj[propName] = jsonObj[propName]\n      }\n    }\n\n    return obj;\n  }\n}\n",
            "properties": [
                {
                    "name": "completed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 295
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 293
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 294
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 292
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TorrentResult",
            "id": "class-TorrentResult-114bfd406f716566797453175c13f57ad3d29e0165ded715a377106487487c032d53b5225d4f56cc1f7671d74d350ffeac41c7ceb5698c4b0adcfc94ae8b9a2f",
            "file": "src/app/modules/admin/bulk-download/bulk-download.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { IpcService } from '@services/ipc.service'\nimport { DISPLAYEDMOVIES, MOVIEGENRES } from '../../../mock-data'\nimport { Router, ActivatedRoute } from '@angular/router'\nimport { DataService } from '@services/data.service'\nimport { TorrentService } from '@services/torrent/torrent.service'\n\n@Component({\n  selector: 'app-bulk-download',\n  templateUrl: './bulk-download.component.html',\n  styleUrls: ['./bulk-download.component.scss']\n})\nexport class BulkDownloadComponent implements OnInit {\n\n  displayedMovies = DISPLAYEDMOVIES\n  selectedMovie = null;\n  sampleJson = `{\n    \"userId\": 1,\n    \"id\": 1,\n    \"title\": \"delectus aut autem\",\n    \"completed\": false\n  }`\n  result: any\n\n  constructor(\n    private ipcService: IpcService,\n    private router: Router,\n    private activatedRoute: ActivatedRoute,\n    private dataService: DataService) {\n  }\n\n  ngOnInit() {\n\n    this.dataService.selectedMovies.subscribe(data => {\n      data.forEach(element => {\n        element.year = element.release_date.slice(0, element.release_date.indexOf('-'));\n        this.displayedMovies = data;\n      });\n    })\n  }\n  // getTorrent\n\n  getTorrents() {\n    var localDisplayedMovies = this.displayedMovies\n\n    // localDisplayedMovies.forEach(movie => {\n    //   movie.torrents = this.getTorrentByTitle(movie)\n    // });\n  }\n\n  getTorrentByTitle(movie) {\n    const title = movie.title;\n    const year = movie.year;\n    let torrents = null\n    // assuming getting torrent from file now works\n    switch (movie.imdbId) {\n      case 'tt2015381':\n        torrents = [\n          {\n            id: 1,\n            name: 'Guardians of the Galaxy (2014) 1080p BrRip x264 - YIFY',\n            size: 1988939229,\n            hash: '11A2AC68A11634E980F265CB1433C599D017A759',\n            checked: false\n          },\n          {\n            id: 1,\n            name: 'Guardians of the Galaxy Vol. 2 (2017) 720p BrRip x264 - VPPV',\n            size: 1215947108,\n            hash: '68132C479348C1AA2618D55C8BBEC6EB2597A5BA',\n            checked: false\n          },\n        ]\n        break;\n      case 'tt5215952':\n        torrents = [\n          {\n            id: 1,\n            name: 'The.Wailing.2016.1080p.BluRay.10bit.HEVC-MkvCage [aka Gokseong]',\n            size: 3976321027,\n            hash: '2F157306E5114EA8044302586A89FDC4E0FAC2A1',\n            checked: false\n          },\n        ]\n        break;\n      case 'tt1213641':\n        torrents = [\n          {\n            id: 1,\n            name: 'First.Man.2018.HC.HDRip.XviD.AC3-EVO',\n            size: 1474599225,\n            hash: '885CCCAD7F1942A515DA564FCF62933A105931DB',\n            checked: false\n          },\n          {\n            id: 2,\n            name: 'First.Man.2018.720p.BRRip.x264.MkvCage',\n            size: 1375985558,\n            hash: '712837DCAA3F4275B89E640EB21DAE72D2E0C38B',\n            checked: false\n          },\n        ]\n        break;\n      case 'tt0099785':\n        torrents = [\n          {\n            id: 1,\n            name: 'Home Alone (1990) 1080p BrRip x264 - YIFY',\n            size: 1767740507,\n            hash: '5FEFAC61C0F42FFC43946B3379A540D1A38F6480',\n            checked: false\n          }\n        ]\n        break;\n      // case 'tt0087538':\n      //   let torrents = [\n      //     {\n      //       id: 1,\n      //       name: 'Guardians of the Galaxy (2014) 1080p BrRip x264 - YIFY',\n      //       size: 1988939229,\n      //       hash: '11A2AC68A11634E980F265CB1433C599D017A759',\n      //       checked: false\n      //     },\n      //   ]\n      //   return torrents\n\n      //   break;\n      // case 'tt0092099':\n      //   let torrents = [\n      //     {\n      //       id: 1,\n      //       name: 'Top Gun (1986) 1080p BrRip x264 - 1.29GB - YIFY',\n      //       size: 1988939229,\n      //       hash: '11A2AC68A11634E980F265CB1433C599D017A759',\n      //       checked: false\n      //     },\n      //     {\n      //       id: 1,\n      //       name: 'Top Gun (1986) 720p BrRip x264 - 750MB - YIFY',\n      //       size: 786726662,\n      //       hash: '1E450B7823C44962D60932EDADF18E07D2B0A663',\n      //       checked: false\n      //     },\n      //   ]\n      //   return torrents\n\n      //   break;\n      // case 'tt0105236':\n      //   let torrents = [\n      //     {\n      //       id: 1,\n      //       name: 'Guardians of the Galaxy (2014) 1080p BrRip x264 - YIFY',\n      //       size: 1988939229,\n      //       hash: '11A2AC68A11634E980F265CB1433C599D017A759',\n      //       checked: false\n      //     },\n      //   ]\n      //   return torrents\n\n      //   break;\n      // case 'tt0145487':\n      //   let torrents = [\n      //     {\n      //       id: 1,\n      //       name: 'Guardians of the Galaxy (2014) 1080p BrRip x264 - YIFY',\n      //       size: 1988939229,\n      //       hash: '11A2AC68A11634E980F265CB1433C599D017A759',\n      //       checked: false\n      //     },\n      //   ]\n      //   return torrents\n\n      //   break;\n      // case 'tt0348150':\n      //   let torrents = [\n      //     {\n      //       id: 1,\n      //       name: 'Guardians of the Galaxy (2014) 1080p BrRip x264 - YIFY',\n      //       size: 1988939229,\n      //       hash: '11A2AC68A11634E980F265CB1433C599D017A759',\n      //       checked: false\n      //     },\n      //   ]\n      //   return torrents\n\n      //   break;\n      // case 'tt1213641':\n      //   let torrents = [\n      //     {\n      //       id: 1,\n      //       name: 'Guardians of the Galaxy (2014) 1080p BrRip x264 - YIFY',\n      //       size: 1988939229,\n      //       hash: '11A2AC68A11634E980F265CB1433C599D017A759',\n      //       checked: false\n      //     },\n      //   ]\n      //   return torrents\n\n      //   break;\n      // case 'tt0099785':\n      //   let torrents = [\n      //     {\n      //       id: 1,\n      //       name: 'Guardians of the Galaxy (2014) 1080p BrRip x264 - YIFY',\n      //       size: 1988939229,\n      //       hash: '11A2AC68A11634E980F265CB1433C599D017A759',\n      //       checked: false\n      //     },\n      //   ]\n      //   return torrents\n      //   break;\n      default:\n        break;\n    }\n    return torrents\n  }\n\n  getTorrentByQuery() {\n\n  }\n\n  onSelectMovie(movie: any) {\n    this.selectedMovie = movie\n  }\n\n  downloadMovie(movie) {\n    const torrentsToDownload = movie[0].torrents.filter(obj => {\n      return obj.checked === true\n    })\n  }\n\n  /**\n   * Removes movie from the displayed movies list\n   * @param movie movie to remove\n   */\n  removeMovie(movie) {\n    const newDisplayedMovies = this.displayedMovies.filter(obj => {\n      console.log(obj.id != movie.id)\n      return obj.id != movie.id\n    })\n    console.log('newDisplayedMovies', newDisplayedMovies);\n    this.displayedMovies = newDisplayedMovies\n    // const newDisplayedMovies = this.displayedMovies.filter(obj => {\n    //   return obj.imdbId != movie.imdbId\n    // })\n    // this.displayedMovies = newDisplayedMovies\n  }\n\n  /**\n   * Go to movie's detail\n   * @param movie selected movie object\n   */\n  goToMovie(movie) {\n    let tmdbId = movie.id\n    this.router.navigate([`/details/${tmdbId}`], { relativeTo: this.activatedRoute })\n  }\n  // https://yts.lt/api/v2/movie_suggestions.json?movie_id=10\n  /**\n   * Downloads all checked torrents from the front-end\n   */\n  downloadAllChecked() {\n    let torrentsToDownload = [];\n    this.displayedMovies.forEach(movie => {\n      const movieTorrents = movie.torrents\n      if (movieTorrents) {\n        // torrentsToDownload.push(movie.torrents.filter(torrent => {\n        //   return torrent.checked === true;\n        // }));\n        movieTorrents.forEach(torrent => {\n          if (torrent.checked == true) {\n            torrentsToDownload.push(torrent)\n          }\n        });\n      }\n    });\n    console.log(torrentsToDownload);\n  }\n}\n\nexport class SelectedMovie {\n  title: string;\n  year: number;\n  plot: string;\n  imdbId: string;\n}\nexport class TorrentResult {\n  status: string;\n  statusMessage: string;\n}\n\nexport class Test1 {\n  userId: number;\n  id: number;\n  title: string;\n  completed: boolean;\n}\n\nclass SerializationHelper {\n  static toInstance<T>(obj: T, json: string): T {\n    const jsonObj = JSON.parse(json);\n    const fromJSONString = 'fromJSON'\n    if (typeof obj[fromJSONString] === 'function') {\n      obj[fromJSONString](jsonObj);\n    }\n    else {\n      for (var propName in jsonObj) {\n        obj[propName] = jsonObj[propName]\n      }\n    }\n\n    return obj;\n  }\n}\n",
            "properties": [
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 287
                },
                {
                    "name": "statusMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 288
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UsernameExistingValidator",
            "id": "class-UsernameExistingValidator-3c87146bc600c1fdb452b0ef87c1707cf40be1e6650774a6def6767476cffd62443c81704224fe0c3c5f0e69bd49c203b1b23459f401d46833c95a11c92aa25e",
            "file": "src/app/directives/username-exist.directive.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { CollectionName, FirebaseOperator, FieldName } from './../services/firebase.service';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport { Directive, forwardRef, Injectable } from '@angular/core';\nimport { AbstractControl, FormGroup, ValidationErrors, NG_VALIDATORS, Validator, ValidatorFn, NG_ASYNC_VALIDATORS, AsyncValidator } from '@angular/forms';\nimport { Observable, of } from 'rxjs';\nimport { delay, map, catchError, debounceTime, take } from 'rxjs/operators';\n\n@Injectable({ providedIn: 'root' })\nexport class UsernameExistValidator implements AsyncValidator {\n  constructor(private afs: AngularFirestore) { }\n  validate(control: AbstractControl) {\n\n    console.log('CONTROL VALUE2:', control.value)\n    const source = of(1).pipe(delay(400))\n    return of(false).pipe(delay(400),\n      map(isExisting => (isExisting ? { usernameExist: false } : null)),\n      catchError(() => of(null))\n    );\n  }\n}\n\n@Directive({\n  selector: '[appUsernameExist]',\n  providers: [{\n    provide: NG_ASYNC_VALIDATORS,\n    useExisting: forwardRef(() => UsernameExistValidatorDirective),\n    multi: true\n  }]\n})\n\nexport class UsernameExistValidatorDirective {\n\n  constructor(private validator: UsernameExistValidator) { }\n  validate(control: AbstractControl) {\n    console.log('CONTROL VALUE1:', control.value)\n    this.validator.validate(control)\n  }\n}\n\nexport class UsernameExistingValidator {\n  static validateUsername(afs: AngularFirestore) {\n    console.log('UsernameExistingValidator')\n    return (control: AbstractControl) => {\n\n      const username = control.value.toLowerCase();\n      console.log('control username: ', username)\n      return afs.collection(CollectionName.User, ref => ref.where(FieldName.Username, FirebaseOperator.Equal, username))\n        .valueChanges().pipe(\n          debounceTime(500),\n          take(1),\n          map(arr =>\n            arr.length ? { usernameUnavailable: true } : null\n          ),\n        )\n    }\n  }\n}\n\n/*\nCopyright Google LLC. All Rights Reserved.\nUse of this source code is governed by an MIT-style license that\ncan be found in the LICENSE file at http://angular.io/license\n*/\n",
            "properties": [],
            "methods": [
                {
                    "name": "validateUsername",
                    "args": [
                        {
                            "name": "afs",
                            "type": "AngularFirestore",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "(control: AbstractControl) => any",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "afs",
                            "type": "AngularFirestore",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "YTSTorrent",
            "id": "class-YTSTorrent-960e320edff913cb6b2adda6237f508f7a8cbe057cb8b134be3d6e920d63ced596dde0f37af6f23d8d4b071199e4c33fa1937fd91e76698c07d258a60f1c2108",
            "file": "src/app/models/yts-torrent.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class IYTSSingleQuery {\n  status: string;\n  status_message: string;\n  data: Data;\n  \"@meta\": Meta;\n}\n\nclass Meta {\n  server_time: number;\n  server_timezone: string;\n  api_version: number;\n  execution_time: string;\n}\n\nclass Data {\n  movie_count: number;\n  limit: number;\n  page_number: number;\n  movies: Movie[];\n}\n\nclass Movie {\n  id: number;\n  url: string;\n  imdb_code: string;\n  title: string;\n  title_english: string;\n  title_long: string;\n  slug: string;\n  year: number;\n  rating: number;\n  runtime: number;\n  genres: string[];\n  summary: string;\n  description_full: string;\n  synopsis: string;\n  yt_trailer_code: string;\n  language: string;\n  mpa_rating: string;\n  background_image: string;\n  background_image_original: string;\n  small_cover_image: string;\n  medium_cover_image: string;\n  large_cover_image: string;\n  state: string;\n  torrents: YTSTorrent[];\n  date_uploaded: string;\n  date_uploaded_unix: number;\n}\n\nexport class YTSTorrent {\n  url: string;\n  hash: string;\n  quality: string;\n  type: string;\n  seeds: number;\n  peers: number;\n  size: string;\n  size_bytes: number;\n  date_uploaded: string;\n  date_uploaded_unix: number;\n}\n",
            "properties": [
                {
                    "name": "date_uploaded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "date_uploaded_unix",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "hash",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "peers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "quality",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "seeds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "size_bytes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 53
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "CredentialsDirective",
            "id": "directive-CredentialsDirective-e272057aaee562163eb5e7cad65ca8e86f5a384c64a12bad2101cdea86449775045a7b25bd072da71321f64dc31e5c77c46b180e40a2deab102f6de2b3250ba7",
            "file": "src/app/directives/credentials.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, forwardRef, Injectable } from '@angular/core';\nimport { AsyncValidator, AbstractControl, NG_ASYNC_VALIDATORS, ValidationErrors } from '@angular/forms'\nimport { catchError, map } from 'rxjs/operators'\nimport { Observable, of } from 'rxjs'\n// import { UniqueAlterEgoValidator } from './alter-ego.directive';\nimport { delay } from 'rxjs/operators';\n\n@Injectable({ providedIn: 'root' })\nexport class CredentialsValidator implements AsyncValidator {\n  constructor() { }\n  validate(ctrl: AbstractControl): Promise<ValidationErrors | null> | Observable<ValidationErrors | null> {\n\n    // return this.myValidate(ctrl.value).pipe(map(isCredentialsValid => (isCredentialsValid ? { credentialsValid: true } : null)), catchError(() => null)\n    return null\n  }\n  // myValidate(): Observable<boolean> {\n  myValidate(ctrl: string): Observable<boolean> {\n    return of(true).pipe(delay(400));\n  }\n}\n\n@Directive({\n  selector: '[appCredentials]',\n  providers: [{\n    provide: NG_ASYNC_VALIDATORS,\n    useExisting: forwardRef(() => CredentialsValidator),\n    multi: true\n  }]\n})\nexport class CredentialsDirective {\n\n  constructor(private validator: CredentialsValidator) {\n  }\n\n  validate(control: AbstractControl) {\n    this.validator.validate(control)\n  }\n\n}\n",
            "selector": "[appCredentials]",
            "providers": [
                {
                    "name": "{\n    provide: NG_ASYNC_VALIDATORS, useExisting: forwardRef(() => CredentialsValidator), multi: true\n}"
                }
            ],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "validate",
                    "args": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "validator",
                        "type": "CredentialsValidator",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "validator",
                        "type": "CredentialsValidator",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "RepeatPasswordValidatorDirective",
            "id": "directive-RepeatPasswordValidatorDirective-1f2c0eac2f2fe633b0b3965e9deeb2ec5482021fa356a91bd82b8005a11b1d96a5cd9f64cb4ca7a0a38cd933d519a9b1890878837f843c4d29c70d8e7b551664",
            "file": "src/app/directives/repeat-password.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive } from '@angular/core';\nimport { AbstractControl, FormGroup, ValidationErrors, NG_VALIDATORS, Validator, ValidatorFn } from '@angular/forms';\n// import { Observable } from 'rxjs';\n\n\n/**\n * Validator for repeat password. It sets false if password and repeat password are not equal.\n */\nexport const repeatPasswordValidator: ValidatorFn = (control: FormGroup): ValidationErrors | null => {\n  const password = control.get('password')\n  const repeatPassword = control.get('repeatPassword')\n  const toReturn = password.value && repeatPassword.value && password.value !== repeatPassword.value ? { isRepeatPassword: true } : null\n  return toReturn\n}\n\n@Directive({\n  selector: '[appRepeatPassword]',\n  providers: [{ provide: NG_VALIDATORS, useExisting: RepeatPasswordValidatorDirective, multi: true }]\n})\nexport class RepeatPasswordValidatorDirective implements Validator {\n  // @Input('appRepeatPassword') forbiddenName: string;\n\n  validate(control: AbstractControl): ValidationErrors {\n    return repeatPasswordValidator(control)\n  }\n\n}\n\n/*\nCopyright Google LLC. All Rights Reserved.\nUse of this source code is governed by an MIT-style license that\ncan be found in the LICENSE file at http://angular.io/license\n*/\n",
            "selector": "[appRepeatPassword]",
            "providers": [
                {
                    "name": "{ provide: NG_VALIDATORS, useExisting: RepeatPasswordValidatorDirective, multi: true }",
                    "type": "directive"
                }
            ],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "validate",
                    "args": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidationErrors",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "implements": [
                "Validator"
            ]
        },
        {
            "name": "UsernameExistValidatorDirective",
            "id": "directive-UsernameExistValidatorDirective-3c87146bc600c1fdb452b0ef87c1707cf40be1e6650774a6def6767476cffd62443c81704224fe0c3c5f0e69bd49c203b1b23459f401d46833c95a11c92aa25e",
            "file": "src/app/directives/username-exist.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { CollectionName, FirebaseOperator, FieldName } from './../services/firebase.service';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport { Directive, forwardRef, Injectable } from '@angular/core';\nimport { AbstractControl, FormGroup, ValidationErrors, NG_VALIDATORS, Validator, ValidatorFn, NG_ASYNC_VALIDATORS, AsyncValidator } from '@angular/forms';\nimport { Observable, of } from 'rxjs';\nimport { delay, map, catchError, debounceTime, take } from 'rxjs/operators';\n\n@Injectable({ providedIn: 'root' })\nexport class UsernameExistValidator implements AsyncValidator {\n  constructor(private afs: AngularFirestore) { }\n  validate(control: AbstractControl) {\n\n    console.log('CONTROL VALUE2:', control.value)\n    const source = of(1).pipe(delay(400))\n    return of(false).pipe(delay(400),\n      map(isExisting => (isExisting ? { usernameExist: false } : null)),\n      catchError(() => of(null))\n    );\n  }\n}\n\n@Directive({\n  selector: '[appUsernameExist]',\n  providers: [{\n    provide: NG_ASYNC_VALIDATORS,\n    useExisting: forwardRef(() => UsernameExistValidatorDirective),\n    multi: true\n  }]\n})\n\nexport class UsernameExistValidatorDirective {\n\n  constructor(private validator: UsernameExistValidator) { }\n  validate(control: AbstractControl) {\n    console.log('CONTROL VALUE1:', control.value)\n    this.validator.validate(control)\n  }\n}\n\nexport class UsernameExistingValidator {\n  static validateUsername(afs: AngularFirestore) {\n    console.log('UsernameExistingValidator')\n    return (control: AbstractControl) => {\n\n      const username = control.value.toLowerCase();\n      console.log('control username: ', username)\n      return afs.collection(CollectionName.User, ref => ref.where(FieldName.Username, FirebaseOperator.Equal, username))\n        .valueChanges().pipe(\n          debounceTime(500),\n          take(1),\n          map(arr =>\n            arr.length ? { usernameUnavailable: true } : null\n          ),\n        )\n    }\n  }\n}\n\n/*\nCopyright Google LLC. All Rights Reserved.\nUse of this source code is governed by an MIT-style license that\ncan be found in the LICENSE file at http://angular.io/license\n*/\n",
            "selector": "[appUsernameExist]",
            "providers": [
                {
                    "name": "{\n    provide: NG_ASYNC_VALIDATORS, useExisting: forwardRef(() => UsernameExistValidatorDirective), multi: true\n}",
                    "type": "directive"
                }
            ],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "validate",
                    "args": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "validator",
                        "type": "UsernameExistValidator",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "validator",
                        "type": "UsernameExistValidator",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "AdvancedFindComponent",
            "id": "component-AdvancedFindComponent-92ae86c6f2928113582aee210901acd5fc95845a276d9346edef3b3462988004bfd0543488a41a00e5e9562ed32e108bb0c7e0d069c51449b0f71c10a4b5dae9",
            "file": "src/app/components/advanced-find/advanced-find.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "advanced-find",
            "styleUrls": [
                "./advanced-find.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./advanced-find.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "Arr",
                    "defaultValue": "Array",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "averageRatingsFromList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "averageRatingsToList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "browseLists",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "DEFAULT_SEARCH_QUERY",
                    "defaultValue": "{\n    query: '',\n    yearFrom: 1901,\n    isAvailable: '',\n    yearTo: (new Date()).getFullYear(),\n    genres: [],\n    type: '',\n    availability: 'all',\n    ratingAverageFrom: 0,\n    ratingAverageTo: 10,\n    sortBy: 'popularity.desc'\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ISearchQuery",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "genreAndOr",
                    "defaultValue": "'|'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "genreListVal",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "genresList",
                    "defaultValue": "GENRES",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "myVal",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "num",
                    "defaultValue": "20",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "ratingList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "releaseYearsFromList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "releaseYearsToList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "searchForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "sortByList",
                    "defaultValue": "SORT_BY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [
                {
                    "name": "changeGenreAndOr",
                    "args": [
                        {
                            "name": "isChecked",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isChecked",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearAdvancedSearch",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "closeAdvancedSearch",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 181,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "generateRatings",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "generateReleaseYears",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "goAdvancedSearch",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTODO: add screen for results.\n",
                    "description": "<p>TODO: add screen for results.</p>\n"
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onAverageRatingChange",
                    "args": [
                        {
                            "name": "source",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "event",
                            "type": "MatOptionSelectionChange",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "source",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "MatOptionSelectionChange",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onCheckboxChange",
                    "args": [
                        {
                            "name": "genre",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isChecked",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "genre",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isChecked",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onYearChange",
                    "args": [
                        {
                            "name": "source",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "event",
                            "type": "MatOptionSelectionChange",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "source",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "MatOptionSelectionChange",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit, Component, OnInit\n} from '@angular/core';\nimport { GENRES, SORT_BY } from '@shared/constants';\nimport { FormArray, FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ISearchQuery } from '@core/components/top-navigation/top-navigation.component';\nimport { MovieService } from '@services/movie/movie.service';\nimport { IGenre, TmdbParameters } from '@models/interfaces';\nimport { MatOptionSelectionChange } from '@angular/material/core';\nimport { DataService } from '@services/data.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'advanced-find',\n  templateUrl: './advanced-find.component.html',\n  styleUrls: ['./advanced-find.component.scss']\n})\nexport class AdvancedFindComponent implements OnInit, AfterViewInit {\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private movieService: MovieService,\n    private dataService: DataService,\n    private router: Router) { }\n\n  genresList = GENRES\n  sortByList = SORT_BY\n  browseLists = []\n  Arr = Array; //Array type captured in a variable\n  num: number = 20;\n  searchForm: FormGroup\n  DEFAULT_SEARCH_QUERY: ISearchQuery = {\n    query: '',\n    yearFrom: 1901,\n    isAvailable: '',\n    yearTo: (new Date()).getFullYear(),\n    genres: [],\n    type: '',\n    availability: 'all',\n    ratingAverageFrom: 0,\n    ratingAverageTo: 10,\n    sortBy: 'popularity.desc'\n  }\n  ratingList = []\n  averageRatingsFromList = []\n  averageRatingsToList = []\n  releaseYearsFromList = []\n  releaseYearsToList = []\n  genreAndOr = '|'\n  genreListVal = {}\n  myVal = true\n  ngOnInit() {\n    this.movieService.proxyTest().subscribe(e => {\n      console.log(\"EEEE\", e)\n    })\n    let academyWinnersList = {\n      name: 'Academy Winners',\n      contents: []\n    }\n    this.browseLists.push(academyWinnersList)\n\n    this.genresList.forEach((genre: IGenre) => {\n      this.genreListVal[genre.name] = false\n    })\n    console.log(this.genreListVal)\n    this.searchForm = this.formBuilder.group({\n      query: ['', []],\n      genres: this.formBuilder.array([]),\n      yearFrom: [this.DEFAULT_SEARCH_QUERY.yearFrom, [Validators.required]],\n      yearTo: [this.DEFAULT_SEARCH_QUERY.yearTo, [Validators.required]],\n      averageRatingFrom: [this.DEFAULT_SEARCH_QUERY.ratingAverageFrom, [Validators.required]],\n      averageRatingTo: [this.DEFAULT_SEARCH_QUERY.ratingAverageTo, [Validators.required]],\n      availability: [this.DEFAULT_SEARCH_QUERY.availability, [Validators.required]],\n      sortBy: [this.DEFAULT_SEARCH_QUERY.sortBy]\n    }, {})\n  }\n\n  ngAfterViewInit(): void {\n    this.generateRatings();\n    this.generateReleaseYears();\n  }\n\n  generateReleaseYears() {\n    for (let index = (new Date).getUTCFullYear(); index >= 1901; index--) {\n      this.releaseYearsFromList.push(index)\n      this.releaseYearsToList.push(index)\n    }\n    for (let index = (new Date).getUTCFullYear(); index >= 1901; index--) {\n    }\n  }\n\n  generateRatings() {\n    for (let index = 0; index <= 10; index += 0.5) {\n      this.averageRatingsFromList.push({ value: index, label: index })\n      this.averageRatingsToList.push({ value: index, label: index })\n    }\n  }\n\n  onCheckboxChange(genre: string, isChecked: boolean) {\n    const genresFormArray = <FormArray>this.searchForm.controls.genres;\n    if (isChecked) {\n      genresFormArray.push(new FormControl(genre));\n    } else {\n      let index = genresFormArray.controls.findIndex(x => x.value == genre)\n      genresFormArray.removeAt(index);\n    }\n  }\n\n  onAverageRatingChange(source: string, event: MatOptionSelectionChange) {\n    if (event.isUserInput) {\n      if (source === 'from') {\n        this.averageRatingsToList = []\n        for (let index = 10; index >= event.source.value; index -= 0.5) {\n          this.averageRatingsToList.push({ value: index, label: index })\n        }\n      }\n      if (source === 'to') {\n        this.averageRatingsFromList = []\n        for (let index = 0; index <= event.source.value; index += 0.5) {\n          this.averageRatingsFromList.push({ value: index, label: index })\n        }\n      }\n    }\n  }\n\n  onYearChange(source: string, event: MatOptionSelectionChange) {\n    if (event.isUserInput) {\n      if (source === 'from') {\n        this.releaseYearsToList = []\n        for (let index = this.DEFAULT_SEARCH_QUERY.yearTo; index >= event.source.value; index--) {\n          this.releaseYearsToList.push(index)\n        }\n      }\n      if (source === 'to') {\n        this.releaseYearsFromList = []\n        for (let index = 1901; index <= event.source.value; index++) {\n          this.releaseYearsFromList.push(index)\n        }\n      }\n    }\n  }\n\n  changeGenreAndOr(isChecked: boolean) {\n    this.genreAndOr = isChecked ? ',' : '|'\n  }\n\n  /**\n   * TODO: add screen for results.\n   */\n  goAdvancedSearch() {\n    console.log(this.searchForm.controls)\n\n    const paramMap = new Map<TmdbParameters, any>();\n    paramMap.set(TmdbParameters.WithKeywords, this.searchForm.get('query').value)\n    paramMap.set(TmdbParameters.WithGenres, this.searchForm.get('genres').value.join(this.genreAndOr))\n    paramMap.set(TmdbParameters.PrimaryReleaseDateGreater, this.searchForm.get('yearFrom').value + '-01-01')\n    paramMap.set(TmdbParameters.PrimaryReleaseDateLess, this.searchForm.get('yearTo').value + '-12-31')\n    paramMap.set(TmdbParameters.VoteAverageGreater, this.searchForm.get('averageRatingFrom').value)\n    paramMap.set(TmdbParameters.VoteAverageLess, this.searchForm.get('averageRatingTo').value)\n    paramMap.set(TmdbParameters.SortBy, this.searchForm.get('sortBy').value)\n    // this.dataService.updateDiscoverQuery({ type: type, value: id, name: name })\n    // this.router.navigate([`/results`], { queryParams: { type: type, id: id, name: name } });\n\n    this.movieService.getMoviesDiscover(paramMap).subscribe(e => {\n      console.log(e);\n    })\n  }\n\n  clearAdvancedSearch() {\n    this.searchForm.reset()\n    this.genresList.forEach((genre: IGenre) => {\n      this.genreListVal[genre.name] = false\n    })\n    this.searchForm.get('yearFrom').setValue(this.DEFAULT_SEARCH_QUERY.yearFrom)\n    this.searchForm.get('yearTo').setValue(this.DEFAULT_SEARCH_QUERY.yearTo)\n    this.searchForm.get('averageRatingFrom').setValue(this.DEFAULT_SEARCH_QUERY.ratingAverageFrom)\n    this.searchForm.get('averageRatingTo').setValue(this.DEFAULT_SEARCH_QUERY.ratingAverageTo)\n    this.searchForm.get('sortBy').setValue(this.DEFAULT_SEARCH_QUERY.sortBy)\n  }\n\n  closeAdvancedSearch() {\n\n  }\n}\n\nconst VOTE_COUNT = [\n  {\n    label: '100',\n    value: 100\n  },\n  {\n    label: '+1,000',\n    value: 1000\n  },\n  {\n    label: '+10,000',\n    value: 10000\n  },\n  {\n    label: '+100,000',\n    value: 100000\n  },\n  {\n    label: '+1,000,000',\n    value: 1000000\n  },\n  {\n    label: '+10,000,000',\n    value: 10000000\n  },\n]\n\nexport enum BROWSE_TITLES {\n  COMPLETED_WATCHED,\n  INCOMPLETE_WATCHED,\n  BOOKMARKED,\n  FAVORITES,\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '~@angular/material/theming';\n@import '../../variables.scss';\n@import '../../../custom-mat-styles.scss';\n\n.genre-selection {\n  width: 150px\n}\n\n#clearButton {\n  ::ng-deep .mat-button-wrapper {\n    color: black !important;\n  }\n}\n\nform {\n  ::ng-deep mat-label {\n    color: white\n  }\n}\n\n::ng-deep .mat-checkbox-checked .mat-checkbox-background,\n.mat-checkbox-indeterminate .mat-checkbox-background {\n  background-color: $mdb-primary !important;\n}\n\n// overwrite the ripple overlay on hover and click\n::ng-deep .mat-checkbox:not(.mat-checkbox-disabled) .mat-checkbox-ripple .mat-ripple-element {\n  background-color: $mdb-primary !important;\n}\n\n\n#closeIcon {\n  background-image: url(~/assets/icons/close.svg);\n  position: absolute;\n  filter: invert(1) contrast(0);\n  color: #ccc;\n  background-position: center;\n  background-size: cover;\n  cursor: pointer;\n  height: 20px;\n  width: 20px;\n  right: 8vw;\n  margin: auto;\n  transform: translateY(50%);\n  z-index: 5000;\n}\n\n.accent-color {\n  // color: mat-color($mdb-primary) !important;\n}\n",
                    "styleUrl": "./advanced-find.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "movieService",
                        "type": "MovieService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dataService",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "movieService",
                        "type": "MovieService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dataService",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "templateData": "<!-- advanced find -->\n\n<!-- TODO: region, language -->\n<div style='margin-top: 30px;z-index: 55;'>\n  <div id='closeIcon' (click)=\"closeAdvancedSearch()\" data-toggle='tooltip' title='Close Advanced Search'></div>\n  <div style='margin-left: auto;margin-right: auto; width: 75%;'>\n    <form [formGroup]=\"searchForm\" #formDir='ngForm'>\n\n      <h4>Query</h4>\n      <mat-form-field class=\"example-form-field\">\n        <input matInput type=\"text\" formControlName='query' style='color:white' />\n        <button mat-button *ngIf=\"searchForm.controls.query.value\" matSuffix mat-icon-button aria-label=\"Clear\"\n          (click)=\"value=''\">\n          <mat-icon>close</mat-icon>\n        </button>\n      </mat-form-field>\n\n      <h4>Genre</h4>\n\n      <mat-checkbox class=\"example-margin\" (change)=\"changeGenreAndOr($event.checked)\">AND\n      </mat-checkbox>\n      <div style='padding:1.3em'>\n        <div style='width: 100%; display: flex; flex-wrap: wrap;'>\n          <section class=\"genre-selection\" *ngFor=\"let genre of genresList\">\n            <mat-checkbox class=\"genre-selection\" [(ngModel)]=\"genreListVal[genre.name]\"\n              [ngModelOptions]=\"{standalone: true}\" (change)=\"onCheckboxChange(genre.id, $event.checked)\">\n              {{genre.name}}\n            </mat-checkbox>\n          </section>\n        </div>\n      </div>\n\n      <h4>Release Year</h4>\n\n      <mat-form-field appearance=\"fill\">\n        <mat-label>From</mat-label>\n        <mat-select #releaseYearStartSelect formControlName='yearFrom'>\n          <mat-option *ngFor=\"let year of releaseYearsFromList\" (onSelectionChange)=\"onYearChange('from', $event)\"\n            [value]=\"year\">\n            {{year}}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n\n      <mat-form-field appearance=\"fill\">\n        <mat-label>To</mat-label>\n        <mat-select #releaseYearEndSelect formControlName='yearTo'>\n          <mat-option *ngFor=\"let year of releaseYearsToList\" [value]=\"year\"\n            (onSelectionChange)=\"onYearChange('to', $event)\">\n            {{year}}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n\n      <h4>Rating Average</h4>\n      <mat-form-field appearance=\"fill\">\n        <mat-label>Rating From</mat-label>\n        <mat-select #ratingsFromSelect formControlName='averageRatingFrom'>\n          <mat-option *ngFor=\"let rating of averageRatingsFromList\" [value]=\"rating.value\"\n            (onSelectionChange)='onAverageRatingChange(\"from\", $event)'>\n            {{rating.label}}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n      <mat-form-field appearance=\"fill\">\n        <mat-label>Rating To</mat-label>\n        <mat-select #ratingsToSelect formControlName='averageRatingTo'>\n          <mat-option *ngFor=\"let rating of averageRatingsToList\" [value]=\"rating.value\"\n            (onSelectionChange)='onAverageRatingChange(\"to\", $event)'>\n            {{rating.label}}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n\n      <h4>Sort By</h4>\n      <mat-form-field appearance=\"fill\" style='width:30ch'>\n        <mat-label></mat-label>\n        <mat-select #sortBySelect formControlName='sortBy'>\n          <mat-option *ngFor=\"let i of sortByList\" [value]=\"i.value\">\n            {{i.label}}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n\n    </form>\n\n    <button id='clearButton' class=\"accent-color\" mat-flat-button (click)='clearAdvancedSearch()'>Clear</button>\n    <button mat-flat-button color=\"warn\" (click)='goAdvancedSearch()'>Search</button>\n  </div>\n</div>\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-0a2f423f70edac45dd6d87a1e105eafe2af2f53f6f72e0e105b75fedeb60561be1830d0a20e7d00edfd1a133c97d3d2a78cb45f3c6c504fce9628faef0cf4e67",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'mdb-electron'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "getCurrentUser",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "syncTime",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FirebaseService } from './services/firebase.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit {\n  title = 'mdb-electron';\n  constructor(private firebaseService: FirebaseService) { }\n\n  ngOnInit() {\n    // this.getCurrentUser()\n    this.syncTime()\n  }\n\n  getCurrentUser() {\n    // this.firebaseService.getUser().then(e => {\n    //   this.store.dispatch(new SetUser(e))\n    // })\n  }\n\n  syncTime() {\n\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "firebaseService",
                        "type": "FirebaseService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "firebaseService",
                        "type": "FirebaseService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- <app-preferences></app-preferences> -->\n<!-- <app-details></app-details> -->\n\n<app-navigation></app-navigation>\n"
        },
        {
            "name": "BookmarksComponent",
            "id": "component-BookmarksComponent-4f50f5828177feef5c3c29a66ab28bc945d6ce42bd07c92efd19982261bc599d4bab603a81ab4380d67efeb627b1d01f0a933dceae0ef3e88d481f667d0ed209",
            "file": "src/app/modules/user/bookmarks/bookmarks.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-bookmarks",
            "styleUrls": [
                "./bookmarks.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./bookmarks.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "bookmarksList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "bookmarksSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "cardWidth",
                    "defaultValue": "'130px'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "hasMoreResults",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "hasResults",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "lastVal",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "listType",
                    "defaultValue": "CollectionName.Bookmark",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "moviesDisplayList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "orderBy",
                    "defaultValue": "'tmdbId'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "procSync",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "getBookmarkedMovies",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets all bookmarked movies by user.\n",
                    "description": "<p>Gets all bookmarked movies by user.</p>\n",
                    "modifierKind": [
                        131
                    ]
                },
                {
                    "name": "getMoreResults",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSync",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { UserDataService } from '@services/user-data/user-data.service';\nimport { IBookmark } from '@services/bookmark.service';\nimport { environment } from '@environments/environment';\nimport { Component, OnInit } from '@angular/core';\nimport { TMDB_SEARCH_RESULTS } from '../../../mock-data';\nimport { CollectionName } from '@services/firebase.service';\n\n@Component({\n  selector: 'app-bookmarks',\n  templateUrl: './bookmarks.component.html',\n  styleUrls: ['./bookmarks.component.scss']\n})\nexport class BookmarksComponent implements OnInit {\n\n  procSync = false\n\n  bookmarksList\n  moviesDisplayList = []\n  hasResults = false\n  cardWidth = '130px'\n  bookmarksSubscription\n  lastVal = 0\n  hasMoreResults = false\n  orderBy = 'tmdbId'\n  listType = CollectionName.Bookmark\n\n  constructor(\n    private userDataService: UserDataService,\n  ) { }\n\n  ngOnInit() {\n    this.getBookmarkedMovies()\n  }\n\n  onSync() {\n    // this.firebaseService.synchronizeBookmarks()\n    // this.bookmarksList.forEach(element => {\n    //   this.movieService.getFindMovie(element.imdbId)\n    // });\n  }\n\n  /**\n   * Gets all bookmarked movies by user.\n   */\n  async getBookmarkedMovies() {\n    if (environment.runConfig.useTestData) {\n      this.moviesDisplayList = TMDB_SEARCH_RESULTS.results\n    } else {\n      // commented for TEST\n      const res = await this.userDataService.getUserDataFirstPage(this.listType)\n      if (res.length) {\n        this.moviesDisplayList = res\n        this.lastVal = res[res.length - 1][this.listType][this.orderBy]\n        this.hasResults = true\n        if (res.length === 20) {\n          this.hasMoreResults = true\n        }\n      }\n    }\n  }\n\n  async getMoreResults() {\n    if (environment.runConfig.useTestData) {\n      this.moviesDisplayList = TMDB_SEARCH_RESULTS.results\n    } else {\n      // commented for TEST\n\n      const res = await this.userDataService.getUserDataPagination(this.listType, this.lastVal)\n      if (res.length) {\n        this.moviesDisplayList.push.apply(this.moviesDisplayList, res)\n        this.lastVal = res[res.length - 1][this.listType][this.orderBy]\n        if (res.length < 20) {\n          this.hasMoreResults = false\n        }\n      }\n\n    }\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./bookmarks.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userDataService",
                        "type": "UserDataService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "userDataService",
                        "type": "UserDataService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-selected-list></app-selected-list>\n<button class='btn btn-success' (click)='onSync()' data-toggle='tooltip' title='Synchronze your bookmarks.'>Sync\n  bookmarks</button>\n\n<div class=\"container-fluid\">\n\n  <div *ngIf='!hasResults'>\n    <h1 class='jumbo-message'>No bookmarked movies found</h1>\n  </div>\n  <div *ngIf='hasResults' class='movie-cards-display-grid'>\n    <app-card-list [movieList]='moviesDisplayList' [cardWidth]='cardWidth' [displayMode]='\"movie-cards-display-grid\"'\n      [listType]='listType'>\n    </app-card-list>\n    <div *ngIf=\"hasMoreResults\" style='width: 100%; text-align: center; height: 80px;'>\n      <h5 class='text-hyperlink' (click)='getMoreResults()'>Load more results...</h5>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "BrowseComponent",
            "id": "component-BrowseComponent-9b9ad758757b20398e0b1f8d35178b88cd4921fd20d8ff5fbe91b2ba2e9a17face5e9355f1e21141c1afc510719cb6a7e5af155bf816c7d27293d3c7de2998df",
            "file": "src/app/modules/user/browse/browse.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-browse",
            "styleUrls": [
                "./browse.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./browse.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "browseLists",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "getAcademyWinnersList",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-browse',\n  templateUrl: './browse.component.html',\n  styleUrls: ['./browse.component.scss']\n})\nexport class BrowseComponent implements OnInit {\n\n  constructor() { }\n\n  browseLists = []\n\n  ngOnInit() {\n    let academyWinnersList = {\n      name: 'Academy Winners',\n      contents: []\n    }\n    this.browseLists.push(academyWinnersList)\n  }\n\n  getAcademyWinnersList() {\n\n  }\n}\n\nexport enum BROWSE_TITLES {\n  COMPLETED_WATCHED,\n  INCOMPLETE_WATCHED,\n  BOOKMARKED,\n  FAVORITES,\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./browse.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container-fluid\" style='padding-top: 10vh'>\n  <div *ngIf=\"browseLists\">\n\n    <div *ngFor=\"let list of browseLists\">\n      <h3>{{list.name}}</h3>\n\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "BulkDownloadComponent",
            "id": "component-BulkDownloadComponent-114bfd406f716566797453175c13f57ad3d29e0165ded715a377106487487c032d53b5225d4f56cc1f7671d74d350ffeac41c7ceb5698c4b0adcfc94ae8b9a2f",
            "file": "src/app/modules/admin/bulk-download/bulk-download.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-bulk-download",
            "styleUrls": [
                "./bulk-download.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./bulk-download.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "displayedMovies",
                    "defaultValue": "DISPLAYEDMOVIES",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "result",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "sampleJson",
                    "defaultValue": "`{\n    \"userId\": 1,\n    \"id\": 1,\n    \"title\": \"delectus aut autem\",\n    \"completed\": false\n  }`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "selectedMovie",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "null",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "downloadAllChecked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 261,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDownloads all checked torrents from the front-end\n",
                    "description": "<p>Downloads all checked torrents from the front-end</p>\n"
                },
                {
                    "name": "downloadMovie",
                    "args": [
                        {
                            "name": "movie",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 226,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "movie",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTorrentByQuery",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 218,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getTorrentByTitle",
                    "args": [
                        {
                            "name": "movie",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "movie",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTorrents",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "goToMovie",
                    "args": [
                        {
                            "name": "movie",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 253,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGo to movie's detail\n",
                    "description": "<p>Go to movie&#39;s detail</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6978,
                                "end": 6983,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "movie"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6972,
                                "end": 6977,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>selected movie object</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSelectMovie",
                    "args": [
                        {
                            "name": "movie",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 222,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "movie",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeMovie",
                    "args": [
                        {
                            "name": "movie",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 236,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRemoves movie from the displayed movies list\n",
                    "description": "<p>Removes movie from the displayed movies list</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6455,
                                "end": 6460,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "movie"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6449,
                                "end": 6454,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>movie to remove</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { IpcService } from '@services/ipc.service'\nimport { DISPLAYEDMOVIES, MOVIEGENRES } from '../../../mock-data'\nimport { Router, ActivatedRoute } from '@angular/router'\nimport { DataService } from '@services/data.service'\nimport { TorrentService } from '@services/torrent/torrent.service'\n\n@Component({\n  selector: 'app-bulk-download',\n  templateUrl: './bulk-download.component.html',\n  styleUrls: ['./bulk-download.component.scss']\n})\nexport class BulkDownloadComponent implements OnInit {\n\n  displayedMovies = DISPLAYEDMOVIES\n  selectedMovie = null;\n  sampleJson = `{\n    \"userId\": 1,\n    \"id\": 1,\n    \"title\": \"delectus aut autem\",\n    \"completed\": false\n  }`\n  result: any\n\n  constructor(\n    private ipcService: IpcService,\n    private router: Router,\n    private activatedRoute: ActivatedRoute,\n    private dataService: DataService) {\n  }\n\n  ngOnInit() {\n\n    this.dataService.selectedMovies.subscribe(data => {\n      data.forEach(element => {\n        element.year = element.release_date.slice(0, element.release_date.indexOf('-'));\n        this.displayedMovies = data;\n      });\n    })\n  }\n  // getTorrent\n\n  getTorrents() {\n    var localDisplayedMovies = this.displayedMovies\n\n    // localDisplayedMovies.forEach(movie => {\n    //   movie.torrents = this.getTorrentByTitle(movie)\n    // });\n  }\n\n  getTorrentByTitle(movie) {\n    const title = movie.title;\n    const year = movie.year;\n    let torrents = null\n    // assuming getting torrent from file now works\n    switch (movie.imdbId) {\n      case 'tt2015381':\n        torrents = [\n          {\n            id: 1,\n            name: 'Guardians of the Galaxy (2014) 1080p BrRip x264 - YIFY',\n            size: 1988939229,\n            hash: '11A2AC68A11634E980F265CB1433C599D017A759',\n            checked: false\n          },\n          {\n            id: 1,\n            name: 'Guardians of the Galaxy Vol. 2 (2017) 720p BrRip x264 - VPPV',\n            size: 1215947108,\n            hash: '68132C479348C1AA2618D55C8BBEC6EB2597A5BA',\n            checked: false\n          },\n        ]\n        break;\n      case 'tt5215952':\n        torrents = [\n          {\n            id: 1,\n            name: 'The.Wailing.2016.1080p.BluRay.10bit.HEVC-MkvCage [aka Gokseong]',\n            size: 3976321027,\n            hash: '2F157306E5114EA8044302586A89FDC4E0FAC2A1',\n            checked: false\n          },\n        ]\n        break;\n      case 'tt1213641':\n        torrents = [\n          {\n            id: 1,\n            name: 'First.Man.2018.HC.HDRip.XviD.AC3-EVO',\n            size: 1474599225,\n            hash: '885CCCAD7F1942A515DA564FCF62933A105931DB',\n            checked: false\n          },\n          {\n            id: 2,\n            name: 'First.Man.2018.720p.BRRip.x264.MkvCage',\n            size: 1375985558,\n            hash: '712837DCAA3F4275B89E640EB21DAE72D2E0C38B',\n            checked: false\n          },\n        ]\n        break;\n      case 'tt0099785':\n        torrents = [\n          {\n            id: 1,\n            name: 'Home Alone (1990) 1080p BrRip x264 - YIFY',\n            size: 1767740507,\n            hash: '5FEFAC61C0F42FFC43946B3379A540D1A38F6480',\n            checked: false\n          }\n        ]\n        break;\n      // case 'tt0087538':\n      //   let torrents = [\n      //     {\n      //       id: 1,\n      //       name: 'Guardians of the Galaxy (2014) 1080p BrRip x264 - YIFY',\n      //       size: 1988939229,\n      //       hash: '11A2AC68A11634E980F265CB1433C599D017A759',\n      //       checked: false\n      //     },\n      //   ]\n      //   return torrents\n\n      //   break;\n      // case 'tt0092099':\n      //   let torrents = [\n      //     {\n      //       id: 1,\n      //       name: 'Top Gun (1986) 1080p BrRip x264 - 1.29GB - YIFY',\n      //       size: 1988939229,\n      //       hash: '11A2AC68A11634E980F265CB1433C599D017A759',\n      //       checked: false\n      //     },\n      //     {\n      //       id: 1,\n      //       name: 'Top Gun (1986) 720p BrRip x264 - 750MB - YIFY',\n      //       size: 786726662,\n      //       hash: '1E450B7823C44962D60932EDADF18E07D2B0A663',\n      //       checked: false\n      //     },\n      //   ]\n      //   return torrents\n\n      //   break;\n      // case 'tt0105236':\n      //   let torrents = [\n      //     {\n      //       id: 1,\n      //       name: 'Guardians of the Galaxy (2014) 1080p BrRip x264 - YIFY',\n      //       size: 1988939229,\n      //       hash: '11A2AC68A11634E980F265CB1433C599D017A759',\n      //       checked: false\n      //     },\n      //   ]\n      //   return torrents\n\n      //   break;\n      // case 'tt0145487':\n      //   let torrents = [\n      //     {\n      //       id: 1,\n      //       name: 'Guardians of the Galaxy (2014) 1080p BrRip x264 - YIFY',\n      //       size: 1988939229,\n      //       hash: '11A2AC68A11634E980F265CB1433C599D017A759',\n      //       checked: false\n      //     },\n      //   ]\n      //   return torrents\n\n      //   break;\n      // case 'tt0348150':\n      //   let torrents = [\n      //     {\n      //       id: 1,\n      //       name: 'Guardians of the Galaxy (2014) 1080p BrRip x264 - YIFY',\n      //       size: 1988939229,\n      //       hash: '11A2AC68A11634E980F265CB1433C599D017A759',\n      //       checked: false\n      //     },\n      //   ]\n      //   return torrents\n\n      //   break;\n      // case 'tt1213641':\n      //   let torrents = [\n      //     {\n      //       id: 1,\n      //       name: 'Guardians of the Galaxy (2014) 1080p BrRip x264 - YIFY',\n      //       size: 1988939229,\n      //       hash: '11A2AC68A11634E980F265CB1433C599D017A759',\n      //       checked: false\n      //     },\n      //   ]\n      //   return torrents\n\n      //   break;\n      // case 'tt0099785':\n      //   let torrents = [\n      //     {\n      //       id: 1,\n      //       name: 'Guardians of the Galaxy (2014) 1080p BrRip x264 - YIFY',\n      //       size: 1988939229,\n      //       hash: '11A2AC68A11634E980F265CB1433C599D017A759',\n      //       checked: false\n      //     },\n      //   ]\n      //   return torrents\n      //   break;\n      default:\n        break;\n    }\n    return torrents\n  }\n\n  getTorrentByQuery() {\n\n  }\n\n  onSelectMovie(movie: any) {\n    this.selectedMovie = movie\n  }\n\n  downloadMovie(movie) {\n    const torrentsToDownload = movie[0].torrents.filter(obj => {\n      return obj.checked === true\n    })\n  }\n\n  /**\n   * Removes movie from the displayed movies list\n   * @param movie movie to remove\n   */\n  removeMovie(movie) {\n    const newDisplayedMovies = this.displayedMovies.filter(obj => {\n      console.log(obj.id != movie.id)\n      return obj.id != movie.id\n    })\n    console.log('newDisplayedMovies', newDisplayedMovies);\n    this.displayedMovies = newDisplayedMovies\n    // const newDisplayedMovies = this.displayedMovies.filter(obj => {\n    //   return obj.imdbId != movie.imdbId\n    // })\n    // this.displayedMovies = newDisplayedMovies\n  }\n\n  /**\n   * Go to movie's detail\n   * @param movie selected movie object\n   */\n  goToMovie(movie) {\n    let tmdbId = movie.id\n    this.router.navigate([`/details/${tmdbId}`], { relativeTo: this.activatedRoute })\n  }\n  // https://yts.lt/api/v2/movie_suggestions.json?movie_id=10\n  /**\n   * Downloads all checked torrents from the front-end\n   */\n  downloadAllChecked() {\n    let torrentsToDownload = [];\n    this.displayedMovies.forEach(movie => {\n      const movieTorrents = movie.torrents\n      if (movieTorrents) {\n        // torrentsToDownload.push(movie.torrents.filter(torrent => {\n        //   return torrent.checked === true;\n        // }));\n        movieTorrents.forEach(torrent => {\n          if (torrent.checked == true) {\n            torrentsToDownload.push(torrent)\n          }\n        });\n      }\n    });\n    console.log(torrentsToDownload);\n  }\n}\n\nexport class SelectedMovie {\n  title: string;\n  year: number;\n  plot: string;\n  imdbId: string;\n}\nexport class TorrentResult {\n  status: string;\n  statusMessage: string;\n}\n\nexport class Test1 {\n  userId: number;\n  id: number;\n  title: string;\n  completed: boolean;\n}\n\nclass SerializationHelper {\n  static toInstance<T>(obj: T, json: string): T {\n    const jsonObj = JSON.parse(json);\n    const fromJSONString = 'fromJSON'\n    if (typeof obj[fromJSONString] === 'function') {\n      obj[fromJSONString](jsonObj);\n    }\n    else {\n      for (var propName in jsonObj) {\n        obj[propName] = jsonObj[propName]\n      }\n    }\n\n    return obj;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".tab {\n    // float: left;\n    border: 1px solid #cccccc;\n    background-color: #f1f1f1;\n    // width: 30%;\n    //   height: 300px\n  }\n  \n  .tab button {\n    display: block;\n    background-color: inherit;\n    color: black;\n    padding: 22px 16px;\n    width: 100%;\n    border: none;\n    outline: none;\n    text-align: left;\n    cursor: pointer;\n    transition: 0.3s;\n    font-size: 17px;\n  }\n  \n  .tab button:hover {\n    background-color: #ddd;\n  }\n  \n  .tab button.active {\n    background-color: #ccc;\n  }\n  \n  .image-holder {\n    border-color: black;\n    border-style: solid;\n    height: width+150%;\n    width: 100%;\n  }\n  .scroll-column{\n    height:80vh;\n    overflow-y: scroll;\n  }",
                    "styleUrl": "./bulk-download.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "ipcService",
                        "type": "IpcService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dataService",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "ipcService",
                        "type": "IpcService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dataService",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- <h1 data-toggle='tooltip' title='ggg'>\n  bulk-download works!\n</h1> -->\n\n<!-- <div class='container'>\n  <button type='button' class='btn btn-secondary' data-toggle='popover' title='Popup title'\n    data-content='Popup content'>Trigger</button>\n</div> -->\n\n<div class='container-fluid' style='padding-top: 10vh'>\n  <div class='row'>\n    <div class='col-4 scroll-column'>\n      <div class='tab' *ngFor='let movie of displayedMovies'>\n        <button (click)='onSelectMovie(movie)'>{{movie.title}}</button>\n      </div>\n    </div>\n    <div class='col-4 scroll-column' style='padding-left: 5vw;padding-top: 5vh'>\n      <div *ngIf='selectedMovie'>\n        <!-- <div *ngFor='let torrent of selectedMovie[0].torrents'>\n          <div class='checkbox'>\n            <label>\n              <input class=\"form-check-input\" type=\"checkbox\" [(ngModel)]='torrent.checked'\n                [ngModelOptions]='{standalone:true}' id=\"defaultCheck1\" value=\"\">{{torrent.name}}</label>\n          </div>\n        </div> -->\n      </div>\n    </div>\n    <div class='col-4 scroll-column'>\n      <div class='tab-content'>\n        <div *ngIf='selectedMovie==null'>\n          <h1>Select a movie from the tab on the left</h1>\n        </div>\n        <div *ngIf='selectedMovie'>\n          <div class='image-holder'>\n          </div>\n          <h2>{{selectedMovie.title}} ({{selectedMovie.year}})</h2>\n          <label>{{selectedMovie.overview}}</label>\n          <button class='btn btn-primary' (click)='goToMovie(selectedMovie)' data-toggle=\"tooltip\"\n            title=\"More info\">More info</button>\n          <button class='btn btn-success' (click)='downloadMovie(selectedMovie)' data-toggle=\"tooltip\"\n            title=\"Download all selected torrents for this movie\">Download</button>\n          <button class='btn btn-danger' (click)='removeMovie(selectedMovie)' data-toggle=\"tooltip\"\n            title=\"Remove movie\">Remove</button>\n        </div>\n      </div>\n    </div>\n  </div>\n  <button class='btn btn-success' (click)='downloadAllChecked()' data-toggle=\"tooltip\"\n    title=\"Download all selected torrents\">Download\n    all checked</button>\n  <button class='btn '>Back to top</button>\n</div>"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-4ef205c97a334c309aa4001c8ab4a6d9571dcae18d0e85aaf0d367467ab5d3a9f13ab3573726f1fcb409bc9b49894dadfb80b1bbe1b6ba7041455ad9d4922004",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 711,
                            "end": 724,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 712,
                                "end": 720,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "CardListComponent",
            "id": "component-CardListComponent-6e0f283a4a330bf0f39097261274324b4e4c1f1b842cacc131be8aac057ea7da060527e5c8d57dae522b1d2b33c287adc238fb619459150276db5af0e6f43577",
            "file": "src/app/shared/components/card-list/card-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-card-list",
            "styleUrls": [
                "./card-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./card-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "cardWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "displayMode",
                    "defaultValue": "'d-inline-flex'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "listType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "movieList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "any[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_movieList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MDBMovie[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "movieAndUserDataList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMovieAndUserData[]",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "methodsClass": [
                {
                    "name": "collectIds",
                    "args": [],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 225,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "createDividedList",
                    "args": [
                        {
                            "name": "idList",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "listLength",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 239,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDivides a list of Ids\n",
                    "description": "<p>Divides a list of Ids</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 7884,
                                "end": 7890,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "idList"
                            },
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7878,
                                "end": 7883,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 7903,
                                "end": 7913,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "listLength"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7897,
                                "end": 7902,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "tagName": {
                                "pos": 7920,
                                "end": 7927,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>list of split list <code>[[],[]]</code></p>\n"
                        }
                    ]
                },
                {
                    "name": "curateUserData",
                    "args": [
                        {
                            "name": "dataType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "docs",
                            "type": "firebase.firestore.QuerySnapshot | IProfileData[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOrganizes user data and binds them into movie cards.\n",
                    "description": "<p>Organizes user data and binds them into movie cards.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "dataType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "docs",
                            "type": "firebase.firestore.QuerySnapshot | IProfileData[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMoviesUserData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets the user data like: bookmark, watched, video.\n",
                    "description": "<p>Gets the user data like: bookmark, watched, video.</p>\n"
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "renderHighlight",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 191,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, OnChanges } from '@angular/core';\nimport { BookmarkService, IBookmark } from '@services/bookmark.service';\nimport { WatchedService, IWatched } from '@services/watched.service';\nimport { LibraryService } from '@services/library.service';\nimport { environment } from '@environments/environment';\nimport { UserDataService } from '@services/user-data/user-data.service';\nimport { IProfileData } from '@models/profile-data.model';\nimport { MDBMovie } from '@models/mdb-movie.model';\nimport ObjectUtil from '@utils/object.utils';\n\n@Component({\n  selector: 'app-card-list',\n  templateUrl: './card-list.component.html',\n  styleUrls: ['./card-list.component.scss']\n})\nexport class CardListComponent implements OnInit, OnChanges {\n\n  @Input() cardWidth: string\n  @Input() displayMode: string = 'd-inline-flex'\n  @Input() listType: string\n  _movieList: MDBMovie[]\n  @Input()\n  set movieList(inputMessage: any[]) {\n    inputMessage.forEach(inputMovie => {\n      this.movieAndUserDataList.push({ movie: inputMovie, userData: null })\n    })\n    this._movieList = inputMessage\n  }\n  get movieList(): any[] {\n    return this._movieList;\n  }\n\n\n  movieAndUserDataList: IMovieAndUserData[] = []\n\n  constructor(\n    private bookmarkService: BookmarkService,\n    private watchedService: WatchedService,\n    private libraryService: LibraryService,\n    private userDataService: UserDataService\n  ) { }\n\n  ngOnInit() {\n    this.renderHighlight()\n    this.getMoviesUserData()\n  }\n\n  ngOnChanges(changes: any): void {\n    console.log('changes',changes)\n    //Called before any other lifecycle hook. Use it to inject dependencies, but avoid any serious work here.\n    //Add '${implements OnChanges}' to the class.\n\n  }\n  /**\n   * Gets the user data like: bookmark, watched, video.\n   */\n  getMoviesUserData() {\n    const idList = this.collectIds()\n    const listLength = idList.length\n    const arr2 = this.createDividedList(idList, listLength)\n\n    // const arr2 = thisidList, listLength)\n    // tslint:disable-next-line:prefer-for-of\n    for (let index = 0; index < arr2.length; index++) {\n      const queryList = arr2[index];\n\n      if (this.listType === 'none') { // all types of user data.\n        this.userDataService.getMovieUserDataInList(queryList).then((docsList: IProfileData[]) => {\n          // if (docs.isFirebaseData && docs.isFirebaseData === true) {\n          //   const localDocs: Array<QueryDocumentSnapshot<any>>[] = docs.data\n          //   if (localDocs[0].length > 0) {\n          //     localDocs[0].forEach(element => {\n          //       const movie = this.movieList.find(e => e.id === element.data().tmdbId)\n          //       movie['bookmark'] = element.data()\n          //       movie['bookmark'].id = element.id\n          //     })\n          //   }\n          //   if (localDocs[1].length > 0) {\n          //     localDocs[1].forEach(element => {\n          //       const movie = this.movieList.find(e => e.id === element.data().tmdbId)\n          //       movie['watched'] = element.data()\n          //       movie['watched'].id = element.id\n          //     })\n          //   }\n          // }\n\n          if (!ObjectUtil.isEmpty(docsList)) {\n            if (environment.runConfig.springMode) {\n              this.movieAndUserDataList.forEach((movieAndUserData: IMovieAndUserData) => {\n                const doc = docsList.find((doc: IProfileData) => movieAndUserData.movie.tmdbId === doc.tmdbId)\n                movieAndUserData.userData = doc\n              })\n            } else {\n              docsList.forEach(data => {\n\n                // validate if works with IPC\n                this.movieAndUserDataList.forEach((movieAndUserData: IMovieAndUserData) => {\n                  const doc = docsList.find((doc: IProfileData) => movieAndUserData.movie.tmdbId === doc.tmdbId)\n                  movieAndUserData.userData = doc\n                })\n              });\n            }\n          }\n        })\n      } else {\n        if (this.listType !== 'bookmark') {\n          this.bookmarkService.getBookmarksInList(queryList).then(docs => {\n            const dataType = 'bookmark'\n            this.curateUserData(dataType, docs)\n          })\n        }\n        if (this.listType !== 'watched') {\n          this.watchedService.getWatchedInList(queryList).then(docs => {\n            const dataType = 'watched'\n            this.curateUserData(dataType, docs)\n          })\n        }\n        if (this.listType !== 'library') {\n          this.libraryService.getMoviesFromLibraryInList(queryList).then(docs => {\n            const dataType = 'library'\n            this.curateUserData(dataType, docs)\n          })\n        }\n      }\n    }\n  }\n\n  /**\n   * Organizes user data and binds them into movie cards.\n   */\n  curateUserData(dataType: string, docs: firebase.firestore.QuerySnapshot | IProfileData[]): void {\n    const dataList = []\n\n    docs.forEach(doc => {\n      const docData = environment.runConfig.firebaseMode ? doc.data() : doc\n      const dTmdbId = docData.tmdbId\n      const dTitle = docData.title\n      const dYear = docData.year\n      let myData\n      switch (dataType) {\n        case 'bookmark':\n          const bm: IBookmark = {\n            id: doc.id ? doc.id : '',\n            tmdbId: dTmdbId ? dTmdbId : 0,\n            title: dTitle ? dTitle : '',\n            year: dYear ? dYear : 0\n          }\n          myData = bm\n          break;\n        case 'watched':\n          const wtchd: IWatched = {\n            id: doc.id ? doc.id : '',\n            tmdbId: dTmdbId ? dTmdbId : 0,\n            title: dTitle ? dTitle : '',\n            year: dYear ? parseInt(dYear, 10) : 0,\n            percentage: docData.percentage ? docData.percentage : 100\n          }\n          myData = wtchd\n          break;\n        case 'video':\n          // const vid: IVideo = {\n          //   id: doc.id ? doc.id : '',\n          //   tmdbId: dTmdbId ? dTmdbId : 0,\n          //   title: dTitle ? dTitle : '',\n          //   year: dYear ? dYear : 0,\n          //   videoUrl: docData.videoUrl ? docData.videoUrl : ''\n          // }\n          const vid = {\n            id: doc.id,\n            tmdbId: docData.tmdbId,\n            videoUrl: docData.fullFilePath\n          }\n          myData = vid\n          break;\n        case 'none':\n          break;\n        default:\n          break;\n      }\n      dataList.push(myData)\n    })\n    this.movieList.forEach(movie => {\n      dataList.forEach(data => {\n        if (data.tmdbId === movie.id) {\n          movie[dataType] = data\n        }\n      });\n    })\n  }\n\n  renderHighlight() {\n    // this.moviesList$.subscribe(moviesResult => {\n    //   console.log('moviesresult: ', moviesResult)\n\n    //   if (moviesResult.change === 'add') {\n    //     this.movieList.forEach(element => {\n    //       if (moviesResult.idChanged === element.id) {\n    //         element.isHighlighted = true\n    //       }\n    //     })\n    //   } else if (moviesResult.change === 'remove') {\n    //     this.movieList.forEach(element => {\n    //       if (moviesResult.idChanged === element.id) {\n    //         element.isHighlighted = false\n    //       }\n    //     })\n    //   } else if (moviesResult.change === 'clear') {\n    //     this.movieList.forEach(element => {\n    //       element.isHighlighted = false\n    //     })\n    //   } else if (moviesResult.change === 'watched') {\n    //     this.movieList.forEach(element => {\n    //       moviesResult.idChanged.forEach(mrId => {\n    //         if (mrId === element.id) {\n    //           // element.isWatched = true\n    //           // element.watchedProgress = \"100%\"\n    //           // this.cdr.detectChanges()\n    //         }\n    //       });\n    //     })\n    //   }\n    // });\n  }\n\n  collectIds() {\n    const idList = []\n    this.movieList.forEach(e => {\n      idList.push(e.id)\n    }); // lodash is not faster than this.\n    return idList\n  }\n\n  /**\n   * Divides a list of Ids\n   * @param idList\n   * @param listLength\n   * @returns list of split list `[[],[]]`\n   */\n  createDividedList(idList: number[], listLength: number) {\n    const toReturn = []\n    let temparray\n    // const chunk = 10; // Firebase's max length in IN query.\n    const chunk = environment.runConfig.firebaseMode ? 10 : 20\n    let a = 0\n    for (let i = 0; i < listLength; i += chunk) {\n      temparray = idList.slice(i, i + chunk);\n      toReturn[a] = temparray\n      a++\n    }\n    return toReturn\n  }\n\n}\n\ninterface IMovieAndUserData {\n  movie: MDBMovie;\n  userData?: IProfileData\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./card-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "bookmarkService",
                        "type": "BookmarkService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "watchedService",
                        "type": "WatchedService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "libraryService",
                        "type": "LibraryService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userDataService",
                        "type": "UserDataService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "bookmarkService",
                        "type": "BookmarkService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "watchedService",
                        "type": "WatchedService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "libraryService",
                        "type": "LibraryService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userDataService",
                        "type": "UserDataService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "accessors": {
                "movieList": {
                    "name": "movieList",
                    "setSignature": {
                        "name": "movieList",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "inputMessage",
                                "type": "any[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 23,
                        "jsdoctags": [
                            {
                                "name": "inputMessage",
                                "type": "any[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "movieList",
                        "type": "[]",
                        "returnType": "any[]",
                        "line": 29
                    }
                }
            },
            "templateData": "<div [ngClass]=\"displayMode\">\n  <!-- 'd-inline-flex' or 'movie-cards-display-grid' -->\n  <div id=\"results-panel\" *ngFor=\"let movieAndUserData of movieAndUserDataList\">\n    <app-movie-card [movie]='movieAndUserData.movie' [cardWidth]='cardWidth' [library]='null'\n      [userData]='movieAndUserData.userData'>\n    </app-movie-card>\n  </div>\n</div>\n"
        },
        {
            "name": "CreditsComponent",
            "id": "component-CreditsComponent-1269fe5216819f1ee78702811e02c93478a3679a2f016e7f86ad16d426947bc607054b1a773874cd9bf96d181a68946362bc12dcf95228bfa338abbadb673d3c",
            "file": "src/app/modules/movie/credits/credits.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-credits",
            "styleUrls": [
                "./credits.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./credits.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "castList",
                    "defaultValue": "TMDB_FULL_MOVIE_DETAILS.credits.cast",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "crewList",
                    "defaultValue": "TMDB_FULL_MOVIE_DETAILS.credits.crew",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "goToPerson",
                    "args": [
                        {
                            "name": "id",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { TMDB_FULL_MOVIE_DETAILS } from '../../../mock-data-movie-details';\n\n@Component({\n  selector: 'app-credits',\n  templateUrl: './credits.component.html',\n  styleUrls: ['./credits.component.scss']\n})\nexport class CreditsComponent implements OnInit, OnDestroy {\n\n  castList = TMDB_FULL_MOVIE_DETAILS.credits.cast\n  crewList = TMDB_FULL_MOVIE_DETAILS.credits.crew\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n  ngOnDestroy() {\n\n  }\n  goToPerson(id) {\n    console.log(id);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./credits.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 12
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "\n<div *ngFor=\"let cast of castList\">\n  <div class='row'>\n    <div class='col-4'>\n      <div style='background-color: white;border-radius: 50%;height: 50px;width: 50px;'></div>\n    </div>\n    <div class='col-4'>\n      <p (click)='goToPerson(cast.id)' class='text-hyperlink'>{{cast.name}}</p>\n    </div>\n    <div class='col-4'>\n      <p>{{cast.character}}</p>\n    </div>\n  </div>\n</div>\n<div *ngFor=\"let crew of crewList\">\n  <div class='row'>\n    <div class='col-4'>\n      <div style='background-color: white;border-radius: 50%;height: 50px;width: 50px;'></div>\n    </div>\n    <div class='col-4'>\n      <p (click)='goToPerson(crew.id)' class='text-hyperlink'>{{crew.name}}</p>\n    </div>\n    <div class='col-4'>\n      <p>{{crew.job}}</p>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "DashboardComponent",
            "id": "component-DashboardComponent-4bafc69a6eecbdf3910304cd882ed51aa9bfd3b1c2795a7c591446282887edc8193602e05543619b434785e9fbcc8baee1d8ce5e4f463a081418a79083bf7025",
            "file": "src/app/components/dashboard/view/dashboard.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dashboard",
            "styleUrls": [
                "./dashboard.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dashboard.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "browserConnection",
                    "defaultValue": "navigator.onLine",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "cardWidth",
                    "defaultValue": "'130px'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "dashboardLists",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [
                {
                    "name": "getMoviesFromLibrary",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets movies from library\n",
                    "description": "<p>Gets movies from library</p>\n"
                },
                {
                    "name": "getNowShowingMovies",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets movies showing in theaters in current date\n",
                    "description": "<p>Gets movies showing in theaters in current date</p>\n"
                },
                {
                    "name": "getTopGenreMovie",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets top-rated movies by genre.\n",
                    "description": "<p>Gets top-rated movies by genre.</p>\n"
                },
                {
                    "name": "getTopMoviesFromYear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets top-rated movies from year\n",
                    "description": "<p>Gets top-rated movies from year</p>\n"
                },
                {
                    "name": "getYear",
                    "args": [
                        {
                            "name": "releaseDate",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 156,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets the year.\n",
                    "description": "<p>Gets the year.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4782,
                                "end": 4793,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "releaseDate"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4776,
                                "end": 4781,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>release date with format YYYY-MM-DD</p>\n"
                        }
                    ]
                },
                {
                    "name": "goToMovie",
                    "args": [
                        {
                            "name": "id",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGoes to detail of the selected movie.\n",
                    "description": "<p>Goes to detail of the selected movie.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "scrollNext",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "scrollPrev",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "sendToMovieService",
                    "args": [
                        {
                            "name": "paramMap",
                            "type": "Map<TmdbParameters | any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "listName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSends parameter to the API.\n",
                    "description": "<p>Sends parameter to the API.</p>\n",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2695,
                                "end": 2703,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "paramMap"
                            },
                            "type": "Map<TmdbParameters | any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2689,
                                "end": 2694,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>parameters map to pass to the API</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2750,
                                "end": 2758,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "listName"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2744,
                                "end": 2749,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the name of the list</p>\n"
                        }
                    ]
                },
                {
                    "name": "sideScroll",
                    "args": [
                        {
                            "name": "element",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "direction",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "speed",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "distance",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "step",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe side scroll by button.\n",
                    "description": "<p>The side scroll by button.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4210,
                                "end": 4217,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "element"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4204,
                                "end": 4209,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the element</p>\n"
                        },
                        {
                            "name": {
                                "pos": 4242,
                                "end": 4251,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "direction"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4236,
                                "end": 4241,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>left or right</p>\n"
                        },
                        {
                            "name": {
                                "pos": 4278,
                                "end": 4283,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "speed"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4272,
                                "end": 4277,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>how fast</p>\n"
                        },
                        {
                            "name": {
                                "pos": 4305,
                                "end": 4313,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "distance"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4299,
                                "end": 4304,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>how far</p>\n"
                        },
                        {
                            "name": {
                                "pos": 4334,
                                "end": 4338,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "step"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4328,
                                "end": 4333,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>step</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core'\nimport { MovieService } from '@services/movie/movie.service'\nimport { DataService } from '@services/data.service'\nimport { Router, ActivatedRoute } from '@angular/router'\nimport { TmdbParameters, } from '@models/interfaces'\nimport { GENRES } from '@shared/constants'\nimport { DomSanitizer } from '@angular/platform-browser'\nimport GeneralUtil from '@utils/general.util'\nimport { MDBMovie } from '@models/mdb-movie.model';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss'],\n})\nexport class DashboardComponent implements OnInit {\n\n  constructor(\n    private dataService: DataService,\n    private movieService: MovieService,\n    private router: Router,\n    private activatedRoute: ActivatedRoute,\n    private domSanitizer: DomSanitizer,\n  ) { }\n\n  browserConnection = navigator.onLine\n  dashboardLists = []\n  cardWidth = '130px'\n\n  ngOnInit() {\n    this.getNowShowingMovies()\n    // this.getTopMoviesFromYear()\n    // this.getTopGenreMovie()\n  }\n\n  /**\n   * Gets movies showing in theaters in current date\n   */\n  getNowShowingMovies() {\n    const sDate = new Date()\n    const today = sDate.getFullYear() + '-' + ('0' + (sDate.getMonth() + 1)).slice(-2) + '-' + ('0' + sDate.getDate()).slice(-2)\n    sDate.setDate(sDate.getDate() - 21)\n    const threeWeeksAgo = sDate.getFullYear() + '-' + ('0' + (sDate.getMonth() + 1)).slice(-2) +\n      '-' + ('0' + sDate.getDate()).slice(-2)\n    const paramMap = new Map<TmdbParameters, any>();\n    paramMap.set(TmdbParameters.PrimaryReleaseDateGreater, threeWeeksAgo);\n    paramMap.set(TmdbParameters.PrimaryReleaseDateLess, today);\n    this.sendToMovieService(paramMap, `New Releases`)\n  }\n\n  /**\n   * Gets top-rated movies from year\n   */\n  getTopMoviesFromYear() {\n    const sDate = new Date()\n    const minimumYear = 1940\n    const randYear = Math.round(\n      Math.random() * ((sDate.getFullYear() - 1) - minimumYear) + minimumYear\n    )\n    const paramMap = new Map<TmdbParameters, any>();\n    paramMap.set(TmdbParameters.PrimaryReleaseYear, randYear);\n    this.sendToMovieService(paramMap, `Top movies of ${randYear}`)\n  }\n\n  /**\n   * Gets top-rated movies by genre.\n   */\n  getTopGenreMovie() {\n    const TMDB_GENRE_LENGTH = 19 // up to index 19 is valid tmdb genre\n    const GENRE_INDEX = Math.floor(Math.random() * (TMDB_GENRE_LENGTH))\n    const CHOSEN_GENRE = GENRES[GENRE_INDEX]\n    const paramMap = new Map<TmdbParameters, any>();\n    paramMap.set(TmdbParameters.WithGenres, CHOSEN_GENRE.id);\n    this.sendToMovieService(paramMap, `Top ${CHOSEN_GENRE.name}`)\n  }\n\n  /**\n   * Sends parameter to the API.\n   * @param paramMap parameters map to pass to the API\n   * @param listName the name of the list\n   */\n  async sendToMovieService(paramMap: Map<TmdbParameters, any>, listName: string) {\n    const data = await this.movieService.getMoviesDiscover(paramMap).toPromise()\n    let myParam2: { [k: string]: any } = {};\n    for (let entry of paramMap.entries()) {\n      myParam2[entry[0]] = entry[1]\n    }\n    let mappedRes = [];\n    data.results.forEach(e=>{\n      mappedRes.push(new MDBMovie(e));\n    })\n    const innerList = {\n      name: listName,\n      data: mappedRes,\n      queryParams: paramMap\n    }\n    this.dashboardLists.push(innerList)\n    this.dataService.addDashboardData(innerList.data)\n  }\n\n  /**\n   * Gets movies from library\n   */\n  getMoviesFromLibrary() {\n    console.log('getMoviesFromLibrary dashboard.component')\n    // this.ipcService.getMoviesFromLibrary()\n  }\n\n  /**\n   * Goes to detail of the selected movie.\n   * @param movie the movie selected\n   */\n  goToMovie(id: any) {\n    const highlightedId = id;\n    this.dataService.updateHighlightedMovie(highlightedId);\n    this.router.navigate([`/details/${highlightedId}`], { relativeTo: this.activatedRoute });\n  }\n\n  scrollPrev() {\n    const container = document.getElementById('topMoviesFromYearPanel')\n    this.sideScroll(container, 'left', 25, 100, 10)\n  }\n\n  scrollNext() {\n    const container = document.getElementById('topMoviesFromYearPanel')\n    this.sideScroll(container, 'right', 25, 100, 10)\n  }\n\n  /**\n   * The side scroll by button.\n   * @param element the element\n   * @param direction left or right\n   * @param speed how fast\n   * @param distance how far\n   * @param step step\n   */\n  sideScroll(element, direction, speed, distance, step) {\n    let scrollAmount = 0\n    const slideTimer = setInterval(() => {\n      if (direction === 'left') {\n        element.scrollLeft -= step\n      } else {\n        element.scrollLeft += step\n      }\n      scrollAmount += step\n      if (scrollAmount >= distance) {\n        window.clearInterval(Number(slideTimer))\n      }\n    }, speed)\n  }\n\n  /**\n   * Gets the year.\n   * @param releaseDate release date with format YYYY-MM-DD\n   */\n  getYear(releaseDate: string) {\n    return GeneralUtil.getYear(releaseDate)\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "* {\n  color: antiquewhite\n}\n",
                    "styleUrl": "./dashboard.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dataService",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "movieService",
                        "type": "MovieService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "domSanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "dataService",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "movieService",
                        "type": "MovieService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "domSanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-selected-list></app-selected-list>\n\n<div class=\"container-fluid\" style='padding-top: 10vh'>\n  <div *ngIf=\"dashboardLists\">\n    <div *ngFor=\"let list of dashboardLists\">\n\n      <app-horizontal-card-list [title]='list.name' [moviesList]='list.data' [seeAllLink]='\"/discover\"' [queryParams]='list.queryParams'></app-horizontal-card-list>\n\n    </div>\n  </div>\n\n  <div *ngIf='!browserConnection'>\n    <h1>You are offline</h1>\n  </div>\n</div>\n"
        },
        {
            "name": "DetailsComponent",
            "id": "component-DetailsComponent-5ec5b7826d8316dc113ac090ae0b81ad59089a8f4378cdfd9c1d305fa1eddcd30bdf017d981fbff11d44ff2740ec7b5cb8ccf347800ca999a326dfb89a7ec8d7",
            "file": "src/app/modules/movie/details/details.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-details",
            "styleUrls": [
                "./details.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./details.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "bestPlayLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PlayLink",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "certification",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 85,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "hasContinueWatching",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "hasData",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "isAvailable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "isBookmarked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "isFavorite",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "isWatched",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "movieBackdrop",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "movieCertification",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "movieDetails",
                    "defaultValue": "new MDBMovie()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "movieDetailsCast",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "movieDetailsDirectors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "movieDetailsProducers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "movieDetailsWriters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "movieTrailer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "ngUnsubscribe",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "playLinks",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "procBookmark",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "procFavorite",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "procPlayLink",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "procVideo",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "procWatched",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "showVideo",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "streamLink",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "testMovieBackdrop",
                    "defaultValue": "'./assets/test-assets/wall-e_backdrop.jpg'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "testSelectedMovie",
                    "defaultValue": "TEST_TMDB_MOVIE_DETAILS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "torrents",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MDBTorrent[]",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "troubleQuote",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "userData",
                    "defaultValue": "new IProfileData()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IProfileData",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "userLocation",
                    "defaultValue": "'US'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 54
                }
            ],
            "methodsClass": [
                {
                    "name": "continueWatching",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 333,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "copyToClipboard",
                    "args": [
                        {
                            "name": "magnetLink",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 497,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCopies link to clipboard\n",
                    "description": "<p>Copies link to clipboard</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 14879,
                                "end": 14889,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "magnetLink"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 14873,
                                "end": 14878,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>link top copy</p>\n"
                        }
                    ]
                },
                {
                    "name": "displayBackdrop",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 292,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDisplays backdrop or background image\n",
                    "description": "<p>Displays backdrop or background image</p>\n"
                },
                {
                    "name": "getBackdrop",
                    "args": [
                        {
                            "name": "val",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 275,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n!UNUSED\nGets backdrop or background image\n",
                    "description": "<p>!UNUSED\nGets backdrop or background image</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 8297,
                                "end": 8300,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "val"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 8291,
                                "end": 8296,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>IMDb id</p>\n"
                        }
                    ]
                },
                {
                    "name": "getCast",
                    "args": [],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 460,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getDirectors",
                    "args": [],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 436,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getGenre",
                    "args": [
                        {
                            "name": "genreCode",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 482,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nConverts genre code into its genre name equivalent.\n",
                    "description": "<p>Converts genre code into its genre name equivalent.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 14490,
                                "end": 14499,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "genreCode"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 14484,
                                "end": 14489,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>genre code origin</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 14524,
                                "end": 14531,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>genre name</p>\n"
                        }
                    ]
                },
                {
                    "name": "getLibrary",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 309,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTODO: add group async\nGets movie availability. From user library, torrent, etc.\n",
                    "description": "<p>TODO: add group async\nGets movie availability. From user library, torrent, etc.</p>\n",
                    "jsdoctags": []
                },
                {
                    "name": "getMovieCertification",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 255,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets the movie's certification based on user' location.\n",
                    "description": "<p>Gets the movie&#39;s certification based on user&#39; location.</p>\n"
                },
                {
                    "name": "getMovieDataOffline",
                    "args": [
                        {
                            "name": "val",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 227,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets movie offline\n",
                    "description": "<p>Gets movie offline</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6820,
                                "end": 6823,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "val"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6814,
                                "end": 6819,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>imdb id</p>\n"
                        }
                    ]
                },
                {
                    "name": "getMovieOnline",
                    "args": [
                        {
                            "name": "val",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 239,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets movie details, torrents\n",
                    "description": "<p>Gets movie details, torrents</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 7187,
                                "end": 7190,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "val"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7181,
                                "end": 7186,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>tmdb id</p>\n"
                        }
                    ]
                },
                {
                    "name": "getMoviePoster",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 266,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets the movie poster\n",
                    "description": "<p>Gets the movie poster</p>\n"
                },
                {
                    "name": "getProducers",
                    "args": [],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 452,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getTrailer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getTroubleQuote",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 472,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getUserMovieData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 162,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets the user's watched, bookmark, library data of the movie\n",
                    "description": "<p>Gets the user&#39;s watched, bookmark, library data of the movie</p>\n"
                },
                {
                    "name": "getWriters",
                    "args": [],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 444,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getYear",
                    "args": [
                        {
                            "name": "val",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 432,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGet year from date.\n",
                    "description": "<p>Get year from date.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "goToDiscover",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 403,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDiscovers movies based from criteria.\n",
                    "description": "<p>Discovers movies based from criteria.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 12188,
                                "end": 12192,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 151,
                                "escapedText": "type"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 12182,
                                "end": 12187,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>type of discovery. (year, certification, genre)</p>\n"
                        },
                        {
                            "name": {
                                "pos": 12253,
                                "end": 12255,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "id"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 12247,
                                "end": 12252,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>value to discover</p>\n"
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "goToFullCredits",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 424,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "goToLink",
                    "args": [
                        {
                            "name": "linkType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "idParam",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 361,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOpens link externally\n",
                    "description": "<p>Opens link externally</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 10867,
                                "end": 10875,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "linkType"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 10861,
                                "end": 10866,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>link type</p>\n"
                        },
                        {
                            "name": {
                                "pos": 10898,
                                "end": 10905,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "idParam"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 10892,
                                "end": 10897,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>id</p>\n"
                        }
                    ]
                },
                {
                    "name": "goToMovie",
                    "args": [
                        {
                            "name": "val",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 409,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "goToPerson",
                    "args": [
                        {
                            "name": "castId",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 419,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "castId",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadVideoData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLoads minor video data.\n",
                    "description": "<p>Loads minor video data.</p>\n"
                },
                {
                    "name": "mapPlayLink",
                    "args": [
                        {
                            "name": "arg",
                            "type": "IRawLibrary | MDBTorrent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "PlayLink",
                    "typeParameters": [],
                    "line": 522,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "arg",
                            "type": "IRawLibrary | MDBTorrent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mapPlayLinkList",
                    "args": [
                        {
                            "name": "rawLibraryList",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "PlayLink[]",
                    "typeParameters": [],
                    "line": 514,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n",
                    "description": "",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 15338,
                                "end": 15352,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "rawLibraryList"
                            },
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 15332,
                                "end": 15337,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>torrent list or library list</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "playBestPlayLink",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "playMovie",
                    "args": [
                        {
                            "name": "val",
                            "type": "PlayLink",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPlays the best possible stream. Offline copy is prioritized first.\n",
                    "description": "<p>Plays the best possible stream. Offline copy is prioritized first.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4459,
                                "end": 4462,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "val"
                            },
                            "type": "PlayLink",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4453,
                                "end": 4458,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>hash or id</p>\n"
                        }
                    ]
                },
                {
                    "name": "playOfflineLibrary",
                    "args": [
                        {
                            "name": "val",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "playPreview",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 468,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "playTorrent",
                    "args": [
                        {
                            "name": "hash",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 341,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPlays selected torrent.\n",
                    "description": "<p>Plays selected torrent.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 10352,
                                "end": 10356,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "hash"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 10346,
                                "end": 10351,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>torrent hash</p>\n"
                        }
                    ]
                },
                {
                    "name": "previewImage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 490,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "sanitize",
                    "args": [
                        {
                            "name": "torrent",
                            "type": "MDBTorrent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 486,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "torrent",
                            "type": "MDBTorrent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveMovieDataOffline",
                    "args": [
                        {
                            "name": "val",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 231,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleBookmark",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 193,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nToggles movie from user's watchlist or bookmarks\n",
                    "description": "<p>Toggles movie from user&#39;s watchlist or bookmarks</p>\n",
                    "modifierKind": [
                        131
                    ]
                },
                {
                    "name": "toggleFavorite",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 213,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ]
                },
                {
                    "name": "toggleWatched",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 203,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { GenreCodes } from '@models/interfaces';\nimport { IRawLibrary, LibraryService } from '@services/library.service';\nimport {\n  Component, OnInit,\n  OnDestroy,\n} from '@angular/core';\nimport { MDBTorrent } from '@models/interfaces';\nimport { TEST_TMDB_MOVIE_DETAILS } from '../../../mock-data';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { DataService } from '@services/data.service';\nimport { MovieService } from '@services/movie/movie.service';\nimport { TorrentService } from '@services/torrent/torrent.service';\nimport { IpcService } from '@services/ipc.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { TROUBLE_QUOTES } from '@shared/constants';\nimport { UserDataService } from '@services/user-data/user-data.service';\nimport { WatchedService, IWatched } from '@services/watched.service';\nimport { takeUntil } from 'rxjs/operators'\nimport { Subject } from 'rxjs';\nimport { basename } from 'path'\nimport { FavoriteService } from '@services/favorite.service';\nimport { IProfileData } from '@models/profile-data.model';\nimport { MdbApiService } from '@services/mdb-api.service';\nimport { MDBMovie } from '@models/mdb-movie.model';\nimport GeneralUtil from '@utils/general.util'\nimport { environment } from 'environments/environment';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ImagePreviewComponent } from '@shared/components/image-preview/image-preview.component';\n@Component({\n  selector: 'app-details',\n  templateUrl: './details.component.html',\n  styleUrls: ['./details.component.scss'],\n})\n\n/**\n * Get movie info, torrent, links, get if available in local\n */\nexport class DetailsComponent implements OnInit, OnDestroy {\n\n  movieBackdrop;\n  torrents: MDBTorrent[] = [];\n  testSelectedMovie = TEST_TMDB_MOVIE_DETAILS\n  testMovieBackdrop = './assets/test-assets/wall-e_backdrop.jpg'\n  isAvailable = false\n  hasData = false\n  streamLink = ''\n  troubleQuote\n  movieDetailsDirectors\n  movieDetailsWriters\n  movieDetailsProducers\n  movieDetailsCast\n  movieCertification\n  movieDetails = new MDBMovie()\n  userLocation = 'US'\n  procBookmark = false\n  procWatched = false\n  procFavorite = false\n  procVideo = false\n  procPlayLink = false\n  showVideo = false\n  isBookmarked = false\n  isWatched = false\n  isFavorite = false\n  movieTrailer: string\n  hasContinueWatching: boolean\n  playLinks = []\n  bestPlayLink: PlayLink;\n  certification: 'PG'\n  userData: IProfileData = new IProfileData()\n  private ngUnsubscribe = new Subject();\n\n  constructor(\n    private sanitizer: DomSanitizer,\n    private activatedRoute: ActivatedRoute,\n    private dataService: DataService,\n    private movieService: MovieService,\n    private ipcService: IpcService,\n    private torrentService: TorrentService,\n    private userDataService: UserDataService,\n    private libraryService: LibraryService,\n    private watchedService: WatchedService,\n    private favoriteService: FavoriteService,\n    private router: Router,\n    private mdbApiService: MdbApiService,\n    public dialog: MatDialog\n  ) { }\n\n  ngOnInit() {\n    this.activatedRoute.params.subscribe(val => {\n      this.showVideo = false\n      this.getMovieOnline(val['id'])\n    })\n\n  }\n\n  ngOnDestroy(): void {\n    GeneralUtil.DEBUG.log('DETAILS DESTROY')\n    this.ngUnsubscribe.next()\n    this.ngUnsubscribe.complete()\n  }\n\n  /**\n   * Loads minor video data.\n   */\n  loadVideoData() {\n    this.movieDetailsDirectors = this.getDirectors()\n    this.movieDetailsWriters = this.getWriters()\n    this.movieDetailsProducers = this.getProducers()\n    this.movieDetailsCast = this.getCast()\n    // this.movieCertification = this.getMovieCertification()\n    this.getUserMovieData()\n    this.getLibrary()\n    this.displayBackdrop()\n    this.getTrailer()\n\n  }\n\n  getTrailer() {\n    this.movieTrailer = this.movieDetails.videos.results.find((e) => e.type.toLowerCase() === 'trailer')\n  }\n\n  playBestPlayLink() {\n    if (environment.runConfig.useTestData) {\n      this.showVideo = true\n      this.streamLink = 'https://s3.eu-central-1.amazonaws.com/pipe.public.content/short.mp4'\n      GeneralUtil.DEBUG.log('playingbestplaylink')\n    } else {\n      if (this.bestPlayLink.hash) { // is torrent\n        this.playTorrent(this.bestPlayLink.hash)\n      } else {\n        this.playOfflineLibrary(this.bestPlayLink.id);\n      }\n      GeneralUtil.DEBUG.log('playingbestplaylink')\n    }\n  }\n\n  /**\n   * Plays the best possible stream. Offline copy is prioritized first.\n   * @param val hash or id\n   */\n  playMovie(val: PlayLink) {\n    if (val.type === \"torrent\") { // is torrent\n      this.playTorrent(val.hash);\n    } else {\n      this.playOfflineLibrary(val.id);\n    }\n  }\n\n  playOfflineLibrary(val) {\n    this.libraryService.openVideoStream(val).then(e => {\n      GeneralUtil.DEBUG.log('streamlink1:', e)\n      if (e != 0 && e != [] && e != '' && e.length > 0) {\n        this.showVideo = true\n        this.streamLink = e\n      }\n    })\n  }\n\n  /**\n   * Gets the user's watched, bookmark, library data of the movie\n   */\n  getUserMovieData() {\n    this.procVideo, this.procBookmark, this.procWatched = true\n\n    this.mdbApiService.getProfileDataByTmdbId(this.movieDetails.tmdbId).subscribe(userMovieData => {\n      GeneralUtil.DEBUG.log('usermoviedata', userMovieData)\n      if (userMovieData.bookmark) {\n        this.userData.bookmark = userMovieData.bookmark\n        this.isBookmarked = true\n      }\n      if (userMovieData.watched) {\n        this.userData.watched = userMovieData.watched\n        this.isWatched = true\n      }\n      if (userMovieData.favorite) {\n        this.userData.favorite = userMovieData.favorite\n        this.isFavorite = true\n      }\n      if (userMovieData.listLinkMovie) {\n        this.isFavorite = true\n      }\n      if (userMovieData.review) {\n        // this.movieDetails.review = userMovieData.review\n\n        // this.isFavorite = true\n      }\n    })\n  }\n\n  /**\n   * Toggles movie from user's watchlist or bookmarks\n   */\n  async toggleBookmark() {\n\n    this.procBookmark = true\n    let bmDoc\n    bmDoc = await this.userDataService.toggleBookmark(this.movieDetails)\n    this.isBookmarked = !this.isBookmarked\n    GeneralUtil.DEBUG.log('BOOKMARKADD/remove:', bmDoc)\n    this.procBookmark = false\n  }\n\n  async toggleWatched() {\n    this.procWatched = true\n    let wDoc\n\n    wDoc = await this.watchedService.toggleWatched(this.movieDetails)\n    this.isWatched = !this.isWatched\n    GeneralUtil.DEBUG.log('WATCHEDADD/remove:', wDoc)\n    this.procWatched = false\n  }\n\n  async toggleFavorite() {\n    this.procFavorite = true\n    let fDoc\n    fDoc = await this.favoriteService.toggleFavorite(this.movieDetails)\n    this.userData.favorite = fDoc\n    // this.isWatched = !this.isWatched\n    GeneralUtil.DEBUG.log('WATCHEDADD/remove:', fDoc)\n    this.procFavorite = false\n  }\n\n  /**\n   * Gets movie offline\n   * @param val imdb id\n   */\n  getMovieDataOffline(val: any) {\n    // this.ipcService.call(this.ipcService.IPCCommand.MovieMetadata, [this.ipcService.IPCCommand.Get, val])\n  }\n\n  saveMovieDataOffline(val: any) {\n    // this.ipcService.call(this.ipcService.IPCCommand.MovieMetadata, [this.ipcService.IPCCommand.Set, val])\n  }\n\n  /**\n   * Gets movie details, torrents\n   * @param val tmdb id\n   */\n  getMovieOnline(val: number) {\n    // tt2015381 is Guardians of the galaxy 2014; for testing only\n    GeneralUtil.DEBUG.log('getMovie initializing with value...', val);\n\n    this.movieService.getMovieDetails(val, 'videos,images,credits,similar,external_ids,recommendations').subscribe(data => {\n      this.movieDetails = data;\n      this.loadVideoData()\n      this.hasData = true\n      // COMMENTED UNTIL 'error spawn ENAMETOOLONG' is fixed.\n      // this.saveMovieDataOffline(this.movieDetails)\n    });\n  }\n\n  /**\n   * Gets the movie's certification based on user' location.\n   */\n  getMovieCertification() {\n    const myLoc = this.movieDetails.releaseDates.results.find((e) => e.iso_3166_1 === this.userLocation)\n    const toReturn = myLoc.release_dates[0].certification\n    // let toReturn = myLoc.release_dates.find((e) => { return e.type === 3 })\n    // toReturn = toReturn.certification\n    return toReturn\n  }\n\n  /**\n   * Gets the movie poster\n   */\n  getMoviePoster() {\n    // implement offline movie poster\n  }\n\n  /**\n   * !UNUSED\n   * Gets backdrop or background image\n   * @param val IMDb id\n   */\n  getBackdrop(val) {\n    this.movieService.getMovieBackdrop(val.trim()).subscribe(data => {\n      const numberOfBackgrounds = data.moviebackground.length;\n      if (numberOfBackgrounds) {\n        const imageIndex = Math.round(\n          Math.random() * (numberOfBackgrounds - 0) + 0\n        );\n        this.movieBackdrop = data.moviebackground[imageIndex].url;\n      } else {\n        // this.movieBackdrop = this.selectedMovie.Poster;\n      }\n    });\n  }\n\n  /**\n   * Displays backdrop or background image\n   */\n  displayBackdrop() {\n\n    const data = this.movieDetails.images['backdrops']\n    const numberOfBackgrounds = data.length\n    if (numberOfBackgrounds) {\n      const imageIndex = Math.round(\n        Math.random() * (numberOfBackgrounds - 1)\n      );\n      this.movieBackdrop = data[imageIndex].file_path;\n    }\n  }\n\n  /**\n   * TODO: add group async\n   * Gets movie availability. From user library, torrent, etc.\n   * @param val name\n   */\n  getLibrary() {\n    this.procPlayLink = true;\n    this.libraryService.getMovieFromLibrary(this.movieDetails.tmdbId).then((libraryList: IRawLibrary[]) => {\n      GeneralUtil.DEBUG.log(\"libraryList\", libraryList)\n      if (libraryList.length > 0) {\n        this.bestPlayLink = this.mapPlayLink(libraryList[0])\n        this.playLinks = [...this.playLinks, ...this.mapPlayLinkList(libraryList)]\n      }\n    })\n\n    let query\n    query = this.movieDetails.externalIds.imdb_id\n    this.torrentService.getTorrents(query).subscribe(data => {\n      if (data) {\n        this.torrents = this.torrentService.mapTorrentsList(data);\n        this.torrents.sort(function (a, b) { return b.peers - a.peers }); // sort by seeders\n        this.playLinks = [...this.playLinks, ...this.mapPlayLinkList(this.torrents)];\n\n        if (!this.bestPlayLink && this.torrents.length > 0) this.bestPlayLink = this.mapPlayLink(this.torrents[0]); // TODO: add sorting by preferred quality\n      }\n      this.procPlayLink = false;\n    });\n  }\n\n  continueWatching() {\n\n  }\n\n  /**\n   * Plays selected torrent.\n   * @param hash torrent hash\n   */\n  playTorrent(hash: string) {\n    this.ipcService.getPlayTorrent(hash).then(e=>{\n      this.showVideo = true\n      this.streamLink = e\n    })\n    // this.ipcService.streamLink.subscribe(e => {\n    //   GeneralUtil.DEBUG.log('streamlink1:', e)\n    //   if (e != 0 && e != [] && e != '' && e.length > 0) {\n    //     GeneralUtil.DEBUG.log('streamlink2:', e)\n    //     this.showVideo = true\n    //     this.streamLink = e\n    //   }\n    // })\n  }\n\n  /**\n   * Opens link externally\n   * @param linkType link type\n   * @param idParam id\n   */\ngoToLink(linkType: string, idParam?: string) {\n    let url = ''\n    GeneralUtil.DEBUG.log('1:', linkType, ' 2:', idParam);\n    switch (linkType) {\n      case 'google':\n        let releaseYear = this.getYear(this.movieDetails.releaseDate)\n        url = `https://www.google.com/search?q=${this.movieDetails.title} ${releaseYear}`\n        break;\n      case 'imdb':\n        url = `https://www.imdb.com/title/${this.movieDetails.imdbId}/`\n        break;\n      case 'tmdb':\n        url = `https://www.themoviedb.org/movie/${this.movieDetails.tmdbId}`\n        break;\n      case 'facebook':\n        url = `https://www.facebook.com/${this.movieDetails.externalIds.facebook_id}`\n        break;\n      case 'twitter':\n        url = `https://twitter.com/${this.movieDetails.externalIds.twitter_id}`\n        break;\n      case 'instagram':\n        url = `https://instagram.com/${this.movieDetails.externalIds.instagram_id}`\n        break;\n      case 'website':\n        url = `${this.movieDetails.website}`\n        break;\n      default:\n        break;\n    }\n\n    if (environment.runConfig.electron) {\n      // this.ipcService.call(this.ipcService.IPCCommand.OpenLinkExternal, url)\n    } else {\n      window.open(url)\n    }\n  }\n\n  /**\n   * Discovers movies based from criteria.\n   * @param type type of discovery. (year, certification, genre)\n   * @param id value to discover\n   */\n  goToDiscover(type: string, id: string, name?: string) {\n\n    this.dataService.updateDiscoverQuery({ type: type, value: id, name: name })\n    this.router.navigate([`/discover`], { queryParams: { type: type, id: id, name: name } });\n  }\n\n  goToMovie(val: string) {\n    // // this.navigationService.goToPage()\n    // this.router.navigate([`/details/${highlightedId}`], { relativeTo: this.activatedRoute });\n\n    const highlightedId = val\n    this.dataService.updateHighlightedMovie(highlightedId);\n    // this.router.navigate([`./details/${highlightedId}`]);\n    this.router.navigate([`/details/${highlightedId}`], { relativeTo: this.activatedRoute });\n  }\n\n  goToPerson(castId) {\n    this.router.navigate([`/person-details/${castId}`], { relativeTo: this.activatedRoute });\n    // this.router.navigate([`/person-details/${castId}`], { relativeTo: this.activatedRoute });\n  }\n\n  goToFullCredits() {\n    const val = this.movieDetails.tmdbId\n    this.router.navigate([`/credits/${val}`], { relativeTo: this.activatedRoute });\n  }\n\n  /**\n   * Get year from date.\n   */\n  getYear(val: string) {\n    return GeneralUtil.getYear(val)\n  }\n\n  getDirectors() {\n    const toReturn = []\n    this.movieDetails.credits.crew.forEach(crew => {\n      if (crew.job === 'Director') { toReturn.push(crew) }\n    });\n    return toReturn\n  }\n\n  getWriters() {\n    const toReturn = []\n    this.movieDetails.credits.crew.forEach(crew => {\n      if (crew.job === 'Writer' || crew.job === 'Screenplay') { toReturn.push(crew) }\n    });\n    return toReturn\n  }\n\n  getProducers() {\n    const toReturn = []\n    this.movieDetails.credits.crew.forEach(crew => {\n      if (crew.job.toLowerCase().includes('producer')) { toReturn.push(crew) }\n    });\n    return toReturn\n  }\n\n  getCast() {\n    const toReturn = []\n    this.movieDetails.credits.cast.forEach(crew => {\n      toReturn.push(crew)\n    });\n    return toReturn\n  }\n\n  playPreview() {\n    this.dataService.updatePreviewMovie(this.movieDetails)\n  }\n\n  getTroubleQuote() {\n    const length = TROUBLE_QUOTES.length\n    this.troubleQuote = TROUBLE_QUOTES[Math.floor(Math.random() * (-1 - length + 1)) + length]\n  }\n\n  /**\n   * Converts genre code into its genre name equivalent.\n   * @param genreCode genre code origin\n   * @returns genre name\n   */\n  getGenre(genreCode: number) {\n    return GenreCodes[genreCode]\n  }\n\n  sanitize(torrent: MDBTorrent) {\n    return this.torrentService.sanitize(torrent);\n  }\n\n  previewImage() {\n    this.dialog.open(ImagePreviewComponent, { data: { imagePath: this.movieDetails.posterPath } });\n  }\n  /**\n   * Copies link to clipboard\n   * @param magnetLink link top copy\n   */\n  copyToClipboard(magnetLink: string) {\n    const selBox = document.createElement('textarea');\n    selBox.style.position = 'fixed';\n    selBox.style.left = '0';\n    selBox.style.top = '0';\n    selBox.style.opacity = '0';\n    selBox.value = magnetLink;\n    document.body.appendChild(selBox);\n    selBox.focus();\n    selBox.select();\n    document.execCommand('copy');\n    document.body.removeChild(selBox);\n  }\n\n  /**\n   * @param rawLibraryList torrent list or library list\n   */\n  mapPlayLinkList(rawLibraryList: any[]): PlayLink[] {\n    let playLinkList: PlayLink[] = [];\n    rawLibraryList.forEach(rawLibrary => {\n      playLinkList.push(this.mapPlayLink(rawLibrary));\n    })\n    return playLinkList;\n  }\n\n  mapPlayLink(arg: IRawLibrary | MDBTorrent): PlayLink {\n    let playLink = new PlayLink()\n    playLink.id = arg.hasOwnProperty('_id') ? arg['_id'] : null\n    playLink.hash = arg.hasOwnProperty('hash') ? arg['hash'] : null\n    playLink.name = arg.hasOwnProperty('name') ? arg['name'] : basename(arg['fullFilePath'])\n    playLink.quality = arg.hasOwnProperty('quality') ? arg['quality'] : ''\n    playLink.type = arg.hasOwnProperty('hash') ? 'torrent' : 'offline'\n    return playLink\n  }\n}\n\nclass PlayLink {\n\n  id?: string\n  name?: string\n  type: \"torrent\" | \"offline\"\n  [x: string]: any\n  // size?: string\n  hash?: string\n  // url?: string\n  // quality?: string\n  // type?: string\n  // seeds?: number\n  // peers?: number\n  // sizeBytes?: number\n  // added?: string\n  // dateUploaded?: string\n  // dateUploadedUnix?: number\n  // isYts?: boolean\n  // magnetLink?: string,\n  // type: 'offline' | 'torrent'\n  // fullFilePath: string,\n  // title: string,\n  // year: number,\n  // tmdbId: number,\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../variables.scss';\n::ng-deep .mat-tab-body-content {\n  overflow-x: hidden;\n}\n\n* {\n  font-size: 1rem;\n  // font-size: 1.1rem;\n}\n\n.credit-label {\n  overflow: hidden;\n  white-space: nowrap;\n}\n\n.credit-list-wrap {\n\n  display: inline-block;\n  // width: 100%;\n  white-space: nowrap;\n  overflow: hidden !important;\n  text-overflow: ellipsis;\n  margin-bottom: 0px;\n}\n\n.mdb-primary {\n  background-color: $mdb-primary;\n}\n\n\n.mdb-button {\n  border-radius: 8px; // or .35em\n}\n\n\n@media only screen and (min-width: 765px) and (max-width: 1449px),\nonly screen and (min-width: 1450px) {\n  // p {\n  //   font-size: 4rem;\n  // }\n\n  .movie-title {\n    font-size: 3.25rem;\n  }\n}\n\n@media only screen and (min-width: 400px) and (max-width: 549px),\nonly screen and (min-width: 350px) and (max-width: 399px),\nonly screen and (max-width: 349px) {\n\n  .movie-title {\n    font-size: 1.625rem;\n  }\n}\n\n.credit-overview-container {\n  padding-top: .5em;\n}\n\n.image-cover {\n  background-size: cover;\n}\n\n.mdb-poster {\n  min-width: calc(280px*.67);\n  min-height: 280px;\n}\n\n.mdb-poster:hover {\n  box-shadow: 0 0 10px black;\n  // cursor: pointer; v1-disabled\n}\n\n.color-secondary {\n  color: #b1b1b1;\n}\n\n.font-emphasize {\n  font-weight: 600;\n}\n\n.details-button {\n  outline: none;\n  cursor: pointer;\n}\n\n.mat-tab-body-content {\n  // color: black !important;\n  overflow-x: hidden !important;\n}\n\n.mat-tab-label {\n  color: white !important\n}\n\n.mat-tab-label-active {\n  opacity: 1 !important;\n}\n\n.mat-ink-bar {\n  background-color: $mdb-primary !important\n}\n\n.active-label {\n  opacity: 0;\n}\n\n.play-trailer-btn {\n  padding-left: 1.5em;\n  padding-right: 1.5em;\n  padding-top: .5em;\n  padding-bottom: .5em;\n  margin-left: 20px;\n  border-radius: 8px;\n}\n\n#ratingsIcon {\n  color: hsl(56, 100%, 50%)\n}\n\n.play-btn {\n  padding: 2em;\n  padding-top: .5em;\n  padding-bottom: .5em;\n  border-top-left-radius: 8px;\n  border-bottom-left-radius: 8px;\n}\n\n.play-btn-dropdown-toggle {\n  border-top-right-radius: 8px;\n  border-bottom-right-radius: 8px;\n}\n\n.mat-divider {\n  border-top-color: rgb(202, 202, 202);\n}\n",
                    "styleUrl": "./details.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dataService",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "movieService",
                        "type": "MovieService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ipcService",
                        "type": "IpcService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "torrentService",
                        "type": "TorrentService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userDataService",
                        "type": "UserDataService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "libraryService",
                        "type": "LibraryService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "watchedService",
                        "type": "WatchedService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "favoriteService",
                        "type": "FavoriteService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "mdbApiService",
                        "type": "MdbApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 70,
                "jsdoctags": [
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dataService",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "movieService",
                        "type": "MovieService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ipcService",
                        "type": "IpcService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "torrentService",
                        "type": "TorrentService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userDataService",
                        "type": "UserDataService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "libraryService",
                        "type": "LibraryService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "watchedService",
                        "type": "WatchedService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "favoriteService",
                        "type": "FavoriteService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mdbApiService",
                        "type": "MdbApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div *ngIf=\"showVideo\">\n  <app-video-player [streamLink]='streamLink'></app-video-player>\n</div>\n\n<div class='image-cover' style='\nbackground-repeat: no-repeat;\nheight: 100%;\nbackground-attachment: fixed;'>\n  <!-- overflow-y: hidden; -->\n  <!-- background-color:black -->\n  <!-- [ngStyle]=\"{'background-image':'url(https://image.tmdb.org/t/p/original'+movieDetails.backropPath+')'}\" v1-disabled -->\n\n  <div class='container' style='padding-top:.75rem;\n  height: 100%; position: relative;\n    top: 50%;\n    -ms-transform: translateY(-50%);\n    transform: translateY(-50%);'>\n    <div class='row' style='\n    position: absolute;top:0;bottom: 0;left: 0;right: 0;margin: auto;\n    overflow-y: auto; padding-bottom:100px;padding-top:50px'>\n<!-- style='background-color: #555555' -->\n      <div class='col-xl-4'>\n        <div>\n          <!-- <div style='background-color: aqua;height:100%'> -->\n          <div class='img-container mdb-poster image-cover'\n            style='  background-color: white; margin:auto; height: 60vh; width: calc(60vh*.65); max-width: 420px;'\n            [ngStyle]=\"{'background-image':'url(https://image.tmdb.org/t/p/original'+movieDetails.posterPath+')'}\"\n            >\n            <!-- (click)=\"previewImage()\" v1-disabled-->\n          </div>\n          <div class='container'>\n            <div id='userDataControlsContainer'\n              style=' margin-left:auto; margin-right: auto; margin-top:1em; width:300px'>\n              <div class='row'>\n                <div class='col-4' style=\"text-align: center;\">\n                  <button mat-fab color=\"accent\" aria-label=\"Toggle bookmark\" class='details-button'\n                    data-toggle='tooltip' title='Toggle Bookmark'>\n                    <img style='filter: invert(1); height: 1.3em; cursor: pointer'\n                      src='../../../assets/icons/bookmark-add.svg' />\n                  </button>\n                </div>\n                <div class='col-4' style=\"text-align: center;\">\n                  <button mat-fab aria-label=\"Toggle watched\" style='background-color:orange' class='details-button'\n                    data-toggle='tooltip' title='Toggle watched'>\n                    <img style='filter: invert(1); height: 1.3em; cursor: pointer'\n                      src='../../../assets/icons/eye.svg' />\n                  </button>\n                </div>\n                <div class='col-4' style=\"text-align: center;\">\n                  <button mat-fab color=\"warn\" aria-label=\"Toggle favorite\" class='details-button' data-toggle='tooltip'\n                    title='Toggle Bookmark'>\n                    <img style='filter: invert(1); height: 1.3em; cursor: pointer'\n                      src='../../../assets/icons/heart.svg' />\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <!-- style='background-color: white' -->\n      <div class='col-xl-8' >\n        <div style='height:100%'>\n          <div style='display: flex; position:relative'>\n            <h2 id=\"movieTitle\" class='movie-title'>{{movieDetails.title}}</h2>&nbsp;\n\n            <h2 *ngIf=\"movieDetails.releaseDate\" class='text-hyperlink color-secondary'\n              style='padding-top: 1.5rem; padding-left: .5rem;font-size: 2rem'\n              (click)='goToDiscover(\"year\",getYear(movieDetails.releaseDate))'>\n              {{movieDetails.releaseDate|releaseYear}}\n            </h2>\n\n            <div style=\"position: absolute;top: 0;right: 0; margin-left: auto;cursor: pointer;\">\n              <h3 style='display: inline-flex; font-size: 2.5rem;margin-top: 11px;'>{{movieDetails.vote.voteAverage}}\n              </h3>\n              <img id='ratingsIcon' style='height: 3em; display: inline-flex;margin-left:10px;\n              margin-bottom:1.5rem;' src='../../../assets/icons/star-yellow.svg' />\n            </div>\n          </div>\n\n          <p id=\"movie-runtime\" class=\"color-secondary\">{{movieDetails.runtime|runtimeDisplay}}</p>\n\n          <div>\n            <span *ngFor=\"let item of movieDetails.genres; let isLast=last\">\n              <span class='text-hyperlink color-secondary' (click)='goToDiscover(\"genre\",item.id)'\n                style='text-decoration: underline;'>\n                {{item.name}}{{isLast ? '' : ','}}\n              </span>\n              &nbsp;\n            </span>\n          </div>\n\n          <mat-tab-group #detailsTabGroup>\n            <mat-tab #mattab label=\"OVERVIEW\" ngClass='{\"active-label\":mattab.isActive}'>\n              <ng-container [ngTemplateOutlet]='overviewTemplate'></ng-container>\n            </mat-tab>\n            <mat-tab label=\"REVIEWS\" disabled></mat-tab>\n            <mat-tab label=\"CREDITS\">\n              <ng-container [ngTemplateOutlet]='creditsTemplate'></ng-container>\n            </mat-tab>\n            <mat-tab label=\"SIMILAR MOVIES\" [ngTemplateOutlet]='similarMoviesTemplate'></mat-tab>\n          </mat-tab-group>\n\n          <ng-template #overviewTemplate style='overflow-x: hidden;'>\n            <div style='\n            height: 10rem;\n            overflow-y: scroll;'>\n              <p id=\"movie-plot\" style='overflow-wrap: break-word !important;\n          word-wrap: break-word !important; text-align: justify;\n          white-space: pre-line; padding-top: .75em;'>{{movieDetails.overview}}</p>\n            </div>\n\n            <div>\n              <!-- unified play button -->\n              <div class=\"btn-group\">\n                <button class=\"btn btn-danger mdb-primary play-btn\" [disabled]=\"playLinks.length <= 0\" (click)='playBestPlayLink()'>\n                   <span *ngIf='!procPlayLink'>Play </span>\n                  <mat-spinner *ngIf='procPlayLink'\n                    [diameter]='27' style='margin: auto;'></mat-spinner>\n                </button>\n                <button class=\"btn btn-danger dropdown-toggle dropdown-toggle-split play-btn-dropdown-toggle\"\n                  data-bs-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\" [disabled]=\"playLinks.length <= 0\">\n                  <span class=\"visually-hidden\">Toggle Dropdown</span>\n                </button>\n                <ul class=\"dropdown-menu\">\n                  <li *ngFor=\"let playLink of playLinks\">\n                    <a class=\"dropdown-item\" style='cursor: pointer' (click)='playMovie(playLink)'> {{playLink.type}} |\n                      {{playLink.name}}\n                      {{playLink.quality}}</a>\n                  </li>\n                </ul>\n              </div>\n              <button class='btn btn-primary' (click)='continueWatching()' *ngIf='hasContinueWatching'>\n                Continue Watching\n              </button>\n              <button class='btn btn-primary primary play-trailer-btn' (click)='playPreview()' *ngIf='movieTrailer'>\n                Play Trailer\n              </button>\n            </div>\n            <div>\n              <div *ngIf=\"movieDetailsDirectors\" class='credit-overview-container row'>\n                <span class='col-2 color-secondary font-emphasize credit-label'>Directed by </span>\n                <span class='credit-list-wrap col-8'>\n                  <span *ngFor=\"let director of movieDetailsDirectors; let isLast=last\">\n                    <span class='text-hyperlink' (click)='goToDiscover(\"person\",director.id,director.name)'>\n                      {{director.name}}{{isLast ? '' : ', '}}\n                    </span>\n                  </span>\n                </span>\n              </div>\n              <div *ngIf=\"movieDetailsWriters\" class='credit-overview-container'>\n                <span class='row'>\n                  <span class='col-2 color-secondary font-emphasize credit-label'>Written by </span>\n                  <span class='credit-list-wrap col-8'>\n                    <span *ngFor=\"let writer of movieDetailsWriters; let isLast=last\">\n                      <span class='text-hyperlink' (click)='goToDiscover(\"person\", writer.id, writer.name)'>\n                        {{writer.name}}{{isLast ? '' : ', '}}\n                      </span>\n                    </span>\n                  </span>\n                </span>\n              </div>\n              <div *ngIf=\"movieDetailsProducers\" class='credit-overview-container'>\n                <span class='row'>\n                  <span class='col-2 color-secondary font-emphasize credit-label'>Produced by</span>\n                  <span class='credit-list-wrap col-9'>\n                    <span *ngFor=\"let producer of movieDetailsProducers; let isLast=last\">\n                      <span class='text-hyperlink' (click)='goToDiscover(\"person\", producer.id, producer.name)'>{{producer.name}}{{isLast ? ''\n                        :', '}}</span>\n                    </span>\n                  </span>\n                </span>\n              </div>\n              <div *ngIf=\"movieDetailsCast\" class='credit-overview-container'>\n                <span class='row'>\n                  <span class='col-2 color-secondary font-emphasize credit-label'>Cast</span>\n                  <span class='credit-list-wrap col-10'>\n                    <span *ngFor=\"let cast of movieDetailsCast; let isLast=last\">\n                      <span class='text-hyperlink' (click)='goToDiscover(\"person\", cast.id, cast.name)'>\n                        {{cast.name}}{{isLast ? '' : ', '}}\n                      </span>\n                    </span>\n                  </span>\n                </span>\n              </div>\n            </div>\n          </ng-template>\n\n          <ng-template #creditsTemplate>\n            CREDITS\n            <div class=\"row\">\n              Cast\n              <!-- (click)='goToFullCredits()' v1-disabled -->\n              <h5 class='text-hyperlink'>See more...</h5>\n              <div id='featuredCastAndCrewDisplay' class='d-inline-flex' style=\"overflow-y:hidden; overflow-x:auto;\">\n                <div *ngFor=\"let cast of movieDetails.credits.cast\" style='margin-right: 20px;'>\n                  <!-- <div (click)='goToPerson(cast.id)' v1-disabled -->\n                  <div class='image-container' style='height: 200px; width: 185px; border-radius: 50%; cursor: pointer;'\n                    [ngStyle]=\"{'background-image': 'url(https://image.tmdb.org/t/p/w185'+cast.profilePath+')'}\">\n                  </div>\n                  <div>\n                    <!--(click)='goToPerson(cast.id)' v1-disabled -->\n                    <h6 class='text-hyperlink'>{{cast.name}}</h6>\n                    <p>{{cast.character}}</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </ng-template>\n\n          <ng-template #similarMoviesTemplate>\n            SIMILAR MOVIES\n          </ng-template>\n\n        </div>\n      </div>\n\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "DiscoverComponent",
            "id": "component-DiscoverComponent-8e4f150d395cc0a912b6eeb68387592c8b46a69e3390218b0b9be4c60721d4a63f35a750c1d0b89f87689dd6731864d4748b709e9488a9c8be74905ea0637134",
            "file": "src/app/modules/movie/discover/discover.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-discover",
            "styleUrls": [
                "./discover.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./discover.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cardWidth",
                    "defaultValue": "'130px'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "currentPage",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "discoverMoviesQuery",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "discoverResults",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "discoverTitle",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "hasMoreResults",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "hasResults",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "ngUnsubscribe",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "paramMap",
                    "defaultValue": "new Map<TmdbParameters, any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "procLoadMoreResults",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "sortBy",
                    "defaultValue": "'popularity.desc'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "sortByDefault",
                    "defaultValue": "'popularity.desc'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "sortByList",
                    "defaultValue": "['popularity.asc', 'popularity.desc', 'release_date.asc', 'release_date.desc', 'revenue.asc', 'revenue.desc', 'primary_release_date.asc', 'primary_release_date.desc', 'original_title.asc', 'original_title.desc', 'vote_average.asc', 'vote_average.desc', 'vote_count.asc', 'vote_count.desc']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "discoverQuery",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "val",
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "val2",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "discoverData",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCreates query for discover movies by movie type filter (cert,genre,year).\n",
                    "description": "<p>Creates query for discover movies by movie type filter (cert,genre,year).</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1759,
                                "end": 1763,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 151,
                                "escapedText": "type"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1753,
                                "end": 1758,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the filter</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1787,
                                "end": 1790,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "val"
                            },
                            "type": "string | number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1781,
                                "end": 1786,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>type value</p>\n"
                        },
                        {
                            "name": "val2",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "discoverData",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMoreResults",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { DataService } from '@services/data.service'\nimport { MovieService } from '@services/movie/movie.service'\nimport { TmdbParameters, GenreCodes } from '@models/interfaces';\nimport { Subject, combineLatest } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'app-discover',\n  templateUrl: './discover.component.html',\n  styleUrls: ['./discover.component.scss']\n})\nexport class DiscoverComponent implements OnInit, OnDestroy {\n\n  sortByList = ['popularity.asc', 'popularity.desc', 'release_date.asc', 'release_date.desc', 'revenue.asc', 'revenue.desc', 'primary_release_date.asc', 'primary_release_date.desc', 'original_title.asc', 'original_title.desc', 'vote_average.asc', 'vote_average.desc', 'vote_count.asc', 'vote_count.desc']\n  sortByDefault = 'popularity.desc'\n  sortBy = 'popularity.desc'\n  discoverResults = []\n  discoverMoviesQuery = ''\n  currentPage = 1\n  hasResults = false\n  cardWidth = '130px'\n  discoverTitle = ''\n  hasMoreResults = false\n  procLoadMoreResults = false\n  private paramMap = new Map<TmdbParameters, any>();\n  private ngUnsubscribe = new Subject();\n\n  constructor(\n    private dataService: DataService,\n    private movieService: MovieService,\n    private activatedRoute: ActivatedRoute,\n  ) { }\n  ngOnInit(): void {\n    this.dataService.discoverQuery.subscribe((discoverData) => {\n      this.discoverQuery(discoverData.type, discoverData.value, discoverData.name, discoverData)\n    })\n  }\n\n  ngOnDestroy(): void {\n    this.ngUnsubscribe.next()\n    this.ngUnsubscribe.complete()\n  }\n\n  /**\n   * Creates query for discover movies by movie type filter (cert,genre,year).\n   * @param type the filter\n   * @param val type value\n   * @param val1 (optional) additional context\n   */\n  discoverQuery(type: string, val: string | number, val2?: string, discoverData?): void {\n    let tempTitle = ''\n    // cert,year,genre,person\n    switch (type) {\n      case 'certification':\n        this.paramMap.set(TmdbParameters.Certification, val)\n        tempTitle = `Top ${val} movies`\n        break;\n      case 'genre':\n        this.paramMap.set(TmdbParameters.WithGenres, val)\n        tempTitle = `Top ${GenreCodes[val]} movies`\n        break;\n      case 'person':\n        this.paramMap.set(TmdbParameters.WithPeople, val)\n        tempTitle = `Top movies with ${val2}`\n        break;\n      case 'year':\n        this.paramMap.set(TmdbParameters.PrimaryReleaseYear, val)\n        tempTitle = `Top movies from ${val}`\n        break;\n      default:\n        this.paramMap = discoverData.paramMap\n        tempTitle = discoverData.name\n        break;\n    }\n\n    this.movieService.getMoviesDiscover(this.paramMap).subscribe(data => {\n      if (data.results.length > 0) {\n        this.discoverResults.push(...data.results)\n        this.hasResults = true\n        this.discoverTitle = tempTitle\n        if (data.total_pages > this.currentPage) {\n          this.hasMoreResults = true\n        }\n      }\n    });\n  }\n\n  getMoreResults() {\n    this.procLoadMoreResults = true\n    this.paramMap.set(TmdbParameters.Page, ++this.currentPage)\n    this.movieService.getMoviesDiscover(this.paramMap).subscribe(data => {\n      this.discoverResults = data.results\n      // this.discoverResults.push(...data.results) // for some reason this doesn't work anymore\n      if (data.total_pages <= this.currentPage) {\n        this.hasMoreResults = false\n      }\n      this.procLoadMoreResults = false\n    })\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./discover.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dataService",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "movieService",
                        "type": "MovieService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "dataService",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "movieService",
                        "type": "MovieService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<!-- TMDB discover -->\n<app-selected-list></app-selected-list>\n<select class=\"form-control\" [(ngModel)]='sortBy' style='width: 200px; float:right'>\n  <option value='popularity.desc'>Popularity</option>\n  <option value='release_date.asc'>Oldest</option>\n  <option value='release_date.desc'>Newest</option>\n  <option value='original_title.asc'>Name</option>\n  <option value='vote_count.desc'>Vote Average</option>\n</select>\n<div class=\"container-fluid\">\n  <div *ngIf='!hasResults'>\n    <h1 class='jumbo-message'>No movies found</h1>\n  </div>\n  <h1>{{discoverTitle}}</h1>\n  <div *ngIf='hasResults'>\n    <app-card-list [movieList]='discoverResults' [cardWidth]='cardWidth' [displayMode]='\"movie-cards-display-grid\"' [listType]='\"none\"'>\n    </app-card-list>\n    <div style='width: 100%; text-align: center; height: 80px;'>\n      <h5 *ngIf='!procLoadMoreResults' class='text-hyperlink' (click)='getMoreResults()'>Load more results...</h5>\n      <mat-spinner *ngIf='procLoadMoreResults' [diameter]='50' style='margin: auto;'></mat-spinner>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "FloatingPlayerComponent",
            "id": "component-FloatingPlayerComponent-8eb76415c1e33ac534d2ad95327e29f67fe5e03aa0fe71dfa02a156cce41fc1e4a4d64ba3ace97135773d2f0affcf6f86b9a2cecb4ca36c318564562b78f740f",
            "file": "src/app/shared/components/floating-player/floating-player.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-floating-player",
            "styleUrls": [
                "./floating-player.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./floating-player.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewEncapsulation } from '@angular/core';\n\n@Component({\n  selector: 'app-floating-player',\n  templateUrl: './floating-player.component.html',\n  styleUrls: ['./floating-player.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class FloatingPlayerComponent implements OnInit {\n\n  constructor() { }\n  ngOnInit() {\n\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./floating-player.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>floating player</p>>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-a557eec14f72c438a8033301f4d6ce023e0a1844a3b06ec2b38794a612acc31735ae78a5ee10071b230c8c20d699eb914554e69d07ade54adb371da8efb464cc",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n\n.welcome {\n  color: #333;\n  font-size: 14px;\n  margin-right: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "HorizontalCardListComponent",
            "id": "component-HorizontalCardListComponent-3700a8c57474ecf17634fcce38ba455e99aa79440c8e9c1f42a80fd61c085eb752f7238baee6fcb9ae6fc8c9712061169a08acb0b3cd9ea8e1c31441afb14e11",
            "file": "src/app/shared/components/horizontal-card-list/horizontal-card-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-horizontal-card-list",
            "styleUrls": [
                "./horizontal-card-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./horizontal-card-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "moviesList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "queryParams",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "seeAllLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "totalCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "seeAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { DataService } from '@services/data.service';\n\n@Component({\n  selector: 'app-horizontal-card-list',\n  templateUrl: './horizontal-card-list.component.html',\n  styleUrls: ['./horizontal-card-list.component.scss']\n})\nexport class HorizontalCardListComponent implements OnInit {\n\n  @Input()\n  moviesList: any\n  @Input()\n  title: string\n  @Input()\n  totalCount: number\n  @Input()\n  seeAllLink: string\n  @Input()\n  queryParams: any\n\n  constructor(\n    private router: Router,\n    private activatedRoute: ActivatedRoute,\n    private dataService: DataService,\n  ) { }\n\n  ngOnInit() {\n  }\n\n  seeAll() {\n    this.dataService.updateDiscoverQuery({ type: null, value: null, name: this.title, paramMap: this.queryParams })\n    this.router.navigate([this.seeAllLink], {\n      relativeTo: this.activatedRoute, queryParams: this.queryParams,\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".see-more-label {\n  display: none;\n}\n\n.card-list-container:hover {\n  transition: 0.5s;\n  background-color: #333333;\n\n  .see-more-label {\n    display: block;\n  }\n}\n",
                    "styleUrl": "./horizontal-card-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dataService",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dataService",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class='card-list-container' style='padding-top:10px; border-bottom:10px'>\n  <div style='display:flex; position: relative; width: 100%; height: 40px'>\n    <span style='float:left; flex: 1; white-space: nowrap; overflow: hidden; padding-left: 5px; position: absolute;'>\n      <h3 style='display: inline-block;'>{{title}}</h3>\n      <p *ngIf=\"totalCount\" style='display: inline-block;'>{{totalCount}} films</p>\n    </span>\n    <label class='see-more-label' *ngIf=\"moviesList.length > 6\" style='float:right; padding-right: 5px;position: absolute;\n      cursor: pointer; padding-right: 20px; right: 0;' (click)='seeAll()'>See more</label>\n  </div>\n  <mat-divider [inset]=\"false\"></mat-divider>\n  <div class='container-fluid card-list-horizontal'>\n    <app-card-list [movieList]='moviesList' [displayMode]='\"d-inline-flex\"' [listType]='\"none\"' [cardWidth]='\"130px\"'>\n    </app-card-list>\n  </div>\n</div>\n"
        },
        {
            "name": "ImagePreviewComponent",
            "id": "component-ImagePreviewComponent-0cbd9af7484f389bfbe54d7795e8c073a661f0d9c02d616bd1bd8ea766f902ff25a875b63d944df91d3042d4fa3fd938e316e93ac0366c0b6c52733a8f7c4d75",
            "file": "src/app/shared/components/image-preview/image-preview.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-image-preview",
            "styleUrls": [
                "./image-preview.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./image-preview.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "imagePath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "download",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject, OnInit } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-image-preview',\n  templateUrl: './image-preview.component.html',\n  styleUrls: ['./image-preview.component.scss']\n})\nexport class ImagePreviewComponent implements OnInit {\n\n  imagePath\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data: any) {\n    this.imagePath = 'https://image.tmdb.org/t/p/original' + data['imagePath']\n  }\n\n  ngOnInit() {\n  }\n  download() {\n    var url = this.imagePath\n    window.open(url);\n  }\n\n  // <a href=\" http://localhost/projectName/uploads/3/1535352341_download.png\" class=\"btn clss\"\n  // target=\"_self\" download>Download</a>\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./image-preview.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h1 mat-dialog-title>Dialog with elements</h1>\n<div mat-dialog-content>\n  <img [src]='imagePath' style='display: block;max-width: 80%;height: auto; ' />\n</div>\n<!-- <div mat-dialog-actions>\n  <a [href]=\"imagePath\" class=\"btn clss\" target=\"_self\" download>Download</a>\n  <button (click)=\"download()\">Download2</button>\n  <button mat-button mat-dialog-close>Close</button>\n</div> -->\n"
        },
        {
            "name": "InputContainerComponent",
            "id": "component-InputContainerComponent-4cc85c82fce747d67bbe0144053da3bcd4a6e5247f406d7194a1367bf61acbcf6a7c430e836b46d0bd987c9c154d50f28c4ca27429d5029ffc8e99665b29d3fc",
            "file": "src/app/shared/components/input-container/input-container.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-input-container",
            "styleUrls": [
                "./input-container.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./input-container.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "defaultVal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "fieldLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "inputType",
                    "defaultValue": "'text'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "mdbFormControlName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "mdbFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "FormGroup",
                    "decorators": []
                },
                {
                    "name": "optionSelections",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "IOptionSelections[]",
                    "decorators": []
                },
                {
                    "name": "parentForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "FormGroup",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onChange",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "EventEmitter"
                },
                {
                    "name": "outputEvent",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "EventEmitter"
                },
                {
                    "name": "value",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "checkbox",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'checkbox', {static: false}"
                        }
                    ]
                },
                {
                    "name": "ngControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgControl",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "select",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'select', {static: false}"
                        }
                    ]
                },
                {
                    "name": "templateRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "TemplateRef, {static: false}"
                        }
                    ]
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'text', {static: false}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChangeFunc",
                    "args": [
                        {
                            "name": "value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ContentChild, EventEmitter, Inject, Input, OnInit, Output, TemplateRef, ViewChild } from '@angular/core';\nimport { AbstractControlOptions, AsyncValidatorFn, FormControl, FormGroup, NgControl, ValidatorFn } from '@angular/forms';\n\n@Component({\n  selector: 'app-input-container',\n  templateUrl: './input-container.component.html',\n  styleUrls: ['./input-container.component.scss'],\n  // providers: [{\n  //   provide: NG_VALUE_ACCESSOR,\n  //   useExisting: forwardRef(() => DefaultValueAccessor),\n  //   multi: true\n  // }]\n})\nexport class InputContainerComponent extends FormControl implements OnInit {\n\n  @ContentChild(TemplateRef, {\n    static: false\n  })\n\n  templateRef: TemplateRef<any>\n\n  @ViewChild('select', { static: false }) select: TemplateRef<any>;\n  @ViewChild('text', { static: false }) text: TemplateRef<any>;\n  @ViewChild('checkbox', { static: false }) checkbox: TemplateRef<any>;\n  @Input() fieldLabel: string\n  @Input() inputType: string = 'text'\n  @Input() defaultVal: string\n  @Input() mdbFormControlName: string\n  @Input() parentForm: FormGroup\n  @Input() optionSelections: IOptionSelections[]\n  @Input() mdbFormGroup: FormGroup\n  @Output() outputEvent = new EventEmitter<any>();\n  @Output() onChange = new EventEmitter<any>();\n  @Output() value = new EventEmitter<any>();\n\n  ngControl: NgControl;\n\n  constructor(\n    @Inject('formState') formState: any = null,\n    @Inject('validatorOrOpts') validatorOrOpts?: ValidatorFn | ValidatorFn[] | AbstractControlOptions | null,\n    @Inject('asyncValidator') asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null\n  ) { super(formState, validatorOrOpts, asyncValidator) }\n\n  ngOnInit() {\n  }\n\n  onChangeFunc(value) {\n\n    // const value = event\n    if (value) {\n      console.log(value)\n      this.onChange.emit(value)\n    }\n    // const value = event.source.value\n    // if (event.source.selected) {\n    //   console.log(value)\n    //   this.onChange.emit(value)\n    // }\n  }\n}\n\ninterface IOptionSelections {\n  value: any,\n  label: string\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./input-container.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formState",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "null"
                    },
                    {
                        "name": "validatorOrOpts",
                        "type": "ValidatorFn | ValidatorFn[] | AbstractControlOptions | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "asyncValidator",
                        "type": "AsyncValidatorFn | AsyncValidatorFn[] | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 36,
                "jsdoctags": [
                    {
                        "name": "formState",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "null",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "validatorOrOpts",
                        "type": "ValidatorFn | ValidatorFn[] | AbstractControlOptions | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "asyncValidator",
                        "type": "AsyncValidatorFn | AsyncValidatorFn[] | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "FormControl",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div style='justify-content: space-between; display: flex;'>\n  <p>{{fieldLabel}}</p>\n  <!-- <ng-template *ngTemplateOutlet=\"templateRef; context : this\"></ng-template> -->\n  <ng-container [ngTemplateOutlet]='this[inputType]'></ng-container>\n</div>\n\n<ng-template #select>\n  <div [formGroup]=\"parentForm\">\n    <mat-form-field appearance=\"fill\">\n      <mat-select [formControlName]='mdbFormControlName'>\n        <mat-option *ngFor=\"let option of optionSelections\" [value]=\"option.value\"\n          (onSelectionChange)='onChangeFunc($event.source.value)'>\n          {{option.label}}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n  </div>\n</ng-template>\n\n<ng-template #text>\n  <div [formGroup]=\"parentForm\">\n    <mat-form-field appearance=\"fill\">\n      <input matInput [formControlName]='mdbFormControlName' type=\"text\" style='color:white' />\n      <button mat-button matSuffix mat-icon-button aria-label=\"Clear\" (click)=\"value=''\">\n        <mat-icon>close</mat-icon>\n      </button>\n    </mat-form-field>\n  </div>\n</ng-template>\n\n<ng-template #checkbox>\n  <div [formGroup]=\"parentForm\">\n    <mat-checkbox [formControlName]='mdbFormControlName' class=\"example-margin\">\n    </mat-checkbox>\n  </div>\n</ng-template>\n"
        },
        {
            "name": "InputContComponent",
            "id": "component-InputContComponent-60690a3e5d686f23b8208d5c798739ea7a76573b953b53daae194bd98cd9972951d2d9b5073624088cb78465779fee85ece4ef03091575706f279e8f60956202",
            "file": "src/app/shared/components/input-cont/input-cont.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-input-cont",
            "styleUrls": [
                "./input-cont.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./input-cont.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "parentForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "FormGroup",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\n@Component({\n  selector: 'app-input-cont',\n  templateUrl: './input-cont.component.html',\n  styleUrls: ['./input-cont.component.scss']\n})\nexport class InputContComponent implements OnInit {\n\n  @Input() parentForm: FormGroup\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./input-cont.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- <ng-template #checkbox>\n  <mat-checkbox formControlName='mdbFormControlName' [formControl]=\"mdbFormControl\" class=\"example-margin\"\n    [checked]='defaultVal' (change)=\"setValue($event.checked)\">AND\n  </mat-checkbox>\n</ng-template> -->\n\n<div [formGroup]=\"parentForm\">\n  <input type=\"checkbox\" [formControlName]=\"'autoScan'\" />\n</div>\n<p>input-cont works!</p>\n"
        },
        {
            "name": "KeyboardShortcutsComponent",
            "id": "component-KeyboardShortcutsComponent-d8b5a8ec88baedf4730c02169943d3ac342df31a7c9d403aa6650dfd2b16f80bee63cb28f3ae1bff619f183e6ac5f07d18dd9a1ffc52eca613a715192f62f217",
            "file": "src/app/modules/settings/keyboard-shortcuts/keyboard-shortcuts.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-keyboard-shortcuts",
            "styleUrls": [
                "./keyboard-shortcuts.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./keyboard-shortcuts.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "HOTKEYS",
                    "defaultValue": "HOTKEYS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetHotkeys",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "saveHotkeys",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-keyboard-shortcuts',\n  templateUrl: './keyboard-shortcuts.component.html',\n  styleUrls: ['./keyboard-shortcuts.component.scss']\n})\nexport class KeyboardShortcutsComponent implements OnInit {\n\n  HOTKEYS = HOTKEYS\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  resetHotkeys() { }\n  saveHotkeys() { }\n}\n\nconst HOTKEYS = {\n  // ToggleFULL\n  mute: 'm',\n  fullscreen: 'f'\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./keyboard-shortcuts.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div id='hotkeysSettings'>\n\n  <div class='grid-container'>\n    <div class='grid-item'>\n      <label>Action</label>\n    </div>\n    <div class='grid-item'>\n      <label>Shortcut</label>\n    </div>\n    <div class='grid-item'>\n      <label>Toggle Pause/Play</label>\n    </div>\n    <div class='grid-item'>\n      <input [(ngModel)]=\"HOTKEYS.fullscreen\" disabled />\n    </div>\n    <div class='grid-item'>\n      <label>Toggle Fullscreen</label>\n    </div>\n    <div class='grid-item'>\n      <input [(ngModel)]=\"HOTKEYS.fullscreen\" />\n    </div>\n    <div class='grid-item'>\n      <label>Toggle Mute</label>\n    </div>\n    <div class='grid-item'>\n      <input [(ngModel)]=\"HOTKEYS.mute\" />\n    </div>\n    <div class='grid-item'>\n      <label>Go Back 5 Seconds</label>\n    </div>\n    <div class='grid-item'>\n      <input [(ngModel)]=\"HOTKEYS.mute\" />\n    </div>\n    <div class='grid-item'>\n      <label>Go Back 10 Seconds</label>\n    </div>\n    <div class='grid-item'>\n      <input [(ngModel)]=\"HOTKEYS.mute\" />\n    </div>\n    <div class='grid-item'>\n      <label>Go Forward 5 Seconds</label>\n    </div>\n    <div class='grid-item'>\n      <input [(ngModel)]=\"HOTKEYS.mute\" />\n    </div>\n    <div class='grid-item'>\n      <label>Go Forward 10 Seconds</label>\n    </div>\n    <div class='grid-item'>\n      <input [(ngModel)]=\"HOTKEYS.mute\" />\n    </div>\n    <div class='grid-item'>\n      <label>Exit menu</label>\n    </div>\n    <div class='grid-item'>\n      <input [(ngModel)]=\"HOTKEYS.mute\" />\n    </div>\n    <div class='grid-item'>\n      <label>Increase Volume 5%</label>\n    </div>\n    <div class='grid-item'>\n      <input [(ngModel)]=\"HOTKEYS.mute\" />\n    </div>\n    <div class='grid-item'>\n      <label>Decrease Volume 5%</label>\n    </div>\n    <div class='grid-item'>\n      <input [(ngModel)]=\"HOTKEYS.mute\" />\n    </div>\n    <div class='grid-item'>\n      <label>Increase Playback Speed</label>\n    </div>\n    <div class='grid-item'>\n      <input [(ngModel)]=\"HOTKEYS.mute\" />\n    </div>\n    <div class='grid-item'>\n      <label>Decrease Playback Speed</label>\n    </div>\n    <div class='grid-item'>\n      <input [(ngModel)]=\"HOTKEYS.mute\" />\n    </div>\n    <div class='grid-item'>\n      <label>Toggle Captions</label>\n    </div>\n    <div class='grid-item'>\n      <input [(ngModel)]=\"HOTKEYS.mute\" />\n    </div>\n    <div class='grid-item'>\n      <label>Go To Beginning of the Movie</label>\n    </div>\n    <div class='grid-item'>\n      <input [(ngModel)]=\"HOTKEYS.mute\" />\n    </div>\n    <div class='grid-item'>\n      <label>Skip To x% Of The Movie</label>\n    </div>\n    <div class='grid-item'>\n      <input [(ngModel)]=\"HOTKEYS.mute\" />\n    </div>\n    <div class='grid-item'>\n      <label>Go To Previous Page</label>\n    </div>\n    <div class='grid-item'>\n      <input [(ngModel)]=\"HOTKEYS.mute\" />\n    </div>\n    <div class='grid-item'>\n      <label>Print</label>\n    </div>\n    <div class='grid-item'>\n      <input [(ngModel)]=\"HOTKEYS.mute\" />\n    </div>\n  </div>\n  <button (click)='resetHotkeys()'>Reset</button>\n  <button (click)='saveHotkeys()'>Save</button>\n</div>\n"
        },
        {
            "name": "LibraryComponent",
            "id": "component-LibraryComponent-6c8d552d674146076e078d98de64e0a6fc80158f506088a7c8a7b6100ae474e2a9383432d2e12e55af79ad89a20d73c01bb21e93664c4f70d83b20979d6efa72",
            "file": "src/app/modules/person/library/view/library.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-library",
            "styleUrls": [
                "./library.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./library.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "Observable<any>",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cardWidth",
                    "defaultValue": "'130px'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "hasMoreResults",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "hasResults",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "hasSearchResults",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "isFetchingData",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "lastVal",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "LIST_TYPE",
                    "defaultValue": "CollectionName.Library",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "moviesDisplayList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "orderBy",
                    "defaultValue": "'tmdbId'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "methodsClass": [
                {
                    "name": "getMoreResults",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ]
                },
                {
                    "name": "getMoviesFromLibrary",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets movies from library db\n",
                    "description": "<p>Gets movies from library db</p>\n",
                    "modifierKind": [
                        131
                    ]
                },
                {
                    "name": "minimizeMoviePoster",
                    "args": [
                        {
                            "name": "poster",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n!UNUSED\nMinimizes size of poster to download\n",
                    "description": "<p>!UNUSED\nMinimizes size of poster to download</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1212,
                                "end": 1218,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "poster"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1206,
                                "end": 1211,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>old poster</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1236,
                                "end": 1243,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>newPoster new Poster</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onScanLibrary",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { UserDataService } from '@services/user-data/user-data.service';\nimport { environment } from '@environments/environment';\nimport { Component, OnInit, Input } from '@angular/core';\nimport { TMDB_SEARCH_RESULTS } from '../../../../mock-data'\nimport { STRING_REGEX_IMAGE_SIZE } from '@shared/constants';\nimport { IpcService, IUserDataPaginated } from '@services/ipc.service';\nimport { Observable } from 'rxjs'\nimport { CollectionName } from '@services/firebase.service';\n\n@Component({\n  selector: 'app-library',\n  templateUrl: './library.component.html',\n  styleUrls: ['./library.component.scss'],\n})\nexport class LibraryComponent implements OnInit {\n\n  @Input() data: Observable<any>\n\n  constructor(\n    private ipcService: IpcService,\n    private userDataService: UserDataService,\n  ) { }\n\n  moviesDisplayList = []\n  hasSearchResults = false\n  cardWidth = '130px'\n  isFetchingData = false\n  orderBy = 'tmdbId'\n  lastVal = 0\n  hasResults = false\n  hasMoreResults = false\n  readonly LIST_TYPE = CollectionName.Library\n\n  ngOnInit() {\n    console.log('ngOnInit');\n    this.getMoviesFromLibrary()\n  }\n\n  /**\n   * !UNUSED\n   * Minimizes size of poster to download\n   * @param poster old poster\n   * @returns newPoster new Poster\n   */\n  minimizeMoviePoster(poster) {\n    const REGEX_IMAGE_SIZE = new RegExp(STRING_REGEX_IMAGE_SIZE, `gi`)\n    const newPoster = poster.replace(REGEX_IMAGE_SIZE, 'SX150.jpg')\n    return newPoster\n  }\n\n  /**\n   * Gets movies from library db\n   */\n  async getMoviesFromLibrary() {\n    if (environment.runConfig.useTestData === true) {\n      this.moviesDisplayList = TMDB_SEARCH_RESULTS.results\n    } else {\n      const libraryData:IUserDataPaginated = await this.userDataService.getUserDataFirstPage(this.LIST_TYPE)\n      console.log(libraryData)\n      const libraryMovies = libraryData.results\n      if (libraryMovies.length) {\n        this.moviesDisplayList = libraryMovies\n        this.lastVal = libraryMovies[libraryMovies.length - 1][this.LIST_TYPE][this.orderBy]\n        this.hasResults = true\n        if (libraryMovies.length === 20) {\n          this.hasMoreResults = true\n        }\n      }\n    }\n  }\n\n  async getMoreResults() {\n    if (environment.runConfig.useTestData) {\n      this.moviesDisplayList = TMDB_SEARCH_RESULTS.results\n    } else {\n      const res = await this.userDataService.getUserDataPagination(this.LIST_TYPE, this.lastVal)\n      console.log(res)\n      if (res.length) {\n        this.moviesDisplayList.push.apply(this.moviesDisplayList, res)\n        this.lastVal = res[res.length - 1][this.LIST_TYPE][this.orderBy]\n        if (res.length < 20) {\n          this.hasMoreResults = false\n        }\n      }\n    }\n  }\n\n  onScanLibrary() {\n    this.ipcService.startScanLibrary()\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./library.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "ipcService",
                        "type": "IpcService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userDataService",
                        "type": "UserDataService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "ipcService",
                        "type": "IpcService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userDataService",
                        "type": "UserDataService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-selected-list></app-selected-list>\n<div class=\"container-fluid\">\n  <button class='btn btn-info' (click)='onScanLibrary()'>Scan library</button>\n  <div *ngIf='!hasResults'>\n    <h1 class='jumbo-message'>No offline movies found.</h1>\n  </div>\n  <div *ngIf='hasResults' class='movie-cards-display-grid'>\n    <app-card-list [movieList]='moviesDisplayList' [cardWidth]='cardWidth' [displayMode]='\"movie-cards-display-grid\"'\n      [listType]='LIST_TYPE'>\n    </app-card-list>\n    <div *ngIf=\"hasMoreResults\" style='width: 100%; text-align: center; height: 80px; background-color: antiquewhite;'>\n      <h5 class='text-hyperlink' (click)='getMoreResults()'>Load more results...</h5>\n    </div>\n  </div>\n</div>\n<div>\n\n  <!-- <div class=\"container\">\n  <div *ngIf='hasSearchResults'>\n    <label>{{currentPage}} of {{numberOfPages}}</label>\n    <button class='btn btn-primary' id='prevButton' (click)='toPreviousPage()'\n      [disabled]='currentPage <= 1'>Previous</button>\n    <button class='btn btn-primary' id='nextButton' (click)='toNextPage()'\n      [disabled]='currentPage >= numberOfPages'>Next</button>\n  </div>\n</div> -->\n\n  <div *ngIf=\"!moviesDisplayList\">\n    <label>No movies found, go to Preferences.</label>\n    <h1>No movie libraries found :(</h1>\n    <h3>Houston, we have a problem.</h3>\n    <h4>Apollo 13</h4>\n  </div>\n"
        },
        {
            "name": "MovieCardComponent",
            "id": "component-MovieCardComponent-f63015badc0e049c37518a79a90fd467daa183e259acd03126d9c225aa96280e0fc30749b496484fd7e7d7033048d2e1b44a129eed83612071505c654e24d113",
            "file": "src/app/shared/components/movie-card/movie-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-movie-card",
            "styleUrls": [
                "./movie-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./movie-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "cardWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "library",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "movie",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "MDBMovie",
                    "decorators": []
                },
                {
                    "name": "userData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "IProfileData",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_cardWidth",
                    "defaultValue": "'130px'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "_library",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "_movie",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MDBMovie",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "_userData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IProfileData",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "isAdminMode",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "isAvailable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 87
                },
                {
                    "name": "isBookmarked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 86
                },
                {
                    "name": "isSingleClick",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 89
                },
                {
                    "name": "isWatched",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 85
                },
                {
                    "name": "ngUnsubscribe",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 90,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "procBookmark",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 82
                },
                {
                    "name": "procFavorite",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 81
                },
                {
                    "name": "procHighlight",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 84
                },
                {
                    "name": "procWatched",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 83
                },
                {
                    "name": "watchedPercentage",
                    "defaultValue": "'0%'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 88
                }
            ],
            "methodsClass": [
                {
                    "name": "getPoster",
                    "args": [
                        {
                            "name": "poster",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 197,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets poster. CURRENTLY UNUSED\nTODO: Fetch from offline or generate canvass.\n",
                    "description": "<p>Gets poster. CURRENTLY UNUSED\nTODO: Fetch from offline or generate canvass.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5740,
                                "end": 5746,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "poster"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5734,
                                "end": 5739,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>poster url\nTODO: Fetch from offline or generate canvass.</p>\n"
                        }
                    ]
                },
                {
                    "name": "getYear",
                    "args": [
                        {
                            "name": "releaseDate",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 188,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets the year.\n",
                    "description": "<p>Gets the year.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5543,
                                "end": 5554,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "releaseDate"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5537,
                                "end": 5542,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>release date with format YYYY-MM-DD</p>\n"
                        }
                    ]
                },
                {
                    "name": "goToYear",
                    "args": [
                        {
                            "name": "year",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 201,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "year",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onHighlight",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdds movie object to the selected movies list\n",
                    "description": "<p>Adds movie object to the selected movies list</p>\n",
                    "jsdoctags": []
                },
                {
                    "name": "onOpenMovie",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOpens the movie's details page.\n",
                    "description": "<p>Opens the movie&#39;s details page.</p>\n"
                },
                {
                    "name": "onPreview",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onToggleBookmark",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 152,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ]
                },
                {
                    "name": "onToggleWatched",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 166,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ]
                },
                {
                    "name": "toggleFavorites",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 181,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { UserDataService } from '@services/user-data/user-data.service';\nimport { PreferencesService } from '@services/preferences.service';\nimport { Component, OnInit, Input } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { DataService } from '@services/data.service';\nimport { MovieService } from '@services/movie/movie.service';\nimport { TorrentService } from '@services/torrent/torrent.service';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { MDBMovie } from '@models/mdb-movie.model';\nimport { IProfileData } from '@models/profile-data.model';\nimport ObjectUtil from '@utils/object.utils';\nimport GeneralUtil from '@utils/general.util';\n\n@Component({\n  selector: 'app-movie-card',\n  templateUrl: './movie-card.component.html',\n  styleUrls: ['./movie-card.component.scss']\n})\nexport class MovieCardComponent implements OnInit {\n\n  _movie: MDBMovie\n  @Input()\n  set movie(inputMessage: MDBMovie) {\n    this._movie = new MDBMovie(inputMessage)\n\n    if (this.preferencesService.isGetTorrentFromMovieCard) {\n      // UNCOMMENT BELOW to get external_id and torrent one by one\n      this.movieService.getExternalId(this._movie.tmdbId).pipe(takeUntil(this.ngUnsubscribe)).subscribe(externalId => {\n        if (externalId && externalId.imdb_id) {\n          this.torrentService.getTorrentsOnline(externalId.imdb_id).pipe(takeUntil(this.ngUnsubscribe)).subscribe(e => {\n            if (e.status === 'ok' && e.data.movie_count > 0) {\n              const firstTorrent = e.data.movies[0].torrents[0]\n              // this._movie.library = firstTorrent\n              // this._movie.library.id = firstTorrent.hash\n            }\n          })\n        }\n      })\n    }\n  }\n  get movie(): MDBMovie {\n    return this._movie;\n  }\n\n  _cardWidth = '130px'\n  @Input()\n  set cardWidth(inputMessage: any) {\n    this._cardWidth = inputMessage\n  }\n  get cardWidth(): any {\n    return this._cardWidth;\n  }\n\n  _library: any\n  @Input()\n  set library(inputVideo: any) {\n    this._library = inputVideo\n  }\n  get library(): any {\n    return this._library;\n  }\n\n  _userData: IProfileData\n  @Input()\n  set userData(inputData: IProfileData) {\n    console.log(\"USERDATA\", inputData)\n    this._userData = inputData\n    if (!ObjectUtil.isEmpty(inputData)) {\n      if (inputData.watched) {\n        this.watchedPercentage = inputData.watched.percentage + '%'\n      }\n    }\n  }\n  get userData(): IProfileData {\n    return this._userData;\n  }\n\n\n  isAdminMode = false\n  procFavorite = false\n  procBookmark = false\n  procWatched = false\n  procHighlight = false\n  isWatched = false\n  isBookmarked = false\n  isAvailable = false\n  watchedPercentage = '0%'\n  isSingleClick: any\n  private ngUnsubscribe = new Subject();\n\n  constructor(\n    private dataService: DataService,\n    private movieService: MovieService,\n    private preferencesService: PreferencesService,\n    private torrentService: TorrentService,\n    private userDataService: UserDataService,\n    private router: Router,\n    private activatedRoute: ActivatedRoute,\n  ) { }\n\n  ngOnInit(): void {\n  }\n\n  ngOnDestroy(): void {\n    this.ngUnsubscribe.next()\n    this.ngUnsubscribe.complete()\n  }\n\n  /**\n   * Adds movie object to the selected movies list\n   * @param movie current selected movie\n   */\n  onHighlight(): void {\n    this.procHighlight = true\n    // this._movie.isHighlighted = !this._movie.isHighlighted\n    // if (this._movie.isHighlighted) {\n    //   this.store.dispatch(new AddMovie(this._movie))\n    // } else {\n    //   this.store.dispatch(new RemoveMovie(this._movie))\n    // }\n    this.procHighlight = false\n  }\n\n  /**\n   * Opens the movie's details page.\n   */\n  onOpenMovie(): void {\n    const highlightedId = this._movie.tmdbId;\n    this.dataService.updateHighlightedMovie(highlightedId);\n    // this.navigationService.goToPage()\n    this.router.navigate([`/details/${highlightedId}`], { relativeTo: this.activatedRoute });\n\n    // below is for imdb id, but we will settle for tmdb id for now\n    // this.movieService.getExternalId(movie.id).subscribe(data => {\n    //   const highlightedId = data.imdb_id;\n    //   localStorage.setItem('imdb_id', highlightedId)\n    //   this.dataService.updateHighlightedMovie(highlightedId);\n    //   this.router.navigate([`/details/${highlightedId}`], { relativeTo: this.activatedRoute });\n    // })\n  }\n\n  onPreview(): void {\n    this.isSingleClick = true;\n    setTimeout(() => {\n      if (this.isSingleClick) {\n        this.dataService.updatePreviewMovie(this._movie)\n      }\n    }, 300)\n  }\n\n  async onToggleBookmark(): Promise<any> {\n    this.procBookmark = true\n    setTimeout(() => {\n      this.isBookmarked = !this.isBookmarked\n      this.procBookmark = false\n    }, 500);\n    // this.procBookmark = true\n    // let bmDoc: any\n    // bmDoc = await this.userDataService.toggleBookmark(this._movie)\n    // this.isBookmarked = !this.isBookmarked\n    // console.log('BOOKMARKADD/remove:', bmDoc)\n    // this.procBookmark = false\n  }\n\n  async onToggleWatched() {\n    this.procWatched = true\n    setTimeout(() => {\n      this.isWatched = !this.isWatched\n      // this.userData.watched.percentage = 100\n      // this.watchedPercentage = 100 + '%'\n      this.procWatched = false\n    }, 500);\n    // this.procWatched = true\n    // let wDocId: any\n    // wDocId = await this.watchedService.toggleWatched(this._movie)\n    // this.isWatched = !this.isWatched\n    // this.procWatched = false\n  }\n\n  toggleFavorites(): void {\n    this.isSingleClick = false\n  }\n  /**\n   * Gets the year.\n   * @param releaseDate release date with format YYYY-MM-DD\n   */\n  getYear(releaseDate: string): string {\n    return GeneralUtil.getYear(releaseDate)\n  }\n\n  /**\n   * Gets poster. CURRENTLY UNUSED\n   * @param poster poster url\n   * TODO: Fetch from offline or generate canvass.\n   */\n  getPoster(poster: string): string {\n    return ''\n  }\n\n  goToYear(year: string): void {\n    this.dataService.updateDiscoverQuery({ type: 'year', value: year, name: null })\n    this.router.navigate([`/discover`], {\n      relativeTo: this.activatedRoute, queryParams: { type: 'year', year: year }\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".movie-card {\n  padding: 5px;\n  outline: none;\n  margin: auto;\n}\n\n.movie-card-body {\n  padding: 5px 0px 0px 0px !important;\n}\n\n.movie-card-selected .overlay-add {\n  opacity: 0.5;\n}\n\n.card-button {\n  text-align: center;\n  position: absolute;\n  cursor: pointer;\n  background-color: black;\n  height: 25px;\n  width: 40px;\n  display: none;\n  z-index: 3;\n}\n\n.card-button-interior {\n  height: 100%;\n  margin-bottom: 4px;\n  margin-right: 2px;\n  background-size: cover;\n  background-position: center;\n}\n\n.card-button-icon {\n  margin-bottom: 4px;\n  margin-right: 2px;\n  filter: invert(1);\n  width: 20px;\n  height: 20px;\n  cursor: pointer;\n  display: inline-block;\n  background-size: cover;\n}\n\n.movie-card-image-container:hover, :focus {\n  .card-button {\n    transition: 1s;\n    display: block;\n  }\n}\n\n.movie-card-title {\n  display: inline-block;\n  width: 100%;\n  white-space: nowrap;\n  overflow: hidden !important;\n  text-overflow: ellipsis;\n  margin-bottom: 0px;\n}\n\n// bookmark\n.movie-bookmark {\n  top: 5%;\n  left: 0%;\n}\n\n// favorite\n.movie-mark-favorite {\n  top: 20%;\n  left: 0%;\n}\n\n.movie-mark-as-watched {\n  top: 35%;\n  left: 0%;\n}\n\n.movie-highlight {\n  position: absolute;\n  top: 5%;\n  right: 5%;\n  height: 15px;\n  width: 15px;\n  z-index: 3;\n}\n\n.movie-progress-bar {\n  position: absolute;\n  bottom: 0%;\n  left: 0%;\n  height: 3px;\n  width: 100%;\n  background-color: rgb(255, 62, 4);\n  // border-radius: 50%;\n  // box-shadow: 0 0 10px #969696;\n  z-index: 3;\n}\n\n// the circle one\n.movie-available {\n  position: absolute;\n  top: 5%;\n  right: 5%;\n  height: 15px;\n  width: 15px;\n  background-color: rgb(8, 185, 8);\n  border-radius: 50%;\n  box-shadow: 0 0 10px #38ec14;\n  z-index: 3;\n}\n\n.bookmark-add {\n  background-image: url('/../../../../assets/icons/bookmark-add.svg');\n  filter: invert(1)\n}\n\n.bookmark-remove {\n  background-image: url('/../../../../assets/icons/bookmark-minus.svg');\n  filter: invert(1)\n}\n\n.favorite-add {\n  background-image: url('/../../../../assets/icons/heart.svg');\n  filter: invert(1)\n}\n\n.button-added {\n  background-image: url('/../../../../assets/icons/check.svg');\n}\n\n.bookmark-icon {\n  background-image: url('/../../../../assets/icons/bookmark-add.svg');\n}\n\n.favorite-icon {\n  background-image: url('/../../../../assets/icons/heart.svg');\n}\n\n.favorite-icon:hover,\n.favorite-icon:focus {\n  filter: invert(27%) sepia(51%) saturate(2878%) hue-rotate(346deg) brightness(104%) contrast(97%)\n}\n\n.bookmark-icon:hover,\n.bookmark-icon:focus {\n  filter: invert(27%) sepia(51%) saturate(2878%) hue-rotate(212deg) brightness(104%) contrast(97%)\n}\n",
                    "styleUrl": "./movie-card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dataService",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "movieService",
                        "type": "MovieService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "preferencesService",
                        "type": "PreferencesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "torrentService",
                        "type": "TorrentService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userDataService",
                        "type": "UserDataService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 90,
                "jsdoctags": [
                    {
                        "name": "dataService",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "movieService",
                        "type": "MovieService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "preferencesService",
                        "type": "PreferencesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "torrentService",
                        "type": "TorrentService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userDataService",
                        "type": "UserDataService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "movie": {
                    "name": "movie",
                    "setSignature": {
                        "name": "movie",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "inputMessage",
                                "type": "MDBMovie",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 24,
                        "jsdoctags": [
                            {
                                "name": "inputMessage",
                                "type": "MDBMovie",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "movie",
                        "type": "",
                        "returnType": "MDBMovie",
                        "line": 42
                    }
                },
                "cardWidth": {
                    "name": "cardWidth",
                    "setSignature": {
                        "name": "cardWidth",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "inputMessage",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 48,
                        "jsdoctags": [
                            {
                                "name": "inputMessage",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "cardWidth",
                        "type": "any",
                        "returnType": "any",
                        "line": 51
                    }
                },
                "library": {
                    "name": "library",
                    "setSignature": {
                        "name": "library",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "inputVideo",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 57,
                        "jsdoctags": [
                            {
                                "name": "inputVideo",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "library",
                        "type": "any",
                        "returnType": "any",
                        "line": 60
                    }
                },
                "userData": {
                    "name": "userData",
                    "setSignature": {
                        "name": "userData",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "inputData",
                                "type": "IProfileData",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 66,
                        "jsdoctags": [
                            {
                                "name": "inputData",
                                "type": "IProfileData",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "userData",
                        "type": "",
                        "returnType": "IProfileData",
                        "line": 75
                    }
                }
            },
            "templateData": "<div class='movie-card' [ngStyle]=\"{'width': _cardWidth}\">\n  <!-- <div class='movie-card' [ngStyle]=\"{'width': _cardWidth}\" [ngClass]=\"{'movie-card-selected': _movie.isHighlighted}\"> -->\n  <div\n    [ngStyle]=\"{'height': 'calc(1.45 *'+_cardWidth+')','background-image':'url(https://image.tmdb.org/t/p/w154'+_movie.posterPath+')'}\"\n    class='movie-card-image-container' data-toggle=\"tooltip\"\n    title=\"{{movie.title}} ({{movie.releaseDate|releaseYear}})\">\n    <!-- w342 w154, w185 -->\n    <!-- <div\n    [ngStyle]=\"{'height': 'calc(1.45 *'+_cardWidth+')','background-image':'url(https://image.tmdb.org/t/p/w342'+_movie.poster_path+')'}\"\n    class='movie-card-image-container' (click)='onHighlight(movie)'> -->\n\n    <div class='card-button movie-bookmark' data-toggle='tooltip' title='Toggle Bookmark'>\n      <span class='card-button-icon bookmark-icon' (click)=\"onToggleBookmark()\" *ngIf=\"!procBookmark\"></span>\n      <!-- <div *ngIf=\"!procBookmark\" (click)='onToggleBookmark()'>\n        <img *ngIf=\"!(_movie.bookmark && _movie.bookmark.id)\" style='height:20px; margin-bottom: 4px; margin-right: 2px;'\n          src='./assets/icons/bookmark-add.svg' data-toggle='tooltip' title='Add Bookmark' />\n        <img *ngIf=\"_movie.bookmark && _movie.bookmark.id\" style='height:20px; margin-bottom: 4px;\n    margin-right: 2px;' src='./assets/icons/bookmark-minus.png' />\n      </div> -->\n\n      <div *ngIf='procBookmark'>\n        <mat-spinner [diameter]='20'></mat-spinner>\n      </div>\n      <!-- <div *ngIf=\"procBookmark\" class=\"spinner-border spinner-border-sm\" role=\"status\">\n        <span class=\"sr-only\">Loading...</span>\n      </div> -->\n    </div>\n    <!-- ISADMINMODE on Hold\n    <div class='movie-highlight' *ngIf=\"isAdminMode\">\n      <div *ngIf=\"!procHighlight\" (click)='onHighlight(movie)'>\n        <img *ngIf=\"!_movie.isHighlighted\" style='height:20px; margin-bottom: 4px; margin-right: 2px;'\n          src='./assets/icons/check.svg' data-toggle='tooltip' title='Highlight' />\n        <img *ngIf=\"_movie.isHighlighted\" style='height:20px; margin-bottom: 4px;\n    margin-right: 2px;' src='./assets/icons/minus.svg' data-toggle='tooltip' title='Remove Highlight' />\n      </div>\n      <div *ngIf=\"procHighlight\" class=\"spinner-border spinner-border-sm\" role=\"status\">\n        <span class=\"sr-only\">Loading...</span>\n      </div>\n    </div> -->\n\n    <!-- alt image -->\n    <!-- <div style=' text-align: center; color: white;' [ngStyle]=\"{'height': 'calc(1.45 * '+ _cardWidth + ')'}\"\n        class='movie-card-image-container'>\n        <h3>{{_movie.title}}</h3>\n        <div class=\"overlay overlay-add\">\n        </div>-->\n    <!-- end of alt image -->\n\n    <div *ngIf=\"_library && _library.id\" class='movie-available' data-toggle='tooltip' title='Available'>\n    </div>\n\n    <div class=\"card-button movie-mark-favorite\" data-toggle=\"tooltip\" title=\"Toggle Favorite\">\n      <span class=\"card-button-icon favorite-icon\" (click)=\"toggleFavorites()\" *ngIf=\"!procFavorite\"></span>\n      <div *ngIf='procFavorite' class='spinner-border spinner-border-sm' role='status'>\n        <span class='sr-only'>Loading...</span>\n      </div>\n    </div>\n\n    <div class='card-button movie-mark-as-watched' *ngIf='!_userData?.watched'>\n      <div (click)='onToggleWatched()' *ngIf='!procWatched'>\n        <img class='card-button-icon' src='./assets/icons/check.svg' data-toggle='tooltip' title='Mark as watched' />\n      </div>\n      <div *ngIf='procWatched'>\n        <mat-spinner [diameter]='20'></mat-spinner>\n      </div>\n    </div>\n    <!-- watched Progress bar -->\n    <div *ngIf=\"_userData?.watched\" [ngStyle]=\"{'width': watchedPercentage +'%'}\" id='watchedProgressBar'\n      class='movie-progress-bar'>\n    </div>\n\n    <div class=\"overlay overlay-add\" (click)='onPreview()'></div>\n  </div>\n  <div class=\"card-body movie-card-body\">\n    <div class=\"movie-card-text\">\n      <h6 (click)=\"onOpenMovie()\" class='text-primary movie-card-title text-hyperlink' style='color:white'\n        data-toggle=\"tooltip\" title=\"{{_movie.title}}\">{{_movie.title}}</h6>\n      <label class='text-hyperlink' style='float: left; font-size: 11pt;color: darkgray;'\n        (click)='goToYear(getYear(_movie.releaseDate))'>{{_movie.releaseDate|releaseYear}}</label>\n      <label *ngIf='_movie.vote.voteAverage>0' style='float: right; padding-right: 5px;' data-toggle='tooltip'\n        title='{{_movie.vote.voteCount}} votes'>\n        <img style='height:10px;\n      filter: invert(1);margin-bottom: 4px;\n      margin-right: 2px;' src='./assets/icons/star.svg' />{{_movie.vote.voteAverage}}</label>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "NavigationComponent",
            "id": "component-NavigationComponent-d233e47b17f35d45fa817260e2ba6ac3d6145a0a21f7ee1492759752180998b8c4e7d037554575e91731a9a7289693134859974643fe9e645bae9c2632be12ca",
            "file": "src/app/components/navigation/navigation.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-navigation",
            "styleUrls": [
                "./navigation.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./navigation.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isOpenNav",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "sideNavWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "closeNav",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCloses side navigation\n",
                    "description": "<p>Closes side navigation</p>\n"
                },
                {
                    "name": "goForwardPage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "goPreviousPage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openNav",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOpens side navigation\n",
                    "description": "<p>Opens side navigation</p>\n"
                },
                {
                    "name": "switchNav",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Location } from '@angular/common';\nimport { NavigationService, Navigation } from '@services/navigation.service'\n@Component({\n  selector: 'app-navigation',\n  templateUrl: './navigation.component.html',\n  styleUrls: ['./navigation.component.scss']\n})\nexport class NavigationComponent implements OnInit {\n\n  constructor(private location: Location,\n    // private navigationService: NavigationService\n  ) { }\n\n  isOpenNav = false\n  sideNavWidth;\n  // navigation = new NavigationService(this, this.location)\n  ngOnInit() {\n    if (this.isOpenNav) {\n      this.openNav()\n    } else {\n      this.closeNav()\n    }\n  }\n\n  /**\n   * Opens side navigation\n   */\n  openNav() {\n    this.sideNavWidth = '250px';\n    document.getElementById('mySidenav').style.width = this.sideNavWidth;\n  }\n\n  /**\n   * Closes side navigation\n   */\n  closeNav() {\n    this.sideNavWidth = '50px';\n    document.getElementById('mySidenav').style.width = this.sideNavWidth;\n  }\n\n  switchNav() {\n    this.isOpenNav = !this.isOpenNav\n    if (this.isOpenNav) {\n      this.openNav()\n    } else {\n      this.closeNav()\n    }\n  }\n\n  goPreviousPage() {\n    console.log('goPreviousPage');\n    // this\n    this.location.back()\n    // this.navigation.previousPage()\n  }\n\n  goForwardPage() {\n    console.log('goPreviousPage');\n    console.log(this.location.path())\n    this.location.forward()\n    // this.navigation.nextPage()\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/* The side navigation menu */\n.sidenav {\n  height: 100%;\n  /* 100% Full-height */\n  width: 350px;\n  /* 0 width - change this with JavaScript */\n  // position: fixed;\n  /* Stay in place */\n  // z-index: 1;\n  /* Stay on top */\n  // top: 0;\n  /* Stay at the top */\n  // left: 0;\n  background-color: #111;\n  /* Black*/\n  overflow-x: hidden;\n  /* Disable horizontal scroll */\n  padding-top: 60px;\n  /* Place content 60px from the top */\n  transition: 0.5s;\n  /* 0.5 second transition effect to slide in the sidenav */\n}\n\n/* The navigation menu links */\n.sidenav a {\n  padding: 8px 8px 8px 32px;\n  text-decoration: none;\n  font-size: 25px;\n  color: #818181;\n  display: block;\n  transition: 0.3s;\n}\n\n.collapsed a {\n  padding: 8px 8px 8px 0px !important // transition: 0.3s;\n}\n\n/* When you mouse over the navigation links, change their color */\n.sidenav-option:hover * {\n  cursor: pointer;\n  transition: .3s\n}\n.sidenav-option:hover span {\n  color: #f1f1f1;\n}\n.sidenav-option:hover .side-nav-icon {\n  filter: invert(1) contrast(1);\n}\n\n/* Style page content - use this if you want to push the page content to the right when you open the side navigation */\n#main {\n  transition: .5s\n}\n\n#topNav {\n  transition: .5s;\n}\n\n.side-nav-icon {\n  width: 50px;\n  height: 30px;\n  // if icons are dark\n  -webkit-filter: invert(1);\n  filter: invert(1) contrast(0);\n  ;\n}\n\n// film grain\n.grain {\n  // height: 100vh;\n  // background-image: url(https://s3-us-west-2.amazonaws.com/s.cdpn.io/9632/northernlights.jpg);\n}\n\n.grain:after {\n  // animation: grain 8s steps(10) infinite;\n  // background-image: url(https://s3-us-west-2.amazonaws.com/s.cdpn.io/9632/paper-pattern.png);\n  // content: \"\";\n  // height: 300%;\n  // left: -50%;\n  // opacity: 0.3;\n  // position: fixed;\n  // top: -110%;\n  // width: 300%;\n}\n\n@keyframes grain {\n\n  0%,\n  100% {\n    transform: translate(0, 0)\n  }\n\n  10% {\n    transform: translate(-5%, -10%)\n  }\n\n  20% {\n    transform: translate(-15%, 5%)\n  }\n\n  30% {\n    transform: translate(7%, -25%)\n  }\n\n  40% {\n    transform: translate(-5%, 25%)\n  }\n\n  50% {\n    transform: translate(-15%, 10%)\n  }\n\n  60% {\n    transform: translate(15%, 0%)\n  }\n\n  70% {\n    transform: translate(0%, 15%)\n  }\n\n  80% {\n    transform: translate(3%, 35%)\n  }\n\n  90% {\n    transform: translate(-10%, 10%)\n  }\n}\n\n/* On smaller screens, where height is less than 450px, change the style of the sidenav (less padding and a smaller font size) */\n// @media screen and (max-height: 450px) {\n//   .sidenav {padding-top: 15px;}\n//   .sidenav a {font-size: 18px;}\n// }\n\n.router-active {\n  font-weight: bold;\n  color: orangered !important;\n  transition: .1s\n}\n",
                    "styleUrl": "./navigation.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div style='width:100%;height:100%;position:absolute;overflow-x: hidden;'>\n\n  <!-- TOP -->\n  <app-top-navigation style='top:0;height:50px;width:100%;z-index: 5;'></app-top-navigation>\n\n  <div style='position:fixed;top:50px;height:100%;width:100%;display: flex;'>\n\n    <!-- SIDE NAV -->\n    <div id=\"mySidenav\" class=\"sidenav\" style='height:100%;' [ngClass]=\"{'collapsed':isOpenNav===false}\">\n      <div>\n        <div style='display: flex; flex-wrap: wrap; top:0;left:0'>\n\n          <a (click)='goPreviousPage()' class='sidenav-option'>\n            <img class='side-nav-icon' src=\"./assets/icons/arrow-left.svg\" />\n          </a>\n          <a (click)='goForwardPage()' class='sidenav-option'>\n            <img class='side-nav-icon' src=\"./assets/icons/arrow-right.svg\" />\n          </a>\n        </div>\n        <a routerLinkActive='router-active' routerLink=\"./dashboard\" class='sidenav-option'>\n          <img class='side-nav-icon' src=\"./assets/icons/home.svg\" />\n          <span *ngIf=\"isOpenNav\">Home</span>\n        </a>\n        <a routerLinkActive='router-active' routerLink=\"./browse\" class='sidenav-option'>\n          <img class='side-nav-icon' src=\"./assets/icons/globe.svg\" />\n          <span *ngIf=\"isOpenNav\">Browse</span>\n        </a>\n        <a routerLinkActive='router-active' routerLink=\"./library\" class='sidenav-option'>\n          <img class='side-nav-icon' src=\"./assets/icons/server.svg\" />\n          <span *ngIf=\"isOpenNav\">Library</span>\n        </a>\n        <a routerLinkActive='router-active' routerLink=\"./preferences\" class='sidenav-option'>\n          <img class='side-nav-icon' src=\"./assets/icons/gear.svg\" />\n          <span *ngIf=\"isOpenNav\">Preferences</span>\n        </a>\n        <a routerLinkActive='router-active' routerLink=\"./video\" class='sidenav-option'>\n          <img class='side-nav-icon' src=\"./assets/icons/gear.svg\" />\n          <span *ngIf=\"isOpenNav\">VIDEOTEST</span>\n        </a>\n      </div>\n      <div style='overflow: hidden; position: fixed; bottom: 0;' class='sidenav-option'>\n        <a (click)=\"switchNav()\">\n          <span *ngIf=\"isOpenNav\">\n            <img class='side-nav-icon' src=\"./assets/icons/left-angle.svg\" />Collapse</span>\n          <img class='side-nav-icon' src=\"./assets/icons/right-angle.svg\" *ngIf=\"!isOpenNav\" />\n        </a>\n      </div>\n    </div>\n\n    <!-- MAIN -->\n    <div id=\"main\" style='height:100%;width:100%;overflow-y:auto; padding-bottom: 50px;'\n      [ngStyle]=\"{'width':'calc(100% - '+sideNavWidth+')'}\">\n      <!-- <app-video-player [streamLink]=\"'file:///C:/Users/jomme/Downloads/Anastasia%20[1997][DVDRip][720x304][H.264-AAC]%20~SaaS~/Anastasia%20[1997][DVDRip][720x304][H.264-AAC]%20~SaaS~.mp4'\"></app-video-player> -->\n      <!-- <app-video-player [streamLink]=\"'https://s3.eu-central-1.amazonaws.com/pipe.public.content/short.mp4'\"></app-video-player> -->\n      <router-outlet></router-outlet>\n      <!-- <app-details></app-details> -->\n      <!-- <app-video-player [streamLink]=\"'../../../../assets/sample movie/Ratatouille (2007) [1080p]/Ratatouille.2007.1080p.BrRip.x264.YIFY.mp4'\"></app-video-player> -->\n      <!-- <advanced-find></advanced-find> -->\n      <!-- <app-floating-player></app-floating-player> -->\n      <!-- <app-preferences></app-preferences> -->\n      <!-- <app-notification></app-notification>\n      <app-notification></app-notification> -->\n    </div>\n  </div>\n</div>\n<app-preview></app-preview>\n"
        },
        {
            "name": "NotificationComponent",
            "id": "component-NotificationComponent-2fe6c8ff46abd4b15b69a3472b152910af393e3f2d9618efa0b1dc863e649fa15b307e9215e03fbe80ebcc20866973bc3127665fa1a506aa5b500aa242a8ef4a",
            "file": "src/app/modules/events/notification/notification.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-notification",
            "styleUrls": [
                "./notification.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./notification.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "message",
                    "defaultValue": "'this is message'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "type",
                    "defaultValue": "'info'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-notification',\n  templateUrl: './notification.component.html',\n  styleUrls: ['./notification.component.scss']\n})\nexport class NotificationComponent implements OnInit {\n\n  type = 'info'\n  message = 'this is message'\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\n.callout {\n  position: fixed;\n  bottom: 35px;\n  right: 20px;\n  margin-left: 20px;\n  max-width: 300px;\n}\n\n.callout-header {\n  padding: 25px 15px;\n  background: #555;\n  font-size: 30px;\n  color: white;\n}\n\n.callout-container {\n  padding: 15px;\n  background-color: #ccc;\n  color: black\n}\n\n.closebtn {\n  position: absolute;\n  top: 5px;\n  right: 15px;\n  color: white;\n  font-size: 30px;\n  cursor: pointer;\n}\n\n.closebtn:hover {\n  color: lightgrey;\n}\n",
                    "styleUrl": "./notification.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- Notification Callout Message -->\n<p>\n  notification works!\n</p>\n<!-- icon -->\n<!-- exit -->\n<div class=\"callout\">\n  <span class=\"closebtn\" onclick=\"this.parentElement.style.display='none';\">×</span>\n\n  <div class=\"callout-container\">\n    <p>\n      <!-- message -->\n      {{message}}\n    </p>\n    <button>Ok</button>\n    <!-- actions -->\n  </div>\n</div>\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-7126d8c2607c946741c651482413b43feb72b2d63cac9d3ac173fde206a5e635eb4cdbf7ca7ac9327c7d4d05cf7ef619144c34c11609ad677081d0ee4e855064",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 64
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nsection h2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nsection p {\n  margin: 1em 0;\n}\n\nsection a {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nsection ul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nsection li {\n  margin-bottom: 8px;\n}\n\nsection .tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\nsection .tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\nsection .tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\nsection .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "PersonDetailsComponent",
            "id": "component-PersonDetailsComponent-56350fe937d6c6f7618e8b691ac8dc81d3460dde10f35e6bdca78cc78fdffba10119f99c77a548e3c6702b61f99066abccacfd253783b7377048a891014dce4f",
            "file": "src/app/modules/person/person-details/person-details.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-person-details",
            "styleUrls": [
                "./person-details.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./person-details.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "Observable<any>",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "creditsCast",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "creditsCrew",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "hasData",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "person",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "getPersonDetails",
                    "args": [
                        {
                            "name": "val",
                            "type": "number | string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "number | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "goToMovie",
                    "args": [
                        {
                            "name": "val",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, OnDestroy } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { DataService } from '@services/data.service';\nimport { PersonService } from '@services/person.service';\nimport { UtilsService } from '@services/utils.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { PERSON_DETAILS, PERSON_DETAILS_FULL, PERSON_COMBINED_CREDITS } from '../../../mock-data-person-details';\nimport { environment } from 'environments/environment';\n\n@Component({\n  selector: 'app-person-details',\n  templateUrl: './person-details.component.html',\n  styleUrls: ['./person-details.component.scss']\n})\nexport class PersonDetailsComponent implements OnInit, OnDestroy {\n  @Input() data: Observable<any>;\n  hasData = false;\n  person: any;\n  creditsCast\n  creditsCrew\n\n  constructor(\n    private sanitizer: DomSanitizer,\n    private activatedRoute: ActivatedRoute,\n    private dataService: DataService,\n    private personService: PersonService,\n    private utilsService: UtilsService,\n    private router: Router) { }\n\n  ngOnInit(): void {\n    if (environment.runConfig.useTestData === true) {\n      this.person = PERSON_DETAILS\n      this.creditsCast = PERSON_COMBINED_CREDITS.cast\n      this.creditsCrew = PERSON_COMBINED_CREDITS.crew\n      this.hasData = true\n    } else {\n\n      const id = this.activatedRoute.snapshot.paramMap.get('id')\n      this.getPersonDetails(id)\n      // this.activatedRoute.params.subscribe(params => {\n      //   console.log('activatedRoute.params', params);\n      //   if (params.id) {\n      //     this.getPersonDetails(params.id)\n      //   } else {\n      //     this.hasData = false\n      //   }\n      // });\n    }\n  }\n\n  ngOnDestroy(): void {\n\n  }\n\n  getPersonDetails(val: number | string): void {\n    console.log('getting person details');\n    this.personService.getPersonDetails(val).subscribe(data => {\n      console.log('got from getMovieOnline ', data)\n      this.person = data;\n      this.creditsCast = data.movie_credits.cast\n      this.creditsCrew = data.movie_credits.crew\n      this.hasData = true\n    });\n  }\n\n  goToMovie(val): void {\n    const highlightedId = val\n    this.dataService.updateHighlightedMovie(highlightedId);\n    this.router.navigate([`/details/${highlightedId}`], { relativeTo: this.activatedRoute });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "* {\n  color: antiquewhite\n}\n",
                    "styleUrl": "./person-details.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dataService",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "personService",
                        "type": "PersonService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dataService",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "personService",
                        "type": "PersonService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<!-- //     \"w45\",\n  //     \"w185\",\n  //     \"h632\",\n  //     \"original\" -->\n<div class='container' *ngIf=\"hasData\">\n  <div class='row'>\n    <div class='col-md-4'>\n      <div style='border-radius:50%'>\n        <!-- image -->\n        <div class='image-container' style='height:500px; width:300px;  position: relative;'\n          [ngStyle]=\"{'background-image': 'url(https://image.tmdb.org/t/p/h632'+person.profile_path+')' }\"></div>\n      </div>\n    </div>\n    <div class='col-md-8'>\n      <!-- details -->\n      <h2>{{person.name}}</h2>\n      <p>{{person.biography}}</p>\n    </div>\n  </div>\n  <!-- <div class='row'> -->\n  <div *ngFor=\"let creditCast of creditsCast\" class='row'>\n    <div>\n      <div class='col col-md-4'>\n        <div class='image-container' style='height:250px; width:100px;'\n          [ngStyle]=\"{'background-image': 'url(https://image.tmdb.org/t/p/w92'+creditCast.poster_path+')' }\">\n        </div>\n      </div>\n      <div class='col col-md-4'>\n        <p class='text-hyperlink' (click)='goToMovie(creditCast.id)'>{{creditCast.title}}</p>\n      </div>\n      <div class='col col-md-4'>\n        <p>{{creditCast.character}}</p>\n      </div>\n    </div>\n  </div>\n  <div *ngFor=\"let creditCrew of creditsCrew\" class='row'>\n    <div>\n      <div class='col-md-6'>\n        <p class='text-hyperlink' (click)='goToMovie(creditCrew.id)'>{{creditCrew.title}}</p>\n      </div>\n      <div class='col-md-6'>\n        <p>{{creditCrew.job}}</p>\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "PreferencesComponent",
            "id": "component-PreferencesComponent-e7670a1cb9769a8db2c4b08863df73f6365bccb6bd0f1e6c89c0d33e959ad32c68afc64277ad3b312eff56f53019639611085b49cb0d36ca1a21134827bdf04a",
            "file": "src/app/modules/settings/preferences/preferences.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-preferences",
            "styleUrls": [
                "./preferences.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./preferences.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "colorOptions",
                    "defaultValue": "COLOR_LIST",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "currentFolder",
                    "defaultValue": "this.initialFolder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "DEFAULT_LANGUAGE",
                    "defaultValue": "'en'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "foldersList",
                    "defaultValue": "this.testFoldersList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "fontSizeOptions",
                    "defaultValue": "FONT_SIZE_LIST",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "frequencyOptions",
                    "defaultValue": "FREQUENCY_LIST",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "initialFolder",
                    "defaultValue": "'C:\\\\'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "isDirty",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "languagesOptions",
                    "defaultValue": "LANGUAGE_LIST",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "libraryFolders",
                    "defaultValue": "this.testLibraryFolders",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "libraryMovies",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "ngUnsubscribe",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "preferencesForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "preferencesObject",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPreferences",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "previousFolder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "testCurrentFolder",
                    "defaultValue": "'D:\\''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "testFoldersList",
                    "defaultValue": "['folder1', 'folder2']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "testLibraryFolders",
                    "defaultValue": "['C:\\\\Users\\\\', 'D:\\\\Movies']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "title",
                    "defaultValue": "'angular 4 with jquery'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onAddFolder",
                    "args": [
                        {
                            "name": "folderName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 181,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "folderName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onCloseModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCloses file explorer modal\n",
                    "description": "<p>Closes file explorer modal</p>\n"
                },
                {
                    "name": "onDeleteFolder",
                    "args": [
                        {
                            "name": "folder",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 193,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDeletes folder from library\n",
                    "description": "<p>Deletes folder from library</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4437,
                                "end": 4443,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "folder"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4431,
                                "end": 4436,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>folder directory to delete</p>\n"
                        }
                    ]
                },
                {
                    "name": "onEditFolder",
                    "args": [
                        {
                            "name": "folder",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 186,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "folder",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onGetLibraryFolders",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGet list of library folders\n",
                    "description": "<p>Get list of library folders</p>\n"
                },
                {
                    "name": "onGoToFolder",
                    "args": [
                        {
                            "name": "folder",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 231,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "folder",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onGoToParentFolder",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 223,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onGoToPreviousFolder",
                    "args": [
                        {
                            "name": "folder",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 215,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "folder",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onOpenFolder",
                    "args": [
                        {
                            "name": "folder",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 202,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOpens folder with system file explorer.\n",
                    "description": "<p>Opens folder with system file explorer.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4676,
                                "end": 4682,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "folder"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4670,
                                "end": 4675,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>folder directory to open</p>\n"
                        }
                    ]
                },
                {
                    "name": "onOpenModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOpens file explorer modal\n",
                    "description": "<p>Opens file explorer modal</p>\n"
                },
                {
                    "name": "onReset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 176,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nResets preferences.\n",
                    "description": "<p>Resets preferences.</p>\n"
                },
                {
                    "name": "onSave",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 168,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nsaves config file\n",
                    "description": "<p>saves config file</p>\n"
                },
                {
                    "name": "onScanLibrary",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nScans library folders for new movies\n",
                    "description": "<p>Scans library folders for new movies</p>\n"
                },
                {
                    "name": "onStopScanLibrary",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nScans library folders for new movies\n",
                    "description": "<p>Scans library folders for new movies</p>\n"
                },
                {
                    "name": "onSyncUserData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 161,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onUpdateOfflineMetadata",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdates imdb files\n",
                    "description": "<p>Updates imdb files</p>\n"
                },
                {
                    "name": "onUpdateTorrentDump",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 152,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdates thepiratebay torrent dump\n",
                    "description": "<p>Updates thepiratebay torrent dump</p>\n"
                },
                {
                    "name": "onValChange",
                    "args": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 237,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setFoldersList",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleTitle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component, OnInit,\n  // ChangeDetectorRef,\n  // ChangeDetectionStrategy,\n  OnDestroy\n} from '@angular/core';\nimport { Subject } from 'rxjs'\nimport { IpcService } from '@services/ipc.service';\nimport { COLOR_LIST, DEFAULT_PREFERENCES, FONT_SIZE_LIST, FREQUENCY_LIST, LANGUAGE_LIST, STRING_REGEX_PREFIX } from '@shared/constants';\nimport { takeUntil } from 'rxjs/operators';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { IPreferences } from '@models/preferences.model';\nimport { PreferencesService } from '@services/preferences.service';\n\n@Component({\n  selector: 'app-preferences',\n  templateUrl: './preferences.component.html',\n  styleUrls: ['./preferences.component.scss'],\n  // changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PreferencesComponent implements OnInit, OnDestroy {\n\n  initialFolder = 'C:\\\\'\n  testFoldersList = ['folder1', 'folder2']\n  testLibraryFolders = ['C:\\\\Users\\\\', 'D:\\\\Movies']\n  testCurrentFolder = 'D:\\''\n  title = 'angular 4 with jquery'\n  libraryMovies = []\n  libraryFolders = this.testLibraryFolders\n  foldersList = this.testFoldersList\n  currentFolder = this.initialFolder\n  previousFolder = ''\n  isDirty\n  preferencesObject: IPreferences\n\n  DEFAULT_LANGUAGE = 'en'\n  languagesOptions = LANGUAGE_LIST\n  frequencyOptions = FREQUENCY_LIST\n  fontSizeOptions = FONT_SIZE_LIST\n  colorOptions = COLOR_LIST\n  preferencesForm: FormGroup\n  private ngUnsubscribe = new Subject();\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private ipcService: IpcService,\n    private preferencesService: PreferencesService\n    // private cdr: ChangeDetectorRef\n  ) { }\n\n  ngOnInit() {\n\n    this.preferencesForm = this.formBuilder.group({\n      autoScan: [true, []],\n      darkMode: [true, []],\n      enableCache: [false, []],\n      language: ['en', []],\n      username: [true, []],\n      scanFreqValue: [1, []],\n      scanFreqUnit: ['min', []],\n\n      fontColor: ['min', []],\n      fontSize: ['min', []],\n      fontOpacity: ['min', []],\n      fontFamily: ['min', []],\n      backgroundColor: ['min', []],\n\n\n    }, {})\n\n    this.preferencesForm.valueChanges.subscribe(e => {\n      console.log(e);\n    })\n    // this.preferencesForm.controls[''].\n    // this.onGetLibraryFolders()\n    // this.onGetLibraryMovies()\n\n    // this.ipcService.libraryMovies.subscribe((value) => {\n    //   this.libraryMovies = value\n    //   this.cdr.detectChanges()\n    // })\n    this.ipcService.getFiles().then(value => {\n      console.log('getFiles', value);\n    }).catch(e => {\n      console.log(e);\n    })\n    this.ipcService.getSystemDrives().then(value => {\n      console.log('gotsystemdrives', value);\n    }).catch(e => {\n      console.log(e);\n    })\n\n    this.preferencesObject = this.preferencesService.getPreferences()\n    this.ipcService.preferences.pipe(takeUntil(this.ngUnsubscribe)).subscribe(e => {\n      console.log('this.ipcService.preferences ', e)\n      this.preferencesObject = e\n    })\n\n  }\n\n  ngOnDestroy(): void {\n    this.ngUnsubscribe.next()\n    this.ngUnsubscribe.complete()\n  }\n\n  toggleTitle() {\n  }\n\n  setFoldersList() {\n\n  }\n\n  /**\n   * Get list of library folders\n   */\n  onGetLibraryFolders() {\n  }\n\n  /**\n   * Opens file explorer modal\n   */\n  onOpenModal() {\n    this.onGoToFolder(this.initialFolder)\n    this.ipcService.getSystemDrives()\n  }\n\n  /**\n   * Closes file explorer modal\n   */\n  onCloseModal() {\n    this.previousFolder = ''\n  }\n\n  /**\n   * Scans library folders for new movies\n   */\n  onScanLibrary() {\n    this.ipcService.startScanLibrary()\n  }\n\n  /**\n   * Scans library folders for new movies\n   */\n  onStopScanLibrary() {\n    console.log('onStopScanLibrary');\n    this.ipcService.stopScanLibrary()\n  }\n\n  /**\n   * Updates thepiratebay torrent dump\n   */\n  onUpdateTorrentDump() {\n  }\n\n  /**\n   * Updates imdb files\n   */\n  onUpdateOfflineMetadata() {\n  }\n\n  onSyncUserData() {\n\n  }\n\n  /**\n   * saves config file\n   */\n  onSave() {\n    this.preferencesService.savePreferences(this.preferencesObject)\n    // this.preferencesObject.isDirty = false;\n  }\n\n  /**\n   * Resets preferences.\n   */\n  onReset() {\n    this.preferencesObject = DEFAULT_PREFERENCES\n    this.isDirty = false;\n  }\n\n  onAddFolder(folderName: string) {\n    this.ipcService.openFolder('');\n    // this.ipcService.openFolder(__dirname)\n    // this.unsavedPreferences.libraryFolders.push(folderName)\n  }\n  onEditFolder(folder) {\n  }\n\n  /**\n   * Deletes folder from library\n   * @param folder folder directory to delete\n   */\n  onDeleteFolder(folder) {\n    this.libraryFolders = this.libraryFolders.filter(h => h !== folder)\n    // this.cdr.detectChanges()\n  }\n\n  /**\n   * Opens folder with system file explorer.\n   * @param folder folder directory to open\n   */\n  onOpenFolder(folder: string) {\n    let folderToOpen = ''\n    const REGEX_PREFIX = new RegExp(STRING_REGEX_PREFIX, `gi`)\n    if (folder.match(REGEX_PREFIX) == null) { // not match\n      folderToOpen = this.currentFolder + folder;\n    } else {\n      folderToOpen = folder\n    }\n    // this.ipcService.call(this.ipcService.IPCCommand.OpenInFileExplorer, folderToOpen)\n  }\n\n  // modal file explorer\n  // goes back to the previous folder\n  onGoToPreviousFolder(folder: string) {\n    if (this.previousFolder) {\n      this.ipcService.openFolder(folder)\n      this.currentFolder = this.previousFolder\n    }\n  }\n\n  // goes back to the parent folder\n  onGoToParentFolder() {\n    if ((this.currentFolder.lastIndexOf('\\\\')) <= 2) {\n    } else {\n      this.previousFolder = this.currentFolder\n    }\n    // this.ipcService.call(this.ipcService.IPCCommand.GoToFolder, [this.ipcService.IPCCommand.Up, this.currentFolder])\n  }\n\n  onGoToFolder(folder: string) {\n    this.previousFolder = this.currentFolder\n    this.currentFolder = folder\n    this.ipcService.openFolder(folder)\n  }\n\n  onValChange(e) {\n    console.log('pref e ', e)\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// .icon-question-mark {\n//   background: url('../../../assets/icons/question-mark.svg');\n//   height: 16px;\n//   width: 16px;\n//   display: block;\n// }\n\na:hover {\n  cursor: pointer\n}\n\n\n.grid-container {\n  display: grid;\n  grid-column-gap: 10px;\n  grid-template-columns: auto auto;\n  // background-color: #2196F3;\n  padding: 50px;\n}\n\n.grid-item {\n  background-color: rgba(255, 255, 255, 0.8);\n  border: 1px solid rgba(0, 0, 0, 0.8);\n  padding: 20px;\n  // font-size: 30px;\n  text-align: center;\n}\n",
                    "styleUrl": "./preferences.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ipcService",
                        "type": "IpcService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "preferencesService",
                        "type": "PreferencesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 42,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ipcService",
                        "type": "IpcService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "preferencesService",
                        "type": "PreferencesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"container\">\n  <div class=\"form-check\" style=\"position:relative;left:15px;top:25px;z-index: 2\">\n    <input class=\"form-check-input\" type=\"checkbox\" [checked]=\"preferencesObject.isDarkMode\">\n  </div>\n\n  <!-- <i class='icon-question-mark' data-toggle=\"tooltip\" title=\"Enter the folders where your movie files are\"></i>\n  </div> -->\n  <div class='form-inline'>\n    <h2>General Settings </h2>\n    <mat-divider></mat-divider>\n    <i class='icon-question-mark' data-toggle=\"tooltip\" title=\"Enter the folders where your movie files are\"></i>\n    <form [formGroup]=\"preferencesForm\">\n\n      <app-input-container [parentForm]=\"preferencesForm\" [mdbFormControlName]='\"darkMode\"' [fieldLabel]=\"'Dark Mode'\"\n        [inputType]=\"'checkbox'\">\n      </app-input-container>\n\n      <app-input-container [parentForm]=\"preferencesForm\" [mdbFormControlName]='\"autoScan\"' [fieldLabel]=\"'Auto-scan'\"\n        [inputType]=\"'checkbox'\">\n      </app-input-container>\n\n      <app-input-container [parentForm]=\"preferencesForm\" [mdbFormControlName]='\"enableCache\"'\n        [fieldLabel]=\"'Enable Cache'\" [inputType]=\"'checkbox'\" [optionSelections]='frequencyOptions'>\n      </app-input-container>\n\n      <app-input-container [parentForm]=\"preferencesForm\" [mdbFormControlName]='\"scanFreqUnit\"'\n        [fieldLabel]=\"'Frequency'\" [inputType]=\"'select'\" [optionSelections]='frequencyOptions'>\n      </app-input-container>\n      <app-input-container [parentForm]=\"preferencesForm\" [mdbFormControlName]='\"scanFreqValue\"'\n        [fieldLabel]=\"'Value'\" [inputType]=\"'text'\">\n      </app-input-container>\n\n      <p>System update</p>\n      <button>Keyboard Shortcuts</button>\n    </form>\n  </div>\n\n  <h2>Library</h2>\n  <mat-divider></mat-divider>\n  <h5>Library Folders</h5>\n  <button class=\"btn btn-success\" data-toggle=\"modal\" data-target=\"#addLibraryModal\"\n    (click)='onOpenModal()'>Add(opensmodal)</button>\n  <button class=\"btn btn-primary\" (click)=\"onScanLibrary()\">Scan Library</button>\n  <button class=\"btn btn-danger\" (click)=\"onStopScanLibrary()\">Stop scan\n    Library</button>\n\n  <div class='tab container-fluid' *ngFor='let folder of preferencesObject.libraryFolders;'>\n    <div class='form-inline form-group'>\n      <button class=\"btn btn-success\" (click)=\"onOpenFolder(folder)\">Open</button>\n      <input type='text' class=\"form-control\" [(ngModel)]='folder' data-toggle=\"tooltip\" title=\"{{folder}}\" disabled />\n      <button class=\"btn btn-danger\" (click)=\"onDeleteFolder(folder)\">Delete</button>\n    </div>\n  </div>\n  <!-- <input id=\"myFile\" type=\"file\" webkitdirectory /> -->\n  <!-- <button class=\" btn btn-success\" (click)=\"onAddFolder(folderName.value); folderName.value=''\">Add</button> -->\n  <!-- <div *ngFor=\"let folder of unsavedPreferences.libraryFolders\">\n    <input type=\"text\" value=\"{{folder}}\" />\n  </div> -->\n  <div class='form-inline'>\n    <h5>Offline Torrent Dump </h5>\n    <span class='icon-question-mark' data-toggle=\"tooltip\" title=\"Search torrent even without internet\"></span>\n  </div>\n  <p>Last update: January 1, 1970 12:00 AM</p>\n  <button class=\"btn btn-primary\" (click)=\"onUpdateTorrentDump()\">Update Torrent\n    Dump</button>\n\n  <div class='form-inline'>\n    <h5>Offline Metadata </h5>\n    <span class='icon-question-mark' data-toggle=\"tooltip\" title=\"Enter the folders where your movie files are\">\n    </span>\n  </div>\n  <p>Last update: January 1, 1970 12:00 AM</p>\n  <button class=\"btn btn-primary\" (click)=\"onUpdateOfflineMetadata()\">Update Offline\n    Metadata</button>\n  <button class=\"btn btn-primary\" (click)=\"onSyncUserData()\">Sync User Data</button>\n  <button class=\"btn btn-success\" (click)=\"onSave()\">Save</button>\n  <!-- <button class=\"btn btn-success\" [disabled]='!preferencesObject.isDirty' (click)=\"onSave()\">Save</button> -->\n  <button class=\"btn btn-warning\" [disabled]='!isDirty' (click)=\"onReset()\">Reset</button>\n\n  <div class='form-inline'>\n    <h2>Playback</h2>\n    <mat-divider></mat-divider>\n    <!-- 3rd party quality -->\n    <div>\n      <p>Playback Quality</p>\n    </div>\n    <div>\n      <p>On Play...</p>\n      <!-- dropdown. (FullScreen, View Screen) -->\n    </div>\n    <div>\n      <h4>Subtitle Appearance</h4>\n\n      <app-input-container [parentForm]=\"preferencesForm\" [mdbFormControlName]='\"fontColor\"' [fieldLabel]=\"'Color'\"\n        [inputType]=\"'select'\" [optionSelections]='colorOptions'>\n      </app-input-container>\n      <app-input-container [parentForm]=\"preferencesForm\" [mdbFormControlName]='\"fontSize\"' [fieldLabel]=\"'Size'\"\n        [inputType]=\"'select'\" [optionSelections]='fontSizeOptions'>\n      </app-input-container>\n      <app-input-container [parentForm]=\"preferencesForm\" [mdbFormControlName]='\"fontOpacity\"' [fieldLabel]=\"'Opacity'\"\n        [inputType]=\"'select'\" [optionSelections]='frequencyOptions'>\n      </app-input-container>\n      <app-input-container [parentForm]=\"preferencesForm\" [mdbFormControlName]='\"fontFamily\"'\n        [fieldLabel]=\"'Font Family'\" [inputType]=\"'select'\" [optionSelections]='frequencyOptions'>\n      </app-input-container>\n      <app-input-container [parentForm]=\"preferencesForm\" [mdbFormControlName]='\"backgroundColor\"'\n        [fieldLabel]=\"'Background Color'\" [inputType]=\"'select'\" [optionSelections]='colorOptions'>\n      </app-input-container>\n\n\n      <!-- Font Family, -->\n      <!-- Font size -->\n      <!-- Font opacity -->\n      <!-- Background color, opacity -->\n      <!-- Window color, opacity -->\n      <!-- Character edge style -->\n      <!-- reset -->\n    </div>\n  </div>\n\n  <h2>Accounts</h2>\n  <mat-divider></mat-divider>\n\n\n  <div class='form-inline'>\n    <h2>Statistics</h2>\n    <i class='icon-question-mark' data-toggle=\"tooltip\" title=\"Your system and library stats.\"></i>\n    <mat-divider></mat-divider>\n  </div>\n  <table class=\"table table-striped table-inverse table-responsive\">\n    <thead class=\"thead-inverse\">\n      <tr>\n        <th>Key</th>\n        <th>Value</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td scope=\"row\">Library Size</td>\n        <td>21.GB</td>\n      </tr>\n      <tr>\n        <td scope=\"row\">Library Movies</td>\n        <td>30</td>\n      </tr>\n      <tr>\n        <td scope=\"row\">Library Movies</td>\n        <td>30</td>\n      </tr>\n    </tbody>\n  </table>\n</div>\n\n<div id=\"addLibraryModal\" class=\"modal fade\" role=\"dialog\">\n  <div class=\"modal-dialog\">\n    <div class=\"modal-content\">\n      <div class=\"modal-header\">\n        <button type=\"button\" class=\"close\" (click)='onCloseModal()' data-dismiss=\"modal\">&times;</button>\n      </div>\n      <div class=\"modal-body\">\n        <div>\n          <button class=\"btn btn-info\" (click)=\"onGoToPreviousFolder(currentFolder)\">Back</button>\n          <button class=\"btn btn-info\" (click)=\"onGoToParentFolder()\">Up</button>\n          <input type=\"text\" [(ngModel)]=\"currentFolder\" #currentFolderTextbox disabled>\n          <!-- <button class=\"btn btn-info\" (click)=\"onGoToFolder(currentFolderTextbox.value)\">Go</button> -->\n          <h3>Add Folder</h3>\n          <div class=\"row\">\n            <div class=\"col-6\" style=\"background-color: #3d3d3d;\">\n              <p>Disks</p>\n            </div>\n            <div class=\"col-6\" style=\"background-color:#161616;\">\n              <!-- <div class=\"col-6\" style=\"background-color:#fc8181;\"> -->\n              <p>Folders</p>\n              <ul class=\"list-unstyled\">\n                <li *ngFor=\"let folder of foldersList\">\n                  <a class='folder-link' style='text-decoration: underline'\n                    (click)='onGoToFolder(folder)'>{{folder}}</a>\n                  <input type=\"checkbox\" name=\"selected\" id=\"myId\" autocomplete=\"off\">\n                </li>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"modal-footer\">\n        <p>status bar...</p>\n        <button class=\"btn btn-success\" (click)=\"onSave()\">Save</button>\n        <button class=\"btn\" data-dismiss=\"modal\">Cancel</button>\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "PreviewComponent",
            "id": "component-PreviewComponent-5b3d37bc561645a622d73253bbd925dd6decb09736f681441efb339b55a9a82fba65b836212d3f68aae4ac3a1ffa938960a89c7f2fc0f1b8049a69d9f85ced6e",
            "file": "src/app/shared/components/preview/preview.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-preview",
            "styleUrls": [
                "./preview.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./preview.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "clipSrc",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "null",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "globalPlayerApiScript",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "hasAlreadySelected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "hasInitialSelected",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "hasTrailerClip",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "isAvailable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "isHide",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "isMute",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "isTrailerOnly",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "isYTPlaying",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "isYTReady",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "playedTmdbId",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "player",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "previewMovie",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MDBMovie",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "procBookmark",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "procHighlight",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "procWatched",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "showPreviewOverlayContext",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "youtubeUrl",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 37
                }
            ],
            "methodsClass": [
                {
                    "name": "frameReady",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "generateYoutube",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 216,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCreates youtube html script.\n",
                    "description": "<p>Creates youtube html script.</p>\n"
                },
                {
                    "name": "getVideoClip",
                    "args": [
                        {
                            "name": "movie",
                            "type": "MDBMovie",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTODO: Simplify component code. Transfer codes to the service.\nPerforms actions for selected movie.\n",
                    "description": "<p>TODO: Simplify component code. Transfer codes to the service.\nPerforms actions for selected movie.</p>\n",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3929,
                                "end": 3934,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "movie"
                            },
                            "type": "MDBMovie",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3923,
                                "end": 3928,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the selected movie</p>\n"
                        }
                    ]
                },
                {
                    "name": "getYear",
                    "args": [
                        {
                            "name": "releaseDate",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 276,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets the year.\n",
                    "description": "<p>Gets the year.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 8284,
                                "end": 8295,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "releaseDate"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 8278,
                                "end": 8283,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>release date with format YYYY-MM-DD</p>\n"
                        }
                    ]
                },
                {
                    "name": "goToDiscover",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 285,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDiscovers movies based from criteria.\n",
                    "description": "<p>Discovers movies based from criteria.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 8481,
                                "end": 8485,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 151,
                                "escapedText": "type"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 8475,
                                "end": 8480,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>type of discovery. (year, certification, genre)</p>\n"
                        },
                        {
                            "name": {
                                "pos": 8546,
                                "end": 8548,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "id"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 8540,
                                "end": 8545,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>value to discover</p>\n"
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "goToMovie",
                    "args": [
                        {
                            "name": "id",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 264,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGoes to detail of the selected movie.\n",
                    "description": "<p>Goes to detail of the selected movie.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onHidePlayer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 302,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onPlayerReady",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onPlayerStateChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetects the state change of trailer player (YouTube)\n",
                    "description": "<p>Detects the state change of trailer player (YouTube)</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2957,
                                "end": 2962,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "event"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2951,
                                "end": 2956,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "playMovie",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 309,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "playPreview",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 292,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeYoutube",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 225,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setVideo",
                    "args": [
                        {
                            "name": "videoId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 208,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "videoId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "stopPreview",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 296,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleBookmark",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 233,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ]
                },
                {
                    "name": "toggleMute",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 251,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleWatched",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 242,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, AfterViewInit, OnDestroy, Pipe, PipeTransform, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { DataService } from '@services/data.service';\nimport { GenreCodes } from '@models/interfaces';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { MovieService } from '@services/movie/movie.service';\nimport { UserDataService } from '@services/user-data/user-data.service';\nimport { WatchedService } from '@services/watched.service';\nimport { MDBMovie } from '@models/mdb-movie.model';\nimport GeneralUtil from '@utils/general.util';\nimport { TMDB_FULL_MOVIE_DETAILS } from 'app/mock-data-movie-details';\n\n@Component({\n  selector: 'app-preview',\n  templateUrl: './preview.component.html',\n  styleUrls: ['./preview.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PreviewComponent implements OnInit, OnDestroy, AfterViewInit {\n\n  constructor(\n    private dataService: DataService,\n    private watchedService: WatchedService,\n    private router: Router,\n    private activatedRoute: ActivatedRoute,\n    private userDataService: UserDataService,\n    private cdr: ChangeDetectorRef,\n    private movieService: MovieService,\n    private domSanitizer: DomSanitizer,\n  ) { }\n\n  previewMovie: MDBMovie\n  clipSrc = null\n  youtubeUrl = ''\n  player;\n  globalPlayerApiScript\n  hasAlreadySelected: boolean;\n  isYTReady = false\n  hasInitialSelected = false\n  isHide = true\n  playedTmdbId = 0\n  isMute = false\n  isYTPlaying = false\n  hasTrailerClip = false\n  isAvailable = false\n  procBookmark = false\n  procWatched = false\n  procHighlight = false\n  showPreviewOverlayContext = false\n  isTrailerOnly = false;\n\n  ngOnInit() {\n    this.frameReady()\n  }\n\n  ngAfterViewInit(): void {\n\n    // this.dataService.previewMovie.subscribe((e: MDBMovie) => {\n    //   console.log('PREVIEWMOVIE:', e)\n      this.getVideoClip(new MDBMovie(TMDB_FULL_MOVIE_DETAILS))\n      this.showPreviewOverlayContext = this.router.url.includes('/details/') ? false : true\n      this.cdr.detectChanges()\n    // })\n  }\n\n  ngOnDestroy() {\n    this.removeYoutube()\n  }\n\n  frameReady() {\n    (window as any).onYouTubeIframeAPIReady = () => {\n      this.player = new (window as any).YT.Player('player', {\n        height: '100%',\n        width: '100%',\n        events: {\n          onReady: (event: any) => this.onPlayerReady(event),\n          onStateChange: (event: any) => this.onPlayerStateChange(event)\n        },\n        playerVars: {\n          autoplay: 0,\n          controls: 0,\n          modestbranding: 1,\n          rel: 1,\n          showInfo: 0,\n          disablekb: 1\n        }\n      });\n    }\n  }\n\n  onPlayerReady(event) {\n    event.target.cueVideoById({\n      videoId: this.youtubeUrl\n    });\n    event.target.playVideo();\n  }\n\n  /**\n   * Detects the state change of trailer player (YouTube)\n   * @param event\n   */\n  onPlayerStateChange(event) {\n    /**\n     * -1 (unstarted)\n     * 0 (ended)\n     * 1 (playing)\n     * 2 (paused)\n     * 3 (buffering)\n     * 5 (video cued).\n     * YT.PlayerState.ENDED\n     * YT.PlayerState.PLAYING\n     * YT.PlayerState.PAUSED\n     * YT.PlayerState.BUFFERING\n     * YT.PlayerState.CUED\n     */\n    console.log('onPlayerStateChange: ', event.data);\n    if (event.data === 1) {\n      this.isYTReady = true\n      this.isYTPlaying = true\n    }\n    if (event.data === -1 || event.data === 5 || event.data === 0) {\n      this.isYTReady = false\n      this.isYTPlaying = false\n    }\n    if (event.data === 2) {\n      const root = this\n      console.log('paused')\n      // setTimeout(() => {\n      //   root.player.playVideo()\n      //   console.log('settoplay')\n      // }, 3000);\n    }\n    this.cdr.detectChanges()\n\n  }\n\n  /**\n   * TODO: Simplify component code. Transfer codes to the service.\n   * Performs actions for selected movie.\n   * @param movie the selected movie\n   */\n  async getVideoClip(movie: MDBMovie) {\n    this.previewMovie = movie\n    this.isHide = false\n    if (movie.tmdbId === this.playedTmdbId) {\n      return\n    }\n    this.playedTmdbId = this.previewMovie.tmdbId\n    this.hasInitialSelected = true\n    let videoId = ''\n    const results = []\n    let title = this.previewMovie.title.toLowerCase()\n    const query = `${this.previewMovie.title} ${this.getYear(this.previewMovie.releaseDate)}`\n    title = title.replace(/[.…]+/g, '')\n\n    let theRes = await this.movieService.getRelatedClips(this.previewMovie.tmdbId).toPromise()\n\n    if (theRes.results.length === 0) {\n      this.clipSrc = null\n      return\n    }\n\n    theRes = theRes.results.find(e => e.type.toLowerCase() === 'trailer')\n    if (theRes) {\n      this.hasTrailerClip = true\n      theRes = theRes.key\n    } else {\n      this.clipSrc = null\n      this.hasTrailerClip = false\n      return\n    }\n    // const index = Math.round(Math.random() * (theRes.results.length - 1))\n    // theRes = theRes.results[index].key\n    // this.movieService.getRandomVideoClip(query).subscribe(data => {\n    // data.forEach(element => {\n    //   const snipTitle = $.parseHTML(element.snippet.title.toLowerCase())[0].textContent\n    //   if ((snipTitle.indexOf(title) >= 0) && ((snipTitle.indexOf('scene') >= 0) || (snipTitle.indexOf('trailer') >= 0) || (snipTitle.indexOf('movie clip') >= 0)) && (snipTitle.indexOf('behind the scene') === -1)) {\n    //     results.push({ title: snipTitle, videoId: element.id.videoId })\n    //   }\n    // })\n    // // HiN6Ag5-DrU?VQ=HD720\n    // const index = Math.round(Math.random() * (results.length - 1))\n    // console.log('clips list length: ', results.length, ' clip index: ', index, results[index]);\n\n    videoId = theRes\n    // videoId = results[index].videoId\n    this.clipSrc = this.domSanitizer.bypassSecurityTrustResourceUrl(`https://www.youtube.com/embed/${videoId}?VQ=HD720&autoplay=1&rel=1&controls=0&disablekb=1&fs=0&modestbranding=1`)\n    this.clipSrc = `https://www.youtube.com/embed/${videoId}?VQ=HD720&autoplay=1&rel=1&controls=0&disablekb=1&fs=0&modestbranding=1`\n    this.youtubeUrl = videoId\n    console.log('CLIPSRC', this.clipSrc)\n    // if results[index].snippet.channelTitle  === 'Movieclips' ---- cut the video by 30seconds\n    if (!this.hasAlreadySelected) {\n      this.generateYoutube()\n      this.hasAlreadySelected = true\n    }\n\n    const root = this\n    setTimeout(() => {\n      // root.setVideo(videoId)\n      this.cdr.detectChanges()\n    }, 5000)\n    // })\n  }\n\n  setVideo(videoId: string) {\n    this.player.loadVideoById(videoId);\n    // this.player.cueVideoByUrl(videoId);\n  }\n\n  /**\n   * Creates youtube html script.\n   */\n  generateYoutube(): void {\n    const doc = (window as any).document;\n    const playerApiScript = doc.createElement('script');\n    playerApiScript.type = 'text/javascript';\n    playerApiScript.src = 'https://www.youtube.com/iframe_api';\n    this.globalPlayerApiScript = playerApiScript\n    doc.body.appendChild(this.globalPlayerApiScript);\n  }\n\n  removeYoutube() {\n    const doc = (window as any).document;\n    if (this.globalPlayerApiScript) {\n      doc.body.removeChild(this.globalPlayerApiScript)\n      this.globalPlayerApiScript = null\n    }\n  }\n\n  async toggleBookmark(): Promise<any> {\n    this.procBookmark = true\n    let bmDoc\n    bmDoc = await this.userDataService.toggleBookmark(this.previewMovie)\n    console.log('BOOKMARKADD/remove:', bmDoc)\n    this.procBookmark = false\n    // this.cdr.detectChanges()\n  }\n\n  async toggleWatched() {\n    this.procWatched = true\n    let wDocId\n    wDocId = await this.watchedService.toggleWatched(this.previewMovie)\n    console.log('WATCHEDADD/remove:', wDocId)\n    this.procBookmark = false\n    // this.cdr.detectChanges()\n  }\n\n  toggleMute() {\n    if (this.isMute) {\n      this.player.setVolume(100)\n      this.isMute = false\n    } else {\n      this.player.setVolume(0)\n      this.isMute = true\n    }\n  }\n  /**\n   * Goes to detail of the selected movie.\n   * @param movie the movie selected\n   */\n  goToMovie(id: any) {\n    const highlightedId = id;\n    this.dataService.updateHighlightedMovie(highlightedId);\n    this.router.navigate([`/details/${highlightedId}`], { relativeTo: this.activatedRoute });\n    this.isHide = true\n    this.onHidePlayer()\n  }\n\n  /**\n   * Gets the year.\n   * @param releaseDate release date with format YYYY-MM-DD\n   */\n  getYear(releaseDate: string) {\n    return GeneralUtil.getYear(releaseDate)\n  }\n\n  /**\n   * Discovers movies based from criteria.\n   * @param type type of discovery. (year, certification, genre)\n   * @param id value to discover\n   */\n  goToDiscover(type: string, id: string, name?: string) {\n    this.dataService.updateDiscoverQuery({ type: type, value: id, name: name })\n    this.router.navigate([`/discover`], { relativeTo: this.activatedRoute });\n    this.isHide = true\n    this.onHidePlayer()\n  }\n\n  playPreview() {\n    this.player.playVideo();\n  }\n\n  stopPreview() {\n    if (this.player) {\n      this.player.stopVideo();\n    }\n  }\n\n  onHidePlayer() {\n    console.log(this.player)\n    this.isHide = true\n    this.clipSrc = null\n    this.stopPreview()\n  }\n\n  playMovie() {\n\n  }\n\n}\n\n/**\n * Converts genre code into its genre name equivalent.\n * @param genreCode genre code origin\n * @returns genre name\n */\n@Pipe({ name: 'genre' })\nexport class GenrePipe implements PipeTransform {\n  constructor() { }\n  transform(genreCode: number): string {\n    return GenreCodes[genreCode]\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// #previewOverlayContext {\n//   // opacity: 0\n//   transition: .3s\n// }\n\n#previewOverlayContext:hover {\n  opacity: 1\n}\n\n.overlayInvisible {\n  opacity: 0;\n  transition: .3s\n}\n\n.overlayInvisible :hover {\n  opacity: 1\n}\n\n#closeIcon {\n  background-image: url(~/assets/icons/close.svg);position: absolute;\n  filter: invert(1) contrast(0);\n  color: #ccc;\n  background-position: center;\n  background-size: cover;\n  cursor: pointer;\n  height: 20px;\n  width: 20px;\n  right: 8vw;\n  margin: auto;\n  transform: translateY(50%);z-index:5000;\n}\n\n#closeIcon :hover {\n  filter: invert(1);\n}\n\n",
                    "styleUrl": "./preview.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dataService",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "watchedService",
                        "type": "WatchedService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userDataService",
                        "type": "UserDataService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "movieService",
                        "type": "MovieService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "domSanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "dataService",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "watchedService",
                        "type": "WatchedService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userDataService",
                        "type": "UserDataService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "movieService",
                        "type": "MovieService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "domSanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy",
                "AfterViewInit"
            ],
            "templateData": "<div [hidden]='isHide' style='width:100%;height:100%;position: fixed;\nz-index: 3000;\n    padding-top: 50px;\n    background-color: rgba(4,4,4,0.8);cursor:pointer' (click)='onHidePlayer()'>\n\n  <!-- close x button -->\n  <div id='closeIcon' (click)=\"onHidePlayer()\" data-toggle='tooltip' title='Close Preview'></div>\n\n  <div (click)='$event.stopPropagation()'\n    style='cursor:default;transform: translate(0%, 10%); margin-left: 50px; position:relative; height:calc(90vw/2.333333); width: 90vw;'>\n    <!-- movie details, backdrop -->\n    <div id='previewOverlay' style='position:absolute;\n      z-index: 5000;'>\n      <div *ngIf='hasInitialSelected'>\n        <!-- backdrop -->\n        <div *ngIf='!isYTReady' class='image-container' style='background-color: black; position: absolute; background-size: cover;\n        background-position: center;\n        height:calc(90vw/2.333333); width: 90vw;\n        min-height: 436px;'\n          [ngStyle]=\"{'background-image': 'url(https://image.tmdb.org/t/p/original'+previewMovie.backropPath+')'}\">\n        </div>\n      </div>\n    </div>\n\n    <!-- movie details and buttons -->\n    <!-- <h1>{{isYTReady&&showPreviewOverlayContext}}</h1> -->\n    <div *ngIf='hasInitialSelected' id='previewOverlayContext'\n      [ngClass]=\"{'overlayInvisible':(isYTReady&&showPreviewOverlayContext)==true}\"\n      style='position:absolute; height: 100%;width:66%; padding-left: 5vw;text-shadow: 3px 3px 5px #333333; padding-left: 5vw; padding-top: 10%; min-height: 436px;\n        background: -webkit-linear-gradient(right, rgba(3,3,3,0), rgba(3,3,3, 1)); border: solid 1px red;;z-index:5001'>\n\n      <h3>{{previewMovie.title}}</h3>&nbsp;\n      <h3 class='text-hyperlink' (click)='goToDiscover(\"year\",getYear(previewMovie.releaseDate))'>\n        ({{previewMovie.releaseDate|releaseYear}})\n      </h3>\n      <p>{{ previewMovie.overview }}</p>\n      <!-- <div class='d-inline-flex'>\n      </div>\n      <br>\n      <span class='text-hyperlink' (click)='goToDiscover(\"genre\",item)'\n        *ngFor=\"let item of previewMovie.genreIds; let isLast = last\">\n        {{item|genre}}{{ isLast ? \"\" : \", \" }}\n      </span>\n      <button class='btn btn-primary' (click)='playPreview()' *ngIf=\"!isYTPlaying && hasTrailerClip\">Play\n        Trailer</button>\n      <button class=' btn btn-primary' (click)='stopPreview()' *ngIf=\"isYTPlaying\">Stop Playing</button>\n      <button class=' btn btn-primary' (click)='toggleMute()' *ngIf=\"isYTPlaying\">\n        <span *ngIf=\"!isMute\">Mute</span>\n        <span *ngIf=\"isMute\">UnMute</span>\n      </button>\n      <button class=' btn btn-primary' (click)='playMovie()' *ngIf=\"previewMovie.video\">\n        <span>Play</span>\n      </button>\n      <p>{{ previewMovie.overview }}</p>\n      <button class='btn btn-outline-secondary' (click)=\"goToMovie(previewMovie.tmdbId)\">More Info</button> -->\n\n      <!-- <button class='btn btn-outline-info' (click)='toggleBookmark()'>\n          <span *ngIf=\"!(previewMovie.userData.bookmark && previewMovie.userData.bookmark.id)\">Bookmark</span>\n          <span *ngIf=\"previewMovie.userData.bookmark && previewMovie.userData.bookmark.id\">UnBookmark</span>\n        </button>\n        <button class='btn btn-outline-info' (click)='toggleWatched()'>\n          <span *ngIf=\"!(previewMovie.userData.watched && previewMovie.userData.watched.id)\">Mark as Watched</span>\n          <span *ngIf=\"previewMovie.userData.watched && previewMovie.userData.watched.id\">\n            Remove Watched</span>\n        </button> -->\n    </div>\n    <!-- youtube player -->\n    <div style='\n    height:calc(90vw/2.333333); width: 90vw;\n    min-height: 436px;\n    background-color: violet;\n    position: absolute;' [hidden]='!isYTReady'>\n      <!-- <div style='height:75vh;width: calc(75vh*2.333333);transform: translate(8.9%, 10%);\n    position: absolute;' [hidden]='!isYTReady'> -->\n      <div style='height:100%;width: 100%;' [hidden]='!isYTReady' id=\"player\" #player>\n      </div>\n    </div>\n  </div>\n\n</div>\n"
        },
        {
            "name": "ProfileComponent",
            "id": "component-ProfileComponent-3a24dd37ec96cbba40daa4e8d88c59caaff4e40d895e071571a104415f02bb0fd3f9ed94385428eefc0fe449579c62e5d6f82d5dd48ee0b2661ca288b28f6943",
            "file": "src/app/modules/user/profile/profile.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-profile",
            "styleUrls": [
                "./profile.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./profile.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "background",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ThemePalette",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "defaultUserProfile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "firebaseUser$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "moviesBookmarksList",
                    "defaultValue": "{\n    count: 0,\n    data: []\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "moviesList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "moviesWatchedList",
                    "defaultValue": "{\n    count: 0,\n    data: []\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "photoUrl",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "userProfile",
                    "defaultValue": "{\n    username: 'peterparker123',\n    emailAddress: 'peterparker123@gmail.com',\n    watchedCount: 90,\n    bookmarkedCount: 9,\n    bio: 'movies... I like'\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IProfile",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "userStats",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methodsClass": [
                {
                    "name": "changeEmailAddress",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "changePassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "countBookmarks",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ]
                },
                {
                    "name": "exportUserData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getUser",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getUserData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onReset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSave",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSignOut",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "treatAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "uploadFile",
                    "args": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component, OnInit,\n} from '@angular/core';\nimport { ThemePalette } from '@angular/material/core';\n// import { Observable } from 'rxjs';\n// import { UserState } from '../../../app.state';\n// import { Select } from '@ngxs/store';\n// import { FirebaseService } from 'src/app/services/firebase.service';\nimport { UserDataService } from '@services/user-data/user-data.service';\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.scss']\n})\nexport class ProfileComponent implements OnInit {\n  // @Select(UserState) user$: Observable<any>\n  // moviesList = TMDB_SEARCH_RESULTS.results\n  moviesList = []\n  userProfile: IProfile = {\n    username: 'peterparker123',\n    emailAddress: 'peterparker123@gmail.com',\n    watchedCount: 90,\n    bookmarkedCount: 9,\n    bio: 'movies... I like'\n  }\n  photoUrl = ''\n  userStats: {\n    filmsNumber: 54\n  }\n  defaultUserProfile\n  firebaseUser$\n  moviesWatchedList = {\n    count: 0,\n    data: []\n  }\n  moviesBookmarksList = {\n    count: 0,\n    data: []\n  }\n  background: ThemePalette = undefined\n  constructor(\n    private userDataService: UserDataService\n  ) { }\n\n  ngOnInit() {\n    // this.countBookmarks()\n    this.getUser()\n    this.treatAll()\n    this.getUserData()\n  }\n\n  ngAfterViewInit(): void {\n    this.background = this.background ? undefined : 'primary'\n  }\n  treatAll() {\n    // this.firebaseService.getEmpty()\n  }\n\n  getUser() {\n    // this.firebaseService.getUser().then(e => {\n    //   console.log('fbuser', this.firebaseUser$);\n    //   this.firebaseUser$ = e\n    //   this.defaultUserProfile = e\n    //   this.cdr.detectChanges()\n    // })\n  }\n\n  changePassword() {\n\n  }\n\n  changeEmailAddress() {\n\n  }\n\n  onSave() {\n\n  }\n\n  onReset() {\n    this.userProfile = this.defaultUserProfile\n  }\n\n  onSignOut() {\n\n  }\n\n  async countBookmarks() {\n    // const count = await this.firebaseService.countAll('bookmark')\n    // console.log('count: ', count)\n  }\n\n  uploadFile(data) {\n    console.log(data)\n    // this.firebaseService.uploadToStorage(data.item(0))\n  }\n\n  exportUserData() {\n\n  }\n\n  getUserData() {\n    this.userDataService.getUserDataFirstPage('watched').then(e => {\n      console.log('getuserdata watched', e)\n      this.moviesWatchedList.count = e.totalResults\n      this.moviesWatchedList.data = e.results\n    })\n    this.userDataService.getUserDataFirstPage('bookmark').then(e => {\n      console.log('getuserdata bookmark', e)\n      this.moviesBookmarksList.count = e.totalResults\n      this.moviesBookmarksList.data = e.results\n    })\n  }\n}\n\nexport interface IProfile {\n  username: string,\n  watchedCount: number | 0,\n  bookmarkedCount: number | 0,\n  emailAddress: string,\n  bio: string\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../styles.scss';\n.mat-divider {\n  border-top-color: rgb(202, 202, 202);\n}\n",
                    "styleUrl": "./profile.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userDataService",
                        "type": "UserDataService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "userDataService",
                        "type": "UserDataService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div>\n\n  <div>\n    <div class='image-container'\n      style='border-radius: 50%; height:100px;width:100px;background-image: url(\"./assets/offline-image/clint-eastwood.jfif\");'>\n    </div>\n    <!-- let movie of (movies$| async)?.movies -->\n    <!-- <div class='image-container' style='border-radius: 50%; height:100px;width:100px;'\n    [ngStyle]=\"{'background-image':'url('+photoUrl+')'}\"> </div> -->\n    <p>{{userProfile.bio}}</p>\n    <h2>{{userProfile.username}}</h2>\n  </div>\n  <button (click)='exportUserData()'>Export user data...</button>\n  <mat-tab-group>\n    <mat-tab label=\"Overview\">\n      <ng-container [ngTemplateOutlet]='overviewTemplate'></ng-container>\n    </mat-tab>\n    <mat-tab label=\"Movies\">\n      <ng-container [ngTemplateOutlet]='overviewTemplate'></ng-container>\n    </mat-tab>\n    <mat-tab label=\"Series\" disabled></mat-tab>\n    <mat-tab label=\"Music\" disabled></mat-tab>\n    <mat-tab label=\"Podcast\" disabled></mat-tab>\n    <mat-tab label=\"Video Games\" disabled></mat-tab>\n  </mat-tab-group>\n\n  <ng-template #overviewTemplate>\n\n    <app-horizontal-card-list [title]='\"Watched\"' [totalCount]='moviesWatchedList.count' [moviesList]='moviesWatchedList.data'></app-horizontal-card-list>\n    <app-horizontal-card-list [title]='\"Bookmarks\"' [totalCount]='moviesBookmarksList.count' [moviesList]='moviesBookmarksList.data'></app-horizontal-card-list>\n\n    <div>\n      <h3>My Stats</h3>\n      <label>You have {{userProfile.bookmarkedCount}} bookmarked movies.</label>\n      <button routerLink='./bookmarks' href='#' *ngIf=\"userProfile.bookmarkedCount\">Bookmarks</button>\n      <label>You have watched {{userProfile.watchedCount}} movies.</label>\n      <button routerLink='./watched' href='#' *ngIf=\"userProfile.watchedCount\">Watched</button>\n    </div>\n    <div>\n      <h3>Most Played</h3>\n    </div>\n  </ng-template>\n</div>\n  <!-- <input type=\"file\" id=\"myfile\" placeholder=\"Upload file\" accept=\".jpg,.jpeg,.png\" name=\"myfile\"\n    (change)='uploadFile($event.target.files)'>\n    <button class='btn btn-primary'>Change\n      profile image</button>\n    <p>{{firebaseUser$.email}}</p> -->\n\n    <!-- <div class='container'>\n      <div class='row'>\n        <div class='col'>\n          <h3>My Information</h3>\n          <label>Username: <input [value]='userProfile.username' /></label>\n          <label>Password: <input /><button (click)='changePassword()'>Change</button></label>\n          <label>Email Address: <input [value]='userProfile.emailAddress' /><button\n            (click)='changeEmailAddress()'>Change</button></label>\n            <button (click)='onSave()'>Save</button>\n            <button (click)='onReset()'>Reset</button>\n            <button (click)='onSignOut()'>Sign out: </button>\n          </div>\n        </div>\n      </div> -->\n"
        },
        {
            "name": "ResultsComponent",
            "id": "component-ResultsComponent-61cdcbf8374fa9c38c88349a250a852524a3366beb26529ff7fa51fbfa69b6f6abe97c128b973e8934674d1a194161a9d41e9d79a3207f32ab7b0fdf05008e80",
            "file": "src/app/components/results/view/results.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-results",
            "styleUrls": [
                "./results.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./results.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cardWidth",
                    "defaultValue": "'130px'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "currentPage",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "currentSearchQuery",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "displayMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "displaySnackbar",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "hasMoreResults",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "hasSearchResults",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "isProcSearching",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "procLoadMoreResults",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "searchQuery",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ISearchQuery",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "searchResults",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "selectedMovie",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "null",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "selectedMovies",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "getData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSubscribes to list of highlighted movies.\n",
                    "description": "<p>Subscribes to list of highlighted movies.</p>\n"
                },
                {
                    "name": "getMoreResults",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIncrements the currentPage by 1 to get more results.\n",
                    "description": "<p>Increments the currentPage by 1 to get more results.</p>\n"
                },
                {
                    "name": "getSearchResults",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { environment } from '@environments/environment';\nimport { Component, OnInit, OnDestroy } from '@angular/core'\nimport { TMDB_SEARCH_RESULTS } from '../../../mock-data';\nimport { TmdbParameters, TmdbSearchMovieParameters } from '@models/interfaces'\nimport { DataService } from '@services/data.service'\nimport { MovieService } from '@services/movie/movie.service'\nimport { ISearchQuery } from '@core/components/top-navigation/top-navigation.component'\n\n@Component({\n  selector: 'app-results',\n  templateUrl: './results.component.html',\n  styleUrls: ['./results.component.scss']\n})\nexport class ResultsComponent implements OnInit, OnDestroy {\n  searchResults = []\n  searchQuery: ISearchQuery\n  hasSearchResults = false\n  hasMoreResults = false\n  currentSearchQuery\n  selectedMovie = null\n  selectedMovies = []\n  cardWidth = '130px'\n  displayMessage = ''\n  displaySnackbar = false\n  currentPage = 1\n  isProcSearching = true\n  procLoadMoreResults = false\n\n  constructor(\n    private dataService: DataService,\n    private movieService: MovieService) { }\n\n  ngOnInit(): void {\n    console.log('inResutlts')\n    if (environment.runConfig.useTestData === true) {\n      this.searchResults = TMDB_SEARCH_RESULTS.results\n    } else {\n      this.getData()\n    }\n  }\n\n  ngOnDestroy(): void {\n  }\n\n  /**\n   * Subscribes to list of highlighted movies.\n   */\n  getData() {\n    this.dataService.searchQuery.subscribe(data => {\n      console.log('fromdataservice searchQuery: ', data);\n      this.isProcSearching = true;\n      this.searchResults = [] // clear for new search\n      this.currentPage = 1\n      this.searchQuery = data\n      this.getSearchResults()\n      this.currentSearchQuery = this.searchQuery.query\n    });\n  }\n\n  getSearchResults() {\n    const paramMap = new Map<TmdbParameters | TmdbSearchMovieParameters, any>();\n    paramMap.set(TmdbSearchMovieParameters.Query, this.searchQuery.query);\n    this.movieService.searchMovie(paramMap).subscribe(data => {\n      this.searchResults.push(...data.results)\n      if (data.total_pages > this.currentPage) {\n        this.hasMoreResults = true\n      }\n      this.isProcSearching = false;\n    })\n  }\n\n  /**\n   * Increments the currentPage by 1 to get more results.\n   */\n  getMoreResults() {\n    const paramMap = new Map<TmdbParameters | TmdbSearchMovieParameters, any>();\n    paramMap.set(TmdbSearchMovieParameters.Query, this.searchQuery.query);\n    paramMap.set(TmdbParameters.Page, ++this.currentPage);\n    this.procLoadMoreResults = true\n    this.movieService.searchMovie(paramMap).subscribe(data => {\n      this.searchResults = data.results\n      // this.searchResults.push(...data.results) // for some reason this doesn't work anymore\n      if (data.total_pages <= this.currentPage) {\n        this.hasMoreResults = false\n      }\n      this.procLoadMoreResults = false\n    })\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./results.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dataService",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "movieService",
                        "type": "MovieService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "dataService",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "movieService",
                        "type": "MovieService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div [hidden]='true' style='background-color: black;width: 100%;height:100vh;'>\n\n</div>\n<app-selected-list></app-selected-list>\n\n<select class=\"form-control\" [(ngModel)]=\"cardWidth\" style='width: 200px; float:right'>\n  <option value='100px'>small</option>\n  <option value='130px'>medium</option>\n  <option value='180px'>large</option>\n  <option value='250px'>xtra large</option>\n</select>\n\n<div class=\"container-fluid\">\n\n  <div *ngIf='searchResults.length===0 && !isProcSearching'>\n    <h1 class='jumbo-message'>No results found for '{{currentSearchQuery}}' :(</h1>\n  </div>\n\n  <div *ngIf='isProcSearching'>\n    <h1 class='jumbo-message'>Searching for '{{currentSearchQuery}}'...</h1>\n  </div>\n\n  <h1 *ngIf=\"searchResults.length>0\">Search results for \"{{currentSearchQuery}}\"</h1>\n  <div *ngIf='searchResults.length>0'>\n    <app-card-list [movieList]='searchResults' [cardWidth]='cardWidth' [displayMode]='\"movie-cards-display-grid\"' [listType]='\"none\"'></app-card-list>\n    <div *ngIf='currentSearchQuery && !procLoadMoreResults' style='width: 100%; text-align: center; height: 80px;'>\n      <h5 class='text-hyperlink' *ngIf=\"hasMoreResults\" (click)='getMoreResults()'>Load more results...</h5>\n    </div>\n    <div *ngIf='procLoadMoreResults'>\n      <mat-spinner [diameter]='20'></mat-spinner>\n    </div>\n  </div>\n</div>\n<div>\n  <h1 *ngIf=\"!currentSearchQuery\">No results found for \"{{currentSearchQuery}} :(\"</h1>\n</div>\n<div id='snackbar' [ngClass]=\"{'show ': displaySnackbar}\">\n  <p>{{displayMessage}}</p>\n</div>\n<!-- <h1>You are offline</h1> -->\n<!-- max-width: calc(320px * var(--ytd-rich-grid-items-per-row) + 16px * var(--ytd-rich-grid-items-per-row));\n\nFONT-WEIGHT: 500;\nmargin-left: calc(16px / 2);\nmargin-right: calc(16px / 2);\nmargin-bottom: 40px;\nwidth: calc(100% / (5) - 16px - 0.01px); -->\n"
        },
        {
            "name": "SearchComponent",
            "id": "component-SearchComponent-504750b7dbb4fc8e574076ffb79b6f7efaa37682f058f4b864083517f7868204e9cdc75fe2679ab495b47ed05637c53905193a2d54506b2c9d97208ac78b1354",
            "file": "src/app/components/search/search.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-search",
            "styleUrls": [
                "./search.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./search.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-search',\n  templateUrl: './search.component.html',\n  styleUrls: ['./search.component.scss']\n})\nexport class SearchComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./search.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>\n  search works!\n</p>\n"
        },
        {
            "name": "SelectedListComponent",
            "id": "component-SelectedListComponent-1f91f943789ac09c65adb59e64f3be388816a968ed23efed60601137c6391b30d01258611da3ebba2800b5b83c025c8b40c5389bc6fc6b260582e8b83467a43c",
            "file": "src/app/shared/components/selected-list/selected-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-selected-list",
            "styleUrls": [
                "./selected-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./selected-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "display",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "movieIdList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "moviesListSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "addBookmark",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdds bookmarks to all items in the list.\n",
                    "description": "<p>Adds bookmarks to all items in the list.</p>\n"
                },
                {
                    "name": "clearList",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClears the selected movies list.\n",
                    "description": "<p>Clears the selected movies list.</p>\n"
                },
                {
                    "name": "download",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDownloads movie in the list.\n",
                    "description": "<p>Downloads movie in the list.</p>\n"
                },
                {
                    "name": "markAsWatched",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeMovie",
                    "args": [
                        {
                            "name": "movie",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRemoves a movie off the list.\n",
                    "description": "<p>Removes a movie off the list.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2548,
                                "end": 2553,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "movie"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2542,
                                "end": 2547,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>movie to remove</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy } from '@angular/core';\n// import { Router, ActivatedRoute } from '@angular/router'\nimport { DataService } from '@services/data.service'\n// import { Select, Store } from '@ngxs/store';\n// import { ClearList, AddWatched, AddBookmark } from '../../../movie.actions'\n// import { RemoveMovie } from '../../../movie.actions';\nimport { Observable, Subscription } from 'rxjs';\n// import { MovieList } from '../../../movie.state';\n\n@Component({\n  selector: 'app-selected-list',\n  templateUrl: './selected-list.component.html',\n  styleUrls: ['./selected-list.component.scss']\n})\nexport class SelectedListComponent implements OnInit, OnDestroy {\n\n  // @Select(state => state.moviesList) movies$: Observable<any>\n  display = false\n  movieIdList = []\n  moviesListSubscription: Subscription\n  constructor(\n    // private activatedRoute: ActivatedRoute,\n    // private router: Router,\n    // private dataService: DataService,\n    // private store: Store\n    ) { }\n\n  ngOnInit() {\n    // this.movies$.subscribe((e: any) => {\n    //   this.movieIdList = []\n    //   if (e.movies.length > 0) {\n    //     this.display = true\n    //   } else {\n    //     this.display = false\n    //   }\n    //   e.movies.forEach((movie: MovieList) => {\n    //     this.movieIdList.push(movie.id)\n    //   })\n    // })\n  }\n\n  ngOnDestroy(): void {\n    console.log('ondestroy');\n    if (this.moviesListSubscription !== undefined) {\n      this.moviesListSubscription.unsubscribe()\n    }\n  }\n\n  /**\n   * Downloads movie in the list.\n   */\n  download() {\n    // this.moviesListSubscription = this.movies$.subscribe(moviesList => {\n    //   console.log('moviesList: ', moviesList.movies);\n    //   this.dataService.updateSelectedMovies(moviesList.movies)\n    //   this.router.navigate([`/bulk-download`], {\n    //     relativeTo: this.activatedRoute\n    //   })\n    // })\n\n    // d.unsubscribe()\n  }\n\n  /**\n   * Adds bookmarks to all items in the list.\n   */\n  addBookmark() {\n    // this.store.dispatch(new AddBookmark())\n  }\n\n  markAsWatched() {\n    // this.ipcService.call(IPCCommand.Watched, [IPCCommand.Add, this.movieIdList])\n    // // const root = this\n    // // this.ipcService.call(IPCCommand.Watched, [IPCCommand.Add, this.movieIdList])\n    // // this.displayMessage = 'Marked as watched'\n    // // this.displaySnackbar = true\n    // // this.utilsService.hideSnackbar(root)\n    // this.watchedService.saveWatchedMulti(this.movieIdList)\n\n    // this.store.dispatch(new AddWatched())\n  }\n\n  /**\n   * Removes a movie off the list.\n   * @param movie movie to remove\n   */\n  removeMovie(movie) {\n    // this.store.dispatch(new RemoveMovie(movie))\n  }\n\n  /**\n   * Clears the selected movies list.\n   */\n  clearList() {\n    // this.store.dispatch(new ClearList())\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./selected-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 20
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class='movie-selected-list' style='background-color: rgb(40,40,40);\npadding: 20px 0 20px 0; transition: .3s ease-in-out;' *ngIf=\"display==true\">\n  <div class=\"container-fluid\" id=\"list\" style=\"overflow-y:hidden; overflow-x:auto;\">\n    <div class='d-inline-flex'>\n\n      <div *ngFor=\"let movie of (movies$| async)?.movies\" style='width: 120px;margin :0 5px 5px 0'>\n        <div class='selected-movie-card-image-container' (click)='removeMovie(movie)' [ngStyle]=\"{'height': '180px'\n          ,'background-image':'url(https://image.tmdb.org/t/p/w342'+ movie.poster_path + ')'}\" data-toggle='tooltip'\n          title='{{movie.title}}'>\n          <div class=\"overlay overlay-remove\">\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class='selected-list-controls-container container' style='margin-top: 10px;'>\n    <div class=\"btn-group\">\n      <button class='btn btn-success' (click)='download()'>Download</button>\n      <button class='btn btn-primary' (click)='addBookmark()'>Add bookmarks</button>\n      <button class='btn btn-primary' (click)='markAsWatched()'>Mark all as watched</button>\n    </div>\n    <button class='btn btn-danger' style='float:right' (click)='clearList()'>Clear list</button>\n  </div>\n</div>\n"
        },
        {
            "name": "SigninComponent",
            "id": "component-SigninComponent-262313785ca70d6ec44d15ca30b76272c8da306812585d0f7e6330b194810f562ae341bdbbe0c8cfa9e4883d7ce176734a7265af13dae73cc619faf5f36befe6",
            "file": "src/app/modules/user/signin/signin.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-signin",
            "styleUrls": [
                "./signin.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./signin.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "ageList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "generalError",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "isOAuthValid",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "isSignIn",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "signInForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "signUpForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "user",
                    "defaultValue": "{\n    emailAddress: '',\n    password: ''\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "userSignIn",
                    "defaultValue": "{\n    usernameEmail: '',\n    password: ''\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "userSignUp",
                    "defaultValue": "{\n    username: '',\n    emailAddress: '',\n    age: 0,\n    gender: '',\n    authType: '',\n    password: '',\n    repeatPassword: ''\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 43
                }
            ],
            "methodsClass": [
                {
                    "name": "emailDomainValidator",
                    "args": [
                        {
                            "name": "control",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ emailDomain: { parsedDomain: any; }; }",
                    "typeParameters": [],
                    "line": 140,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSignIn",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSignInGoogle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSignUp",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { UsernameExistValidator, UsernameExistingValidator } from '@directives/username-exist.directive';\nimport { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, Validators, FormBuilder, AbstractControl } from '@angular/forms'\nimport { repeatPasswordValidator } from '@directives/repeat-password.directive';\nimport { CredentialsValidator } from '@directives/credentials.directive';\nimport * as firebase from 'firebase/app';\nimport { AngularFirestore } from '@angular/fire/firestore'\nimport { AngularFireAuth, AngularFireAuthModule } from '@angular/fire/auth'\nimport { IpcService } from '@services/ipc.service';\nimport { FirebaseService, CollectionName } from '@services/firebase.service';\nimport { UtilsService } from '@services/utils.service';\nimport { repeat, debounceTime, take, map } from 'rxjs/operators';\n\nexport class CustomValidator {\n  static usernameValidate(afs: AngularFirestore) {\n    return (control: AbstractControl) => {\n\n      const username = control.value.toLowerCase();\n      console.log('control username ', username)\n      return afs.collection('user', ref => ref.where('username', '==', username))\n\n        .valueChanges().pipe(\n          debounceTime(500),\n          take(1),\n          map(arr => arr.length ? { usernameAvailable: false } : null),\n        )\n    }\n  }\n}\n\n@Component({\n  selector: 'app-signin',\n  templateUrl: './signin.component.html',\n  styleUrls: ['./signin.component.scss']\n})\nexport class SigninComponent implements OnInit {\n\n  ageList = []\n  user = {\n    emailAddress: '',\n    password: ''\n  }\n  userSignUp = {\n    username: '',\n    emailAddress: '',\n    age: 0,\n    gender: '',\n    authType: '',\n    password: '',\n    repeatPassword: ''\n  }\n  userSignIn = {\n    usernameEmail: '',\n    password: ''\n  }\n  signUpForm: FormGroup\n  signInForm: FormGroup\n  isSignIn = false\n  isOAuthValid = false\n  generalError = ''\n\n  constructor(\n    private credentialValidator: CredentialsValidator,\n    private auth: AngularFireAuth,\n    private authModule: AngularFireAuthModule,\n    private firebaseService: FirebaseService,\n    private ipcService: IpcService,\n    private utilsService: UtilsService,\n    private formBuilder: FormBuilder,\n    private usernameExistValidator: UsernameExistValidator,\n    private afs: AngularFirestore\n  ) { }\n\n  ngOnInit() {\n    // const env = this.utilsService.getEnvironment()\n    // if (env === 'web') {\n    //   this.isOAuthValid = true\n    // }\n\n    this.signUpForm = this.formBuilder.group({\n      username: [this.userSignUp.username, [Validators.required, Validators.minLength(4)], UsernameExistingValidator.validateUsername(this.afs)\n      ],\n      emailAddress: [this.userSignUp.emailAddress, [Validators.required, Validators.minLength(4), Validators.email]],\n\n      password: [this.userSignUp.password, [Validators.required, Validators.minLength(6)]],\n\n      repeatPassword: [this.userSignUp.repeatPassword, [Validators.required, Validators.minLength(6)]],\n    }, { validators: repeatPasswordValidator }\n    )\n\n    this.signInForm = new FormGroup({\n      usernameEmail: new FormControl(this.userSignIn.usernameEmail, [Validators.required]),\n      password: new FormControl(this.userSignIn.password, [Validators.required])\n    },\n    )\n  }\n\n  get username() { return this.signUpForm.get('username'); }\n  get emailAddress() { return this.signUpForm.get('emailAddress'); }\n  get password() { return this.signUpForm.get('password'); }\n  get repeatPassword() { return this.signUpForm.get('repeatPassword'); }\n\n  onSignUp() {\n    console.log('submit');\n    const username = this.signUpForm.get('username').value\n    const emailAddress = this.signUpForm.get('emailAddress').value\n    const password = this.signUpForm.get('password').value\n    this.firebaseService.signUp(emailAddress, password).then(e => {\n      console.log(e)\n      // this.firebaseService.insertIntoFirestore(CollectionName.User, { username, emailAddress })\n    }).catch(e => {\n      this.generalError = e\n      // this.signUpForm.\n      // console.log(this.signUpForm.value('username'))\n      this.signUpForm.setErrors({ generalError: e })\n    })\n  }\n\n  // onSignUpFromLogin() {\n  //   console.log('submit');\n  //   const emailUsername = this.signInForm.get('usernameEmail').value\n  //   const password = this.signInForm.get('password').value\n  //   this.firebaseService.signUp(emailUsername, password)\n  // }\n\n  onSignIn() {\n    console.log('onsignin');\n    const emailUsername = this.signInForm.get('usernameEmail').value\n    const password = this.signInForm.get('password').value\n    this.firebaseService.signIn(emailUsername, password)\n  }\n\n  onSignInGoogle() {\n    const provider = new firebase.auth.GoogleAuthProvider()\n    // this.auth.auth.signInWithRedirect(provider)\n    // firebase.auth().getRedirectResult().then((e) => {\n    this.firebaseService.signInWithGoogle(provider)\n  }\n\n  emailDomainValidator(control: FormControl) {\n    const email = control.value;\n    if (email && email.indexOf(\"@\") != -1) {\n      let [_, domain] = email.split('@');\n      if (domain !== 'codecraft.tv') {\n        const emailDomain = {\n          parsedDomain: domain\n        }\n        console.log(emailDomain)\n        return {\n          emailDomain\n        }\n      }\n    }\n    return null;\n  }\n\n}\n\n\nexport interface SignIn {\n  username: string,\n  emailAddress: string,\n  age: number,\n  gender: string,\n  authType: string,\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "* {\n  color: black\n}\n\n",
                    "styleUrl": "./signin.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "credentialValidator",
                        "type": "CredentialsValidator",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "auth",
                        "type": "AngularFireAuth",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authModule",
                        "type": "AngularFireAuthModule",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "firebaseService",
                        "type": "FirebaseService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ipcService",
                        "type": "IpcService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "usernameExistValidator",
                        "type": "UsernameExistValidator",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "afs",
                        "type": "AngularFirestore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 60,
                "jsdoctags": [
                    {
                        "name": "credentialValidator",
                        "type": "CredentialsValidator",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "auth",
                        "type": "AngularFireAuth",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authModule",
                        "type": "AngularFireAuthModule",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "firebaseService",
                        "type": "FirebaseService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ipcService",
                        "type": "IpcService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "usernameExistValidator",
                        "type": "UsernameExistValidator",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "afs",
                        "type": "AngularFirestore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "username": {
                    "name": "username",
                    "getSignature": {
                        "name": "username",
                        "type": "",
                        "returnType": "",
                        "line": 98
                    }
                },
                "emailAddress": {
                    "name": "emailAddress",
                    "getSignature": {
                        "name": "emailAddress",
                        "type": "",
                        "returnType": "",
                        "line": 99
                    }
                },
                "password": {
                    "name": "password",
                    "getSignature": {
                        "name": "password",
                        "type": "",
                        "returnType": "",
                        "line": 100
                    }
                },
                "repeatPassword": {
                    "name": "repeatPassword",
                    "getSignature": {
                        "name": "repeatPassword",
                        "type": "",
                        "returnType": "",
                        "line": 101
                    }
                }
            },
            "templateData": "<!-- <button>Google</button>\n<button>Facebook</button>\n<input placeholder=\"Email address\">\n<input placeholder=\"Password\">\n<button>Sign in</button>\n<button>Sign in anonymously</button>\nregister -->\n<div class='container-fluid' style='height:100%'>\n  <div class='row' style='height:100%'>\n    <div class='col col-6' style='height:100%' *ngIf=\"!isSignIn\">\n\n      <form [formGroup]=\"signUpForm\" #formDir='ngForm'>\n        <div class=\"cross-validation\"\n          [class.cross-validation-error]='signUpForm.errors?.isRepeatPassword && (signUpForm.touched || signUpForm.dirty)'>\n          <div class='form-group'>\n            <label for='username'>Username: </label>\n            <input class='form-control' id='username' formControlName='username' placeholder=\"Username\" required>\n            <div *ngIf=\"username.invalid && (username.dirty || username.touched)\" class=\"alert alert-danger\">\n              <div *ngIf=\"username.errors.required\">\n                Username is required.\n              </div>\n              <div *ngIf=\"username.errors.minlength\">\n                Username must be at least 4 characters long.\n              </div>\n              <div *ngIf=\"username.errors?.usernameUnavailable\">\n                Username already exists.\n              </div>\n            </div>\n            <div *ngIf=\"username.pending\">Validating...</div>\n          </div>\n          <div *ngIf=\"username.errors?.usernameUnavailable\">\n            Username already exists.\n          </div>\n        </div>\n        <div class='form-group'>\n          <label for='emailAddress'>Email Address: </label>\n          <input class='form-control' id='emailAddress' formControlName='emailAddress' placeholder=\"Email Address\"\n            type='email' required>\n          <div *ngIf=\"emailAddress.invalid && (emailAddress.dirty || emailAddress.touched)\" class=\"alert alert-danger\">\n            <div *ngIf=\"emailAddress.errors.required\">\n              Email is required.\n            </div>\n            <div *ngIf=\"emailAddress.errors.minlength\">\n              Email must be at least 4 characters long.\n            </div>\n            <div *ngIf=\"emailAddress.errors.email\">\n              Email Format.\n            </div>\n          </div>\n        </div>\n        <div class='form-group'>\n          <label for='passwordInput'>Password: </label>\n          <input class='form-control' id='passwordInput' formControlName='password' placeholder=\"Password\"\n            type='password' required>\n          <div *ngIf=\"password.invalid && (password.dirty || password.touched)\" class=\"alert alert-danger\">\n            <div *ngIf=\"password.errors.required\">\n              Password is required.\n            </div>\n            <div *ngIf=\"password.errors.minlength\">\n              Password must be at least 4 characters long.\n            </div>\n          </div>\n        </div>\n        <div class='form-group'>\n          <label for='repeatPasswordInput'>Repeat Password: </label>\n          <input class='form-control' id='repeatPasswordInput' formControlName='repeatPassword' placeholder=\"Password\"\n            type='password' required>\n          <div *ngIf=\"repeatPassword.invalid && (repeatPassword.dirty || repeatPassword.touched)\"\n            class=\"alert alert-danger\">\n            <div *ngIf=\"repeatPassword.errors.required\">\n              Password is required.\n            </div>\n            <div *ngIf=\"repeatPassword.errors.minlength\">\n              Password must be at least 6 characters long.\n            </div>\n          </div>\n        </div>\n        <div *ngIf=\"(signUpForm.touched || signUpForm.dirty)\" class=\"alert alert-danger\">\n          <div *ngIf=\"signUpForm.errors?.isRepeatPassword && (repeatPassword.dirty || repeatPassword.touched)\">\n            Password must be same.\n          </div>\n          <div *ngIf=\"signUpForm.errors?.generalError && (signUpForm.touched || signUpForm.dirty)\">\n            {{generalError}}\n          </div>\n        </div>\n        <button class='btn btn-success' type='submit' (click)='onSignUp()' [disabled]='!signUpForm.valid'>Sign\n          up</button>\n      </form>\n\n\n      <a>Already have an account? <b class='text-hyperlink' (click)='isSignIn=true'>Click here</b> to Sign in</a>\n    </div>\n    <!-- sign in -->\n    <div class='col col-6' style='height:100%' *ngIf=\"isSignIn\">\n      <form [formGroup]=\"signInForm\" #formDir='ngForm'>\n        <div class=\"cross-validation\"\n          [class.cross-validation-error]='signInForm.errors?.isInvalidCredentials && (signInForm.touched || signInForm.dirty)'>\n          <div class='form-group'>\n            <label for='usernameEmail'>Username or Email: </label>\n            <input class='form-control' id='usernameEmail' formControlName='usernameEmail'\n              placeholder=\"Username or Email\" required>\n          </div>\n        </div>\n        <div class='form-group'>\n          <label for='passwordInput'>Password: </label>\n          <input class='form-control' id='passwordInput' formControlName='password' placeholder=\"Password\"\n            type='password' required>\n          <div *ngIf=\"password.invalid && (password.dirty || password.touched)\" class=\"alert alert-danger\">\n            <div *ngIf=\"password.errors.required\">\n              Password is required.\n            </div>\n          </div>\n        </div>\n        <button class='btn btn-success' type='submit' (click)='onSignIn()' [disabled]='signInForm.invalid' style='width: 100%;\n        border-radius: 50px;'>Sign\n          in</button>\n\n        <button (click)='onSignInGoogle()' class='btn btn-success'>Sign in with Gooogle</button>\n        <!-- <button *ngIf=\"isOauthValid\" (click)='onSignInGoogle()' class='btn btn-success'>Sign in with Gooogle</button> -->\n      </form>\n      <a class='text-hyperlink'>Forgotten your password?</a>\n      Not registered yet? <b class='text-hyperlink' (click)='isSignIn=false'>Sign up</b>\n    </div>\n    <div class='col col-6 image-container'\n      style='height:100%;width:100%;background-image: linear-gradient(to left, rgba(245, 246, 252, 0), rgba(-0, 0, 0, 10.73)), url(./assets/backdrops/gone_with_the_wind-backdrop.jpg);'>\n    </div>\n  </div>\n</div>\n\n<!--\n<label>Gender</label>\n<select [(ngModel)]=\"userSignIn.gender\" class=\"form-control\" style='width: 200px; float:right'>\n  <option value='g'>Gender</option>\n  <option value='m'>Male</option>\n  <option value='f'>Female</option>\n  <option value='n'>Rather not to say</option>\n</select>\n<select class=\"form-control\" style='width: 200px; float:right'>\n  <option *ngFor=\"let age of ageList\" [value]='age'>{{age}}</option>\n</select> -->\n<!-- <button>Sign up anonymously</button> -->\n"
        },
        {
            "name": "TopNavigationComponent",
            "id": "component-TopNavigationComponent-af609ff57db56d9ca4e20e81287c6db91685feed74f697eae4d9971f10b44eb92366f91c85690a6e8ec75b8145c6195eeb72d8c04d960d850c2150460d746a12",
            "file": "src/app/core/components/top-navigation/top-navigation.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-top-navigation",
            "styleUrls": [
                "./top-navigation.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./top-navigation.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "Observable<any>",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "browserConnection",
                    "defaultValue": "navigator.onLine",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "currentPage",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "currentSearchQuery",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "currentYear",
                    "defaultValue": "new Date().getFullYear()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "decadesList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "filteredOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string[]>",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "genres",
                    "defaultValue": "['Action', 'Adventure', 'Documentary', 'Drama', 'Horror', 'Sci-Fi', 'Thriller']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "hasSearchResults",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "isElectron",
                    "defaultValue": "environment.runConfig.electron",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "isHighlighted",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "isSearchDirty",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "isSignedIn",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "lastQuery",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "movieGenres",
                    "defaultValue": "MOVIEGENRES",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "movies",
                    "defaultValue": "MOVIES",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "myControl",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "numberOfPages",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "numberOfResults",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "numbers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "SEARCH_HISTORY_MAX_LENGTH",
                    "defaultValue": "8",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "searchHistoryList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "searchQuery",
                    "defaultValue": "{\n    query: '',\n    yearFrom: 1969,\n    yearTo: 2018,\n    genres: this.movieGenres,\n    type: 'TV Series',\n    isAvailable: 'true',\n    availability: '',\n    sortBy: ''\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ISearchQuery",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "selectedMovie",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IOmdbMovieDetail",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "selectedMovies",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "status",
                    "defaultValue": "'LOGIN'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "types",
                    "defaultValue": "['TV Series', 'Movie', 'Short']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "voteAverageList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 69
                }
            ],
            "methodsClass": [
                {
                    "name": "_filter",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSearchHistoryList",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "navigateBack",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGo to previous location\n",
                    "description": "<p>Go to previous location</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onAdvancedSearch",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOpens advanced search options.\n",
                    "description": "<p>Opens advanced search options.</p>\n"
                },
                {
                    "name": "onExit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 193,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onMinimize",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 187,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onRestore",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 190,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSearch",
                    "args": [
                        {
                            "name": "val",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInitialize search\n",
                    "description": "<p>Initialize search</p>\n",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openProfile",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 179,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeDuplicate",
                    "args": [
                        {
                            "name": "val",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 197,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "searchByImdbId",
                    "args": [
                        {
                            "name": "imdbId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 156,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSearches movie by imdb id and redirects if there are results\n",
                    "description": "<p>Searches movie by imdb id and redirects if there are results</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4519,
                                "end": 4525,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "imdbId"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4513,
                                "end": 4518,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>imdb id to search</p>\n"
                        }
                    ]
                },
                {
                    "name": "searchByTitle",
                    "args": [
                        {
                            "name": "enteredQuery",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 171,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSearches by title\n",
                    "description": "<p>Searches by title</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4933,
                                "end": 4945,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "enteredQuery"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4927,
                                "end": 4932,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>query to search</p>\n"
                        }
                    ]
                },
                {
                    "name": "signOut",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 183,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\nimport { Observable } from 'rxjs'\nimport { IOmdbMovieDetail, MovieGenre, IGenre } from '@models/interfaces';\nimport { MOVIES, MOVIEGENRES } from '../../../mock-data';\nimport { STRING_REGEX_IMDB_ID } from '@shared/constants';\nimport { DataService } from '@services/data.service'\nimport { MovieService } from '@services/movie/movie.service'\nimport { IpcService } from '@services/ipc.service'\nimport { Router, ActivatedRoute } from '@angular/router'\nimport { Location } from '@angular/common'\nimport { environment } from '@environments/environment';\nimport { map, startWith } from 'rxjs/operators';\nimport { FormControl } from '@angular/forms';\n\nenum STATUS {\n  login = 'LOGIN',\n  logout = 'LOGOUT'\n}\n\n@Component({\n  selector: 'app-top-navigation',\n  templateUrl: './top-navigation.component.html',\n  styleUrls: ['./top-navigation.component.scss']\n})\nexport class TopNavigationComponent implements OnInit {\n  @Input() data: Observable<any>\n  constructor(\n    private dataService: DataService,\n    // private firebaseService: FirebaseService,\n    private ipcService: IpcService,\n    private movieService: MovieService,\n    private router: Router,\n    private activatedRoute: ActivatedRoute,\n    private location: Location) { }\n\n  isElectron = environment.runConfig.electron\n  status = 'LOGIN'\n  browserConnection = navigator.onLine;\n  selectedMovie: IOmdbMovieDetail\n  numbers;\n  currentYear = new Date().getFullYear()\n  genres = ['Action', 'Adventure', 'Documentary', 'Drama', 'Horror', 'Sci-Fi', 'Thriller'];\n  movieGenres = MOVIEGENRES;\n  types = ['TV Series', 'Movie', 'Short'];\n  searchQuery: ISearchQuery = {\n    query: '',\n    yearFrom: 1969,\n    yearTo: 2018,\n    genres: this.movieGenres,\n    type: 'TV Series',\n    isAvailable: 'true',\n    availability: '',\n    sortBy: ''\n  };\n  movies = MOVIES;\n  selectedMovies = []\n  isHighlighted = false\n  numberOfPages = 1\n  numberOfResults = 0\n  currentPage = 1\n  currentSearchQuery = ''\n  hasSearchResults = false\n  isSearchDirty = false\n  searchHistoryList = []\n  filteredOptions: Observable<string[]>;\n  SEARCH_HISTORY_MAX_LENGTH = 8\n  decadesList = []\n  voteAverageList = []\n  isSignedIn = false\n  lastQuery = ''\n\n  myControl = new FormControl();\n  ngOnInit() {\n    const e = localStorage.getItem('user')\n    // this.getSearchHistoryList()\n    if (e === null) {\n      this.status = 'LOGIN'\n      this.isSignedIn = false\n    } else {\n      this.isSignedIn = true\n      this.status = ''\n    }\n    this.filteredOptions = this.myControl.valueChanges.pipe(\n      startWith(''),\n      map(value => this._filter(value))\n    );\n  }\n  private _filter(value: string): string[] {\n    const filterValue = value.toLowerCase();\n\n    return this.searchHistoryList.filter(option => option.toLowerCase().indexOf(filterValue) === 0);\n  }\n\n  getSearchHistoryList() {\n    // })\n    // this.ipcService.call(this.ipcService.IPCCommand.GetSearchList)\n    // this.ipcService.searchList.subscribe(data => {\n    //   this.searchHistoryList = data\n    //   console.log('DATA:', data)\n    // })\n  }\n\n  /**\n   * Go to previous location\n   */\n  navigateBack() {\n    this.location.back()\n  }\n\n  /**\n   * Opens advanced search options.\n   */\n  onAdvancedSearch() {\n    this.router.navigate([`/advanced-find`], { relativeTo: this.activatedRoute });\n  }\n\n  /**\n   * Initialize search\n   */\n  onSearch(val: string) {\n    val = val.trim()\n    if (this.lastQuery === val && this.router.url === '/results') {\n      return\n    }\n    this.lastQuery = val\n    this.searchHistoryList.unshift(val)\n    this.removeDuplicate(val);\n    this.searchHistoryList.splice(this.searchHistoryList.indexOf(val), 1)\n    console.log(this.searchHistoryList);\n    if (this.searchHistoryList.length >= this.SEARCH_HISTORY_MAX_LENGTH) {\n      // this.searchHistoryList = this.searchHistoryList.splice(1)\n      this.searchHistoryList = this.searchHistoryList.slice(0, this.SEARCH_HISTORY_MAX_LENGTH)\n    }\n    const enteredQuery = val\n    // this.isSearchDirty = true\n    // this.currentPage = 1\n    // this.numberOfPages = 1\n    // this.numberOfResults = 0\n    // this.currentSearchQuery = enteredQuery\n    // // tt0092099 example\n\n    this.searchHistoryList.unshift(val);\n    const REGEX_IMDB_ID = new RegExp(STRING_REGEX_IMDB_ID, `gi`)\n    if (enteredQuery.match(REGEX_IMDB_ID)) {\n      this.searchByImdbId(enteredQuery)\n    } else {\n      this.searchByTitle(enteredQuery)\n    }\n  }\n\n  /**\n   * Searches movie by imdb id and redirects if there are results\n   * @param imdbId imdb id to search\n   */\n  searchByImdbId(imdbId: string) {\n    this.movieService.getMovieByImdbId(imdbId).subscribe(data => {\n      if (data.Response !== 'False') {\n        this.router.navigate([`/details/${imdbId}`], { relativeTo: this.activatedRoute });\n      } else {\n        this.hasSearchResults = false\n        // insert code for not found\n      }\n    })\n  }\n\n  /**\n   * Searches by title\n   * @param enteredQuery query to search\n   */\n  searchByTitle(enteredQuery: string) {\n    // this.dataService.currentSearchQuery = enteredQuery\n    if (this.searchQuery && this.searchQuery.query.length > 0) {\n      this.dataService.updateSearchQuery(this.searchQuery)\n      this.router.navigate([`/results`], { relativeTo: this.activatedRoute });\n    }\n  }\n\n  openProfile() {\n\n  }\n\n  signOut() {\n    // this.firebaseService.signOut()\n  }\n\n  onMinimize() {\n    this.ipcService.minimizeWindow()\n  }\n  onRestore() {\n    this.ipcService.minimizeRestoreWindow()\n  }\n  onExit() {\n    this.ipcService.exitApp()\n  }\n\n  private removeDuplicate(val: string) {\n    let result = this.searchHistoryList.filter((option, index) => {\n      console.log('option: ', option);\n      return this.searchHistoryList.indexOf(option) === index;\n    });\n    this.searchHistoryList = result;\n  }\n}\n\nexport interface ISearchQuery {\n  query: string,\n  yearFrom: number,\n  yearTo: number,\n  genres: MovieGenre[],\n  type: string,\n  isAvailable: string,\n  availability: string, // all, offline, netflix\n  ratingCount?: number,\n  ratingAverage?: number,\n  ratingAverageFrom?: number,\n  ratingAverageTo?: number,\n  sortBy: string,\n}\n\nexport interface ITmdbSearchQuery {\n  keywords: string,\n  decade: number\n  yearTo: number,\n  genres: IGenre[],\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../custom-mat-styles.scss';\n// './../../../custom'\n\n@font-face {\n  font-family: 'Akira';\n  /*a name to be used later*/\n  src: url('../../../../assets/fonts/akira_expanded/Akira\\ Expanded\\ Demo.otf');\n  /*URL to font*/\n}\n\n/* The navigation bar */\n.navbar {\n  overflow: hidden;\n  background-color: #333;\n  position: fixed;\n  /* Set the navbar to fixed position */\n  top: 0;\n  /* Position the navbar at the top of the page */\n  width: 100%;\n  /* Full width */\n  justify-content: flex-start\n}\n\n* {\n  // color:white\n}\n\n/* Links inside the navbar */\n.navbar a {\n  float: left;\n  display: block;\n  color: #f2f2f2;\n  text-align: center;\n  padding: 14px 16px;\n  // margin: 14px 16px;\n  text-decoration: none;\n}\n\n/* Change background on mouse-over */\n.navbar a:hover {\n  background: #ddd;\n  color: black;\n}\n\n.autocomplete-items:hover {\n  background-color: #e9e9e9\n}\n\n.search-controls-container {\n  display: flex;\n  -webkit-app-region: no-drag;\n}\n\n.window-controls-container {\n  display: flex;\n  flex-grow: 0;\n  flex-shrink: 0;\n  text-align: center;\n  -webkit-app-region: no-drag;\n  height: 30px;\n  width: 138px;\n  overflow: hidden;\n  position: fixed;\n  top: 0;\n  right: 0;\n  z-index: 3000;\n  margin-left: auto;\n}\n\n.window-icon-bg {\n  display: inline-block;\n  -webkit-app-region: no-drag;\n  height: 100%;\n  width: 33.34%;\n  transition: .2s;\n}\n\n.window-icon-bg:hover {\n  background-color: rgba(231, 231, 231, 0.6);\n}\n\n.window-close:hover {\n  background-color: rgb(255, 0, 0);\n}\n\n.icon-img {\n  height: 12px;\n  filter: invert(1) contrast(1);\n}\n\n.list-criteria-container {\n  float: left;\n  margin: 0 5px 0 0;\n  width: 100px;\n  height: 40px;\n  position: relative;\n  color: white\n}\n\n.list-criteria-container:hover {\n  background-color: #ddd;\n}\n\n.criteria-item * {\n  cursor: pointer;\n}\n\n\n#searchinput {\n  width: 200px;\n}\n\n#searchClear {\n  position: absolute;\n  filter: invert(1) contrast(0);\n  color: #ccc;\n  position: absolute;\n  background-position: center;\n  background-size: cover;\n  cursor: pointer;\n  height: 15px;\n  width: 15px;\n  right: 20px;\n  margin: auto;\n  transform: translateY(75%);\n}\n\n\n#searchEnter {\n  position: relative;\n  filter: invert(1) contrast(1);\n  color: #ccc;\n  background-position: center;\n  background-size: cover;\n  cursor: pointer;\n  height: 20px;\n  width: 20px;\n  // right: 20px;\n  margin: auto;\n  // transform: translateY(75%);\n}\n\n.nav-items-group {\n  z-index: 3000;\n  position: relative;\n  -webkit-app-region: no-drag;\n  display: flex;\n}\n\n#advancedFindButton {\n  cursor: pointer;\n  ::ng-deep .mat-button-wrapper {\n    color: black !important;\n  }\n}\n",
                    "styleUrl": "./top-navigation.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dataService",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ipcService",
                        "type": "IpcService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "movieService",
                        "type": "MovieService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "dataService",
                        "type": "DataService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ipcService",
                        "type": "IpcService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "movieService",
                        "type": "MovieService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div style='user-select: none; -webkit-app-region: drag;height: 55px; background-color:black;\nflex-direction: row;\nflex-grow: 1;\ndisplay: flex;\nposition: relative;\njustify-content: space-between;\nalign-items: center;padding-bottom: 6px;'>\n  <!-- <div id='title-drag-region'\n    style='z-index: -1;-webkit-app-region: drag;top: 0;left: 0;display: block;position: absolute;width: 100%;height: 100%;'>\n  </div> -->\n  <div id='app-logo' routerLink='/dashboard' class='nav-items-group' style='margin-left: 10px;'>\n    <h1 style='cursor: pointer'>LOGO</h1>\n  </div>\n  <div class='search-controls-container nav-items-group'>\n\n    <!-- <div class='btn-group'>\n\n      <input data-toggle='tooltip' title='Search title or IMDb id' #searchBar name=\"searchBar\" class=\"form-control\"\n        [(ngModel)]=\"searchQuery.query\"\n        style='padding-right: 2rem;width:400px;margin-right: 10px; border-radius: .25rem; min-width: 50px;color:black'\n        placeholder=\"Search\" (keyup.enter)=\"onSearch(searchQuery.query);\" list='searchHistory' />\n      <datalist id=\"searchHistory\">\n        <option *ngFor=\"let item of searchHistoryList\">\n          {{item}}\n      </datalist>\n      <div id='searchClear' [style.visibility]=\"searchBar.value===''? 'hidden': 'visible'\" (click)=\"searchBar.value=''\"\n        data-toggle='tooltip' title='Clear' style='\n    background-image: url(\"./assets/icons/close.svg\");'></div>\n    </div> -->\n\n    <!-- <mat-form-field class=\"example-full-width\"> -->\n    <!-- <mat-label>Title or IMDb id</mat-label> -->\n    <!-- <input type=\"text\" placeholder=\"Search title or IMDb id\" aria-label=\"Search\" matInput [matAutocomplete]=\"auto\"\n      [formControl]=\"myControl\"> -->\n    <form class=\"example-form\">\n      <input data-toggle='tooltip' title='Search title or IMDb id' #searchBar name=\"searchBar\" class=\"form-control\"\n        [(ngModel)]=\"searchQuery.query\"\n        style='padding-right: 2rem;width:400px;margin-right: 10px; min-width: 50px; margin-top:2px; color:black'\n        placeholder=\"Search\" (keyup.enter)=\"onSearch(searchQuery.query);\" list='searchHistory'\n        [matAutocomplete]=\"auto\" />\n      <!-- <button mat-button *ngIf=\"searchQuery.query\" matSuffix mat-icon-button aria-label=\"Clear\"\n        (click)=\"searchQuery.query=''\">\n        <mat-icon>close</mat-icon>\n      </button> -->\n      <mat-autocomplete #auto=\"matAutocomplete\">\n        <mat-option *ngFor=\"let option of filteredOptions | async\" [value]=\"option\">\n          {{option}}\n        </mat-option>\n      </mat-autocomplete>\n\n    </form>\n\n    <div id='searchEnter' style='background-image: url(\"./assets/icons/magnifiying-glass.svg\"); margin-right: 10px;'\n      (click)=\"onSearch(searchQuery.query);\" data-toggle='tooltip' title='Search'></div>\n\n    <button id='advancedFindButton' class=\"accent-color\" style='margin-left:3px; cursor: pointer;' mat-flat-button\n      color=\"mdb-primary\" (click)='onAdvancedSearch()'>\n      Advanced Search</button>\n  </div>\n\n  <div class='nav-items-group'>\n    <!-- <img style='cursor: pointer;height:80%;width: 80%; transform: translate(13%,12%);' title='Profile options'\n    id='dropdownMenuButton' class='icon-img' data-toggle='dropdown' aria-haspopup=\"true\" aria-expanded=\"false\" href='#'> -->\n    <div class='image-container'\n      style='border-radius: 50%;height:40px;width:40px;     margin-right: 10px; background-image: url(\"./assets/offline-image/clint-eastwood.jfif\"); cursor: pointer;'\n      routerLink='./user/profile' data-toggle='tooltip' title='View profile'>\n    </div>\n  </div>\n\n  <!-- <div>\n    <div *ngIf=\"!isSignedIn\">Sign in</div>\n    <div *ngIf=\"isSignedIn\" class='dropdown' data-toggle='tooltip' style='z-index: 3000;\n  margin-left: auto;\n  position: absolute;\n  right: 138px;\n  height: 40px;\n  width: 40px; -webkit-app-region: no-drag;'>\n      <img style='cursor: pointer;height:80%;width: 80%; transform: translate(13%,12%);' title='Profile options'\n        id='dropdownMenuButton' class='icon-img' src='..svg' data-toggle='dropdown' aria-haspopup=\"true\"\n        aria-expanded=\"false\" href='#'>\n\n      <div class='dropdown-menu' aria-labelledby=\"dropdownMenuButton\">\n        <a class='dropdown-item' routerLink='./user/profile' href='#'>Profile</a>\n        <a class='dropdown-item' routerLink='./profile' href='#'>Account Settings</a>\n        <a class='dropdown-item' routerLink='./bookmarks' href='#'>Bookmarks</a>\n        <a class='dropdown-item' routerLink='./watched' href='#'>Watched</a>\n        <div class='dropdown-divider'></div>\n        <a class='dropdown-item' style='cursor: pointer;' (click)='signOut()'>Sign out</a>\n        <!-- <a *ngIf=\"isSignedIn\" class='dropdown-item' style='cursor: pointer;' (click)='signOut()'>Sign out</a> -->\n  <!-- <a class='dropdown-item' style='cursor: pointer;' routerLink='./user' href='#'>Sign in</a> -->\n  <!-- <a *ngIf=\"!isSignedIn\" class='dropdown-item' style='cursor: pointer;' routerLink='./user' href='#'>Sign in</a> -->\n  <!-- </div> -->\n  <!-- </div> -->\n\n  <!-- </div> -->\n  <div *ngIf=\"isElectron\" class='window-controls-container'>\n    <div class='window-icon-bg' (click)=\"onMinimize()\">\n      <img class='icon-img' src='./assets/icons/minimize.svg'>\n    </div>\n    <div class='window-icon-bg' (click)=\"onRestore()\">\n      <img class='icon-img' src='./assets/icons/maximize.svg'>\n    </div>\n    <div class='window-icon-bg window-close' (click)=\"onExit()\">\n      <img class='icon-img' src='./assets/icons/close.svg'>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "VideoPlayerComponent",
            "id": "component-VideoPlayerComponent-058cdc7107d30f17a17f612e1752543af958475052b5832c32f37751c288c89e6a58cd2206e2e9322ada69304fbe59f5554dd6dc123b18351bbb115289bed2c1",
            "file": "src/app/modules/watch/video-player.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-video-player",
            "styleUrls": [
                "./video-player.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./video-player.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "imdbId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "streamLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "tmdbId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "canPlay",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "child",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "VideoPlayerControlsComponent, {static: true}"
                        }
                    ]
                },
                {
                    "name": "DEFAULT_VOLUME",
                    "defaultValue": "50",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "fontColorsList",
                    "defaultValue": "COLOR_LIST",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "fontSizeList",
                    "defaultValue": "FONT_SIZE_LIST",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "isMetadataLoaded",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "isMuted",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "isPlaying",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "isSeeking",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "isShowStatus",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "isShowSubtitles",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "isUserInactive",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "ngUnsubscribe",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 79,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "playbackSettings",
                    "defaultValue": "this.preferencesService.getPreferences().playBack",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPlaybackPreferences",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "progressBar",
                    "defaultValue": "{\n    buffered: '0%',\n    played: '0%',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IProgressBar",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "statsForNerds",
                    "defaultValue": "{\n    bufferhealth: '',\n    connectionSpeed: '',\n    downloadedPieces: 0,\n    downSpeed: '',\n    upSpeed: '',\n    ratio: '',\n    // codec\n    id: '',\n    source: '',\n    size: '',\n    resolution: ''\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Stats",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "subtitleDisplaySettings",
                    "defaultValue": "this.preferencesService.getPreferences().subtitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ISubtitlePreferences",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "subtitleLine1",
                    "defaultValue": "'Subtitle line 1 look like this.'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "subtitleLine2",
                    "defaultValue": "'Subtitle line 2 look like this.'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "subtitleMap",
                    "defaultValue": "new Map<number, Subtitle>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "subtitleSpanElementsList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "tooltipSpan",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'tooltipSpan', {static: false}"
                        }
                    ]
                },
                {
                    "name": "toSeek",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "videoPlayer1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'videoPlayer1', {static: true}"
                        }
                    ]
                },
                {
                    "name": "videoPlayerElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "videoTime",
                    "defaultValue": "{\n    elapsed: 0,\n    duration: 0,\n    remaining: 0\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "volume",
                    "defaultValue": "this.DEFAULT_VOLUME",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                }
            ],
            "methodsClass": [
                {
                    "name": "changeBackgroundColor",
                    "args": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 515,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeBackgroundOpacity",
                    "args": [
                        {
                            "name": "percentage",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 520,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "percentage",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeFontColor",
                    "args": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 510,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeFontSize",
                    "args": [
                        {
                            "name": "size",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 506,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "size",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeVolume",
                    "args": [
                        {
                            "name": "source",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 456,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "source",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "convertToSeconds",
                    "args": [
                        {
                            "name": "hms",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 493,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nconverts HH:mm:ss format to seconds float.\n",
                    "description": "<p>converts HH:mm:ss format to seconds float.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 16703,
                                "end": 16706,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "hms"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 16697,
                                "end": 16702,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>time in HH:mm:ss format</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 16737,
                                "end": 16744,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>seconds equivalent</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 160,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChangeCc",
                    "args": [
                        {
                            "name": "filePath",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 416,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOpen file selector from electron side and return fullfilepath.\n",
                    "description": "<p>Open file selector from electron side and return fullfilepath.</p>\n",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "filePath",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onKeyPress",
                    "args": [
                        {
                            "name": "val",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 264,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onNotIdle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSeek",
                    "args": [
                        {
                            "name": "seekValue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 409,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "seekValue",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "savePreferences",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 501,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setProperties",
                    "args": [
                        {
                            "name": "propName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "propValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 526,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "propName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "propValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleFullScreen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 390,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nToggles fullscreen for #videoPlayerOuter.\nTODO: exit fullscreen functionality.\n",
                    "description": "<p>Toggles fullscreen for #videoPlayerOuter.\nTODO: exit fullscreen functionality.</p>\n"
                },
                {
                    "name": "toggleMute",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 461,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "togglePlay",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 374,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateDisplaySubtitle",
                    "args": [
                        {
                            "name": "val1",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "val2",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 483,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val1",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "val2",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateProgressBar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 465,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateWatchedStatus",
                    "args": [
                        {
                            "name": "val",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 350,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "videoPlayerEvents",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, OnDestroy, AfterViewInit, ElementRef, OnChanges, SimpleChanges, ViewChild, PipeTransform, Pipe } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { IpcService } from '@services/ipc.service';\nimport { MovieService } from '@services/movie/movie.service';\nimport { WatchedService } from '@services/watched.service';\nimport SubtitlesUtil from '@utils/subtitles.utils';\nimport { Subtitle } from '@models/subtitle.model';\nimport { UserIdleService } from \"angular-user-idle\";\nimport chardet from \"chardet\";\nimport jschardet from \"jschardet\";\nimport { environment } from 'environments/environment';\nimport { takeUntil } from 'rxjs/operators';\nimport { IPlaybackPreferences, ISubtitlePreferences } from '@models/preferences.model';\nimport { COLOR_LIST, FONT_SIZE_LIST } from '@shared/constants';\nimport GeneralUtil from '@utils/general.util';\nimport { PreferencesService } from '@services/preferences.service';\nimport { IProgressBar, VideoPlayerControlsComponent } from './video-player-controls/video-player-controls.component';\n\n@Component({\n  selector: 'app-video-player',\n  templateUrl: './video-player.component.html',\n  styleUrls: ['./video-player.component.scss']\n})\nexport class VideoPlayerComponent implements OnInit, OnDestroy, AfterViewInit, OnChanges {\n  @Input() streamLink: string\n  @Input() id: string\n  @Input() tmdbId: number\n  @Input() imdbId: string\n\n  @ViewChild('videoPlayer1', { static: true }) videoPlayer1: ElementRef\n  @ViewChild(VideoPlayerControlsComponent, { static: true }) child;\n  @ViewChild('tooltipSpan', { static: false }) tooltipSpan: ElementRef\n\n  DEFAULT_VOLUME = 50\n  isPlaying = false\n  isMuted = false\n  volume = this.DEFAULT_VOLUME\n  videoPlayerElement;\n  isShowStatus = false\n  isShowSubtitles = true\n  statsForNerds: Stats = {\n    bufferhealth: '',\n    connectionSpeed: '',\n    downloadedPieces: 0,\n    downSpeed: '',\n    upSpeed: '',\n    ratio: '',\n    // codec\n    id: '',\n    source: '',\n    size: '',\n    resolution: ''\n  }\n  videoTime = {\n    elapsed: 0,\n    duration: 0,\n    remaining: 0\n  }\n  progressBar: IProgressBar = {\n    buffered: '0%',\n    played: '0%',\n  }\n  subtitleMap = new Map<number, Subtitle>();\n\n  // subtitleLine1 = '<i>Subtitle line 1 look like this.</i>';\n  // subtitleLine2 = '<b><i><font face=\"Tempus Sans ITC\" color=\"#ffff80\" size=\"30\">\"Spice Girls : Viva Forever\"</font></i></b>';\n  subtitleLine1 = 'Subtitle line 1 look like this.';\n  subtitleLine2 = 'Subtitle line 2 look like this.';\n  isUserInactive = false;\n  subtitleDisplaySettings: ISubtitlePreferences = this.preferencesService.getPreferences().subtitle\n  playbackSettings: IPlaybackPreferences = this.preferencesService.getPreferences().playBack\n  fontColorsList = COLOR_LIST\n  subtitleSpanElementsList: any[];\n  fontSizeList = FONT_SIZE_LIST\n  canPlay = false\n  isMetadataLoaded = false\n  isSeeking = false\n  toSeek: number = 0\n  private ngUnsubscribe = new Subject();\n\n  constructor(\n    private ipcService: IpcService,\n    private watchedService: WatchedService,\n    private movieService: MovieService,\n    private elementRef: ElementRef,\n    private userIdleService: UserIdleService,\n    private preferencesService: PreferencesService\n  ) { GeneralUtil.DEBUG.log('VIDEOPLAYER CONSTRUCTOR') }\n\n  onNotIdle() {\n    this.userIdleService.resetTimer()\n    this.isUserInactive = false;\n  }\n\n  ngOnInit() {\n\n    // this.subtitleDisplaySettings.fontSize = size\n    // this.subtitleDisplaySettings.fontColor = color\n    // this.subtitleDisplaySettings.backgroundColor = color\n    // this.subtitleDisplaySettings.backgroundOpacity = percentage;\n    // this.streamLink = 'https://s3.eu-central-1.amazonaws.com/pipe.public.content/short.mp4' // 320p sample\n    // this.streamLink = 'https://file-examples-com.github.io/uploads/2017/04/file_example_MP4_1920_18MG.mp4' // 1080p sample\n    // this.streamLink = '../../../../assets/sample movie/Ratatouille (2007) [1080p]/Ratatouille.2007.1080p.BrRip.x264.YIFY.mp4'\n    this.userIdleService.startWatching()\n    this.userIdleService.onTimerStart().pipe(takeUntil(this.ngUnsubscribe)).subscribe((_count) => { GeneralUtil.DEBUG.log('start! ', _count) });\n    this.userIdleService.onIdleStatusChanged().pipe(takeUntil(this.ngUnsubscribe)).subscribe(e => {\n      GeneralUtil.DEBUG.log(\"changed!\", e)\n    })\n    this.userIdleService.onTimeout().pipe(takeUntil(this.ngUnsubscribe)).subscribe(e => {\n      GeneralUtil.DEBUG.log(\"TIMEOUT!OUT!\", e)\n      // this.isUserInactive = true;\n    })\n\n    const root = this;\n    // setTimeout(() => {\n    //   root.isShowSubtitles = false;\n    // }, 5000);\n\n    GeneralUtil.DEBUG.log('1. VIDEOPLAYER ngOnInit')\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    const cs = changes.streamLink\n    if (cs) {\n      GeneralUtil.DEBUG.log('2. cs:', cs)\n      GeneralUtil.DEBUG.log('this.streamLink:', this.streamLink)\n      // if (cs && !cs.firstChange) {\n      this.statsForNerds.source = this.streamLink;\n      this.isMetadataLoaded = true\n      GeneralUtil.DEBUG.log('isMetadataLoaded true')\n\n      const root = this\n      let checkExist = setInterval(function () {\n        root.videoPlayerElement = root.elementRef.nativeElement.querySelectorAll('#videoPlayer')\n        if (root.videoPlayerElement.length > 0) {\n          GeneralUtil.DEBUG.log(\"3. videoPlayer Exists!\");\n          root.videoPlayerEvents();\n          clearInterval(checkExist);\n        }\n      }, 100); // check every 100ms\n\n    }\n  }\n\n  ngAfterViewInit(): void {\n\n    if (environment.runConfig.electron) {\n      this.ipcService.statsForNerdsSubscribable.pipe(takeUntil(this.ngUnsubscribe)).subscribe(stats => {\n        GeneralUtil.DEBUG.log(stats)\n        if (stats) {\n          this.statsForNerds.downSpeed = stats.downSpeed\n          this.statsForNerds.upSpeed = stats.upSpeed\n          this.statsForNerds.downloadedPieces = stats.downloadedPieces\n          this.statsForNerds.ratio = stats.ratio\n        }\n      })\n    }\n  }\n\n  ngOnDestroy(): void {\n    GeneralUtil.DEBUG.log('ondestroy')\n    this.canPlay = false\n    this.ngUnsubscribe.next()\n    this.ngUnsubscribe.complete()\n    this.ipcService.stopStream()\n    GeneralUtil.DEBUG.log('DESTROYED')\n  }\n\n  videoPlayerEvents() {\n\n    // this.videoPlayerElement = this.videoPlayer1.nativeElement as HTMLVideoElement\n    GeneralUtil.DEBUG.log('4. videoPlayerEvents, videoPlayerElement: ', this.videoPlayerElement)\n    this.videoPlayerElement = this.videoPlayerElement[0]\n    // GeneralUtil.DEBUG.log(this.videoPlayer1)\n\n\n    //   // Mute/Unmute\n    //   // this.videoPlayerElement.muted = true\n    this.videoPlayerElement.addEventListener('canplay', (e) => {\n      this.subtitleSpanElementsList = this.elementRef.nativeElement.querySelectorAll('.subtitle-span')\n      GeneralUtil.DEBUG.log('EVENT: canplay', e)\n      this.canPlay = true\n      this.videoTime.duration = this.videoPlayerElement.duration\n      this.togglePlay();\n      this.isSeeking = false\n    })\n    this.videoPlayerElement.addEventListener('durationchange', (e) => {\n      GeneralUtil.DEBUG.log('EVENT: durationchange', e)\n    })\n    this.videoPlayerElement.addEventListener('ended', (e) => {\n      this.isPlaying = false\n      GeneralUtil.DEBUG.log('EVENT: ended', e)\n      // this.watchedService.saveWatched({\n      //   id: '',\n      //   tmdbId: this.tmdbId,\n      //   imdbId: this.imdbId,\n      //   title: '',\n      //   percentage: 100,\n      //   year: 0});\n    })\n    this.videoPlayerElement.addEventListener('error', (e) => {\n      GeneralUtil.DEBUG.log('EVENT: error', e)\n    })\n    this.videoPlayerElement.addEventListener('pause', (e) => {\n      this.isPlaying = false\n      GeneralUtil.DEBUG.log('EVENT: pause', e)\n    })\n    this.videoPlayerElement.addEventListener('play', (e) => {\n      this.isPlaying = true\n      GeneralUtil.DEBUG.log('EVENT: play', e)\n    })\n    this.videoPlayerElement.addEventListener('playing', (e) => {\n      this.isPlaying = true\n      GeneralUtil.DEBUG.log('EVENT: playing', e)\n    })\n    this.videoPlayerElement.addEventListener('progress', (e) => {\n      // GeneralUtil.DEBUG.log('progress', e)\n    })\n    this.videoPlayerElement.addEventListener('seeked', (e) => {\n      GeneralUtil.DEBUG.log('EVENT: seeked', e)\n      this.updateProgressBar()\n      this.isSeeking = false\n    })\n    this.videoPlayerElement.addEventListener('seeking', (e) => {\n      GeneralUtil.DEBUG.log('EVENT: seeking', e)\n      this.isSeeking = true\n    })\n    this.videoPlayerElement.addEventListener('stalled', (e) => {\n      GeneralUtil.DEBUG.log('EVENT: stalled', e)\n      this.isSeeking = true\n    })\n    this.videoPlayerElement.addEventListener('suspend', (e) => {\n      // GeneralUtil.DEBUG.log('onSuspend', e)\n    })\n    this.videoPlayerElement.addEventListener('timeupdate', (e) => {\n      this.videoTime.elapsed = this.videoPlayerElement.currentTime\n      for (let entry of this.subtitleMap.entries()) {\n        if (this.videoTime.elapsed >= this.convertToSeconds(entry[1].startTime) && this.videoTime.elapsed <= this.convertToSeconds(entry[1].endTime)) {\n          this.updateDisplaySubtitle(entry[1].captionText1, entry[1].captionText2)\n          break;\n        } else {\n          this.updateDisplaySubtitle('', '')\n          // this.updateDisplaySubtitle('\\uD83D\\uDE00', '\\uD83D\\uDE00') // emoji test\n        }\n      }\n    })\n    this.videoPlayerElement.addEventListener('loadedmetadata', (e) => {\n      GeneralUtil.DEBUG.log('EVENT: loadedmetadata', e)\n      this.isMetadataLoaded = true\n      this.statsForNerds.resolution = this.videoPlayerElement.videoWidth + 'x' + this.videoPlayerElement.videoHeight\n    })\n\n    // MIGRATED\n    const root = this\n    setInterval((e) => {\n      if (root.isPlaying) {\n        root.updateProgressBar()\n        // this.updateWatchedStatus(e)\n      }\n    }, 500)\n    // END OF MIGRATED\n  }\n\n  onKeyPress(val: KeyboardEvent) {\n    const key = val.key.toLowerCase()\n    GeneralUtil.DEBUG.log(val)\n    if (!val.shiftKey && !val.altKey && !val.ctrlKey && !val.metaKey) {\n\n      switch (key) {\n        case 'm':\n          // toggle mute\n          this.toggleMute()\n          break;\n        case 'f':\n          this.toggleFullScreen()\n          break;\n        case 'k':\n        case ' ':\n          // toggle pause/play\n          this.togglePlay()\n          break;\n        case 'arrowup':\n          try {\n            this.videoPlayerElement.volume += .2\n          } catch (e) {\n            this.videoPlayerElement.volume = 1\n          }\n          // keyCode: 38\n          break;\n        case 'arrowdown':\n          try {\n            this.videoPlayerElement.volume -= .2\n          } catch (e) {\n            this.videoPlayerElement.volume = 0\n          }\n          // keyCode: 40\n          break;\n        case 'arrowleft':\n          try {\n            this.videoPlayerElement.currentTime -= 10\n          } catch (e) {\n            this.videoPlayerElement.currentTime = 0\n          }\n\n          // keyCode: 37\n          // toggl2e fullscreen\n          break;\n        case 'arrowright':\n          try {\n            this.videoPlayerElement.currentTime += 10\n          } catch (e) {\n            this.videoPlayerElement.currentTime = this.videoPlayerElement.duration\n          }\n          // keyCode: 39\n          break;\n        case 'pageup':\n          this.videoPlayerElement.volume = '1'\n          break;\n        case 'pagedown':\n          this.videoPlayerElement.volume = '0'\n          break;\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n          // duration selector, 1 for 10% of duration, 2 20%, etc.\n          this.videoPlayerElement.currentTime = parseFloat('.' + key) * this.videoPlayerElement.duration\n          break;\n        case '0':\n        case 'home':\n          // start of the video\n          this.videoPlayerElement.currentTime = '0'\n          break;\n        case 'end':\n          // end of the video\n          this.videoPlayerElement.currentTime = this.videoPlayerElement.duration\n          break;\n        default:\n          GeneralUtil.DEBUG.log('no hotkey')\n          break;\n      }\n    }\n  }\n\n  updateWatchedStatus(val: any) {\n\n    // id: string // also use in Doc Id\n    // tmdbId: number,\n    // imdbId?: string,\n    // title: string,\n    // year: number,\n    // // id?: string,\n    // cre8Ts?: number, // create timestamp\n    // timestamp?: number,\n    // percentage: string,\n    let watchedObj = {\n      id: '',\n      tmdbId: this.tmdbId,\n      imdbId: this.imdbId,\n      title: '',\n      percentage: this.videoPlayerElement.currentTime,\n      year: 0\n      // percentage: Math.floor(this.videoPlayerElement.currentTime / this.videoPlayerElement.duration * 100)\n    }\n    GeneralUtil.DEBUG.log('updating watched', watchedObj);\n    this.watchedService.saveWatched(watchedObj);\n  }\n\n  togglePlay() {\n    const isPlaying = this.videoPlayerElement.currentTime > 0 && !this.videoPlayerElement.paused && !this.videoPlayerElement.ended\n      && this.videoPlayerElement.readyState > 2;\n    GeneralUtil.DEBUG.log('5. togglePlay, isPlaying: ', isPlaying)\n    // safely autoplay\n    // if (!isPlaying && this.canPlay) {\n    //   this.videoPlayerElement.play();\n    // } else {\n    //   this.videoPlayerElement.pause();\n    // }\n  }\n\n  /**\n   * Toggles fullscreen for #videoPlayerOuter.\n   * TODO: exit fullscreen functionality.\n   */\n  toggleFullScreen() {\n\n    const playerOuter = this.elementRef.nativeElement.querySelector('#videoPlayerOuter')\n    // if (playerOuter.fullscreenElement) {\n    if (document['webkitIsFullScreen']) {\n      document.exitFullscreen();\n      // }\n    } else {\n      if (playerOuter.requestFullscreen) {\n        playerOuter.requestFullscreen();\n      } else if (playerOuter.mozRequestFullScreen) {\n        playerOuter.mozRequestFullScreen();\n      }\n      else if (playerOuter.msRequestFullscreen) {\n        playerOuter.msRequestFullscreen();\n      }\n    }\n  }\n\n  onSeek(seekValue: number) {\n    this.videoPlayerElement.currentTime = seekValue;\n  }\n\n  /**\n   * Open file selector from electron side and return fullfilepath.\n   */\n  async onChangeCc(filePath) {\n\n    // let filePath = 'Aliens.Directors.Cut.1986.1080p.BRrip.x264.GAZ.YIFY.srt'\n    // let filePath = ''\n    // let filePath = 'Cinema Paradiso-English.srt'\n    // filePath = '../../../../assets/tmp/' + filePath\n\n    // filePath = await this.ipcService.changeSubtitle()\n    // GeneralUtil.DEBUG.log('filePath', filePath)\n\n    const fileStr = await this.movieService.getSubtitleFileString(filePath).toPromise()\n    let encodingStr = 'UTF-8'\n    try {\n      encodingStr = jschardet.detect(fileStr, { minimumThreshold: 0 }).encoding // errors with subs with `ó`\n    } catch {\n      const encodingAlt = chardet.analyse(fileStr)\n      GeneralUtil.DEBUG.log(encodingAlt)\n      if (encodingAlt.length > 1) {\n        encodingStr = encodingAlt[0].name\n      //   encodingStr = encodingAlt[1].name\n      // } else if (encodingAlt.length === 1) {\n      //   encodingStr = encodingAlt[0].name\n      }\n    }\n    const file = await this.movieService.getSubtitleFile(filePath).toPromise()\n\n    let resultFileStr\n    const fileReader = new FileReader()\n\n    fileReader.readAsText(file, encodingStr);\n    const root = this\n    fileReader.onloadend = function (x) {\n      resultFileStr = fileReader.result\n      GeneralUtil.DEBUG.log(resultFileStr)\n      resultFileStr = resultFileStr.replace(/[\\r]+/g, '')\n      root.subtitleMap = SubtitlesUtil.mapSubtitle(resultFileStr)\n      GeneralUtil.DEBUG.log(\"subtitleMap!\", root.subtitleMap)\n    };\n  }\n\n  changeVolume(source: number) {\n    this.volume = source\n    this.videoPlayerElement.volume = this.volume * 0.01\n  }\n\n  toggleMute() {\n    this.videoPlayerElement.muted = !this.videoPlayerElement.muted\n  }\n\n  updateProgressBar() {\n    const DURATION = this.videoPlayerElement.duration\n    const BUFFERED = this.videoPlayerElement.buffered\n\n    this.progressBar.played = GeneralUtil.getPercentage(this.videoPlayerElement.currentTime, DURATION) + '%'\n    if (BUFFERED.length > 0) {\n      this.progressBar.buffered = GeneralUtil.getPercentage(BUFFERED.end(0), DURATION) + '%';\n      let currentBufferHealth = 0\n      for (let index = 0; index < BUFFERED.length; index++) {\n        const bufferStart = BUFFERED.start(index);\n        const bufferEnd = BUFFERED.end(index);\n        currentBufferHealth += bufferEnd - bufferStart;\n      }\n      this.statsForNerds.bufferhealth = currentBufferHealth + 's | ' +\n        GeneralUtil.getPercentage(currentBufferHealth, DURATION) + '%'\n    }\n  }\n\n  updateDisplaySubtitle(val1: string, val2: string) {\n    this.subtitleLine1 = val1\n    this.subtitleLine2 = val2\n  }\n\n  /**\n   * converts HH:mm:ss format to seconds float.\n   * @param hms time in HH:mm:ss format\n   * @returns seconds equivalent\n   */\n  convertToSeconds(hms: string) {\n    hms = hms.replace(',', '.');\n    const a = hms.split(':'); // split it at the colons\n    // minutes are worth 60 seconds. Hours are worth 60 minutes.\n    const seconds = (+a[0]) * 60 * 60 + (+a[1]) * 60 + (+a[2]);\n    return seconds\n  }\n\n  savePreferences() {\n    this.preferencesService.preferences['subtitle'] = this.subtitleDisplaySettings\n    this.preferencesService.preferences['playBack'] = this.playbackSettings\n  }\n\n  changeFontSize(size: string) {\n    this.setProperties('font-size', size)\n    this.subtitleDisplaySettings.fontSize = size\n  }\n  changeFontColor(color: string) {\n    this.setProperties('color', 'rgba(' + color + ',1)');\n    this.subtitleDisplaySettings.fontColor = color\n  }\n  // font outline, shadow, family,\n  changeBackgroundColor(color: string) {\n    this.setProperties('background-color', 'rgba(' + color + ',' + this.subtitleDisplaySettings.backgroundOpacity + ')')\n    // this.setProperties('', 'rgba(' + this.subtitleDisplaySettings.fontColor + ',' + color + ')'))\n    this.subtitleDisplaySettings.backgroundColor = color\n  }\n  changeBackgroundOpacity(percentage: string) {\n    this.setProperties('background-color', 'rgba(' + this.subtitleDisplaySettings.backgroundColor + ',' + percentage + ')');\n    this.subtitleDisplaySettings.backgroundOpacity = percentage;\n  }\n  // background outline\n  // window\n  private setProperties(propName: string, propValue: string) {\n    this.subtitleSpanElementsList.forEach(element => {\n      element.style.setProperty(propName, propValue)\n    });\n  }\n}\n\ninterface Stats {\n  bufferhealth: string // in seconds\n  connectionSpeed: string // might remove\n  downloadedPieces: number // (pieces have.)\n  downSpeed: string // leech speed\n  upSpeed: string // seed speed\n  ratio: string // downloaded/uploaded ratio\n  // codec\n  id: string // hash/id\n  source: string; // stream link\n  size: string;\n  resolution: string\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".subtitle-span {\n  color: white;\n  background-color: black;\n  font-size: 2.5vh;\n}\n\n.user-inactive {\n  cursor: none;\n}\n",
                    "styleUrl": "./video-player.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "ipcService",
                        "type": "IpcService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "watchedService",
                        "type": "WatchedService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "movieService",
                        "type": "MovieService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userIdleService",
                        "type": "UserIdleService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "preferencesService",
                        "type": "PreferencesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 79,
                "jsdoctags": [
                    {
                        "name": "ipcService",
                        "type": "IpcService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "watchedService",
                        "type": "WatchedService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "movieService",
                        "type": "MovieService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userIdleService",
                        "type": "UserIdleService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "preferencesService",
                        "type": "PreferencesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy",
                "AfterViewInit",
                "OnChanges"
            ],
            "templateData": "<div *ngIf=\"isMetadataLoaded\" [ngClass]=\"{'user-inactive':isUserInactive}\">\n\n  <!-- preview -->\n  <div style='position: relative; bottom: 100px' [hidden]=\"!isShowSubtitles\">\n  </div>\n\n  <div id='videoPlayerOuter' (mousemove)='onNotIdle()' (keydown)=\"onKeyPress($event)\" tabindex=\"1\"\n    style='position: relative; background-color: black; width: 100%; height: calc(100vh - 50px); outline: none'>\n\n    <!-- top HUD -->\n    <!-- back, title, -->\n    <!-- <div style='position: absolute; z-index: 21; display:flex;\n    width: 100%; align-items: center;flex-direction: row;\n    text-shadow: -2px 2px 2px #000000;'>\n      <span>back</span>\n      <span>title</span>\n    </div> -->\n\n    <div id='videoContainer' style='position: absolute; width:100%; height:100%; text-align:center; z-index: 20;'\n      (click)='togglePlay()' (dblclick)='toggleFullScreen()'>\n      <!-- animation: ytp-bezel-fadeout .5s linear 1 normal forwards; -->\n      <video #videoPlayer1 id='videoPlayer' style=\"width:100%; height:100%;\" poster=\"\">\n\n        <source [src]='streamLink' controlsList=\"nodownload\" type=\"video/mp4\">\n\n      </video>\n\n    </div>\n\n    <div style='position: absolute;z-index: 22;margin-top: 45vh;margin-left: 45vw;'>\n      <mat-spinner *ngIf='isSeeking' [diameter]='100' style='margin: auto;'></mat-spinner>\n      <!-- video center icons -->\n      <!-- play,pause,mute,unmute,loading -->\n    </div>\n\n    <div style='position: absolute; z-index: 21; bottom: 100px; display:flex;\n    width: 100%; align-items: center;flex-direction: column;\n    text-shadow: -2px 2px 2px #000000;' [hidden]=\"!isShowSubtitles\">\n      <span class='subtitle-span' [innerHTML]=\"subtitleLine1\"></span><br />\n      <span class='subtitle-span' [innerHTML]=\"subtitleLine2\"></span>\n    </div>\n    <!-- <app-video-player-stats [stats]='statsForNerds'>\n\n    </app-video-player-stats> -->\n\n      <!-- [isPaused]='videoPlayer1.paused' -->\n      <!-- [videoPlayer1]='videoPlayer1' -->\n      <mdb-video-player-controls\n      *ngIf='canPlay'\n      [hidden]='isUserInactive'\n      [isPlaying]='isPlaying'\n      [isMuted]='videoPlayerElement.muted'\n      [isShowSubtitles]='isShowSubtitles'\n      [canPlay]='canPlay'\n      [videoPlayerElement]='videoPlayerElement'\n      [volume]='volume'\n      [videoTime]='videoTime'\n      [progressBar]='progressBar'\n      (onSeekValue)='onSeek($event)'\n      (onTogglePlay)='togglePlay()'\n      (onToggleMute)='toggleMute($event)'\n      (onToggleFullScreen)='toggleFullScreen()'\n      (onToggleSubtitles)='isShowSubtitles = $event'\n      (onChangeVolume)='changeVolume($event)'\n      (onChangeSubtitleFile)='onChangeCc($event)'\n      (onChangeFontColor)='changeFontColor($event)'\n      (onChangeFontSize)='changeFontSize($event)'\n      (onChangeBackgroundColor)='changeBackgroundColor($event)'\n      (onChangeBackgroundOpacity)='changeBackgroundOpacity($event)'\n      >\n    </mdb-video-player-controls>\n\n  </div>\n</div>\n"
        },
        {
            "name": "VideoPlayerControlsComponent",
            "id": "component-VideoPlayerControlsComponent-588585bdf2d6064ecb2f9bd835b9a8acb99adfb30b717f933e69f83a68c7ae04ad51feb9141293ddac1bb8a42c569d3460cdc83ad38e869c1227894beb630d13",
            "file": "src/app/modules/watch/video-player-controls/video-player-controls.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "mdb-video-player-controls",
            "styleUrls": [
                "./video-player-controls.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./video-player-controls.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "canPlay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isMuted",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isPlaying",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isShowSubtitles",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "progressBar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "IProgressBar",
                    "decorators": []
                },
                {
                    "name": "videoPlayerElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "videoTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "IVideoTime",
                    "decorators": []
                },
                {
                    "name": "volume",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onChangeBackgroundColor",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "EventEmitter"
                },
                {
                    "name": "onChangeBackgroundOpacity",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "EventEmitter"
                },
                {
                    "name": "onChangeFontColor",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "EventEmitter"
                },
                {
                    "name": "onChangeFontSize",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "EventEmitter"
                },
                {
                    "name": "onChangeSubtitleFile",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "EventEmitter"
                },
                {
                    "name": "onChangeVolume",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "EventEmitter"
                },
                {
                    "name": "onSeekValue",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "EventEmitter"
                },
                {
                    "name": "onToggleFullScreen",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "EventEmitter"
                },
                {
                    "name": "onToggleMute",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "EventEmitter"
                },
                {
                    "name": "onTogglePlay",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "EventEmitter"
                },
                {
                    "name": "onToggleSubtitles",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "fontColorsList",
                    "defaultValue": "RGB_COLOR_LIST",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "fontSizeList",
                    "defaultValue": "FONT_SIZE_LIST",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "isPaused",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "isShowStatus",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "percentageList",
                    "defaultValue": "PERCENTAGE_LIST",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "seekTooltip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "toSeek",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 40
                }
            ],
            "methodsClass": [
                {
                    "name": "calculateSeekSeconds",
                    "args": [
                        {
                            "name": "val",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeBackgroundColor",
                    "args": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeBackgroundOpacity",
                    "args": [
                        {
                            "name": "percentage",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "percentage",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeCc",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ]
                },
                {
                    "name": "changeFontColor",
                    "args": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeFontSize",
                    "args": [
                        {
                            "name": "size",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "size",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mouseMove",
                    "args": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEvent for video player scrubber tooltip\n",
                    "description": "<p>Event for video player scrubber tooltip</p>\n",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSeek",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleFullScreen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleMute",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "togglePlay",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleSubtitles",
                    "args": [
                        {
                            "name": "val",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateProgressBar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "volumeChange",
                    "args": [
                        {
                            "name": "val",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { IpcService } from '@services/ipc.service';\nimport { COLOR_LIST, FONT_SIZE_LIST, PERCENTAGE_LIST, RGB_COLOR_LIST } from '@shared/constants';\nimport GeneralUtil from '@utils/general.util';\n\n@Component({\n  selector: 'mdb-video-player-controls',\n  templateUrl: './video-player-controls.component.html',\n  styleUrls: ['./video-player-controls.component.scss']\n})\nexport class VideoPlayerControlsComponent implements OnInit {\n\n  @Input() isMuted: boolean\n  @Input() isPlaying: boolean\n  @Input() isShowSubtitles: boolean = false\n  @Input() canPlay: boolean\n  @Input() videoPlayerElement: any\n  @Input() volume: number\n  // @Input() videoPlayer1: any // tocheck\n  @Input() videoTime: IVideoTime\n  @Input() progressBar: IProgressBar\n\n  @Output() onTogglePlay = new EventEmitter<any>();\n  @Output() onToggleMute = new EventEmitter<any>();\n  @Output() onToggleFullScreen = new EventEmitter<any>();\n  @Output() onToggleSubtitles = new EventEmitter<boolean>();\n  @Output() onSeekValue = new EventEmitter<any>();\n  @Output() onChangeVolume = new EventEmitter<any>();\n  @Output() onChangeSubtitleFile = new EventEmitter<any>();\n  @Output() onChangeFontColor = new EventEmitter<any>();\n  @Output() onChangeFontSize = new EventEmitter<any>();\n  @Output() onChangeBackgroundColor = new EventEmitter<any>();\n  @Output() onChangeBackgroundOpacity = new EventEmitter<any>();\n\n  fontColorsList = RGB_COLOR_LIST\n  // fontColorsList = COLOR_LIST\n  fontSizeList = FONT_SIZE_LIST\n  percentageList = PERCENTAGE_LIST;\n  seekTooltip: any\n  toSeek: number = 0\n  // isPlaying: boolean = false\n  isPaused: false;\n  isShowStatus = false;\n  constructor(\n    private ipcService: IpcService) { }\n\n  ngOnInit() {\n  }\n\n  updateProgressBar() {\n  }\n  /**\n   * Event for video player scrubber tooltip\n   */\n  mouseMove(e) {\n    this.seekTooltip = GeneralUtil.convertToHHMMSS(this.calculateSeekSeconds(e))\n  }\n\n  onSeek() {\n    this.onSeekValue.emit(this.toSeek);\n  }\n\n  togglePlay() {\n    this.onTogglePlay.emit()\n  }\n  toggleMute() {\n    this.onToggleMute.emit()\n  }\n  toggleFullScreen() {\n    this.onToggleFullScreen.emit()\n  }\n  volumeChange(val) {\n    this.onChangeVolume.emit(val);\n  }\n\n  toggleSubtitles(val: boolean) {\n    this.onToggleSubtitles.emit(val)\n  }\n\n  async changeCc() {\n    // let filePath = 'Aliens.Directors.Cut.1986.1080p.BRrip.x264.GAZ.YIFY.srt'\n    let filePath = ''\n    // let filePath = 'Cinema Paradiso-English.srt'\n    // filePath = '../../../../assets/tmp/' + filePath\n    filePath = await this.ipcService.changeSubtitle()\n    GeneralUtil.DEBUG.log('filePath', filePath)\n    this.onChangeSubtitleFile.emit(filePath);\n  }\n\n\n  changeFontColor(color: string) {\n    this.onChangeFontColor.emit(color);\n  }\n  changeFontSize(size: string) {\n    this.onChangeFontSize.emit(size);\n  }\n  changeBackgroundColor(color: string) {\n    this.onChangeBackgroundColor.emit(color);\n  }\n  changeBackgroundOpacity(percentage: string) {\n    this.onChangeBackgroundOpacity.emit(percentage);\n  }\n\n\n  private calculateSeekSeconds(val) {\n    const totalWidth = val.currentTarget.offsetWidth\n    const offsetX = val.offsetX\n    const percentage = GeneralUtil.getPercentage(offsetX, totalWidth)\n    this.toSeek = (percentage / 100) * this.videoTime.duration\n    return this.toSeek\n  }\n}\n\ninterface IVideoTime {\n  elapsed: number,\n  duration: number,\n  remaining: number\n}\n\nexport interface IProgressBar {\n  buffered: string,\n  played: string,\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "#playerControlsContainer {\n  width: 100%;\n  height: 45px;\n  left: 0;\n  bottom: 0px;\n  position: absolute\n}\n\n.player-controls-icon {\n  height: 100%;\n  filter: invert(1) contrast(.5);\n  cursor: pointer;\n  display: inline-block;\n  width: 40px;\n  padding: 9px;\n}\n\n.player-controls-icon:hover {\n  filter: invert(1) contrast(1)\n}\n\n#progressBarContainer {\n  width: 100%;\n  height: 5px;\n  position: relative;\n  cursor: pointer;\n  z-index: 30;\n  text-decoration: none;\n  position: relative;\n}\n\n#progressBarContainer #tooltipSpan {\n  display: none;\n}\n\n.progress-bar-focus {\n  height: 8px\n}\n\n.buffered-bar {\n  height: 100%;\n  background-color: red;\n  z-index: 21;\n  left: 0;\n  position: absolute\n}\n\n#progressBarContainer:hover {\n  height: 8px;\n\n  #tooltipSpan {\n    display: block;\n    position: fixed;\n    overflow: hidden;\n  }\n\n  .buffered-bar {\n    background-color: hsl(19, 100%, 50%)\n  }\n}\n\n.user-inactive {\n  #playerControlsContainer {\n    display: none\n  }\n}\n\n#subtitlesControl::after {\n  width: 24px;\n  left: 12px;\n  height: 3px;\n  border-radius: 3px;\n  background-color: #f00;\n  content: \"\";\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  border-bottom: 1px solid red;\n  filter: invert(1); // canceling parent invert\n}\n",
                    "styleUrl": "./video-player-controls.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "ipcService",
                        "type": "IpcService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 43,
                "jsdoctags": [
                    {
                        "name": "ipcService",
                        "type": "IpcService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div id='playerControlsContainer'>\n  <div id='progressBarContainer' (mousemove)='mouseMove($event)' (click)='onSeek()' data-toggle='tooltip'\n    title='{{seekTooltip}}'>\n    <!-- #progressBar -->\n    <!-- [ngClass]=\"{'progress-bar-focus':isMouseOver==true}\" -->\n    <!-- <span #tooltipSpan id='tooltipSpan' style='z-index: 9999;'>00:00</span> -->\n    <!-- played -->\n\n    <div class='buffered-bar' [ngStyle]=\"{'width': progressBar.played}\">\n    </div>\n    <!-- scrubber -->\n    <!-- <div [ngStyle]=\"{'width': progressBar?.played}\"  style=\"height: 100%; background-color: red; \">\n  </div> -->\n    <!-- loaded maybe use scaleX for transform-->\n    <div [ngStyle]=\"{'width': progressBar?.buffered}\"\n      style=\"height: 100%; background-color: gray; z-index: 20; left: 0; position: absolute\">\n    </div>\n    <div style=\"width: 100%; height: 100%; background-color: antiquewhite; z-index: 19; left: 0; position: absolute\">\n    </div>\n  </div>\n\n  <div id='controlsContainer'\n    style=\"width: 100%; height: 40px; background-color: black; z-index: 20; left: 0; position: relative; display:flex;\">\n    <div style='float:left; display: flex; flex: 1; white-space: nowrap; overflow: hidden; padding-left: 5px;'>\n      <div (click)='togglePlay()'>\n        <!-- videoPlayer1.paused   -->\n        <div *ngIf=\"canPlay\">\n          <img *ngIf=\"videoPlayerElement.paused\" class='player-controls-icon' src='./assets/icons/play-solid.svg'\n            data-toggle='tooltip' title='Play'>\n          <img *ngIf=\"!videoPlayerElement.paused\" class='player-controls-icon' src='./assets/icons/pause.svg'\n            data-toggle='tooltip' title='Pause'>\n        </div>\n      </div>\n      <div (click)='toggleMute()'>\n        <img *ngIf=\"(isMuted) \" class='player-controls-icon' src='./assets/icons/mute.svg' data-toggle='tooltip'\n          title='Unmute'>\n        <img *ngIf=\"(!isMuted) || volume <= 0\" class='player-controls-icon' src='./assets/icons/volume.svg'\n          data-toggle='tooltip' title='Mute'>\n      </div>\n      <mat-slider (input)=\"volumeChange($event.value)\" [(value)]=\"volume\" min=\"0\" max=\"100\" step=\"1\"\n        data-toggle='tooltip' title='Change volume'></mat-slider>\n    </div>\n    <div style='float:right; padding-right: 5px;'>\n      <img (click)='isShowStatus=true' class='player-controls-icon' src='./assets/icons/status.svg'\n        data-toggle='tooltip' title='Stats'>\n      <span data-toggle='tooltip' title='Time lapsed'>{{videoTime.elapsed|toHHMMSS}}</span>/\n      <span data-toggle='tooltip' title='Duration'>{{videoTime.duration|toHHMMSS}}</span>\n\n      <div id='subtitlesControl' class='player-controls-icon' [matMenuTriggerFor]=\"subtitlesMenu\" data-toggle='tooltip'\n        title='Subtitles'>\n        <img id='subsIcon' src='./assets/icons/subtitle.svg'>\n      </div>\n      <mat-menu #subtitlesMenu=\"matMenu\" yPosition=\"above\">\n        <button mat-menu-item [matMenuTriggerFor]=\"subtitlesAppearanceMenu\">Appearance</button>\n        <button mat-menu-item *ngIf='!isShowSubtitles' (click)=\"toggleSubtitles(true)\">On</button>\n        <button mat-menu-item *ngIf='isShowSubtitles' (click)=\"toggleSubtitles(false)\">Off</button>\n        <button mat-menu-item (click)=\"changeCc()\">Select from file...</button>\n      </mat-menu>\n      <mat-menu #subtitlesAppearanceMenu=\"matMenu\" yPosition=\"above\">\n        <button mat-menu-item [matMenuTriggerFor]=\"subtitlesAppearanceFontColorMenu\">Font Color</button>\n        <button mat-menu-item [matMenuTriggerFor]=\"subtitlesAppearanceFontSizeMenu\">Font Size</button>\n        <button mat-menu-item [matMenuTriggerFor]=\"subtitlesAppearanceBackgroundColorMenu\">Background Color</button>\n        <button mat-menu-item [matMenuTriggerFor]=\"subtitlesAppearanceBackgroundOpacityMenu\">Background\n          Opacity</button>\n      </mat-menu>\n      <mat-menu #subtitlesAppearanceFontColorMenu=\"matMenu\" yPosition=\"above\">\n        <span *ngFor=\"let color of fontColorsList\">\n          <button mat-menu-item (click)=\"changeFontColor(color.value)\">{{color.label}}</button>\n        </span>\n      </mat-menu>\n      <mat-menu #subtitlesAppearanceFontSizeMenu=\"matMenu\" yPosition=\"above\">\n        <span *ngFor=\"let fontSize of fontSizeList\">\n          <button mat-menu-item (click)=\"changeFontSize(fontSize.value)\">{{fontSize.label}}</button>\n        </span>\n      </mat-menu>\n      <mat-menu #subtitlesAppearanceBackgroundColorMenu=\"matMenu\" yPosition=\"above\">\n        <span *ngFor=\"let color of fontColorsList\">\n          <button mat-menu-item (click)=\"changeBackgroundColor(color.value)\">{{color.label}}</button>\n        </span>\n      </mat-menu>\n      <mat-menu #subtitlesAppearanceBackgroundOpacityMenu=\"matMenu\" yPosition=\"above\">\n        <span *ngFor=\"let p of percentageList\">\n          <button mat-menu-item (click)=\"changeBackgroundOpacity(p.value)\">{{p.label}}</button>\n        </span>\n      </mat-menu>\n\n      <img (click)='toggleFullScreen()' class='player-controls-icon' src='./assets/icons/fullscreen.svg'\n        data-toggle='tooltip' title='Fullscreen'>\n    </div>\n  </div>\n\n</div>\n"
        },
        {
            "name": "VideoPlayerStatsComponent",
            "id": "component-VideoPlayerStatsComponent-9255266d152c0c7c747d413b49e543acb6efae9784a6f4dc0b86eb801f646371137211cbfc65fd63a2eca01a3f8a6f73475ee13d545d20f99c4890eac4c2a2da",
            "file": "src/app/modules/watch/video-player-stats/video-player-stats.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-video-player-stats",
            "styleUrls": [
                "./video-player-stats.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./video-player-stats.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-video-player-stats',\n  templateUrl: './video-player-stats.component.html',\n  styleUrls: ['./video-player-stats.component.scss']\n})\nexport class VideoPlayerStatsComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./video-player-stats.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>video-player-stats works!</p>\n\n    <!-- video stats  -->\n    <!-- <div [hidden]='!isShowStatus' style=\"width: 50%; left: 0; top:10%; position:absolute; z-index: 21;\n    margin-left: 50px;padding: 10px;float: left;overflow: auto;background-color: rgba(0, 0, 0, 0.5);\">\n      <button class='btn btn-primary' (click)='isShowStatus=false'>Close</button>\n      <div *ngIf=\"statsForNerds.id\" style=\"display: flex; flex-direction: row;\">\n        <!-- align-items: flex-start; -->\n    <!-- <p style=\" font-weight: 500;\">ID/Hash:&nbsp;</p>\n    <p> {{statsForNerds.id}}</p>\n  </div>\n  <div *ngIf=\"statsForNerds.resolution\" style=\"display: flex; flex-direction: row;\">\n    <p style=\" font-weight: 500;\">Resolution:&nbsp;</p>\n    <p> {{statsForNerds.resolution}}</p>\n  </div>\n  <div *ngIf=\"statsForNerds.source\" style=\"display: flex; flex-direction: row;\">\n    <p style=\" font-weight: 500;\">Source:&nbsp;</p>\n    <p> {{statsForNerds.source}}</p>\n  </div>\n  <div *ngIf=\"statsForNerds.downSpeed\" style=\"display: flex; flex-direction: row;\">\n    <p style=\" font-weight: 500;\">Download Speed:&nbsp;</p>\n    <p> {{statsForNerds.downSpeed}}</p>\n  </div>\n  <div *ngIf=\"statsForNerds.upSpeed\" style=\"display: flex; flex-direction: row;\">\n    <p style=\" font-weight: 500;\">Upload Speed:&nbsp;</p>\n    <p> {{statsForNerds.upSpeed}}</p>\n  </div>\n  <div *ngIf=\"statsForNerds.ratio\" style=\"display: flex; flex-direction: row;\">\n    <p style=\" font-weight: 500;\">Ratio:&nbsp;</p>\n    <p> {{statsForNerds.ratio}}</p>\n  </div>\n  <div *ngIf=\"statsForNerds.downloadedPieces\" style=\"display: flex; flex-direction: row;\">\n    <p style=\" font-weight: 500;\">Pieces Downloaded:&nbsp;</p>\n    <p> {{statsForNerds.downloadedPieces}}</p>\n  </div>\n  <div *ngIf=\"statsForNerds.bufferhealth\" style=\"display: flex; flex-direction: row;\">\n    <p style=\" font-weight: 500;\">Buffered Health:&nbsp;</p>\n    <p> {{statsForNerds.bufferhealth}}</p>\n  </div>\n\n</div>  -->\n"
        },
        {
            "name": "WatchedComponent",
            "id": "component-WatchedComponent-8d3ee7671c0788a7603e4da156de615589f9bef11bee801a73c4264b92d8ca7a8740052613a6f93951ed89cd504942422d36154075789acc45bb44431435b59e",
            "file": "src/app/modules/user/watched/watched.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-watched",
            "styleUrls": [
                "./watched.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./watched.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cardWidth",
                    "defaultValue": "'130px'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "hasMoreResults",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "hasResults",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "lastVal",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "listType",
                    "defaultValue": "CollectionName.Watched",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "moviesDisplayList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "orderBy",
                    "defaultValue": "'tmdbId'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "procSync",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "watchedList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "getMoreResults",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ]
                },
                {
                    "name": "getWatchedMovies",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets all watched movies by user.\n",
                    "description": "<p>Gets all watched movies by user.</p>\n",
                    "modifierKind": [
                        131
                    ]
                },
                {
                    "name": "nextPage",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { UserDataService } from '@services/user-data/user-data.service';\n/**\n * Displays movies Watched by user\n */\nimport { IWatched } from '@services/watched.service';\nimport { WatchedService } from '@services/watched.service';\nimport { Component, OnInit } from '@angular/core';\nimport { environment } from '@environments/environment';\nimport { TMDB_SEARCH_RESULTS } from '../../../mock-data';\nimport { CollectionName } from '@services/firebase.service';\n\n@Component({\n  selector: 'app-watched',\n  templateUrl: './watched.component.html',\n  styleUrls: ['./watched.component.scss']\n})\nexport class WatchedComponent implements OnInit {\n\n\n  procSync = false\n  readonly listType = CollectionName.Watched\n  moviesDisplayList = []\n  watchedList\n  hasResults = false\n  hasMoreResults = false\n  lastVal = 0 // last value in the\n  cardWidth = '130px'\n  orderBy = 'tmdbId'\n\n  constructor(\n    private watchedService: WatchedService,\n    private userDataService: UserDataService,\n  ) { }\n\n  ngOnInit() {\n    this.getWatchedMovies()\n  }\n\n  /**\n   * Gets all watched movies by user.\n   */\n  async getWatchedMovies() {\n    if (environment.runConfig.useTestData) {\n      this.moviesDisplayList = TMDB_SEARCH_RESULTS.results\n    } else {\n      const res = await this.userDataService.getUserDataFirstPage(this.listType)\n      if (res.length) {\n        this.moviesDisplayList = res\n        this.lastVal = res[res.length - 1][this.listType][this.orderBy]\n        this.hasResults = true\n        if (res.length === 20) {\n          this.hasMoreResults = true\n        }\n      }\n    }\n  }\n\n  async getMoreResults() {\n    if (environment.runConfig.useTestData) {\n      this.moviesDisplayList = TMDB_SEARCH_RESULTS.results\n    } else {\n      const res = await this.userDataService.getUserDataPagination(this.listType, this.lastVal)\n      if (res.length) {\n        this.moviesDisplayList.push.apply(this.moviesDisplayList, res)\n        this.lastVal = res[res.length - 1][this.listType][this.orderBy]\n        if (res.length < 20) {\n          this.hasMoreResults = false\n        }\n      }\n    }\n  }\n\n  async nextPage() {\n\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./watched.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "watchedService",
                        "type": "WatchedService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userDataService",
                        "type": "UserDataService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "watchedService",
                        "type": "WatchedService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userDataService",
                        "type": "UserDataService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-selected-list></app-selected-list>\n<!-- <button class='btn btn-success' (click)='onSync()' data-toggle='tooltip' title='Synchronze your bookmarks.'>Sync\n  bookmarks</button> -->\n<div class=\"container-fluid\">\n\n  <div *ngIf='!hasResults'>\n    <h1 class='jumbo-message'>No {{listType}} movies found</h1>\n  </div>\n  <div *ngIf='hasResults' class='movie-cards-display-grid'>\n    <app-card-list [movieList]='moviesDisplayList' [cardWidth]='cardWidth' [displayMode]='\"movie-cards-display-grid\"'\n      [listType]='listType'>\n    </app-card-list>\n    <div *ngIf=\"hasMoreResults\" style='width: 100%; text-align: center; height: 80px;'>\n      <h5 class='text-hyperlink' (click)='getMoreResults()'>Load more results...</h5>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "YoutubePlayerComponent",
            "id": "component-YoutubePlayerComponent-1353fc4196db72a8ad0a2489aa143c16806d4670932a1f047ba33ab80b35f5058faa5343b19c442eae63ba0490d403f355cb767903f6f8666f5b8ad76fa16685",
            "file": "src/app/shared/components/youtube-player/youtube-player.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-youtube-player",
            "styleUrls": [
                "./youtube-player.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./youtube-player.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-youtube-player',\n  templateUrl: './youtube-player.component.html',\n  styleUrls: ['./youtube-player.component.scss']\n})\nexport class YoutubePlayerComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./youtube-player.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>youtube-player works!</p>\n"
        }
    ],
    "modules": [
        {
            "name": "AdminModule",
            "id": "module-AdminModule-0febcbb49bbbb6fe0de618de034b5d7c1738b5ef754e65dadbd3b62e41e21455166d6e63b7789778a13b298a29576628e4da44f36f169508f0cfd7cf14243601",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/admin/admin.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule\n  ]\n})\nexport class AdminModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppModule",
            "id": "module-AppModule-2bae188130654b78f71e3aac8c35ffe5d2e804aab6e1ce5a9573016369feaa0e7476309e95be250a8155372ed522cba8a12f9dccb215f934f387b87087e695f2",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import {\n  CommaSpacePipe, ReleaseYearPipe,\n} from './shared/pipes/mdb-pipes.pipe';\nimport { SimplifySizePipe, MagnetPipe } from './services/torrent/torrent.service';\nimport { SearchComponent } from '@components/search/search.component';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing/app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BulkDownloadComponent } from 'app/modules/admin/bulk-download/bulk-download.component';\nimport { NavigationComponent } from '@components/navigation/navigation.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms'\nimport { HttpClientModule } from '@angular/common/http';\nimport { TopNavigationComponent } from '@core/components/top-navigation/top-navigation.component';\nimport { BrowseComponent } from '@modules/user/browse/browse.component';\nimport { PersonDetailsComponent } from 'app/modules/person/person-details/person-details.component';\nimport { AngularFireModule } from '@angular/fire';\nimport { environment } from '@environments/environment';\nimport { AngularFireAuthModule } from '@angular/fire/auth';\nimport { AngularFirestoreModule } from '@angular/fire/firestore';\nimport { NotificationComponent } from 'app/modules/events/notification/notification.component';\nimport { PreviewComponent, GenrePipe } from '@shared/components/preview/preview.component';\nimport { ServiceWorkerModule } from '@angular/service-worker';\nimport { MdbGuardGuard } from './mdb-guard.guard';\nimport { backendProvider } from './services/http-interceptor.service';\nimport { RouterModule } from '@angular/router';\nimport { FloatingPlayerComponent } from '@shared/components/floating-player/floating-player.component';\nimport { SharedModule } from '@shared/shared.module';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { AdvancedFindComponent } from '@components/advanced-find/advanced-find.component';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { ImagePreviewComponent } from '@shared/components/image-preview/image-preview.component';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { KeyboardShortcutsComponent } from '@modules/settings/keyboard-shortcuts/keyboard-shortcuts.component';\nimport { VideoPlayerModule } from '@modules/watch/video-player.module';\nimport { YoutubePlayerComponent } from '@shared/components/youtube-player/youtube-player.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    BulkDownloadComponent,\n    NavigationComponent,\n    TopNavigationComponent,\n    BrowseComponent,\n    PersonDetailsComponent,\n    SearchComponent,\n    NotificationComponent,\n    SimplifySizePipe,\n    MagnetPipe,\n    CommaSpacePipe,\n    PreviewComponent,\n    FloatingPlayerComponent,\n    GenrePipe,\n    AdvancedFindComponent,\n    ImagePreviewComponent,\n    KeyboardShortcutsComponent,\n    YoutubePlayerComponent,\n    // ReleaseYearPipe/\n    // UsernameExistValidatorDirective\n    // RuntimeDisplayPipe\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule,\n    HttpClientModule,\n    AngularFireModule.initializeApp(environment.firebase),\n    AngularFireAuthModule,\n    AngularFirestoreModule,\n    RouterModule.forRoot([]),\n    SharedModule,\n    BrowserAnimationsModule,\n    ReactiveFormsModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatSidenavModule,\n    MatSelectModule,\n    MatCheckboxModule,\n    MatTabsModule,\n    MatDialogModule,\n    MatAutocompleteModule,\n    VideoPlayerModule\n    // ServiceWorkerModule.register('ngsw-worker.js', { enabled: environment.production }),\n  ],\n  entryComponents:[ImagePreviewComponent],\n  providers: [MdbGuardGuard, backendProvider],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AdvancedFindComponent"
                        },
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "BrowseComponent"
                        },
                        {
                            "name": "BulkDownloadComponent"
                        },
                        {
                            "name": "CommaSpacePipe"
                        },
                        {
                            "name": "FloatingPlayerComponent"
                        },
                        {
                            "name": "GenrePipe"
                        },
                        {
                            "name": "ImagePreviewComponent"
                        },
                        {
                            "name": "KeyboardShortcutsComponent"
                        },
                        {
                            "name": "MagnetPipe"
                        },
                        {
                            "name": "NavigationComponent"
                        },
                        {
                            "name": "NotificationComponent"
                        },
                        {
                            "name": "PersonDetailsComponent"
                        },
                        {
                            "name": "PreviewComponent"
                        },
                        {
                            "name": "SearchComponent"
                        },
                        {
                            "name": "SimplifySizePipe"
                        },
                        {
                            "name": "TopNavigationComponent"
                        },
                        {
                            "name": "YoutubePlayerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        },
                        {
                            "name": "VideoPlayerModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-922d68fe8b4ef71823fd8675b656e576499f5452b1a92386e5fbd357b528b23ad0216802b25d2acbfe8bb11ee745a8e8327226804ab2d3ce8d58da76bc677ca4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { BulkDownloadComponent } from 'app/modules/admin/bulk-download/bulk-download.component';\nimport { BrowseComponent } from '@modules/user/browse/browse.component';\nimport { PersonDetailsComponent } from 'app/modules/person/person-details/person-details.component';\nimport { PreviewComponent } from '@shared/components/preview/preview.component';\nimport { MdbGuardGuard } from '../mdb-guard.guard';\nimport { AdvancedFindComponent } from '@components/advanced-find/advanced-find.component';\n\nconst routes: Routes = [\n  // { path: '', redirectTo: '/dashboard', pathMatch: 'full' }, // homepage\n  // { path: '', redirectTo: '/results', pathMatch: 'full' },\n  { path: 'video', loadChildren: () => \"import('@modules/watch/video-player.module').then(m => m.VideoPlayerModule)\" },\n  { path: '', redirectTo: '/preferences', pathMatch: 'full' }, // for fast boot?\n  { path: 'browse', component: BrowseComponent },\n  { path: 'preferences', loadChildren: () => \"import('app/modules/settings/preferences/preferences.module').then(m => m.PreferencesModule)\" },\n  { path: 'preferences/bulk-download', component: BulkDownloadComponent },\n\n  { path: 'person-details/:id', component: PersonDetailsComponent },\n  { path: 'person-details', component: PersonDetailsComponent },\n  { path: 'preview', component: PreviewComponent },\n\n  { path: 'bookmarks', loadChildren: () => \"import('@modules/user/bookmarks/bookmarks.module').then(m => m.BookmarksModule)\", canLoad: [MdbGuardGuard] },\n  { path: 'watched', loadChildren: () => \"import('@modules/user/watched/watched.module').then(m => m.WatchedModule)\" },\n  { path: 'dashboard', loadChildren: () => \"import('@components/dashboard/dashboard.module').then(m => m.DashboardModule)\" },\n  { path: 'discover', loadChildren: () => \"import('@modules/movie/discover/discover.module').then(m => m.DiscoverModule)\" },\n  { path: 'library', loadChildren: () => \"import('@modules/person/library/library.module').then(m => m.LibraryModule)\" },\n\n  { path: 'results', loadChildren: () => \"import('@components/results/results.module').then(m => m.ResultsModule)\" },\n  { path: 'details/:id', loadChildren: () => \"import('@modules/movie/details/details.module').then(m => m.DetailsModule)\" },\n  { path: 'user', loadChildren: () => \"import('@modules/user/user.module').then(m => m.UserModule)\" },\n  { path: 'advanced-find', component: AdvancedFindComponent },\n  { path: '**', redirectTo: '/dashboard', pathMatch: 'full' }, // not found\n\n  // new structure:\n  // { path: 'home', loadChildren: () => import('@components/user/user.module').then(m => m.UserModule) },\n  // { path: 'movie', loadChildren: () => import('@components/user/user.module').then(m => m.MovieModule) },\n  // { path: 'user', loadChildren: () => import('@components/user/user.module').then(m => m.UserModule) },\n  // { path: 'person', loadChildren: () => import('@components/user/user.module').then(m => m.PersonModule) },\n  // { path: 'search', loadChildren: () => import('@components/user/user.module').then(m => m.SearchModule) },\n  // { path: 'watch', loadChildren: () => import('@components/user/user.module').then(m => m.WatchModule) },\n  // { path: 'settings', loadChildren: () => import('@components/user/user.module').then(m => m.SettingsModule) },\n  // { path: 'events', loadChildren: () => import('@components/user/user.module').then(m => m.EventsModule) },\n  // { path: 'login', loadChildren: () => import('@components/user/user.module').then(m => m.LoginModule) },\n  // { path: 'register', loadChildren: () => import('@components/user/user.module').then(m => m.RegisterModule) },\n  // { path: 'reset-password', loadChildren: () => import('@components/user/user.module').then(m => m.ResetPasswordModule) },\n\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes, { enableTracing: true })],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "BookmarksModule",
            "id": "module-BookmarksModule-053afb2dc0ce0562442a0ab7d26c5d5df85498d7359c7537b087d7401bb7e413628028838180a38f81a9f01dd0371a74f015a352d5b505647032b2d8c9e3a285",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/user/bookmarks/bookmarks.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { BookmarksComponent } from './bookmarks.component';\nimport { SharedModule } from '@shared/shared.module';\nimport { BookmarksRoutingModule } from './bookmarks.routing.module';\n\n@NgModule({\n  declarations: [\n    BookmarksComponent\n  ],\n  imports: [\n    CommonModule,\n    SharedModule,\n    BookmarksRoutingModule\n  ],\n  entryComponents: [\n    BookmarksComponent\n  ]\n})\nexport class BookmarksModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BookmarksComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "BookmarksRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "BookmarksRoutingModule",
            "id": "module-BookmarksRoutingModule-36acfc7553fb2ef584dd14a2eede7dc2b08c4eff9262fb6290b7eb8145f90a4f8c1309c11d4ff8b8c84099ab339cf2593649f2c130e2053079c9789e8275934f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/user/bookmarks/bookmarks.routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { BookmarksComponent } from './bookmarks.component';\n\nconst routes: Routes = [\n  { path: '', component: BookmarksComponent },\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forChild(routes)\n  ],\n  exports: [\n    RouterModule\n  ]\n})\n\nexport class BookmarksRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DashboardModule",
            "id": "module-DashboardModule-113780231e94a26b30c6930ca8e750cbe0bcb1a87cd158b4ad35e78f123c9ff4e5f654b7f06f64183c8f7ba938480f23e486c6733cf8cba7ea787e99e71951c0",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/dashboard/dashboard.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DashboardComponent } from './view/dashboard.component';\nimport { SharedModule } from '../../shared/shared.module';\nimport { DashboardRoutingModule } from './dashboard.routing.module';\n\n@NgModule({\n  declarations: [\n    DashboardComponent,\n  ],\n  imports: [\n    CommonModule,\n    SharedModule,\n    DashboardRoutingModule,\n  ],\n  entryComponents: [\n    DashboardComponent\n  ]\n})\nexport class DashboardModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DashboardComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "DashboardRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DashboardRoutingModule",
            "id": "module-DashboardRoutingModule-0a7893693a4d4f782d988ccd1135a3bb73e838892fc1f20b2ac1091ae06c94c3d7a53aeca18602505047c183220a65181f0989fae6b241a13e290716fccc77d0",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/dashboard/dashboard.routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { DashboardComponent } from './view/dashboard.component';\n\nconst routes: Routes = [\n  { path: '', component: DashboardComponent },\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forChild(routes)\n  ],\n  exports: [\n    RouterModule\n  ]\n})\n\nexport class DashboardRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DetailsModule",
            "id": "module-DetailsModule-d459ae51022c91fecba6558d68cc7af23ccf1c3588a4c9c41a81d49c90bd3550368abdbf0cf2771f0c71f7e1c044fe8c9ef4463420257cf57cc3814a7c89d9ab",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/movie/details/details.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DetailsRoutingModule } from './details.routing.module';\nimport { CreditsComponent } from '../credits/credits.component';\nimport { DetailsComponent } from './details.component';\nimport { SharedModule } from '@shared/shared.module';\nimport { VideoPlayerModule } from '@modules/watch/video-player.module';\nimport { MatTabsModule } from '@angular/material/tabs';\n\n@NgModule({\n  declarations: [\n    DetailsComponent,\n    CreditsComponent,\n  ],\n  imports: [\n    CommonModule,\n    DetailsRoutingModule,\n    SharedModule,\n    VideoPlayerModule,MatTabsModule\n  ],\n  entryComponents: [\n    DetailsComponent,\n    CreditsComponent,\n  ]\n})\nexport class DetailsModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CreditsComponent"
                        },
                        {
                            "name": "DetailsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "DetailsRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        },
                        {
                            "name": "VideoPlayerModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DetailsRoutingModule",
            "id": "module-DetailsRoutingModule-0e4c67d10614fb1078b66246cdc6796435106f574b6200bff205a85bea2cd1e3e9cd1446696c4c5b6c865ebcabb23a07e7a8a09f1aa1e63fb50b75442e536820",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/movie/details/details.routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { DetailsComponent } from './details.component';\nimport { CreditsComponent } from '../credits/credits.component';\n\nconst routes: Routes = [\n  { path: '', component: DetailsComponent },\n  { path: 'credits', component: CreditsComponent },\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forChild(routes)\n  ],\n  exports: [\n    RouterModule\n  ]\n})\n\nexport class DetailsRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DiscoverModule",
            "id": "module-DiscoverModule-102ca35bbd5af59b978666e946a5b1006336442a52bd75751f9646b5bd5185c4b9e5579235ca312e3a506cd776b4acbc92f403bcfbd6c11b5372b1ab12814994",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/movie/discover/discover.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DiscoverComponent } from './discover.component';\nimport { SharedModule } from '@shared/shared.module';\nimport { DiscoverRoutingModule } from './discover.routing.module';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n  declarations: [\n    DiscoverComponent,\n  ],\n  imports: [\n    CommonModule,\n    SharedModule,\n    DiscoverRoutingModule,\n    FormsModule\n  ],\n  entryComponents: [\n    DiscoverComponent\n  ]\n})\nexport class DiscoverModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DiscoverComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "DiscoverRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DiscoverRoutingModule",
            "id": "module-DiscoverRoutingModule-1895afe75817ce3a392076522531b2160333a94a944680fca165ee50954d162ea1d4b148a9a938c28db177ae7bb3ceff2efb30a5cd630165d477aaa872892e3f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/movie/discover/discover.routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { DiscoverComponent } from './discover.component';\n\nconst routes: Routes = [\n  { path: '', component: DiscoverComponent },\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forChild(routes)\n  ],\n  exports: [\n    RouterModule\n  ]\n})\n\nexport class DiscoverRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "EventsModule",
            "id": "module-EventsModule-8c581770a91b7226a58299d6903b77e9e9374e7a00fb59decc6dc9e0f7e2366be341939d2748e74c346af126e1786abe517f45cf31ada22a2ac0c492427296fc",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/events/events.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule\n  ]\n})\nexport class EventsModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "InputContainerModule",
            "id": "module-InputContainerModule-f102fdbaf7bfe8781c7ff68d3e46d2144a925bafce0188520c06e02395e92d6c3845ad4b2cf5db12e23b405bc7ba50d90c00865c0c3ac143471adc39b7ec1ccc",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/components/input-container/input-container.module.ts",
            "methods": [],
            "sourceCode": "import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { InputContainerComponent } from './input-container.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { PreferencesRoutingModule } from 'app/modules/settings/preferences/preferences.routing.module';\nimport { SharedModule } from '@shared/shared.module';\nimport { InputContComponent } from '../input-cont/input-cont.component';\n\n\n\n@NgModule({\n\n  declarations: [\n    InputContainerComponent,\n    InputContComponent\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    // PreferencesRoutingModule,\n    SharedModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatSelectModule,\n    MatDialogModule,\n    MatCheckboxModule\n  ],\n  exports:[InputContainerComponent,InputContComponent],\n  providers: [\n    {\n      provide: 'formState',\n      useValue: null\n    },\n    {\n      provide: 'validatorOrOpts',\n      useValue: null\n    },\n    {\n      provide: 'asyncValidator',\n      useValue: null\n    },\n  ]\n})\nexport class InputContainerModule {\n\n  // static forRoot(): ModuleWithProviders {\n  //   return {\n  //     ngModule: InputContainerModule\n  //   }\n  // }\n\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "InputContComponent"
                        },
                        {
                            "name": "InputContainerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "InputContComponent"
                        },
                        {
                            "name": "InputContainerComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LibraryModule",
            "id": "module-LibraryModule-c6faceb10f15fbd184c11c4a243fbab81d52ab08a071d9d7257519263bcee0001ca211356f0f3ed844d8b87f5a81c4b57c6aaaad7468581b82b33d1cf462bff6",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/person/library/library.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { LibraryComponent } from './view/library.component';\nimport { SharedModule } from '../../../shared/shared.module';\nimport { LibraryRoutingModule } from './library.routing.module';\n\n@NgModule({\n  declarations: [\n    LibraryComponent\n  ],\n  imports: [\n    CommonModule,\n    SharedModule,\n    LibraryRoutingModule\n  ],\n  entryComponents: [\n    LibraryComponent\n  ]\n})\nexport class LibraryModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LibraryComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LibraryRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LibraryRoutingModule",
            "id": "module-LibraryRoutingModule-afafc98729d62cb87825c655dee6ea522c1ebc81c1757596f65c2c372d7291b0b06313c9f682b7dd41d8c983b822ec7abdac0f2cb26e0e302779b5c82b16a196",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/person/library/library.routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { LibraryComponent } from './view/library.component';\n\nconst routes: Routes = [\n  { path: '', component: LibraryComponent},\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forChild(routes)\n  ],\n  exports: [\n    RouterModule\n  ]\n})\n\nexport class LibraryRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MockServicesModule",
            "id": "module-MockServicesModule-c3e237d672f796c43b7ddee044979acd878d2b7b28862f4729c02615b0ed62af45e5e5d7e6dcc0bb4e69ab810985c10fd408e9a34c67326a4bbbe90065a813cd",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/services/mock/mock-services.module.ts",
            "methods": [],
            "sourceCode": "\n\n\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { MovieService } from '@services/movie/movie.service';\nimport { MockMovieService } from './services/mock-movie.service';\n\n@NgModule({\n  imports: [HttpClientModule],\n  providers: [\n    {\n      provide: MovieService,\n      useExisting: MockMovieService\n    }\n  ],\n})\nexport class MockServicesModule { } // or MockCoreServicesModule\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MovieModule",
            "id": "module-MovieModule-38e133ac4adcb9131d50e1fdbaeb7768fdc9a647acf77f8039bfc4df9102957161133411dcadd45585d9d94d8b5f9ab3a1d95832cf5312088bc59cff4f579345",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/movie/movie.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule\n  ]\n})\nexport class MovieModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MovieRoutingModule",
            "id": "module-MovieRoutingModule-47d183ee6a0000587cff953d87dc35da1201ec4ac4737af431de91e29916a7c320213ae2a10cdbfeaf489a173419b56290b8d6085c3c23e4582a04216021d7a5",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/movie/movie.routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { AdvancedFindComponent } from '@components/advanced-find/advanced-find.component';\nimport { DiscoverComponent } from './discover/discover.component';\n\nconst routes: Routes = [\n\n  {\n    path: ':id',\n    loadChildren: () => \"import('@modules/movie/details/details.module').then(m => m.DetailsModule)\",\n    children: [\n      // { path: 'credits', component: ProfileComponent }\n      // { path: 'similar', component: ProfileComponent }\n      // { path: 'reviews', component: ProfileComponent }\n    ]\n  },\n  { path: 'discover', component: DiscoverComponent },\n  { path: '**', redirectTo: '/dashboard', pathMatch: 'full' }, // not found\n\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes, { enableTracing: true })],\n  exports: [RouterModule]\n})\nexport class MovieRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PersonModule",
            "id": "module-PersonModule-7c13572a2101c546d0a5b4293dd4c45a2c2fbe8d60233e4cd017539eeaef41493bcf51f1a07b8a5126d08fa726423e027df29b69052d8eb2fbe84f08dcacf5e7",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/person/person.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule\n  ]\n})\nexport class PersonModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PreferencesModule",
            "id": "module-PreferencesModule-f5838279add8a2f64916d5aa5d4bbb9cdb900452c2216a762206896bc6d372ef1527259007ac955407a76152cbf309543401d3ed35468a4d794946b7fcf682a7",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/settings/preferences/preferences.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PreferencesRoutingModule } from './preferences.routing.module';\nimport { PreferencesComponent } from './preferences.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { SharedModule } from '../../../shared/shared.module';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { InputContainerModule } from '@shared/components/input-container/input-container.module';\n\n@NgModule({\n  declarations: [PreferencesComponent],\n  imports: [\n    CommonModule,\n    InputContainerModule,\n    FormsModule,\n    ReactiveFormsModule,\n    PreferencesRoutingModule,\n    SharedModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatSelectModule,\n    MatDialogModule,\n    MatCheckboxModule\n  ],\n  entryComponents: [\n    PreferencesComponent,\n  ]\n})\nexport class PreferencesModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PreferencesComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "InputContainerModule"
                        },
                        {
                            "name": "PreferencesRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PreferencesRoutingModule",
            "id": "module-PreferencesRoutingModule-42ccb5713b6073f233538218912aee18ad04040a13cb2309883d56debdc2e2f58cea489269e8609ed2d442d3513e07072da3a7f5f31633409730ed25de8515a9",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/settings/preferences/preferences.routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { PreferencesComponent } from './preferences.component';\n\nconst routes: Routes = [\n  { path: '', component: PreferencesComponent },\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forChild(routes)\n  ],\n  exports: [\n    RouterModule\n  ]\n})\n\nexport class PreferencesRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ResultsModule",
            "id": "module-ResultsModule-19a1681db537eda7c780f37a3beefac0fbb532ccba755d8976fc5b0ffb347b1a521dd97eaa8c948aae7dddaeed559c3b6d5b6f229dcfc0385612de0c1174a826",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/results/results.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ResultsComponent } from './view/results.component';\nimport { SharedModule } from '../../shared/shared.module';\nimport { ResultsRoutingModule } from './results.routing.module';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n  declarations: [\n    ResultsComponent,\n  ],\n  imports: [\n    CommonModule,\n    SharedModule,\n    ResultsRoutingModule,\n    FormsModule\n  ],\n  entryComponents: [\n    ResultsComponent\n  ]\n})\nexport class ResultsModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ResultsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ResultsRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ResultsRoutingModule",
            "id": "module-ResultsRoutingModule-f951a7b587d5737b672322d82491b434e5fcca75939b12d5e921141e4184f3f084de103c1f209af9c2688fa67d1dd45a2bc3f040b2c1cc00138dc68ad632d22e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/results/results.routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { ResultsComponent } from './view/results.component';\n\nconst routes: Routes = [\n  { path: '', component: ResultsComponent },\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forChild(routes)\n  ],\n  exports: [\n    RouterModule\n  ]\n})\n\nexport class ResultsRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SettingsModule",
            "id": "module-SettingsModule-d8f6fa56aa5e0dfa33581134a4ab157d210c7ab36580afb298e2d1e23cb6b865169e476562e6071fb458ba732423b69084cbdd910e7a5d4cebdbadc699b24353",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/settings/settings.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule\n  ]\n})\nexport class SettingsModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SettingsRoutingModule",
            "id": "module-SettingsRoutingModule-d570608e460b217eb1143dcaed85c00e9ec84154241c0a3675ef579cc3169ac8a564893965869fc7fcca2da00adbd086c189c46dfb63f2874a11b0d2adc2145a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/settings/settings.routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { AdvancedFindComponent } from '@components/advanced-find/advanced-find.component';\n// import { DiscoverComponent } from '@modules//discover/discover.component';\n\nconst routes: Routes = [\n\n  // { path: 'preferences', component: DiscoverComponent },\n  // { path: 'keyboard-shortcuts', component: DiscoverComponent },\n  // { path: 'account', component: DiscoverComponent },\n  // { path: 'profile', component: DiscoverComponent },\n  { path: '**', redirectTo: '/dashboard', pathMatch: 'full' }, // not found\n\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes, { enableTracing: true })],\n  exports: [RouterModule]\n})\nexport class SettingsRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "id": "module-SharedModule-f197826e15f094f0ad9f8c88428811f3d4d59ae493afdb3dfc4544698224e0e5f7b83904a25180f314d0a70f5ab990149c8e5b754bf757ca981a8643ef88f2d6",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/shared.module.ts",
            "methods": [],
            "sourceCode": "/**\n * This module will be shared with results, dashboard, bookmarks, watched, library components\n */\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SelectedListComponent } from './components/selected-list/selected-list.component';\nimport { MovieCardComponent } from './components/movie-card/movie-card.component';\nimport { CardListComponent } from './components/card-list/card-list.component';\nimport { HHMMSSPipe, ReleaseYearPipe, RuntimeDisplayPipe } from '@shared/pipes/mdb-pipes.pipe';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { HorizontalCardListComponent } from './components/horizontal-card-list/horizontal-card-list.component';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { UserIdleModule } from 'angular-user-idle';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\n\n\n@NgModule({\n  declarations: [\n    SelectedListComponent,\n    MovieCardComponent,\n    CardListComponent,\n    ReleaseYearPipe,\n    HHMMSSPipe,\n    HorizontalCardListComponent,\n    RuntimeDisplayPipe\n  ],\n  imports: [\n    CommonModule,\n    MatSliderModule,\n    MatTooltipModule,\n    MatDividerModule,\n    MatProgressSpinnerModule,\n    MatMenuModule, MatButtonModule, MatIconModule,\n    UserIdleModule.forRoot({ idle: 1, timeout: 1, ping: 1 })\n    // UserIdleModule.forRoot({ idle: 3, timeout: 1, ping: 3 })\n  ],\n  exports: [\n    SelectedListComponent,\n    MovieCardComponent,\n    CardListComponent,\n    ReleaseYearPipe,\n    HHMMSSPipe,\n    HorizontalCardListComponent,\n    MatDividerModule,\n    MatProgressSpinnerModule, MatButtonModule, MatIconModule,\n    RuntimeDisplayPipe\n  ]\n})\nexport class SharedModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CardListComponent"
                        },
                        {
                            "name": "HHMMSSPipe"
                        },
                        {
                            "name": "HorizontalCardListComponent"
                        },
                        {
                            "name": "MovieCardComponent"
                        },
                        {
                            "name": "ReleaseYearPipe"
                        },
                        {
                            "name": "RuntimeDisplayPipe"
                        },
                        {
                            "name": "SelectedListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CardListComponent"
                        },
                        {
                            "name": "HHMMSSPipe"
                        },
                        {
                            "name": "HorizontalCardListComponent"
                        },
                        {
                            "name": "MovieCardComponent"
                        },
                        {
                            "name": "ReleaseYearPipe"
                        },
                        {
                            "name": "RuntimeDisplayPipe"
                        },
                        {
                            "name": "SelectedListComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UserModule",
            "id": "module-UserModule-2c204e66e910cfa28c04e430ad73610db56fdc1d527e5acd2030a5c379130c6bc1f3a315e85b90fcecf15575b8e8b384a333e020fc4de71d611c84a61c1a6b04",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/user/user.module.ts",
            "methods": [],
            "sourceCode": "import { UsernameExistValidatorDirective } from '@directives/username-exist.directive';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SigninComponent } from './signin/signin.component'\nimport { UserRoutingModule } from './user.routing.module';\nimport { RepeatPasswordValidatorDirective } from '@directives/repeat-password.directive';\nimport { CredentialsDirective } from '@directives/credentials.directive';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { ProfileComponent } from './profile/profile.component'\nimport { MatTabsModule } from '@angular/material/tabs'\nimport { SharedModule } from '@shared/shared.module';\n\n@NgModule({\n  declarations: [\n    SigninComponent,\n    RepeatPasswordValidatorDirective,\n    UsernameExistValidatorDirective,\n    CredentialsDirective,\n    ProfileComponent,\n  ],\n  imports: [\n    CommonModule,\n    UserRoutingModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatTabsModule,\n    SharedModule\n  ],\n  entryComponents: [\n    SigninComponent,\n    ProfileComponent\n  ]\n})\nexport class UserModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CredentialsDirective"
                        },
                        {
                            "name": "ProfileComponent"
                        },
                        {
                            "name": "RepeatPasswordValidatorDirective"
                        },
                        {
                            "name": "SigninComponent"
                        },
                        {
                            "name": "UsernameExistValidatorDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        },
                        {
                            "name": "UserRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UserRoutingModule",
            "id": "module-UserRoutingModule-935d7bb990e38ece8d920da618c9330321ed8b5d38d11d0a8da28f528f1ac21688bb0825cabda55ea934cc99733705c952d9fe465e33566f79f38416ae00cdfb",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/user/user.routing.module.ts",
            "methods": [],
            "sourceCode": "import { MdbGuardGuard } from '../../mdb-guard.guard';\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { SigninComponent } from './signin/signin.component';\nimport { ProfileComponent } from './profile/profile.component'\n\nconst routes: Routes = [\n\n  {\n    path: '', redirectTo: 'signin', pathMatch: 'full'\n    // path: '', component: SigninComponent, pathMatch: 'full'\n  },\n  {\n    path: 'signin', component: SigninComponent\n  },\n  {\n    path: 'profile', component: ProfileComponent,\n    // path: 'profile', component: ProfileComponent, canActivate: [MdbGuardGuard]\n  },\n\n  // {\n  // path: '',\n  // children: [\n  // { path: 'profile', component: ProfileComponent }\n  // ]\n  // }\n]\n\n@NgModule({\n  imports: [\n    RouterModule.forChild(routes)\n  ],\n  exports: [\n    RouterModule\n  ]\n})\n\nexport class UserRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "VideoPlayerModule",
            "id": "module-VideoPlayerModule-d40357d829e4fca032a34e837ef3d84960084b624798b5383263d654b150762402d0724ce63a6816bc823396f10c2f6d77d4cdecb3d364a419b9918d2161d55e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/watch/video-player.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SharedModule } from '../../shared/shared.module';\nimport { VideoPlayerComponent } from './video-player.component';\nimport { VideoPlayerControlsComponent } from './video-player-controls/video-player-controls.component';\n// import { MatFormFieldModule, MatInputModule, MatSidenavModule, MatSelectModule, MatCheckboxModule, MatTabsModule, MatDialogModule, MatAutocompleteModule, MatSliderModule, MatDividerModule, MatProgressSpinnerModule, MatTooltipModule, MatButtonModule, MatIconModule, MatMenuModule } from '@angular/material';\nimport { VideoPlayerStatsComponent } from './video-player-stats/video-player-stats.component';\nimport { FullscreenOverlayContainer, OverlayContainer } from '@angular/cdk/overlay';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatMenuModule } from '@angular/material/menu';\n\n@NgModule({\n  declarations: [\n    VideoPlayerComponent,\n    VideoPlayerControlsComponent,\n    // HHMMSSPipe,\n    VideoPlayerStatsComponent\n  ],\n  imports: [\n    CommonModule,\n    // VideoPlayerRoutingModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatSidenavModule,\n    MatSelectModule,\n    MatCheckboxModule,\n    MatTabsModule,\n    MatDialogModule,\n    MatAutocompleteModule,\n    SharedModule,\n    MatSliderModule,\n    MatTooltipModule,\n    MatDividerModule,\n    MatMenuModule,\n    MatProgressSpinnerModule,\n  ],\n  entryComponents: [\n    VideoPlayerControlsComponent,\n    VideoPlayerComponent\n    // DetailsComponent,\n    // CreditsComponent,\n  ], exports: [VideoPlayerComponent],\n  providers: [{provide: OverlayContainer, useClass: FullscreenOverlayContainer}],\n})\nexport class VideoPlayerModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "VideoPlayerComponent"
                        },
                        {
                            "name": "VideoPlayerControlsComponent"
                        },
                        {
                            "name": "VideoPlayerStatsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "VideoPlayerComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "WatchedModule",
            "id": "module-WatchedModule-420b69a998cf00ab7bed3f59a60d8e1486b936aeb9666a618b9cd8780b951b71a5400dec98b3cc668cd73f69cf3df84a53d9183aea370ab5fc71043fbb9b92ff",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/user/watched/watched.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { WatchedComponent } from './watched.component';\nimport { SharedModule } from '@shared/shared.module';\nimport { WatchedRoutingModule } from './watched.routing.module';\n\n@NgModule({\n  declarations: [\n    WatchedComponent\n  ],\n  imports: [\n    CommonModule,\n    SharedModule,\n    WatchedRoutingModule\n  ],\n  entryComponents: [\n    WatchedComponent\n  ]\n})\nexport class WatchedModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "WatchedComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        },
                        {
                            "name": "WatchedRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "WatchedRoutingModule",
            "id": "module-WatchedRoutingModule-03837aac9fd0ae9a7d956478b4b26960e6ec640c44ca3fb744bad400b6379b099232b458f2da41ba2e0d8f72245ea11d96c855379723fdc48f5c92118cc65cc1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/user/watched/watched.routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { WatchedComponent } from './watched.component';\n\nconst routes: Routes = [\n  { path: '', component: WatchedComponent },\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forChild(routes)\n  ],\n  exports: [\n    RouterModule\n  ]\n})\n\nexport class WatchedRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "WatchModule",
            "id": "module-WatchModule-806a851d0175d83c4b28f320fa14ac8f18fd87d7892bdc51be3e1118b6d1d553a684534285b7cd646547ecf21d0e611e86470b261489bec032b67a4f41fcf03e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/watch/watch.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule\n  ]\n})\nexport class WatchModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "backendProvider",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/services/http-interceptor.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  provide: HTTP_INTERCEPTORS,\n  useClass: HttpInterceptorService,\n  multi: true,\n}"
            },
            {
                "name": "COLOR_LIST",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n    { value: 'white', label: 'White' },\n    { value: 'black', label: 'Black' },\n    { value: 'red', label: 'Red' },\n    { value: 'blue', label: 'Blue' },\n    { value: 'green', label: 'Green' },\n    { value: 'gray', label: 'Gray' },\n  ]"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "DECADES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  { display: '1910s', value: 1910 },\n  { display: '1920s', value: 1920 },\n  { display: '1930s', value: 1930 },\n  { display: '1940s', value: 1940 },\n  { display: '1950s', value: 1950 },\n  { display: '1960s', value: 1960 },\n  { display: '1970s', value: 1970 },\n  { display: '1980s', value: 1980 },\n  { display: '1990s', value: 1990 },\n  { display: '2000s', value: 2000 },\n  { display: '2010s', value: 2010 }]"
            },
            {
                "name": "DEFAULT_PREFERENCES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "IPreferences",
                "defaultValue": "{\n  isDarkMode: true,\n  isEnableCache: false,\n  libraryFolders: [],\n  torrentSeedRatio: 0,\n  torrentRatio: 0,\n  subtitle: DEFAULT_SUBTITLES,\n  hotKeys: null,\n  autoPlayTrailer: false,\n  playTrailerBeforeShow: true,\n  playBack: PLAYBACK,\n  library: null,\n  isAutoScan: false,\n  autoScanFrequencyUnit: 'day',\n  autoScanFrequencyValue: 0,\n}"
            },
            {
                "name": "DEFAULT_SUBTITLES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ISubtitlePreferences",
                "defaultValue": "{\n  fontColor: '255,255,255',\n  backgroundColor: '0,0,0',\n  backgroundOpacity: '0%',\n  fontOpacity: 1,\n  fontFamily: '',\n  fontSize: '1em',\n  synchronization: 0,\n  textShadow: '3px 3px 5px black'\n}"
            },
            {
                "name": "DISPLAYEDMOVIES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/mock-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    title: 'Guardians of the Galaxy',\n    year: 2014,\n    plot:\n      'A group of intergalactic criminals must pull together to stop a fanatical warrior with plans to purge the universe.',\n    imdbId: 'tt2015381',\n    torrents: [],\n    id: 118340\n  },\n  {\n    title: 'The Wailing',\n    year: 2016,\n    plot:\n      'Soon after a stranger arrives in a little village, a mysterious sickness starts spreading. A policeman, drawn into the incident, is forced to solve the mystery in order to save his daughter.',\n    imdbId: 'tt5215952',\n    torrents: [],\n    id: 293670\n  },\n  {\n    title: 'First Man',\n    year: 2018,\n    plot:\n      'A look at the life of the astronaut, Neil Armstrong, and the legendary space mission that led him to become the first man to walk on the Moon on July 20, 1969.',\n    imdbId: 'tt1213641',\n    torrents: [],\n    id: 369972\n  },\n  {\n    title: 'The Karate Kid',\n    year: 1984,\n    plot:\n      'A Japanese martial arts instructor agrees to teach karate to a bullied teenager.',\n    imdbId: 'tt0087538',\n    torrents: [],\n    id: 1885\n  },\n  {\n    title: 'Top Gun',\n    year: 1986,\n    plot: `As students at the United States Navys elite fighter weapons school compete to be best in the class, one daring young pilot learns a few things from a civilian instructor that are not taught in the classroom.\n    `,\n    imdbId: 'tt0092099',\n    torrents: [],\n    id: 744\n  },\n  {\n    title: 'Reservoir Dogs',\n    year: 1992,\n    plot:\n      'When a simple jewelry heist goes horribly wrong, the surviving criminals begin to suspect that one of them is a police informant.',\n    imdbId: 'tt0105236',\n    torrents: [],\n    id: 500\n  },\n  {\n    title: 'Spider-Man',\n    year: 2002,\n    plot:\n      'When bitten by a genetically modified spider, a nerdy, shy, and awkward high school student gains spider-like abilities that he eventually must use to fight evil as a superhero after tragedy befalls his family.',\n    imdbId: 'tt0145487',\n    torrents: [],\n    id: 557\n  },\n  {\n    title: 'Superman Returns',\n    year: 2006,\n    plot:\n      'Superman returns to Earth after spending five years in space examining his homeworld Krypton. But he finds things have changed while he was gone, and he must once again prove himself important to the world.',\n    imdbId: 'tt0348150',\n    torrents: [],\n    id: 1452\n  },\n  {\n    title: 'Home Alone',\n    year: 1990,\n    plot:\n      'An eight-year-old troublemaker must protect his house from a pair of burglars when he is accidentally left home alone by his family during Christmas vacation.',\n    imdbId: 'tt0099785',\n    torrents: [],\n    id: 771\n  }\n]"
            },
            {
                "name": "ENCODING_LIST",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/encoding.constant.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    \"encodings\": [\n      {\n        \"labels\": [\n          \"unicode-1-1-utf-8\",\n          \"unicode11utf8\",\n          \"unicode20utf8\",\n          \"utf-8\",\n          \"utf8\",\n          \"x-unicode20utf8\"\n        ],\n        \"name\": \"UTF-8\"\n      }\n    ],\n    \"heading\": \"The Encoding\"\n  },\n  {\n    \"encodings\": [\n      {\n        \"labels\": [\n          \"866\",\n          \"cp866\",\n          \"csibm866\",\n          \"ibm866\"\n        ],\n        \"name\": \"IBM866\"\n      },\n      {\n        \"labels\": [\n          \"csisolatin2\",\n          \"iso-8859-2\",\n          \"iso-ir-101\",\n          \"iso8859-2\",\n          \"iso88592\",\n          \"iso_8859-2\",\n          \"iso_8859-2:1987\",\n          \"l2\",\n          \"latin2\"\n        ],\n        \"name\": \"ISO-8859-2\"\n      },\n      {\n        \"labels\": [\n          \"csisolatin3\",\n          \"iso-8859-3\",\n          \"iso-ir-109\",\n          \"iso8859-3\",\n          \"iso88593\",\n          \"iso_8859-3\",\n          \"iso_8859-3:1988\",\n          \"l3\",\n          \"latin3\"\n        ],\n        \"name\": \"ISO-8859-3\"\n      },\n      {\n        \"labels\": [\n          \"csisolatin4\",\n          \"iso-8859-4\",\n          \"iso-ir-110\",\n          \"iso8859-4\",\n          \"iso88594\",\n          \"iso_8859-4\",\n          \"iso_8859-4:1988\",\n          \"l4\",\n          \"latin4\"\n        ],\n        \"name\": \"ISO-8859-4\"\n      },\n      {\n        \"labels\": [\n          \"csisolatincyrillic\",\n          \"cyrillic\",\n          \"iso-8859-5\",\n          \"iso-ir-144\",\n          \"iso8859-5\",\n          \"iso88595\",\n          \"iso_8859-5\",\n          \"iso_8859-5:1988\"\n        ],\n        \"name\": \"ISO-8859-5\"\n      },\n      {\n        \"labels\": [\n          \"arabic\",\n          \"asmo-708\",\n          \"csiso88596e\",\n          \"csiso88596i\",\n          \"csisolatinarabic\",\n          \"ecma-114\",\n          \"iso-8859-6\",\n          \"iso-8859-6-e\",\n          \"iso-8859-6-i\",\n          \"iso-ir-127\",\n          \"iso8859-6\",\n          \"iso88596\",\n          \"iso_8859-6\",\n          \"iso_8859-6:1987\"\n        ],\n        \"name\": \"ISO-8859-6\"\n      },\n      {\n        \"labels\": [\n          \"csisolatingreek\",\n          \"ecma-118\",\n          \"elot_928\",\n          \"greek\",\n          \"greek8\",\n          \"iso-8859-7\",\n          \"iso-ir-126\",\n          \"iso8859-7\",\n          \"iso88597\",\n          \"iso_8859-7\",\n          \"iso_8859-7:1987\",\n          \"sun_eu_greek\"\n        ],\n        \"name\": \"ISO-8859-7\"\n      },\n      {\n        \"labels\": [\n          \"csiso88598e\",\n          \"csisolatinhebrew\",\n          \"hebrew\",\n          \"iso-8859-8\",\n          \"iso-8859-8-e\",\n          \"iso-ir-138\",\n          \"iso8859-8\",\n          \"iso88598\",\n          \"iso_8859-8\",\n          \"iso_8859-8:1988\",\n          \"visual\"\n        ],\n        \"name\": \"ISO-8859-8\"\n      },\n      {\n        \"labels\": [\n          \"csiso88598i\",\n          \"iso-8859-8-i\",\n          \"logical\"\n        ],\n        \"name\": \"ISO-8859-8-I\"\n      },\n      {\n        \"labels\": [\n          \"csisolatin6\",\n          \"iso-8859-10\",\n          \"iso-ir-157\",\n          \"iso8859-10\",\n          \"iso885910\",\n          \"l6\",\n          \"latin6\"\n        ],\n        \"name\": \"ISO-8859-10\"\n      },\n      {\n        \"labels\": [\n          \"iso-8859-13\",\n          \"iso8859-13\",\n          \"iso885913\"\n        ],\n        \"name\": \"ISO-8859-13\"\n      },\n      {\n        \"labels\": [\n          \"iso-8859-14\",\n          \"iso8859-14\",\n          \"iso885914\"\n        ],\n        \"name\": \"ISO-8859-14\"\n      },\n      {\n        \"labels\": [\n          \"csisolatin9\",\n          \"iso-8859-15\",\n          \"iso8859-15\",\n          \"iso885915\",\n          \"iso_8859-15\",\n          \"l9\"\n        ],\n        \"name\": \"ISO-8859-15\"\n      },\n      {\n        \"labels\": [\n          \"iso-8859-16\"\n        ],\n        \"name\": \"ISO-8859-16\"\n      },\n      {\n        \"labels\": [\n          \"cskoi8r\",\n          \"koi\",\n          \"koi8\",\n          \"koi8-r\",\n          \"koi8_r\"\n        ],\n        \"name\": \"KOI8-R\"\n      },\n      {\n        \"labels\": [\n          \"koi8-ru\",\n          \"koi8-u\"\n        ],\n        \"name\": \"KOI8-U\"\n      },\n      {\n        \"labels\": [\n          \"csmacintosh\",\n          \"mac\",\n          \"macintosh\",\n          \"x-mac-roman\"\n        ],\n        \"name\": \"macintosh\"\n      },\n      {\n        \"labels\": [\n          \"dos-874\",\n          \"iso-8859-11\",\n          \"iso8859-11\",\n          \"iso885911\",\n          \"tis-620\",\n          \"windows-874\"\n        ],\n        \"name\": \"windows-874\"\n      },\n      {\n        \"labels\": [\n          \"cp1250\",\n          \"windows-1250\",\n          \"x-cp1250\"\n        ],\n        \"name\": \"windows-1250\"\n      },\n      {\n        \"labels\": [\n          \"cp1251\",\n          \"windows-1251\",\n          \"x-cp1251\"\n        ],\n        \"name\": \"windows-1251\"\n      },\n      {\n        \"labels\": [\n          \"ansi_x3.4-1968\",\n          \"ascii\",\n          \"cp1252\",\n          \"cp819\",\n          \"csisolatin1\",\n          \"ibm819\",\n          \"iso-8859-1\",\n          \"iso-ir-100\",\n          \"iso8859-1\",\n          \"iso88591\",\n          \"iso_8859-1\",\n          \"iso_8859-1:1987\",\n          \"l1\",\n          \"latin1\",\n          \"us-ascii\",\n          \"windows-1252\",\n          \"x-cp1252\"\n        ],\n        \"name\": \"windows-1252\"\n      },\n      {\n        \"labels\": [\n          \"cp1253\",\n          \"windows-1253\",\n          \"x-cp1253\"\n        ],\n        \"name\": \"windows-1253\"\n      },\n      {\n        \"labels\": [\n          \"cp1254\",\n          \"csisolatin5\",\n          \"iso-8859-9\",\n          \"iso-ir-148\",\n          \"iso8859-9\",\n          \"iso88599\",\n          \"iso_8859-9\",\n          \"iso_8859-9:1989\",\n          \"l5\",\n          \"latin5\",\n          \"windows-1254\",\n          \"x-cp1254\"\n        ],\n        \"name\": \"windows-1254\"\n      },\n      {\n        \"labels\": [\n          \"cp1255\",\n          \"windows-1255\",\n          \"x-cp1255\"\n        ],\n        \"name\": \"windows-1255\"\n      },\n      {\n        \"labels\": [\n          \"cp1256\",\n          \"windows-1256\",\n          \"x-cp1256\"\n        ],\n        \"name\": \"windows-1256\"\n      },\n      {\n        \"labels\": [\n          \"cp1257\",\n          \"windows-1257\",\n          \"x-cp1257\"\n        ],\n        \"name\": \"windows-1257\"\n      },\n      {\n        \"labels\": [\n          \"cp1258\",\n          \"windows-1258\",\n          \"x-cp1258\"\n        ],\n        \"name\": \"windows-1258\"\n      },\n      {\n        \"labels\": [\n          \"x-mac-cyrillic\",\n          \"x-mac-ukrainian\"\n        ],\n        \"name\": \"x-mac-cyrillic\"\n      }\n    ],\n    \"heading\": \"Legacy single-byte encodings\"\n  },\n  {\n    \"encodings\": [\n      {\n        \"labels\": [\n          \"chinese\",\n          \"csgb2312\",\n          \"csiso58gb231280\",\n          \"gb2312\",\n          \"gb_2312\",\n          \"gb_2312-80\",\n          \"gbk\",\n          \"iso-ir-58\",\n          \"x-gbk\"\n        ],\n        \"name\": \"GBK\"\n      },\n      {\n        \"labels\": [\n          \"gb18030\"\n        ],\n        \"name\": \"gb18030\"\n      }\n    ],\n    \"heading\": \"Legacy multi-byte Chinese (simplified) encodings\"\n  },\n  {\n    \"encodings\": [\n      {\n        \"labels\": [\n          \"big5\",\n          \"big5-hkscs\",\n          \"cn-big5\",\n          \"csbig5\",\n          \"x-x-big5\"\n        ],\n        \"name\": \"Big5\"\n      }\n    ],\n    \"heading\": \"Legacy multi-byte Chinese (traditional) encodings\"\n  },\n  {\n    \"encodings\": [\n      {\n        \"labels\": [\n          \"cseucpkdfmtjapanese\",\n          \"euc-jp\",\n          \"x-euc-jp\"\n        ],\n        \"name\": \"EUC-JP\"\n      },\n      {\n        \"labels\": [\n          \"csiso2022jp\",\n          \"iso-2022-jp\"\n        ],\n        \"name\": \"ISO-2022-JP\"\n      },\n      {\n        \"labels\": [\n          \"csshiftjis\",\n          \"ms932\",\n          \"ms_kanji\",\n          \"shift-jis\",\n          \"shift_jis\",\n          \"sjis\",\n          \"windows-31j\",\n          \"x-sjis\"\n        ],\n        \"name\": \"Shift_JIS\"\n      }\n    ],\n    \"heading\": \"Legacy multi-byte Japanese encodings\"\n  },\n  {\n    \"encodings\": [\n      {\n        \"labels\": [\n          \"cseuckr\",\n          \"csksc56011987\",\n          \"euc-kr\",\n          \"iso-ir-149\",\n          \"korean\",\n          \"ks_c_5601-1987\",\n          \"ks_c_5601-1989\",\n          \"ksc5601\",\n          \"ksc_5601\",\n          \"windows-949\"\n        ],\n        \"name\": \"EUC-KR\"\n      }\n    ],\n    \"heading\": \"Legacy multi-byte Korean encodings\"\n  },\n  {\n    \"encodings\": [\n      {\n        \"labels\": [\n          \"csiso2022kr\",\n          \"hz-gb-2312\",\n          \"iso-2022-cn\",\n          \"iso-2022-cn-ext\",\n          \"iso-2022-kr\",\n          \"replacement\"\n        ],\n        \"name\": \"replacement\"\n      },\n      {\n        \"labels\": [\n          \"unicodefffe\",\n          \"utf-16be\"\n        ],\n        \"name\": \"UTF-16BE\"\n      },\n      {\n        \"labels\": [\n          \"csunicode\",\n          \"iso-10646-ucs-2\",\n          \"ucs-2\",\n          \"unicode\",\n          \"unicodefeff\",\n          \"utf-16\",\n          \"utf-16le\"\n        ],\n        \"name\": \"UTF-16LE\"\n      },\n      {\n        \"labels\": [\n          \"x-user-defined\"\n        ],\n        \"name\": \"x-user-defined\"\n      }\n    ],\n    \"heading\": \"Legacy miscellaneous encodings\"\n  }\n]"
            },
            {
                "name": "ENDPOINT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/endpoint.const.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  MOVIE_DETAILS: \"/movie/details\",\n  MOVIE_SEARCH: \"/movie/details\",\n  SEARCH: \"/search\",\n  USER_DATA: \"/user/data\",\n  USER_DETAILS: \"/user/details\",\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  version: 1,\n  firebase: {\n    apiKey: 'AIzaSyBPB_9eQbL5ZzYrI-mBqFix96xTXYyFo7U',\n    authDomain: 'mdb-project-id.firebaseapp.com',\n    databaseURL: 'https://mdb-project-id.firebaseio.com',\n    projectId: 'mdb-project-id',\n    storageBucket: 'mdb-project-id.appspot.com',\n    messagingSenderId: '24146436081',\n    appId: '1:24146436081:web:78f0dd1c699e12514eae50'\n  },\n  devApi: 'http://localhost:8080',\n  runConfig: {\n    firebaseMode: false,\n    springMode: false,\n    electron: location.protocol === \"http:\" || location.protocol === \"https:\" ? false : true,\n    useTestData: false,\n    environment: location.protocol\n  },\n  language: 'en',\n  location: 'ph',\n  dataSource: source.TMDB\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true,\n  firebase: {\n    apiKey: 'AIzaSyBPB_9eQbL5ZzYrI-mBqFix96xTXYyFo7U',\n    authDomain: 'mdb-project-id.firebaseapp.com',\n    databaseURL: 'https://mdb-project-id.firebaseio.com',\n    projectId: 'mdb-project-id',\n    storageBucket: 'mdb-project-id.appspot.com',\n    messagingSenderId: '24146436081',\n    appId: '1:24146436081:web:78f0dd1c699e12514eae50'\n  },\n  runConfig: {\n\n    // firebaseMode: false,\n    springMode: true,\n    // electron: location.protocol === \"http:\" || location.protocol === \"https:\" ? false : true,\n    // useTestData: true,\n    environment: location.protocol,\n    firebaseMode: true,\n    electron: false,\n    useTestData: false\n    // firebaseMode: true,\n    // electron: false,\n    // useTestData: false\n\n  },\n  dataSource: source.TMDB\n}"
            },
            {
                "name": "FANART_TV_API_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'295c36bf9229fd8369928b7360554c9a'"
            },
            {
                "name": "FANART_TV_URL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'http://webservice.fanart.tv/v3/movies'"
            },
            {
                "name": "FirebaseListMax",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/services/firebase.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "10"
            },
            {
                "name": "FONT_SIZE_LIST",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  { value: '1.5vh', label: 'Juts' },\n  { value: '2.5vh', label: 'Medium' },\n  { value: '3.5vh', label: 'Daks' },\n  { value: '5vh', label: 'XL' },\n]"
            },
            {
                "name": "FREQUENCY_LIST",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  { value: 'min', label: 'minutes' },\n  { value: 'hr', label: 'hours' },\n  { value: 'day', label: 'days' },\n]"
            },
            {
                "name": "GENRES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "IGenre[]",
                "defaultValue": "[\n  { id: 28, name: 'Action' },\n  { id: 12, name: 'Adventure' },\n  { id: 16, name: 'Animation' },\n  { id: 35, name: 'Comedy' },\n  { id: 80, name: 'Crime' },\n  { id: 99, name: 'Documentary' },\n  { id: 18, name: 'Drama' },\n  { id: 10751, name: 'Family' },\n  { id: 14, name: 'Fantasy' },\n  { id: 36, name: 'History' },\n  { id: 27, name: 'Horror' },\n  { id: 10402, name: 'Music' },\n  { id: 9648, name: 'Mystery' },\n  { id: 10749, name: 'Romance' },\n  { id: 878, name: 'Science Fiction' },\n  { id: 10770, name: 'TV Movie' },\n  { id: 53, name: 'Thriller' },\n  { id: 10752, name: 'War' },\n  { id: 37, name: 'Western' },\n  // mdb reserved\n  { id: 20000, name: 'Film-Noir' },\n  {// similar genre: Music id:10402\n    id: 20001, name: 'Musical'\n  },\n  { id: 20002, name: 'News' },\n  { id: 20003, name: 'Reality-TV' },\n  {\n    // similar genre: Science Fiction id:878\n    id: 20004, name: 'Sci-Fi'\n  },\n  {// another media type\n    id: 20005, name: 'Short'\n  },\n  { id: 20006, name: 'Sport' }\n]"
            },
            {
                "name": "HOTKEYS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/settings/keyboard-shortcuts/keyboard-shortcuts.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  // ToggleFULL\n  mute: 'm',\n  fullscreen: 'f'\n}"
            },
            {
                "name": "httpOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/services/torrent/torrent.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n}"
            },
            {
                "name": "JSON_CONTENT_TYPE_HEADER",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/services/mdb-api.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new HttpHeaders({ 'Content-Type': 'application/json' })"
            },
            {
                "name": "JSON_CONTENT_TYPE_HEADER",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/services/movie/movie.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new HttpHeaders({ 'Content-Type': 'application/json' })"
            },
            {
                "name": "JSON_CONTENT_TYPE_HEADER",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/services/tmdb/tmdb.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new HttpHeaders({ 'Content-Type': 'application/json' })"
            },
            {
                "name": "jsonContentType",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/services/person.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new HttpHeaders({ 'Content-Type': 'application/json' })"
            },
            {
                "name": "LANGUAGE_LIST",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  { value: 'en', label: 'English' },\n  { value: 'de', label: 'Deutsch' },\n  { value: 'es', label: 'Spanish' },\n]"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "MDB_API_URL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'mdb'"
            },
            {
                "name": "MOCK_BULK_DOWNLOAD_TORRENTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/mock-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    id: 1,\n    name: 'Guardians of the Galaxy (2014) 1080p BrRip x264 - YIFY',\n    size: 1988939229,\n    hash: '11A2AC68A11634E980F265CB1433C599D017A759',\n    checked: false\n  },\n  {\n    id: 1,\n    name: 'Guardians of the Galaxy Vol. 2 (2017) 720p BrRip x264 - VPPV',\n    size: 1215947108,\n    hash: '68132C479348C1AA2618D55C8BBEC6EB2597A5BA',\n    checked: false\n  },\n  {\n    id: 1,\n    name: 'The.Wailing.2016.1080p.BluRay.10bit.HEVC-MkvCage [aka Gokseong]',\n    size: 3976321027,\n    hash: '2F157306E5114EA8044302586A89FDC4E0FAC2A1',\n    checked: false\n  },\n  {\n    id: 1,\n    name: 'First.Man.2018.HC.HDRip.XviD.AC3-EVO',\n    size: 1474599225,\n    hash: '885CCCAD7F1942A515DA564FCF62933A105931DB',\n    checked: false\n  },\n  {\n    id: 2,\n    name: 'First.Man.2018.720p.BRRip.x264.MkvCage',\n    size: 1375985558,\n    hash: '712837DCAA3F4275B89E640EB21DAE72D2E0C38B',\n    checked: false\n  },\n  {\n    id: 1,\n    name: 'Home Alone (1990) 1080p BrRip x264 - YIFY',\n    size: 1767740507,\n    hash: '5FEFAC61C0F42FFC43946B3379A540D1A38F6480',\n    checked: false\n  }\n]"
            },
            {
                "name": "MOCK_MOVIE_DETAIL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/mock-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  id: 1,\n  Title: 'Reservoir Dogs',\n  Year: 1992,\n  Plot:\n    `Eight men eat breakfast at a Los Angeles diner before carrying out a diamond heist. Mob boss Joe Cabot and his son and underboss 'Nice Guy' Eddie Cabot are responsible for planning the job. The rest of the men use aliases issued by Joe Cabot: Mr. Brown, Mr. White, Mr. Blonde, Mr. Blue, Mr. Orange and Mr. Pink.`,\n  genre: '',\n  isAvailable: true,\n  imageDirectory: '',\n  Runtime: '99',\n  Genre: 'Adventure',\n  Director: 'Quentin Tarantino',\n  Writer: 'Quentin Tarantino',\n  Poster: '',\n  torrents: '',\n  backgroundImageDirectory: ''\n}"
            },
            {
                "name": "MOCK_USER_DATA_LIST",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/mock-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "IProfileData[]",
                "defaultValue": "[\n  {\n    tmdbId: 597, //titanic\n    isFavorite: true,\n    watched: {\n      percentage: 100\n    }\n  },\n  {\n    tmdbId: 857, // svpr\n    isFavorite: true,\n    watched: {\n      percentage: 100\n    }\n  },\n  {\n    tmdbId: 24428, // avengers\n    isBookmark: true,\n  },\n  {\n    tmdbId: 579, // jaws\n    isBookmark: true\n  },\n  {\n    tmdbId: 769, // goodfellas\n    isBookmark: true,\n    watched: {\n      percentage: 51\n    }\n  },\n  {\n    tmdbId: 775996, // goodfellas\n    watched: {\n      percentage: 75\n    },\n    review: {\n      content: 'confusing',\n      rating: 3,\n      id: 213\n    }\n  },\n]"
            },
            {
                "name": "MONTHS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']"
            },
            {
                "name": "MOVIE_QUOTES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  { title: `Gone With the Wind`, year: 1939, quote: `Frankly, my dear, I don't give a damn.`, backdrop: '' },\n  { title: 'The Room', year: 2003, quote: `You are tearing me apart, Lisa!`, backdrop: '' },\n  { title: 'Dr. Strangelove', year: 1964, quote: `Gentlemen, you can't fight in here! This is the War Room!`, backdrop: '' },\n  { title: 'Titanic', year: 1997, quote: `I'm king of the world!`, backdrop: '' },\n]"
            },
            {
                "name": "MOVIEGENRES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/mock-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  { id: 1, code: 'ACT', description: 'Action', isChecked: true },\n  { id: 2, code: 'ADV', description: 'Adventure', isChecked: false },\n  { id: 3, code: 'DOC', description: 'Documentary', isChecked: false },\n  { id: 4, code: 'DRA', description: 'Drama', isChecked: false },\n  { id: 5, code: 'HOR', description: 'Horror', isChecked: false },\n  { id: 6, code: 'SCI', description: 'Sci-Fi', isChecked: true },\n  { id: 7, code: 'THR', description: 'Thriller', isChecked: false }\n]"
            },
            {
                "name": "MOVIES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/mock-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "IOmdbMovieDetail[]",
                "defaultValue": "[\n  // { id: 1, Title: 'Face Off', Year: 1997, Plot: '', genre: 'Action', isAvailable: false, imageDirectory: './assets/images/1997-face-off-poster1.jpg', Runtime: '156', Genre: '', Director: '', Writer: '', Poster: '', imdbID: '' },\n  // { id: 2, Title: 'Nacho Libre', Year: 2006, Plot: '', genre: 'Comedy', isAvailable: true, imageDirectory: './assets/images/2006-nacho_libre-1.jpg', Runtime: '120', Genre: '', Director: '', Writer: '', Poster: '', imdbID: '' },\n  // { id: 3, Title: 'Salt', Year: 2006, Plot: '', genre: 'Action', isAvailable: false, imageDirectory: './assets/images/2006-salt-1.jpg', Runtime: '110', Genre: '', Director: '', Writer: '', Poster: '', imdbID: '' },\n  // { id: 4, Title: 'Valkyrie', Year: 2008, Plot: '', genre: 'Action', isAvailable: true, imageDirectory: './assets/images/2008-valkyrie-1.jpg', Runtime: '124', Genre: '', Director: '', Writer: '', Poster: '', imdbID: '' },\n  // { id: 5, Title: 'Jaws 2', Year: 1978, Plot: '', genre: 'Thriller', isAvailable: false, imageDirectory: './assets/images/1978-jaws_2.jpg', Runtime: '120', Genre: '', Director: '', Writer: '', Poster: '', imdbID: '' },\n  // { id: 6, Title: 'Paper Towns', Year: 2015, Plot: '', genre: 'Drama', isAvailable: true, imageDirectory: './assets/images/2015-paper_towns.jpg', Runtime: '120', Genre: '', Director: '', Writer: '', Poster: '', imdbID: '' },\n  // { id: 7, Title: 'Good Morning Vietnam', Year: 1987, Plot: '', genre: 'Action', isAvailable: false, imageDirectory: './assets/images/1987-good_morning_vietnam.jpg', Runtime: '120', Genre: '', Director: '', Writer: '', Poster: '', imdbID: '' },\n  // { id: 8, Title: 'Three Musketeers', Year: 2011, Plot: '', genre: 'Action', isAvailable: true, imageDirectory: './assets/images/2011-three_musketeers.jpg', Runtime: '180', Genre: '', Director: '', Writer: '', Poster: '', imdbID: '' }\n]"
            },
            {
                "name": "MY_API_FILMS_API_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'c7e516ed-d9fe-4f3f-b1d9-fde33f63c816'"
            },
            {
                "name": "MY_API_FILMS_URL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'http://www.myapifilms.com/imdb/'"
            },
            {
                "name": "OMDB_API_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'3a2fe8bf'"
            },
            {
                "name": "OMDB_URL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'http://www.omdbapi.com'"
            },
            {
                "name": "PERCENTAGE_LIST",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  { value: '0%', label: '0%' },\n  { value: '25%', label: '25%' },\n  { value: '50%', label: '50%' },\n  { value: '75%', label: '75%' },\n  { value: '100%', label: '100%' },\n]"
            },
            {
                "name": "PERSON_COMBINED_CREDITS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/mock-data-person-details.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "IPersonCredits",
                "defaultValue": "{\n  \"cast\": [\n    {\n      \"id\": 352733,\n      \"character\": \"Lady Seymour Worsley\",\n      \"original_title\": \"The Scandalous Lady W\",\n      \"overview\": \"A gripping 18th century drama details the scandalous life of Lady Seymour Worsley, who dared to leave her husband and elope with his best friend, Captain George Bisset. Lady Seymour Worsley escapes her troubled marriage only to find herself at the centre of a very public trial brought by her powerful husband Sir Richard Worsley.\",\n      \"vote_count\": 45,\n      \"video\": false,\n      \"media_type\": \"movie\",\n      \"release_date\": \"2015-08-17\",\n      \"vote_average\": 6.3,\n      \"title\": \"The Scandalous Lady W\",\n      \"popularity\": 3.938,\n      \"original_language\": \"en\",\n      \"genre_ids\": [\n        18,\n        10770,\n        10749,\n        36\n      ],\n      \"backdrop_path\": \"/1OhAoS7M25MuTmrAMTVnfGXFMpA.jpg\",\n      \"adult\": false,\n      \"poster_path\": \"/rT8oC8mQ6mKEp2ZWOMb87Vn7jq0.jpg\",\n      \"credit_id\": \"55be1fc59251413e5b004596\"\n    },\n    {\n      \"id\": 410671,\n      \"character\": \"A Fan\",\n      \"original_title\": \"The Roof\",\n      \"overview\": \"A brief comedy about a visit from a legendary theatre maker and his legion of fans.\",\n      \"vote_count\": 0,\n      \"video\": false,\n      \"media_type\": \"movie\",\n      \"release_date\": \"2016-03-31\",\n      \"vote_average\": 0,\n      \"title\": \"The Roof\",\n      \"popularity\": 0.941,\n      \"original_language\": \"en\",\n      \"genre_ids\": [],\n      \"backdrop_path\": null,\n      \"adult\": false,\n      \"poster_path\": \"/kA9X5gM4LId88OuK0MoCX3lvzZD.jpg\",\n      \"credit_id\": \"57aa1537c3a3680ec500140d\"\n    },\n    {\n      \"id\": 417643,\n      \"character\": \"Sofia\",\n      \"original_title\": \"In Darkness\",\n      \"overview\": \"A blind musician hears a murder committed in the apartment upstairs from hers that sends her down a dark path into London's gritty criminal underworld.\",\n      \"vote_count\": 256,\n      \"video\": false,\n      \"media_type\": \"movie\",\n      \"release_date\": \"2018-05-25\",\n      \"vote_average\": 6.1,\n      \"title\": \"In Darkness\",\n      \"popularity\": 9.185,\n      \"original_language\": \"en\",\n      \"genre_ids\": [\n        53\n      ],\n      \"backdrop_path\": \"/g1j1TIyYsoPbuLVIfiV86JNhD1P.jpg\",\n      \"adult\": false,\n      \"poster_path\": \"/A4gJEE1zpImXE8MYkeq4sB69mfZ.jpg\",\n      \"credit_id\": \"57e59ee7c3a3681be80021c3\"\n    },\n    {\n      \"id\": 329440,\n      \"character\": \"Sara / Jess Price\",\n      \"original_title\": \"The Forest\",\n      \"overview\": \"Set in the Aokigahara Forest, a real-life place in Japan where people go to end their lives. Against this backdrop, a young American woman comes in search of her twin sister, who has mysteriously disappeared.\",\n      \"vote_count\": 1041,\n      \"video\": false,\n      \"media_type\": \"movie\",\n      \"poster_path\": \"/ox9y8ia8lGqtkmLZD3YghA7sZkU.jpg\",\n      \"backdrop_path\": \"/29dEFrVl49NsamUfE2FQPQyjbKl.jpg\",\n      \"popularity\": 8.08,\n      \"title\": \"The Forest\",\n      \"original_language\": \"en\",\n      \"genre_ids\": [\n        27,\n        9648,\n        53\n      ],\n      \"vote_average\": 5,\n      \"adult\": false,\n      \"release_date\": \"2016-01-07\",\n      \"credit_id\": \"54fbe14cc3a36816380002ed\"\n    },\n    {\n      \"id\": 44529,\n      \"character\": \"Olga\",\n      \"original_title\": \"City of Life\",\n      \"overview\": \"A privileged young male Arab at odds with his cultural identity and his less fortunate street smart friend; a disillusioned Indian taxi driver who bears an uncanny resemblance to a famous Bollywood star; and a former Romanian ballet dancer now working as a flight attendant and searching for love and companionship ... these individuals all live in Dubai and their lives are about to collide for better or for worse in a city where ambition, growth and opportunity are encouraged and dreams can still manifest. \\\"City of Life\\\" is an urban drama that tracks the various intersections of a multi-ethnic cast, examining how random interactions and their consequences can irrevocably impact another's life.\",\n      \"vote_count\": 9,\n      \"video\": false,\n      \"media_type\": \"movie\",\n      \"release_date\": \"2009-12-11\",\n      \"vote_average\": 6.4,\n      \"title\": \"City of Life\",\n      \"popularity\": 0.783,\n      \"original_language\": \"en\",\n      \"genre_ids\": [\n        10749,\n        18\n      ],\n      \"backdrop_path\": \"/2KPr9dBkXMrTr4NIbJSghu76MsC.jpg\",\n      \"adult\": false,\n      \"poster_path\": \"/3TyuTCNQfGj6xhvNfFXtBDtcTnk.jpg\",\n      \"credit_id\": \"52fe468cc3a36847f8105137\"\n    },\n    {\n      \"id\": 201992,\n      \"character\": \"Suzanne\",\n      \"original_title\": \"A Long Way From Home\",\n      \"overview\": \"Joseph and Brenda have done what many only dream of and retired to the South of France to live out the rest of their days as if they were permanently on holiday. But retirement is not what Joseph imagined, and when he meets a young, attractive woman, Suzanne, everything he thought he knew about himself and his world is turned upside down.\",\n      \"vote_count\": 7,\n      \"video\": false,\n      \"media_type\": \"movie\",\n      \"release_date\": \"2013-12-06\",\n      \"vote_average\": 5.6,\n      \"title\": \"A Long Way From Home\",\n      \"popularity\": 1.231,\n      \"original_language\": \"en\",\n      \"genre_ids\": [\n        18,\n        10749\n      ],\n      \"backdrop_path\": \"/2t1dAdgirczqLB4LvXwT0zpMp1u.jpg\",\n      \"adult\": false,\n      \"poster_path\": \"/pWbNDQYa7EGc14WZjQh7ELeq041.jpg\",\n      \"credit_id\": \"52fe4cbac3a368484e1c450b\"\n    },\n    {\n      \"id\": 295011,\n      \"character\": \"Gina\",\n      \"original_title\": \"Patient Zero\",\n      \"overview\": \"After an unprecedented global pandemic has turned the majority of humankind into violent infected beings, Morgan, a man gifted with the ability to speak the infected's new language, leads the last survivors on a hunt for patient zero and a cure.\",\n      \"vote_count\": 140,\n      \"video\": false,\n      \"media_type\": \"movie\",\n      \"poster_path\": \"/5jOqatpfh0aKYhl6fN83RK69UtC.jpg\",\n      \"backdrop_path\": \"/kpjp9Wqj6U4wdv4oSEe9FLkNhaQ.jpg\",\n      \"popularity\": 7.094,\n      \"title\": \"Patient Zero\",\n      \"original_language\": \"en\",\n      \"genre_ids\": [\n        28,\n        18,\n        27,\n        53\n      ],\n      \"vote_average\": 4.7,\n      \"adult\": false,\n      \"release_date\": \"2018-09-14\",\n      \"credit_id\": \"54c248c592514124320038c3\"\n    },\n    {\n      \"id\": 425328,\n      \"character\": \"Ruth Anderson\",\n      \"original_title\": \"The God Four\",\n      \"overview\": \"A former championship rower learns that a former classmate has committed suicide on the eve of their ten-year reunion.\",\n      \"vote_count\": 0,\n      \"video\": false,\n      \"media_type\": \"movie\",\n      \"release_date\": \"\",\n      \"vote_average\": 0,\n      \"title\": \"The God Four\",\n      \"popularity\": 1.126,\n      \"original_language\": \"en\",\n      \"genre_ids\": [\n        18\n      ],\n      \"backdrop_path\": null,\n      \"adult\": false,\n      \"poster_path\": null,\n      \"credit_id\": \"58242f49c3a3684bf7006721\"\n    },\n    {\n      \"id\": 431887,\n      \"character\": \"Millie\",\n      \"original_title\": \"The Ring Cycle\",\n      \"overview\": \"A woman on the last day of her marriage tries to figure out what to do with her wedding ring. Walking through London, she has a series of encounters that propel her toward a new relationship...with herself.\",\n      \"vote_count\": 1,\n      \"video\": false,\n      \"media_type\": \"movie\",\n      \"release_date\": \"2014-07-18\",\n      \"vote_average\": 3,\n      \"title\": \"The Ring Cycle\",\n      \"popularity\": 0.628,\n      \"original_language\": \"en\",\n      \"genre_ids\": [\n        35,\n        18\n      ],\n      \"backdrop_path\": null,\n      \"adult\": false,\n      \"poster_path\": \"/fyup8BXtBP5PaHbqHhG7xvufjyE.jpg\",\n      \"credit_id\": \"58620c3f92514115be03b380\"\n    },\n    {\n      \"id\": 410670,\n      \"character\": \"Her\",\n      \"original_title\": \"The Brunchers\",\n      \"overview\": \"A thirty something couple, concerned that they're out of touch and no longer fashionable, decide to rectify the situation by dragging themselves to the latest hip brunch eatery. As they journey through London, they discuss the idiosyncrasies of their friends and the ups and down of their aberrant relationships. However, when they bump into Tom, an uber-hipster friend of theirs, what he reveals puts their quest into a thoroughly different light.\",\n      \"vote_count\": 0,\n      \"video\": false,\n      \"media_type\": \"movie\",\n      \"release_date\": \"2014-04-12\",\n      \"vote_average\": 0,\n      \"title\": \"The Brunchers\",\n      \"popularity\": 1.182,\n      \"original_language\": \"en\",\n      \"genre_ids\": [],\n      \"backdrop_path\": null,\n      \"adult\": false,\n      \"poster_path\": \"/12zcHTAGDEivWcmoUeYeoJ2mSrg.jpg\",\n      \"credit_id\": \"57aa147fc3a36873d80079c5\"\n    },\n    {\n      \"id\": 411728,\n      \"character\": \"Eliza Merrett\",\n      \"original_title\": \"The Professor and the Madman\",\n      \"overview\": \"Professor James Murray begins work compiling words for the first edition of the Oxford English Dictionary in the mid 19th century, and receives over 10,000 entries from a patient at Broadmoor Criminal Lunatic Asylum, Dr. William Minor.\",\n      \"vote_count\": 308,\n      \"video\": false,\n      \"media_type\": \"movie\",\n      \"poster_path\": \"/gtGCDLhfjW96qVarwctnuTpGOtD.jpg\",\n      \"backdrop_path\": \"/zhNfM1CSQqJtIqelwlK9iKtSd9P.jpg\",\n      \"popularity\": 18.731,\n      \"title\": \"The Professor and the Madman\",\n      \"original_language\": \"en\",\n      \"genre_ids\": [\n        18,\n        36,\n        9648,\n        53\n      ],\n      \"vote_average\": 7.2,\n      \"adult\": false,\n      \"release_date\": \"2019-03-07\",\n      \"credit_id\": \"584baac792514133a80075da\"\n    },\n    {\n      \"id\": 410672,\n      \"character\": \"Lauren Bacall\",\n      \"original_title\": \"Electric Cinema: How to Behave\",\n      \"overview\": \"London's oldest working cinema asks its patrons to observe certain manners of behaviour when enjoying its shows.\",\n      \"vote_count\": 3,\n      \"video\": false,\n      \"media_type\": \"movie\",\n      \"release_date\": \"2012-11-28\",\n      \"vote_average\": 5.7,\n      \"title\": \"Electric Cinema: How to Behave\",\n      \"popularity\": 0.699,\n      \"original_language\": \"en\",\n      \"genre_ids\": [],\n      \"backdrop_path\": null,\n      \"adult\": false,\n      \"poster_path\": \"/nZ9keuVR1m64fEg5voeGVG5qUDb.jpg\",\n      \"credit_id\": \"5a33b261c3a36814ae0272ab\"\n    },\n    {\n      \"id\": 627133,\n      \"character\": \"\",\n      \"original_title\": \"The Crystal Calls - Making The Dark Crystal: Age of Resistance\",\n      \"overview\": \"Go behind the scenes with stars, puppeteers and creators as they bring Jim Henson's magical world of Thra back to life in a sweeping fantasy series.\",\n      \"vote_count\": 6,\n      \"video\": false,\n      \"media_type\": \"movie\",\n      \"poster_path\": \"/d6liOscksEp37koLfdjzdu1BwrK.jpg\",\n      \"backdrop_path\": \"/uGAAv3zIxH5zUNRqMMw9509BTOy.jpg\",\n      \"popularity\": 3.13,\n      \"title\": \"The Crystal Calls - Making The Dark Crystal: Age of Resistance\",\n      \"original_language\": \"en\",\n      \"genre_ids\": [\n        99\n      ],\n      \"vote_average\": 8.8,\n      \"adult\": false,\n      \"release_date\": \"2019-08-30\",\n      \"credit_id\": \"5d68e1eaca83545e55f6eac7\"\n    },\n    {\n      \"id\": 270302,\n      \"character\": \"Charlie\",\n      \"original_title\": \"The Riot Club\",\n      \"overview\": \"Two first-year students at Oxford University join the infamous Riot Club, where reputations can be made or destroyed over the course of a single evening.\",\n      \"vote_count\": 745,\n      \"video\": false,\n      \"media_type\": \"movie\",\n      \"poster_path\": \"/zWc20gRd6pxmpEgrmJp9efDzj2j.jpg\",\n      \"backdrop_path\": \"/n4151SPSW0HypZNyPeVSfF7EE0V.jpg\",\n      \"popularity\": 7.164,\n      \"title\": \"The Riot Club\",\n      \"original_language\": \"en\",\n      \"genre_ids\": [\n        18,\n        53\n      ],\n      \"vote_average\": 6,\n      \"adult\": false,\n      \"release_date\": \"2014-09-19\",\n      \"credit_id\": \"53776bc2c3a368552c001837\"\n    },\n    {\n      \"id\": 96721,\n      \"character\": \"Nurse Gemma\",\n      \"original_title\": \"Rush\",\n      \"overview\": \"A biographical drama centered on the rivalry between Formula 1 drivers James Hunt and Niki Lauda during the 1976 Formula One motor-racing season.\",\n      \"vote_count\": 4162,\n      \"video\": false,\n      \"media_type\": \"movie\",\n      \"release_date\": \"2013-09-02\",\n      \"vote_average\": 7.7,\n      \"title\": \"Rush\",\n      \"popularity\": 15.985,\n      \"original_language\": \"en\",\n      \"genre_ids\": [\n        18,\n        28\n      ],\n      \"backdrop_path\": \"/w41zFKYTsq4wf5QnQJWMXuzWl2F.jpg\",\n      \"adult\": false,\n      \"poster_path\": \"/cjEepHZOZAwmK6nAj5jis6HV75E.jpg\",\n      \"credit_id\": \"52fe49bf9251416c750d20b7\"\n    },\n    {\n      \"id\": 80591,\n      \"character\": \"Elizabeth\",\n      \"original_title\": \"W.E.\",\n      \"overview\": \"In 1998, an auction of the estate of the Duke and Duchess of Windsor causes great excitement. For one woman, Wally Winthrop, it has much more meaning. Wally becomes obsessed by their historic love story. As she learns more about the sacrifices involved, Wally gains her own courage to find happiness.\",\n      \"vote_count\": 102,\n      \"video\": false,\n      \"media_type\": \"movie\",\n      \"poster_path\": \"/tsU6YVOrEKLimDpOnLO2yuhP1le.jpg\",\n      \"backdrop_path\": \"/9cwTQhgTmt0sBBaXewHAaTU9ei9.jpg\",\n      \"popularity\": 8.742,\n      \"title\": \"W.E.\",\n      \"original_language\": \"en\",\n      \"genre_ids\": [\n        18,\n        10749\n      ],\n      \"vote_average\": 5.9,\n      \"adult\": false,\n      \"release_date\": \"2011-09-01\",\n      \"credit_id\": \"52fe47ca9251416c91075d99\"\n    },\n    {\n      \"id\": 392840,\n      \"character\": \"Herself\",\n      \"original_title\": \"Pawns, No More: The Making of The Hunger Games: Mockingjay, Part 2\",\n      \"overview\": \"Two and twenty minute documentary about the making of The Hunger Games: Mockingjay, Part 2.\",\n      \"vote_count\": 2,\n      \"video\": false,\n      \"media_type\": \"movie\",\n      \"release_date\": \"\",\n      \"vote_average\": 10,\n      \"title\": \"Pawns, No More: The Making of The Hunger Games: Mockingjay, Part 2\",\n      \"popularity\": 0.827,\n      \"original_language\": \"en\",\n      \"genre_ids\": [],\n      \"backdrop_path\": null,\n      \"adult\": false,\n      \"poster_path\": null,\n      \"credit_id\": \"5da86473b7b69d0013e8ccd8\"\n    },\n    {\n      \"id\": 9681,\n      \"character\": \"Victoria\",\n      \"original_title\": \"Casanova\",\n      \"overview\": \"With a reputation for seducing members of the opposite sex, regardless of their marital status, a notorious womanizer discovers a beauty who seems impervious to his charms. However, as he continues to pursue the indifferent lady, he finds himself falling in love.\",\n      \"vote_count\": 457,\n      \"video\": false,\n      \"media_type\": \"movie\",\n      \"release_date\": \"2005-12-25\",\n      \"vote_average\": 6.3,\n      \"title\": \"Casanova\",\n      \"popularity\": 9.5,\n      \"original_language\": \"en\",\n      \"genre_ids\": [\n        35,\n        10749\n      ],\n      \"backdrop_path\": \"/Q4XKnmSBP54jiawMBcGU0sgVcD.jpg\",\n      \"adult\": false,\n      \"poster_path\": \"/tX9QmK232VUgnTtOHJXgnqhpDl9.jpg\",\n      \"credit_id\": \"52fe451ac3a36847f80bcb15\"\n    },\n    {\n      \"id\": 483821,\n      \"character\": \"Herself\",\n      \"original_title\": \"And the Winner Isn't\",\n      \"overview\": \"A satirical documentary charting Geoffrey Moore and his daughter Ambra’s journey through Hollywood, as the pair track down celebrities and industry insiders in their bid to find out what it takes to become an Academy Award winner.\",\n      \"vote_count\": 0,\n      \"video\": false,\n      \"media_type\": \"movie\",\n      \"release_date\": \"2017-12-08\",\n      \"vote_average\": 0,\n      \"title\": \"And the Winner Isn't\",\n      \"popularity\": 1.248,\n      \"original_language\": \"en\",\n      \"genre_ids\": [\n        99\n      ],\n      \"backdrop_path\": \"/pZOQzRJXxQxg5TSu5byJ8YeLZbg.jpg\",\n      \"adult\": false,\n      \"poster_path\": \"/nMBjFDLVGZEX6giNERE4r5qYxQI.jpg\",\n      \"credit_id\": \"5a4c065b0e0a26107a0017f3\"\n    },\n    {\n      \"id\": 514231,\n      \"character\": \"Herself\",\n      \"original_title\": \"The Mockingjay Lives: The Making of the Hunger Games: Mockingjay Part 1\",\n      \"overview\": \"Documentary film about the making of The Hunger Games: Mockingjay Part 1\",\n      \"vote_count\": 1,\n      \"video\": false,\n      \"media_type\": \"movie\",\n      \"poster_path\": null,\n      \"backdrop_path\": null,\n      \"popularity\": 0.708,\n      \"title\": \"The Mockingjay Lives: The Making of the Hunger Games: Mockingjay Part 1\",\n      \"original_language\": \"en\",\n      \"genre_ids\": [],\n      \"vote_average\": 10,\n      \"adult\": false,\n      \"release_date\": \"2015-02-01\",\n      \"credit_id\": \"5da8633b944a57001925f8a6\"\n    },\n    {\n      \"id\": 131634,\n      \"character\": \"Cressida\",\n      \"original_title\": \"The Hunger Games: Mockingjay - Part 2\",\n      \"overview\": \"With the nation of Panem in a full scale war, Katniss confronts President Snow in the final showdown. Teamed with a group of her closest friends – including Gale, Finnick, and Peeta – Katniss goes off on a mission with the unit from District 13 as they risk their lives to stage an assassination attempt on President Snow who has become increasingly obsessed with destroying her. The mortal traps, enemies, and moral choices that await Katniss will challenge her more than any arena she faced in The Hunger Games.\",\n      \"vote_count\": 8036,\n      \"video\": false,\n      \"media_type\": \"movie\",\n      \"poster_path\": \"/w93GAiq860UjmgR6tU9h2T24vaV.jpg\",\n      \"backdrop_path\": \"/qjn3fzCAHGfl0CzeUlFbjrsmu4c.jpg\",\n      \"popularity\": 19.818,\n      \"title\": \"The Hunger Games: Mockingjay - Part 2\",\n      \"original_language\": \"en\",\n      \"genre_ids\": [\n        28,\n        12,\n        878\n      ],\n      \"vote_average\": 6.8,\n      \"adult\": false,\n      \"release_date\": \"2015-11-18\",\n      \"credit_id\": \"52fe4b7bc3a368484e18b0d9\"\n    },\n    {\n      \"id\": 131631,\n      \"character\": \"Cressida\",\n      \"original_title\": \"The Hunger Games: Mockingjay - Part 1\",\n      \"overview\": \"Katniss Everdeen reluctantly becomes the symbol of a mass rebellion against the autocratic Capitol.\",\n      \"vote_count\": 10697,\n      \"video\": false,\n      \"media_type\": \"movie\",\n      \"release_date\": \"2014-11-18\",\n      \"vote_average\": 6.8,\n      \"title\": \"The Hunger Games: Mockingjay - Part 1\",\n      \"popularity\": 32.185,\n      \"original_language\": \"en\",\n      \"genre_ids\": [\n        878,\n        12,\n        53\n      ],\n      \"backdrop_path\": \"/4PwyB0ErucIANzW24Kori71J6gU.jpg\",\n      \"adult\": false,\n      \"poster_path\": \"/gj282Pniaa78ZJfbaixyLXnXEDI.jpg\",\n      \"credit_id\": \"545f750b0e0a261fb9009122\"\n    },\n    {\n      \"id\": 13195,\n      \"character\": \"Cassie\",\n      \"original_title\": \"Flawless\",\n      \"overview\": \"A female executive and a night janitor conspire to commit a daring diamond heist from their mutual employer, The London Diamond Corporation.\",\n      \"vote_count\": 240,\n      \"video\": false,\n      \"media_type\": \"movie\",\n      \"poster_path\": \"/4VxDg0P8eGhPpplvSwpz2hARIig.jpg\",\n      \"backdrop_path\": \"/fKU6XKfmyEuoXjmhkQ8IOIMvpUk.jpg\",\n      \"popularity\": 9.445,\n      \"title\": \"Flawless\",\n      \"original_language\": \"en\",\n      \"genre_ids\": [\n        80,\n        18,\n        53\n      ],\n      \"vote_average\": 6.6,\n      \"adult\": false,\n      \"release_date\": \"2007-09-01\",\n      \"credit_id\": \"52fe454d9251416c75051d83\"\n    },\n    {\n      \"id\": 1771,\n      \"character\": \"Private Lorraine\",\n      \"original_title\": \"Captain America: The First Avenger\",\n      \"overview\": \"During World War II, Steve Rogers is a sickly man from Brooklyn who's transformed into super-soldier Captain America to aid in the war effort. Rogers must stop the Red Skull – Adolf Hitler's ruthless head of weaponry, and the leader of an organization that intends to use a mysterious device of untold powers for world domination.\",\n      \"vote_count\": 13769,\n      \"video\": false,\n      \"media_type\": \"movie\",\n      \"poster_path\": \"/vSNxAJTlD0r02V9sPYpOjqDZXUK.jpg\",\n      \"backdrop_path\": \"/pmZtj1FKvQqISS6iQbkiLg5TAsr.jpg\",\n      \"popularity\": 17.016,\n      \"title\": \"Captain America: The First Avenger\",\n      \"original_language\": \"en\",\n      \"genre_ids\": [\n        28,\n        12,\n        878\n      ],\n      \"vote_average\": 6.9,\n      \"adult\": false,\n      \"release_date\": \"2011-07-22\",\n      \"credit_id\": \"52fe4313c3a36847f803886d\"\n    },\n    {\n      \"id\": 109091,\n      \"character\": \"Blonde\",\n      \"original_title\": \"The Counselor\",\n      \"overview\": \"A lawyer finds himself in far over his head when he attempts to get involved in drug trafficking.\",\n      \"vote_count\": 1144,\n      \"video\": false,\n      \"media_type\": \"movie\",\n      \"release_date\": \"2013-10-25\",\n      \"vote_average\": 5.1,\n      \"title\": \"The Counselor\",\n      \"popularity\": 17.007,\n      \"original_language\": \"en\",\n      \"genre_ids\": [\n        53,\n        80,\n        18\n      ],\n      \"backdrop_path\": \"/aWqyoI3u1PigWrXAMyeX568vTXW.jpg\",\n      \"adult\": false,\n      \"poster_path\": \"/uxp6rHVBzUqZCyTaUI8xzUP5sOf.jpg\",\n      \"credit_id\": \"52fe4aaac3a36847f81db4ff\"\n    },\n    {\n      \"id\": 1399,\n      \"character\": \"Margaery Tyrell\",\n      \"episode_count\": 50,\n      \"overview\": \"Seven noble families fight for control of the mythical land of Westeros. Friction between the houses leads to full-scale war. All while a very ancient evil awakens in the farthest north. Amidst the war, a neglected military order of misfits, the Night's Watch, is all that stands between the realms of men and icy horrors beyond.\",\n      \"origin_country\": [\n        \"US\"\n      ],\n      \"original_name\": \"Game of Thrones\",\n      \"genre_ids\": [\n        18,\n        10759,\n        10765\n      ],\n      \"name\": \"Game of Thrones\",\n      \"media_type\": \"tv\",\n      \"backdrop_path\": \"/suopoADq0k8YZr4dQXcU6pToj6s.jpg\",\n      \"popularity\": 99.13,\n      \"first_air_date\": \"2011-04-17\",\n      \"original_language\": \"en\",\n      \"vote_count\": 6503,\n      \"vote_average\": 8.1,\n      \"poster_path\": \"/u3bZgnGQ9T01sWNhyveQz0wH0Hl.jpg\",\n      \"credit_id\": \"5256c8b519c2956ff6048078\"\n    },\n    {\n      \"id\": 1761,\n      \"original_language\": \"en\",\n      \"episode_count\": 1,\n      \"overview\": \"Distant Shores is a dramedy first shown in the United Kingdom on ITV in January 2005. Like the similar fish out of water dramedies, Northern Exposure and Doc Martin, it focuses on the difficulties of an unwillingly-transplanted metropolitan doctor who is forced to adjust to a rural environment.\\n\\nThe show's recurring cast is unusual for featuring major actors from three significant British franchises — Doctor Who, Blake's 7 and the James Bond film series. The programme itself is notable for being a rare example of a show to have an entire series shelved in its country of origin following the completion of post-production.\",\n      \"origin_country\": [\n        \"GB\"\n      ],\n      \"original_name\": \"Distant Shores\",\n      \"vote_count\": 1,\n      \"name\": \"Distant Shores\",\n      \"media_type\": \"tv\",\n      \"poster_path\": null,\n      \"popularity\": 0.865,\n      \"vote_average\": 6,\n      \"first_air_date\": \"2005-01-05\",\n      \"genre_ids\": [\n        18,\n        35\n      ],\n      \"backdrop_path\": null,\n      \"character\": \"\",\n      \"credit_id\": \"525713f619c295711406b9b1\"\n    },\n    {\n      \"id\": 2942,\n      \"original_language\": \"en\",\n      \"episode_count\": 21,\n      \"overview\": \"The Tudors is a history-based drama series following the young, vibrant King Henry VIII, a competitive and lustful monarch who navigates the intrigues of the English court and the human heart with equal vigor and justifiable suspicion.\",\n      \"origin_country\": [\n        \"US\"\n      ],\n      \"original_name\": \"The Tudors\",\n      \"vote_count\": 168,\n      \"name\": \"The Tudors\",\n      \"media_type\": \"tv\",\n      \"poster_path\": \"/96IFXF6eeMpFU1MDlXnaVtMBsaE.jpg\",\n      \"popularity\": 18.383,\n      \"vote_average\": 7.7,\n      \"first_air_date\": \"2007-04-01\",\n      \"genre_ids\": [\n        18,\n        36,\n        10749\n      ],\n      \"backdrop_path\": \"/zDY5fG4WpD1OwnVA0sIxGwGD0X5.jpg\",\n      \"character\": \"Anne Boleyn\",\n      \"credit_id\": \"52574a7219c29531db0a1789\"\n    },\n    {\n      \"id\": 41211,\n      \"character\": \"Sarah Etches\",\n      \"episode_count\": 6,\n      \"overview\": \"Seventeen-year old Paul can see the spirits of the dead. When one of these restless spirits crosses back into the living world, he is forced into a fight to prevent the apocalypse.\",\n      \"origin_country\": [\n        \"GB\"\n      ],\n      \"original_name\": \"The Fades\",\n      \"genre_ids\": [\n        18,\n        10765\n      ],\n      \"name\": \"The Fades\",\n      \"media_type\": \"tv\",\n      \"backdrop_path\": \"/tSnfNLRPngBv8gJU0QJnouwkl3r.jpg\",\n      \"popularity\": 4.663,\n      \"first_air_date\": \"2011-09-21\",\n      \"original_language\": \"en\",\n      \"vote_count\": 35,\n      \"vote_average\": 7.3,\n      \"poster_path\": \"/7WQAVJMjD3Gf5lvHmofsaCGRUm6.jpg\",\n      \"credit_id\": \"52595e28760ee34661942b26\"\n    },\n    {\n      \"id\": 37780,\n      \"original_language\": \"en\",\n      \"episode_count\": 12,\n      \"overview\": \"Silk is a British television drama series produced by the BBC and first shown in 2011. Written by Peter Moffat, the series follows a set of barristers, and what they do to attain the rank of Queen's Counsel, known as \\\"taking silk.\\\"\",\n      \"origin_country\": [\n        \"GB\"\n      ],\n      \"original_name\": \"Silk\",\n      \"vote_count\": 16,\n      \"name\": \"Silk\",\n      \"media_type\": \"tv\",\n      \"poster_path\": \"/8qxsdAHBjtMLw4iaPgKXnAojgsM.jpg\",\n      \"popularity\": 3.433,\n      \"vote_average\": 7.7,\n      \"first_air_date\": \"2011-02-22\",\n      \"genre_ids\": [\n        18\n      ],\n      \"backdrop_path\": \"/bxdgGKuJPp2VaHUp2F4tAgioicv.jpg\",\n      \"character\": \"Niamh Cranitch\",\n      \"credit_id\": \"5258eaee760ee346618902f0\"\n    },\n    {\n      \"id\": 1415,\n      \"character\": \"Irene Adler\",\n      \"episode_count\": 4,\n      \"overview\": \"A modern-day drama about a crime-solving duo that cracks the NYPD's most impossible cases. Following his fall from grace in London and a stint in rehab, eccentric Sherlock escapes to Manhattan where his wealthy father forces him to live with his worst nightmare - a sober companion, Dr. Watson.\",\n      \"origin_country\": [\n        \"US\"\n      ],\n      \"original_name\": \"Elementary\",\n      \"genre_ids\": [\n        80,\n        18,\n        9648\n      ],\n      \"name\": \"Elementary\",\n      \"media_type\": \"tv\",\n      \"backdrop_path\": \"/7sJrNKwzyJWnFPFpDL9wnZ859LZ.jpg\",\n      \"popularity\": 63.202,\n      \"first_air_date\": \"2012-09-27\",\n      \"original_language\": \"en\",\n      \"vote_count\": 701,\n      \"vote_average\": 7,\n      \"poster_path\": \"/q9dObe29W4bDpgzUfOOH3ZnzDbR.jpg\",\n      \"credit_id\": \"52ed89d219c29558ef01e706\"\n    },\n    {\n      \"id\": 78881,\n      \"original_language\": \"en\",\n      \"episode_count\": 6,\n      \"overview\": \"Valentine's Day, 1900. Three schoolgirls and their governess mysteriously disappear in Hanging Rock, Australia, without a trace.\",\n      \"origin_country\": [\n        \"AU\"\n      ],\n      \"original_name\": \"Picnic at Hanging Rock\",\n      \"vote_count\": 17,\n      \"name\": \"Picnic at Hanging Rock\",\n      \"media_type\": \"tv\",\n      \"poster_path\": \"/rf5hJuHoZKKpJp6ckv9r1njzdZ.jpg\",\n      \"popularity\": 3.368,\n      \"vote_average\": 6.5,\n      \"first_air_date\": \"2018-05-06\",\n      \"genre_ids\": [\n        18,\n        9648\n      ],\n      \"backdrop_path\": \"/5ao8UwOQs0vNmvVRTedCPl3T5EY.jpg\",\n      \"character\": \"Mrs. Hester Appleyard\",\n      \"credit_id\": \"5ad872fb0e0a26433000fa9f\"\n    },\n    {\n      \"id\": 1220,\n      \"character\": \"Herself\",\n      \"episode_count\": 1,\n      \"overview\": \"Each week celebrity guests join Irish comedian Graham Norton to discuss what's being going on around the world that week. The guests poke fun and share their opinions on the main news stories. Graham is often joined by a band or artist to play the show out.\",\n      \"origin_country\": [\n        \"GB\"\n      ],\n      \"original_name\": \"The Graham Norton Show\",\n      \"genre_ids\": [\n        35,\n        10767\n      ],\n      \"name\": \"The Graham Norton Show\",\n      \"media_type\": \"tv\",\n      \"backdrop_path\": \"/2pJYis3LUEgFC3UErTQVgmUV1hN.jpg\",\n      \"popularity\": 41.138,\n      \"first_air_date\": \"2007-02-22\",\n      \"original_language\": \"en\",\n      \"vote_count\": 106,\n      \"vote_average\": 7,\n      \"poster_path\": \"/vrbqaBXB8AALynQzpWz6JdCPEJS.jpg\",\n      \"credit_id\": \"5b33cf560e0a26401c01b295\"\n    },\n    {\n      \"id\": 6127,\n      \"character\": \"Moira Nicholson\",\n      \"episode_count\": 1,\n      \"overview\": \"The adventures of Miss Jane Marple, an elderly spinster living in the quiet little village of St Mary Mead. During her many visits to friends and relatives in other villages, Miss Marple often stumbles upon mysterious murders which she helps solve. Although the police are sometimes reluctant to accept Miss Marple's help, her reputation and unparalleled powers of observation eventually win them over.\",\n      \"origin_country\": [\n        \"GB\"\n      ],\n      \"original_name\": \"Agatha Christie's Marple\",\n      \"genre_ids\": [\n        80,\n        18,\n        9648\n      ],\n      \"name\": \"Agatha Christie's Marple\",\n      \"media_type\": \"tv\",\n      \"backdrop_path\": \"/hW42mQZ5On2xfBoFxxERK2zOwTo.jpg\",\n      \"popularity\": 9.648,\n      \"first_air_date\": \"2004-12-12\",\n      \"original_language\": \"en\",\n      \"vote_count\": 26,\n      \"vote_average\": 7.7,\n      \"poster_path\": \"/iFeUYD7FGKG5b9ZK2qAlTaWcZZM.jpg\",\n      \"credit_id\": \"5c0dcfee92514147aa0a6f57\"\n    },\n    {\n      \"id\": 71809,\n      \"character\": \"Onica (voice)\",\n      \"episode_count\": 10,\n      \"overview\": \"Return to the world of Thra, where three Gelfling discover the horrifying secret behind the Skeksis' power and set out to ignite the fires of rebellion and save their world.\",\n      \"origin_country\": [\n        \"GB\",\n        \"US\"\n      ],\n      \"original_name\": \"The Dark Crystal: Age of Resistance\",\n      \"genre_ids\": [\n        18,\n        10762,\n        10765\n      ],\n      \"name\": \"The Dark Crystal: Age of Resistance\",\n      \"media_type\": \"tv\",\n      \"backdrop_path\": \"/lPDOoarb7JMv2uIzRmuUKWp8YIR.jpg\",\n      \"popularity\": 8.958,\n      \"first_air_date\": \"2019-08-30\",\n      \"original_language\": \"en\",\n      \"vote_count\": 48,\n      \"vote_average\": 8,\n      \"poster_path\": \"/rG6bC26xi10i8Mx0ZTyJ7nBkeWv.jpg\",\n      \"credit_id\": \"5c17d3e8c3a36866c0387927\"\n    },\n    {\n      \"id\": 83685,\n      \"original_language\": \"en\",\n      \"episode_count\": 1,\n      \"overview\": \"Rooted in the conflict between characters connected to the deity Santa Muerte and others allied with the Devil, this new saga explores an exciting mix of the supernatural and the combustible reality of 1938 Los Angeles, a time and place deeply infused with Mexican-American folklore and social tension.\",\n      \"origin_country\": [\n        \"US\"\n      ],\n      \"original_name\": \"Penny Dreadful: City of Angels\",\n      \"vote_count\": 0,\n      \"name\": \"Penny Dreadful: City of Angels\",\n      \"media_type\": \"tv\",\n      \"poster_path\": \"/lqvmSO1pgD94B5cdX1xBHsKj6XY.jpg\",\n      \"popularity\": 0.6,\n      \"vote_average\": 0,\n      \"first_air_date\": \"\",\n      \"genre_ids\": [\n        18\n      ],\n      \"backdrop_path\": \"/g0CXfvf8wPWlrWIr9g6zaQHDhxC.jpg\",\n      \"character\": \"Magda\",\n      \"credit_id\": \"5c7081329251415ee2af1378\"\n    }\n  ],\n  \"crew\": [\n    {\n      \"id\": 417643,\n      \"department\": \"Production\",\n      \"original_language\": \"en\",\n      \"original_title\": \"In Darkness\",\n      \"job\": \"Producer\",\n      \"overview\": \"A blind musician hears a murder committed in the apartment upstairs from hers that sends her down a dark path into London's gritty criminal underworld.\",\n      \"vote_count\": 256,\n      \"video\": false,\n      \"media_type\": \"movie\",\n      \"release_date\": \"2018-05-25\",\n      \"vote_average\": 6.1,\n      \"title\": \"In Darkness\",\n      \"popularity\": 9.185,\n      \"genre_ids\": [\n        53\n      ],\n      \"backdrop_path\": \"/g1j1TIyYsoPbuLVIfiV86JNhD1P.jpg\",\n      \"adult\": false,\n      \"poster_path\": \"/A4gJEE1zpImXE8MYkeq4sB69mfZ.jpg\",\n      \"credit_id\": \"5aed0e630e0a2635a900343f\"\n    },\n    {\n      \"id\": 417643,\n      \"department\": \"Writing\",\n      \"original_language\": \"en\",\n      \"original_title\": \"In Darkness\",\n      \"job\": \"Writer\",\n      \"overview\": \"A blind musician hears a murder committed in the apartment upstairs from hers that sends her down a dark path into London's gritty criminal underworld.\",\n      \"vote_count\": 256,\n      \"video\": false,\n      \"media_type\": \"movie\",\n      \"release_date\": \"2018-05-25\",\n      \"vote_average\": 6.1,\n      \"title\": \"In Darkness\",\n      \"popularity\": 9.185,\n      \"genre_ids\": [\n        53\n      ],\n      \"backdrop_path\": \"/g1j1TIyYsoPbuLVIfiV86JNhD1P.jpg\",\n      \"adult\": false,\n      \"poster_path\": \"/A4gJEE1zpImXE8MYkeq4sB69mfZ.jpg\",\n      \"credit_id\": \"57e59f9c925141413f0024ec\"\n    }\n  ],\n  \"id\": 58502\n}"
            },
            {
                "name": "PERSON_DETAILS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/mock-data-person-details.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "IPersonDetails",
                "defaultValue": "{\n  \"birthday\": \"1982-02-11\",\n  \"known_for_department\": \"Acting\",\n  \"deathday\": null,\n  \"id\": 58502,\n  \"name\": \"Natalie Dormer\",\n  \"also_known_as\": [\n    \"나탈리 도머\",\n    \"Наталі Дормер\",\n    \"Νάταλι Ντόρμερ\"\n  ],\n  \"gender\": 1,\n  \"biography\": \"An English actress. She is best known for her roles as Anne Boleyn in the Showtime series The Tudors and as Margaery Tyrell in the HBO series Game of Thrones. Dormer was born in Reading, Berkshire. She attended Chiltern Edge Secondary School before moving to Reading Blue Coat School, an independent boys' school that admits girls in the sixth form. She grew up with her stepfather, mother, sister Samantha, and brother Mark.She has said that she was the victim of bullying while at school.At school, Dormer was head girl, a straight-A student, vice-captain of the school netball team, and she also got to travel the world with her school's public speaking team. During her school years, Dormer trained in dance at the Allenova School of Dancing. She describes herself as the \\\"academic hopeful\\\" of the family and was offered a place to study history at Cambridge; but, in her A-level History exam, she did not achieve the A grade she needed to attend. Dormer decided she would audition for drama schools and decided to train at the Webber Douglas Academy of Dramatic Art in London.\",\n  \"popularity\": 5.642,\n  \"place_of_birth\": \"Reading, Berkshire, England, UK\",\n  \"profile_path\": \"/8piDfs6oyRKSvrRv4RfUWEs3I0n.jpg\",\n  \"adult\": false,\n  \"imdb_id\": \"nm1754059\",\n  \"homepage\": null\n}"
            },
            {
                "name": "PERSON_DETAILS_FULL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/mock-data-person-details.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "IPersonDetails",
                "defaultValue": "{\n  \"birthday\": \"1982-02-11\",\n  \"known_for_department\": \"Acting\",\n  \"deathday\": null,\n  \"id\": 58502,\n  \"name\": \"Natalie Dormer\",\n  \"also_known_as\": [\n    \"나탈리 도머\",\n    \"Наталі Дормер\",\n    \"Νάταλι Ντόρμερ\"\n  ],\n  \"gender\": 1,\n  \"biography\": \"An English actress. She is best known for her roles as Anne Boleyn in the Showtime series The Tudors and as Margaery Tyrell in the HBO series Game of Thrones. Dormer was born in Reading, Berkshire. She attended Chiltern Edge Secondary School before moving to Reading Blue Coat School, an independent boys' school that admits girls in the sixth form. She grew up with her stepfather, mother, sister Samantha, and brother Mark.She has said that she was the victim of bullying while at school.At school, Dormer was head girl, a straight-A student, vice-captain of the school netball team, and she also got to travel the world with her school's public speaking team. During her school years, Dormer trained in dance at the Allenova School of Dancing. She describes herself as the \\\"academic hopeful\\\" of the family and was offered a place to study history at Cambridge; but, in her A-level History exam, she did not achieve the A grade she needed to attend. Dormer decided she would audition for drama schools and decided to train at the Webber Douglas Academy of Dramatic Art in London.\",\n  \"popularity\": 5.642,\n  \"place_of_birth\": \"Reading, Berkshire, England, UK\",\n  \"profile_path\": \"/8piDfs6oyRKSvrRv4RfUWEs3I0n.jpg\",\n  \"adult\": false,\n  \"imdb_id\": \"nm1754059\",\n  \"homepage\": null,\n  \"external_ids\": PERSON_EXTERNAL_IDS,\n  \"images\": PERSON_IMAGES,\n  \"combined_credits\": PERSON_COMBINED_CREDITS\n}"
            },
            {
                "name": "PERSON_EXTERNAL_IDS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/mock-data-person-details.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "IExternalids",
                "defaultValue": "{\n  \"id\": 58502,\n  \"twitter_id\": null,\n  \"facebook_id\": \"nataliedormerintheforest\",\n  \"tvrage_id\": 173448,\n  \"instagram_id\": null,\n  \"freebase_mid\": \"/m/02qfkfh\",\n  \"imdb_id\": \"nm1754059\",\n  \"freebase_id\": \"/en/natalie_dormer\"\n}"
            },
            {
                "name": "PERSON_IMAGES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/mock-data-person-details.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "IImages",
                "defaultValue": "{\n  \"profiles\": [\n    {\n      \"iso_639_1\": null,\n      \"width\": 1400,\n      \"height\": 2100,\n      \"vote_count\": 3,\n      \"vote_average\": 5.152,\n      \"file_path\": \"/2683pY6jXyR8KUmr5DK4ZY7Kryn.jpg\",\n      \"aspect_ratio\": 0.66666666666667\n    },\n    {\n      \"iso_639_1\": null,\n      \"width\": 600,\n      \"height\": 900,\n      \"vote_count\": 13,\n      \"vote_average\": 5.314,\n      \"file_path\": \"/8piDfs6oyRKSvrRv4RfUWEs3I0n.jpg\",\n      \"aspect_ratio\": 0.66666666666667\n    },\n    {\n      \"iso_639_1\": null,\n      \"width\": 1000,\n      \"height\": 1500,\n      \"vote_count\": 5,\n      \"vote_average\": 5.064,\n      \"file_path\": \"/4gimEAQ4pVM5LA9NzNNKNquae2X.jpg\",\n      \"aspect_ratio\": 0.66666666666667\n    },\n    {\n      \"iso_639_1\": null,\n      \"width\": 1000,\n      \"height\": 1500,\n      \"vote_count\": 3,\n      \"vote_average\": 5.04329004329,\n      \"file_path\": \"/o0LY3wKKlIv9tFCGVWLlrHS4rmR.jpg\",\n      \"aspect_ratio\": 0.66666666666667\n    },\n    {\n      \"iso_639_1\": null,\n      \"width\": 900,\n      \"height\": 1350,\n      \"vote_count\": 4,\n      \"vote_average\": 5.224,\n      \"file_path\": \"/qZDxS0fEeMQ380kKx9kULeYlpLp.jpg\",\n      \"aspect_ratio\": 0.66666666666667\n    },\n    {\n      \"iso_639_1\": null,\n      \"width\": 1600,\n      \"height\": 2400,\n      \"vote_count\": 3,\n      \"vote_average\": 5.166,\n      \"file_path\": \"/6sj7fkTgxD6ephXmof3hhLLtlrD.jpg\",\n      \"aspect_ratio\": 0.66666666666667\n    },\n    {\n      \"iso_639_1\": null,\n      \"width\": 800,\n      \"height\": 1200,\n      \"vote_count\": 6,\n      \"vote_average\": 5.252,\n      \"file_path\": \"/1zOGQvA7cNqPBcsjyRW5433fK98.jpg\",\n      \"aspect_ratio\": 0.66666666666667\n    },\n    {\n      \"iso_639_1\": null,\n      \"width\": 1400,\n      \"height\": 2100,\n      \"vote_count\": 11,\n      \"vote_average\": 5.27,\n      \"file_path\": \"/mw8L1luheBg3YjijdGWtjT2f2Zp.jpg\",\n      \"aspect_ratio\": 0.66666666666667\n    },\n    {\n      \"iso_639_1\": null,\n      \"width\": 300,\n      \"height\": 450,\n      \"vote_count\": 4,\n      \"vote_average\": 5.252,\n      \"file_path\": \"/kh0wH4N7VvoyXyop4KNtAcnxk05.jpg\",\n      \"aspect_ratio\": 0.66666666666667\n    },\n    {\n      \"iso_639_1\": null,\n      \"width\": 774,\n      \"height\": 1161,\n      \"vote_count\": 2,\n      \"vote_average\": 5.106,\n      \"file_path\": \"/oj7KAJBcpIZqbqMQsYOtouHGIbz.jpg\",\n      \"aspect_ratio\": 0.66666666666667\n    },\n    {\n      \"iso_639_1\": null,\n      \"width\": 929,\n      \"height\": 1394,\n      \"vote_count\": 2,\n      \"vote_average\": 5.246,\n      \"file_path\": \"/vGxi5zDojeaFsZ12bgvKnIjAmuY.jpg\",\n      \"aspect_ratio\": 0.66642754662841\n    },\n    {\n      \"iso_639_1\": null,\n      \"width\": 648,\n      \"height\": 973,\n      \"vote_count\": 0,\n      \"vote_average\": 0,\n      \"file_path\": \"/fOOdVrBgqHcVnT0VEcJyX1VoM5t.jpg\",\n      \"aspect_ratio\": 0.66598150051387\n    },\n    {\n      \"iso_639_1\": null,\n      \"width\": 656,\n      \"height\": 984,\n      \"vote_count\": 4,\n      \"vote_average\": 5.252,\n      \"file_path\": \"/8HIKlLSQHCnPnnI9XpxiRkd8YdO.jpg\",\n      \"aspect_ratio\": 0.66666666666667\n    },\n    {\n      \"iso_639_1\": null,\n      \"width\": 996,\n      \"height\": 1494,\n      \"vote_count\": 2,\n      \"vote_average\": 5.246,\n      \"file_path\": \"/zDWhTD7zUyKn4c0t8ENxbSHLIw.jpg\",\n      \"aspect_ratio\": 0.66666666666667\n    },\n    {\n      \"iso_639_1\": null,\n      \"width\": 1236,\n      \"height\": 1854,\n      \"vote_count\": 0,\n      \"vote_average\": 0,\n      \"file_path\": \"/kYjMxoEWpQRjo9A6VK0KFVpN51c.jpg\",\n      \"aspect_ratio\": 0.66666666666667\n    },\n    {\n      \"iso_639_1\": null,\n      \"width\": 848,\n      \"height\": 1271,\n      \"vote_count\": 8,\n      \"vote_average\": 5.264,\n      \"file_path\": \"/xFmOEtfO75XFUXdN2PrOfVcUALF.jpg\",\n      \"aspect_ratio\": 0.66719118804091\n    },\n    {\n      \"iso_639_1\": null,\n      \"width\": 1600,\n      \"height\": 2400,\n      \"vote_count\": 2,\n      \"vote_average\": 5.106,\n      \"file_path\": \"/fw0WsZroHiYRVaDbnnxBvrIMs9e.jpg\",\n      \"aspect_ratio\": 0.66666666666667\n    },\n    {\n      \"iso_639_1\": null,\n      \"width\": 2000,\n      \"height\": 3000,\n      \"vote_count\": 1,\n      \"vote_average\": 5.312,\n      \"file_path\": \"/fML6fJnmEZgN7ca0tB2qwqWn5zO.jpg\",\n      \"aspect_ratio\": 0.66666666666667\n    },\n    {\n      \"iso_639_1\": null,\n      \"width\": 1600,\n      \"height\": 2400,\n      \"vote_count\": 1,\n      \"vote_average\": 5.312,\n      \"file_path\": \"/3OlkHjDKDj9NKkFWXfLk7gcb2C.jpg\",\n      \"aspect_ratio\": 0.66666666666667\n    },\n    {\n      \"iso_639_1\": null,\n      \"width\": 1600,\n      \"height\": 2400,\n      \"vote_count\": 0,\n      \"vote_average\": 0,\n      \"file_path\": \"/sbYSlVPsNny0EpFJYkIVDxuv7ol.jpg\",\n      \"aspect_ratio\": 0.66666666666667\n    },\n    {\n      \"iso_639_1\": null,\n      \"width\": 444,\n      \"height\": 666,\n      \"vote_count\": 0,\n      \"vote_average\": 0,\n      \"file_path\": \"/n7GKBBAMcaGirzWptf8lOI8xalL.jpg\",\n      \"aspect_ratio\": 0.66666666666667\n    }\n  ],\n  \"id\": 58502\n}"
            },
            {
                "name": "PLAYBACK",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "IPlaybackPreferences",
                "defaultValue": "{\n  preferredMode: 'offline',\n  repeat: false,\n  preferredQuality: Quality.HD,\n  volume: 100\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "repeatPasswordValidator",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/directives/repeat-password.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ValidatorFn",
                "defaultValue": "(control: FormGroup): ValidationErrors | null => {\n  const password = control.get('password')\n  const repeatPassword = control.get('repeatPassword')\n  const toReturn = password.value && repeatPassword.value && password.value !== repeatPassword.value ? { isRepeatPassword: true } : null\n  return toReturn\n}",
                "rawdescription": "Validator for repeat password. It sets false if password and repeat password are not equal.",
                "description": "<p>Validator for repeat password. It sets false if password and repeat password are not equal.</p>\n"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any"
            },
            {
                "name": "RGB_COLOR_LIST",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n    { value: '255,255,255', label: 'White' },\n    { value: '0,0,0', label: 'Black' },\n    { value: '255,0,0', label: 'Red' },\n    { value: '0,0,255', label: 'Blue' },\n    { value: '0,128,0', label: 'Green' },\n    { value: '128,128,128', label: 'Gray' },\n  ]"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "SORT_BY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    label: 'None',\n    value: 'none'\n  },\n  {\n    label: 'Popularity Ascending',\n    value: 'popularity.asc'\n  },\n  {\n    label: 'Popularity Descending',\n    value: 'popularity.desc'\n  },\n  {\n    label: 'Release Date Ascending',\n    value: 'release_date.asc'\n  },\n  {\n    label: 'Release Date Descending',\n    value: 'release_date.desc'\n  },\n  {\n    label: 'Revenue Ascending',\n    value: 'revenue.asc'\n  },\n  {\n    label: 'Revenue Descending',\n    value: 'revenue.desc'\n  },\n  {\n    label: 'Primary Release Date Ascending',\n    value: 'primary_release_date.asc'\n  },\n  {\n    label: 'Primary Release Date Descending',\n    value: 'primary_release_date.desc'\n  },\n  {\n    label: 'Original Title Ascending',\n    value: 'original_title.asc'\n  },\n  {\n    label: 'Original Title Descending',\n    value: 'original_title.desc'\n  },\n  {\n    label: 'Vote Average Ascending',\n    value: 'vote_average.asc'\n  },\n  {\n    label: 'Vote Average Descending',\n    value: 'vote_average.desc'\n  },\n  {\n    label: 'Vote Count Ascending',\n    value: 'vote_count.asc'\n  },\n  {\n    label: 'Vote Count Descending',\n    value: 'vote_count.desc'\n  },\n]"
            },
            {
                "name": "STRING_REGEX_FILE_SIZE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`^([0-9])\\\\d+$`"
            },
            {
                "name": "STRING_REGEX_IMAGE_SIZE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`(SX)+([\\\\d])+(.jpg|.jpeg)`"
            },
            {
                "name": "STRING_REGEX_IMDB_ID",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`(^tt[0-9]{7,8})$`"
            },
            {
                "name": "STRING_REGEX_OMDB_BOX_OFFICE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`(\\\\$+[\\\\d,]+)`"
            },
            {
                "name": "STRING_REGEX_OMDB_RELEASE_DATE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`^(\\\\d{2})+\\\\s+([a-z]{3,})+\\\\s+(\\\\d{4})+`"
            },
            {
                "name": "STRING_REGEX_PREFIX",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`^([a-z]:)`"
            },
            {
                "name": "STRING_REGEX_TMDB_RELEASE_DATE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`([0-9]{2,4})-([0-9]{2})-([0-9]{2})`"
            },
            {
                "name": "STRING_REGEX_TMDB_RUNTIME",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`([\\\\d,]+)(\\\\s)(min)`"
            },
            {
                "name": "STRING_REGEX_YEAR_ONLY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`^([0-9]{4})$`"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  props: args,\n})"
            },
            {
                "name": "TEST_LIBRARY_MOVIES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/mock-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ILibraryMovie[]",
                "defaultValue": "[\n  {\n    tmdbId: 0,\n    imdbId: 'tt0095956',\n    title: 'Titanic',\n    year: 0,\n    directory: ['D:\\\\media server\\\\movies\\\\titanic.mp4']\n  },\n  {\n    tmdbId: 0,\n    imdbId: 'tt0133093',\n    title: 'Guardians of the Galaxy',\n    year: 0,\n    directory: ['D:\\\\media server\\\\movies\\\\guardians of the galaxy.mp4']\n  },\n  {\n    tmdbId: 680,\n    imdbId: 'tt0110912',\n    title: 'Pulp Fiction',\n    year: 1994,\n    directory: ['D:\\\\media server\\\\movies\\\\pulp fiction.mp4']\n  }\n]"
            },
            {
                "name": "TEST_OMDB_MOVIE_DETAIL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/mock-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  Title: 'WALL·E',\n  Year: '2008',\n  Rated: 'G',\n  Released: '27 Jun 2008',\n  Runtime: '98 min',\n  Genre: 'Animation, Adventure, Family, Sci-Fi',\n  Director: 'Andrew Stanton',\n  Writer:\n    'Andrew Stantoyzn (original story by), Pete Docter (original story by), Andrew Stanton (screenplay by), Jim Reardon (screenplay by)',\n  Actors: 'Ben Burtt, Elissa Knight, Jeff Garlin, Fred Willard',\n  Plot:\n    'In the distant future, a small waste-collecting robot inadvertently embarks on a space journey that will ultimately decide the fate of mankind.',\n  Language: 'English',\n  Country: 'USA',\n  Awards: 'Won 1 Oscar. Another 89 wins & 90 nominations.',\n  Poster:\n    'https://m.media-amazon.com/images/M/MV5BMjExMTg5OTU0NF5BMl5BanBnXkFtZTcwMjMxMzMzMw@@._V1_SX300.jpg',\n  Ratings: [\n    {\n      Source: 'Internet Movie Database',\n      Value: '8.4/10'\n    },\n    {\n      Source: 'Rotten Tomatoes',\n      Value: '95%'\n    },\n    {\n      Source: 'Metacritic',\n      Value: '95/100'\n    }\n  ],\n  Metascore: '95',\n  imdbRating: '8.4',\n  imdbVotes: '919,942',\n  imdbID: 'tt0910970',\n  Type: 'movie',\n  DVD: '18 Nov 2008',\n  BoxOffice: '$223,749,872',\n  Production: 'Walt Disney Pictures',\n  Website: 'http://www.wall-e.com/',\n  Response: 'True'\n}"
            },
            {
                "name": "TEST_TMDB_MOVIE_DETAIL2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/mock-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  adult: false,\n  backdrop_path: '/mMZRKb3NVo5ZeSPEIaNW9buLWQ0.jpg',\n  belongs_to_collection: null,\n  budget: 63000000,\n  genres: [\n    {\n      id: 18,\n      name: 'Drama'\n    }\n  ],\n  homepage: 'http://www.foxmovies.com/movies/fight-club',\n  id: 550,\n  imdb_id: 'tt0137523',\n  original_language: 'en',\n  original_title: 'Fight Club',\n  overview: 'A ticking-time-bomb insomniac and a slippery soap salesman channel primal male aggression into a shocking new form of therapy. Their concept catches on, with underground \\'fight clubs\\' forming in every town, until an eccentric gets in the way and ignites an out-of-control spiral toward oblivion.',\n  popularity: 36.556,\n  poster_path: '/adw6Lq9FiC9zjYEpOqfq03ituwp.jpg',\n  production_companies: [\n    {\n      id: 508,\n      logo_path: '/7PzJdsLGlR7oW4J0J5Xcd0pHGRg.png',\n      name: 'Regency Enterprises',\n      origin_country: 'US'\n    },\n    {\n      id: 711,\n      logo_path: '/tEiIH5QesdheJmDAqQwvtN60727.png',\n      name: 'Fox 2000 Pictures',\n      origin_country: 'US'\n    },\n    {\n      id: 20555,\n      logo_path: '/hD8yEGUBlHOcfHYbujp71vD8gZp.png',\n      name: 'Taurus Film',\n      origin_country: 'DE'\n    },\n    {\n      id: 54051,\n      logo_path: null,\n      name: 'Atman Entertainment',\n      origin_country: ''\n    },\n    {\n      id: 54052,\n      logo_path: null,\n      name: 'Knickerbocker Films',\n      origin_country: 'US'\n    },\n    {\n      id: 25,\n      logo_path: '/qZCc1lty5FzX30aOCVRBLzaVmcp.png',\n      name: '20th Century Fox',\n      origin_country: 'US'\n    },\n    {\n      id: 4700,\n      logo_path: '/A32wmjrs9Psf4zw0uaixF0GXfxq.png',\n      name: 'The Linson Company',\n      origin_country: ''\n    }\n  ],\n  production_countries: [\n    {\n      iso_3166_1: 'DE',\n      name: 'Germany'\n    },\n    {\n      iso_3166_1: 'US',\n      name: 'United States of America'\n    }],\n  release_date: '1999-10-15',\n  revenue: 100853753,\n  runtime: 139,\n  spoken_languages: [\n    {\n      iso_639_1: 'en',\n      name: 'English'\n    }\n  ],\n  status: 'Released',\n  tagline: 'Mischief. Mayhem. Soap.',\n  title: 'Fight Club',\n  video: false,\n  vote_average: 8.4,\n  vote_count: 17355\n}"
            },
            {
                "name": "TEST_TMDB_MOVIE_DETAILS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/mock-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  adult: false,\n  backdrop_path: '/wMgbnUVS9wbRGAdki8fqxKU1O0N.jpg',\n  belongs_to_collection: null,\n  budget: 55000000,\n  genres: [{\n    id: 35,\n    name: 'Comedy'\n  }, {\n    id: 18,\n    name: 'Drama'\n  }, {\n    id: 10749,\n    name: 'Romance'\n  }],\n  homepage: null,\n  id: 13,\n  imdb_id: 'tt0109830',\n  original_language: 'en',\n  original_title: 'Forrest Gump',\n  overview: 'A man with a low IQ has accomplished great things in his life and been present during significant historic events—in each case, far exceeding what anyone imagined he could do. But despite all he has achieved, his one true love eludes him.',\n  popularity: 23.858,\n  poster_path: '/yE5d3BUhE8hCnkMUJOo1QDoOGNz.jpg',\n  production_companies: [{\n    id: 4,\n    logo_path: '/fycMZt242LVjagMByZOLUGbCvv3.png',\n    name: 'Paramount',\n    origin_country: 'US'\n  }],\n  production_countries: [{\n    iso_3166_1: 'US',\n    name: 'United States of America'\n  }],\n  release_date: '1994-07-06',\n  revenue: 677945399,\n  runtime: 142,\n  spoken_languages: [{\n    iso_639_1: 'en',\n    name: 'English'\n  }],\n  status: 'Released',\n  tagline: `Life is like a box of chocolates...you never know what you're gonna get.`,\n  title: 'Forrest Gump',\n  video: false,\n  vote_average: 8.4,\n  vote_count: 15996\n}"
            },
            {
                "name": "TEST_TMDB_SINGLE_RESULT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/mock-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  popularity: 28.872, vote_count: 13772, video: false, poster_path: '\\/nk11pvocdb5zbFhX5oq5YiLPYMo.jpg', id: 14160, adult: false, backdrop_path: '\\/6fX7NF6IUJCTVssei7Shgl9J6LL.jpg', original_language: 'en', original_title: 'Up', genre_ids: [12, 16, 35, 10751], title: 'Up', vote_average: 7.9, overview: 'Carl Fredricksen spent his entire life dreaming of exploring the globe and experiencing life to its fullest. But at age 78, life seems to have passed him by, until a twist of fate (and a persistent 8-year old Wilderness Explorer named Russell) gives him a new lease on life.', release_date: '2009-05-28'\n}"
            },
            {
                "name": "testBaseUrl",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'https://jsonplaceholder.typicode.com/todos/1'"
            },
            {
                "name": "TMDB_API_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'a636ce7bd0c125045f4170644b4d3d25'"
            },
            {
                "name": "TMDB_BACKGROUND_SIZES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "['w300', 'w780', 'w1280', 'original']"
            },
            {
                "name": "TMDB_FULL_MOVIE_DETAILS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/mock-data-movie-details.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  \"adult\": false,\n  \"backdrop_path\": \"/x7O7oJO7BeXWvqXpLa5YoJd8ZD5.jpg\",\n  \"belongs_to_collection\": null,\n  \"budget\": 180000000,\n  \"genres\": [\n    {\n      \"id\": 16,\n      \"name\": \"Animation\"\n    },\n    {\n      \"id\": 10751,\n      \"name\": \"Family\"\n    },\n    {\n      \"id\": 878,\n      \"name\": \"Science Fiction\"\n    }\n  ],\n  \"homepage\": \"https://www.pixar.com/feature-films/walle/\",\n  \"id\": 10681,\n  \"imdb_id\": \"tt0910970\",\n  \"original_language\": \"en\",\n  \"original_title\": \"WALL·E\",\n  \"overview\": \"WALL·E is the last robot left on an Earth that has been overrun with garbage and all humans have fled to outer space. For 700 years he has continued to try and clean up the mess, but has developed some rather interesting human-like qualities. When a ship arrives with a sleek new type of robot, WALL·E thinks he's finally found a friend and stows away on the ship when it leaves.\",\n  \"popularity\": 25.606,\n  \"poster_path\": \"/hbhFnRzzg6ZDmm8YAmxBnQpQIPh.jpg\",\n  \"production_companies\": [\n    {\n      \"id\": 3,\n      \"logo_path\": \"/1TjvGVDMYsj6JBxOAkUHpPEwLf7.png\",\n      \"name\": \"Pixar\",\n      \"origin_country\": \"US\"\n    },\n    {\n      \"id\": 2,\n      \"logo_path\": \"/wdrCwmRnLFJhEoH8GSfymY85KHT.png\",\n      \"name\": \"Walt Disney Pictures\",\n      \"origin_country\": \"US\"\n    }\n  ],\n  \"production_countries\": [\n    {\n      \"iso_3166_1\": \"US\",\n      \"name\": \"United States of America\"\n    }\n  ],\n  \"release_date\": \"2008-06-22\",\n  \"revenue\": 521311860,\n  \"runtime\": 98,\n  \"spoken_languages\": [\n    {\n      \"iso_639_1\": \"en\",\n      \"name\": \"English\"\n    }\n  ],\n  \"status\": \"Released\",\n  \"tagline\": \"After 700 years of doing what he was built for, he'll discover what he was meant for.\",\n  \"title\": \"WALL·E\",\n  \"video\": false,\n  \"vote_average\": 8,\n  \"vote_count\": 11546,\n  \"videos\": {\n    \"results\": [\n      {\n        \"id\": \"533ec66cc3a3685448001c28\",\n        \"iso_639_1\": \"en\",\n        \"iso_3166_1\": \"US\",\n        \"key\": \"8-_9n5DtKOc\",\n        \"name\": \"WALL-E HD 1080p Trailer\",\n        \"site\": \"YouTube\",\n        \"size\": 720,\n        \"type\": \"Trailer\"\n      }\n    ]\n  },\n  \"images\": {\n    \"backdrops\": [],\n    \"posters\": []\n  },\n  \"credits\": {\n    \"cast\": [\n      {\n        \"cast_id\": 12,\n        \"character\": \"WALL·E / M-O (voice)\",\n        \"credit_id\": \"52fe43a29251416c75018111\",\n        \"gender\": 2,\n        \"id\": 670,\n        \"name\": \"Ben Burtt\",\n        \"order\": 0,\n        \"profile_path\": \"/nfkHcZkAIGEyJ0m2jtOKaPyqNxu.jpg\"\n      },\n      {\n        \"cast_id\": 13,\n        \"character\": \"EVE (voice)\",\n        \"credit_id\": \"52fe43a29251416c75018115\",\n        \"gender\": 0,\n        \"id\": 72754,\n        \"name\": \"Elissa Knight\",\n        \"order\": 1,\n        \"profile_path\": \"/21JKhZc6bTAoHcwSjQhZcdhhx5d.jpg\"\n      },\n      {\n        \"cast_id\": 14,\n        \"character\": \"Captain (voice)\",\n        \"credit_id\": \"52fe43a29251416c75018119\",\n        \"gender\": 2,\n        \"id\": 60074,\n        \"name\": \"Jeff Garlin\",\n        \"order\": 2,\n        \"profile_path\": \"/cBs7u7rBTvDFp5MFCnvrPeF7SI2.jpg\"\n      },\n      {\n        \"cast_id\": 21,\n        \"character\": \"Shelby Forthright, BnL CEO\",\n        \"credit_id\": \"52fe43a29251416c7501811d\",\n        \"gender\": 2,\n        \"id\": 20753,\n        \"name\": \"Fred Willard\",\n        \"order\": 3,\n        \"profile_path\": \"/j1jWdqmklfIH4hpAbw1DK0gPMX0.jpg\"\n      },\n      {\n        \"cast_id\": 22,\n        \"character\": \"John (voice)\",\n        \"credit_id\": \"53c61bc6c3a3686251001af8\",\n        \"gender\": 2,\n        \"id\": 7907,\n        \"name\": \"John Ratzenberger\",\n        \"order\": 5,\n        \"profile_path\": \"/oRtDEOuIO1yDhTz5dORBdxXuLMO.jpg\"\n      },\n      {\n        \"cast_id\": 24,\n        \"character\": \"Mary (voice)\",\n        \"credit_id\": \"5587d7c49251415aa900050f\",\n        \"gender\": 1,\n        \"id\": 11074,\n        \"name\": \"Kathy Najimy\",\n        \"order\": 6,\n        \"profile_path\": \"/eFFh5QU9ErNKls7WfyG8VHEc2MY.jpg\"\n      },\n      {\n        \"cast_id\": 88,\n        \"character\": \"Ship's Computer (voice)\",\n        \"credit_id\": \"59bf4a4bc3a368307500cb35\",\n        \"gender\": 1,\n        \"id\": 10205,\n        \"name\": \"Sigourney Weaver\",\n        \"order\": 7,\n        \"profile_path\": \"/ukaLqyGZlMUDcvrhj6jkV16Zgsx.jpg\"\n      },\n      {\n        \"cast_id\": 40,\n        \"character\": \"Steward Bots (voice)\",\n        \"credit_id\": \"561be2ad9251415a67001bd1\",\n        \"gender\": 2,\n        \"id\": 59357,\n        \"name\": \"Teddy Newton\",\n        \"order\": 8,\n        \"profile_path\": \"/mftwTs5lza95kOyAZsrfNaqSFtv.jpg\"\n      },\n      {\n        \"cast_id\": 41,\n        \"character\": \"Axiom Passenger (voice)\",\n        \"credit_id\": \"561be2c59251415a640016d0\",\n        \"gender\": 2,\n        \"id\": 78317,\n        \"name\": \"Bob Bergen\",\n        \"order\": 9,\n        \"profile_path\": \"/nWFte3YPKGKEmj7n9embVttrxJ9.jpg\"\n      },\n      {\n        \"cast_id\": 42,\n        \"character\": \"Axiom Passenger (voice)\",\n        \"credit_id\": \"561be2d5c3a368225e0016fe\",\n        \"gender\": 0,\n        \"id\": 167295,\n        \"name\": \"John Cygan\",\n        \"order\": 10,\n        \"profile_path\": \"/peq0EjfKWVDQ8Gr83v0UO1wuFn6.jpg\"\n      },\n      {\n        \"cast_id\": 43,\n        \"character\": \"Axiom Passenger (voice)\",\n        \"credit_id\": \"561be2e49251415a67001bdc\",\n        \"gender\": 2,\n        \"id\": 12890,\n        \"name\": \"Pete Docter\",\n        \"order\": 11,\n        \"profile_path\": \"/r6ngPgnReA3RHmKjmSoVsc6Awjp.jpg\"\n      },\n      {\n        \"cast_id\": 44,\n        \"character\": \"Axiom Passenger (voice)\",\n        \"credit_id\": \"561be2ff9251415a5c001949\",\n        \"gender\": 2,\n        \"id\": 86006,\n        \"name\": \"Paul Eiding\",\n        \"order\": 12,\n        \"profile_path\": \"/73yCY9QBAKqFilmVLXATsrIzL2Q.jpg\"\n      },\n      {\n        \"cast_id\": 45,\n        \"character\": \"Axiom Passenger (voice)\",\n        \"credit_id\": \"561be31bc3a368225b0014cc\",\n        \"gender\": 0,\n        \"id\": 84494,\n        \"name\": \"Donald Fullilove\",\n        \"order\": 13,\n        \"profile_path\": \"/dInPIKh7AfGLR1LT3aZnL8jPKwQ.jpg\"\n      },\n      {\n        \"cast_id\": 25,\n        \"character\": \"(voice)\",\n        \"credit_id\": \"5587d7dc9251411e8d0063cc\",\n        \"gender\": 1,\n        \"id\": 117081,\n        \"name\": \"Teresa Ganzel\",\n        \"order\": 14,\n        \"profile_path\": \"/4cIwealxv1bizPJks34Gfk7okBF.jpg\"\n      },\n      {\n        \"cast_id\": 46,\n        \"character\": \"Axiom Passenger (voice)\",\n        \"credit_id\": \"561be32f9251415a5c001953\",\n        \"gender\": 2,\n        \"id\": 84495,\n        \"name\": \"Jess Harnell\",\n        \"order\": 15,\n        \"profile_path\": \"/zQ2zg7PL3ut4JhfXMKSRV4FMnxR.jpg\"\n      },\n      {\n        \"cast_id\": 48,\n        \"character\": \"Axiom Passenger (voice)\",\n        \"credit_id\": \"561be35e9251415a6200172d\",\n        \"gender\": 1,\n        \"id\": 84493,\n        \"name\": \"Mickie McGowan\",\n        \"order\": 17,\n        \"profile_path\": \"/k7TjJBfINsg8vLQxJwos6XObAD6.jpg\"\n      },\n      {\n        \"cast_id\": 26,\n        \"character\": \"Axiom Passenger (voice)\",\n        \"credit_id\": \"5587d7f0c3a368274c006b36\",\n        \"gender\": 1,\n        \"id\": 35159,\n        \"name\": \"Laraine Newman\",\n        \"order\": 18,\n        \"profile_path\": \"/ApYftBOqDMBnVColOQwXIodOt5s.jpg\"\n      },\n      {\n        \"cast_id\": 49,\n        \"character\": \"Axiom Passenger (voice)\",\n        \"credit_id\": \"561be379c3a3682258001976\",\n        \"gender\": 1,\n        \"id\": 24358,\n        \"name\": \"Lori Alan\",\n        \"order\": 19,\n        \"profile_path\": \"/mNfJWzuaKgkIaK7CuirXOMosd2h.jpg\"\n      },\n      {\n        \"cast_id\": 52,\n        \"character\": \"Forthright's Advisor (voice)\",\n        \"credit_id\": \"561be3d29251415a67001bfe\",\n        \"gender\": 2,\n        \"id\": 7882,\n        \"name\": \"Jeff Pidgeon\",\n        \"order\": 20,\n        \"profile_path\": \"/yLddkg5HcgbJg00cS13GVBnP0HY.jpg\"\n      },\n      {\n        \"cast_id\": 51,\n        \"character\": \"Axiom Passenger (voice)\",\n        \"credit_id\": \"561be3bcc3a368225b0014df\",\n        \"gender\": 2,\n        \"id\": 157626,\n        \"name\": \"Jan Rabson\",\n        \"order\": 21,\n        \"profile_path\": \"/6mfE6PFzOlKb2Qf4dURbKzLrTTC.jpg\"\n      },\n      {\n        \"cast_id\": 53,\n        \"character\": \"PR-T (voice)\",\n        \"credit_id\": \"561be3f4c3a3682264001964\",\n        \"gender\": 1,\n        \"id\": 225986,\n        \"name\": \"Lori Richardson\",\n        \"order\": 22,\n        \"profile_path\": \"/o0I2nhMHyN0QxoolRqs08yhZozu.jpg\"\n      },\n      {\n        \"cast_id\": 54,\n        \"character\": \"Lifeguard Bot (voice)\",\n        \"credit_id\": \"561be40b9251415a6b00179b\",\n        \"gender\": 2,\n        \"id\": 7,\n        \"name\": \"Andrew Stanton\",\n        \"order\": 23,\n        \"profile_path\": \"/gasNitCwepbqNcYBmDHpsCgZH0I.jpg\"\n      },\n      {\n        \"cast_id\": 55,\n        \"character\": \"Billboard Announcer (voice)\",\n        \"credit_id\": \"561be439c3a3682251001a2d\",\n        \"gender\": 0,\n        \"id\": 86007,\n        \"name\": \"Jim Ward\",\n        \"order\": 24,\n        \"profile_path\": \"/xFQCDJCqDFnmwmIz1l9x5wNzJ2u.jpg\"\n      },\n      {\n        \"cast_id\": 50,\n        \"character\": \"Axiom Passenger (voice)\",\n        \"credit_id\": \"561be3939251415a5c001963\",\n        \"gender\": 0,\n        \"id\": 1443485,\n        \"name\": \"Colette Whitaker\",\n        \"order\": 25,\n        \"profile_path\": \"/4bA2MMAy8MpHiqKMxMOuwdKHzOO.jpg\"\n      },\n      {\n        \"cast_id\": 56,\n        \"character\": \"Hoverchair Mother (uncredited)\",\n        \"credit_id\": \"561be4669251415a6b0017ab\",\n        \"gender\": 0,\n        \"id\": 99639,\n        \"name\": \"Kim Kopf\",\n        \"order\": 26,\n        \"profile_path\": \"/wlxLBDfyNxBgW5o9jEVEJq4wZjk.jpg\"\n      },\n      {\n        \"cast_id\": 57,\n        \"character\": \"BURN-E (voice) (uncredited)\",\n        \"credit_id\": \"561be4869251415a6b0017b0\",\n        \"gender\": 0,\n        \"id\": 7929,\n        \"name\": \"Angus MacLane\",\n        \"order\": 27,\n        \"profile_path\": \"/7U1mEvzHGNJiC07EOhKIKSl3Qiy.jpg\"\n      },\n      {\n        \"cast_id\": 89,\n        \"character\": \"Pool Mother (uncredited)\",\n        \"credit_id\": \"59d0ab8392514113eb016547\",\n        \"gender\": 1,\n        \"id\": 1580169,\n        \"name\": \"Niki McElroy\",\n        \"order\": 28,\n        \"profile_path\": \"/1oIOq6B6LAlUgiiIBkEEyDl7TO.jpg\"\n      },\n      {\n        \"cast_id\": 58,\n        \"character\": \"Blond Boy in Commercial (uncredited)\",\n        \"credit_id\": \"561be4d49251415a64001719\",\n        \"gender\": 2,\n        \"id\": 1174938,\n        \"name\": \"Garrett Palmer\",\n        \"order\": 29,\n        \"profile_path\": \"/mSQQ7anFefpGMCfD7K1wjQqg1xL.jpg\"\n      },\n      {\n        \"cast_id\": 259,\n        \"character\": \"Axiom Passenger #5 (voice)\",\n        \"credit_id\": \"5abfc3f4c3a368443c031455\",\n        \"gender\": 1,\n        \"id\": 214701,\n        \"name\": \"Sherry Lynn\",\n        \"order\": 31,\n        \"profile_path\": \"/kQDSC2z7sb6S5HcpOH6cmeJokKE.jpg\"\n      }\n    ],\n    \"crew\": [\n      {\n        \"credit_id\": \"52fe43a29251416c75018101\",\n        \"department\": \"Writing\",\n        \"gender\": 2,\n        \"id\": 7,\n        \"job\": \"Screenplay\",\n        \"name\": \"Andrew Stanton\",\n        \"profile_path\": \"/gasNitCwepbqNcYBmDHpsCgZH0I.jpg\"\n      },\n      {\n        \"credit_id\": \"52fe43a29251416c750180d1\",\n        \"department\": \"Directing\",\n        \"gender\": 2,\n        \"id\": 7,\n        \"job\": \"Director\",\n        \"name\": \"Andrew Stanton\",\n        \"profile_path\": \"/gasNitCwepbqNcYBmDHpsCgZH0I.jpg\"\n      },\n      {\n        \"credit_id\": \"52fe43a29251416c750180ef\",\n        \"department\": \"Writing\",\n        \"gender\": 2,\n        \"id\": 7,\n        \"job\": \"Original Story\",\n        \"name\": \"Andrew Stanton\",\n        \"profile_path\": \"/gasNitCwepbqNcYBmDHpsCgZH0I.jpg\"\n      },\n      {\n        \"credit_id\": \"561a9a2ac3a36851010012ed\",\n        \"department\": \"Production\",\n        \"gender\": 2,\n        \"id\": 7879,\n        \"job\": \"Executive Producer\",\n        \"name\": \"John Lasseter\",\n        \"profile_path\": \"/7EdqiNbr4FRjIhKHyPPdFfEEEFG.jpg\"\n      },\n      {\n        \"credit_id\": \"52fe43a29251416c750180d7\",\n        \"department\": \"Sound\",\n        \"gender\": 2,\n        \"id\": 153,\n        \"job\": \"Original Music Composer\",\n        \"name\": \"Thomas Newman\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5aa9c3e90e0a2664ff0035f9\",\n        \"department\": \"Sound\",\n        \"gender\": 2,\n        \"id\": 670,\n        \"job\": \"Supervising Sound Editor\",\n        \"name\": \"Ben Burtt\",\n        \"profile_path\": \"/nfkHcZkAIGEyJ0m2jtOKaPyqNxu.jpg\"\n      },\n      {\n        \"credit_id\": \"5aa9c3e2925141056d00317c\",\n        \"department\": \"Sound\",\n        \"gender\": 2,\n        \"id\": 670,\n        \"job\": \"Sound Re-Recording Mixer\",\n        \"name\": \"Ben Burtt\",\n        \"profile_path\": \"/nfkHcZkAIGEyJ0m2jtOKaPyqNxu.jpg\"\n      },\n      {\n        \"credit_id\": \"561a9bc7925141775f002a1a\",\n        \"department\": \"Crew\",\n        \"gender\": 2,\n        \"id\": 7467,\n        \"job\": \"Thanks\",\n        \"name\": \"David Fincher\",\n        \"profile_path\": \"/dcBHejOsKvzVZVozWJAPzYthb8X.jpg\"\n      },\n      {\n        \"credit_id\": \"561a9aa69251415747001075\",\n        \"department\": \"Art\",\n        \"gender\": 2,\n        \"id\": 7883,\n        \"job\": \"Production Design\",\n        \"name\": \"Ralph Eggleston\",\n        \"profile_path\": \"/uUfcGKDsKO1aROMpXRs67Hn6RvR.jpg\"\n      },\n      {\n        \"credit_id\": \"52fe43a29251416c750180e9\",\n        \"department\": \"Production\",\n        \"gender\": 0,\n        \"id\": 7887,\n        \"job\": \"Executive Producer\",\n        \"name\": \"Thomas Porter\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbd630e0a264a5702ce04\",\n        \"department\": \"Art\",\n        \"gender\": 0,\n        \"id\": 7898,\n        \"job\": \"Set Dresser\",\n        \"name\": \"Sophie Vincelette\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc379925141602702d4b0\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 1,\n        \"id\": 7944,\n        \"job\": \"Shading\",\n        \"name\": \"Laura Phillips\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"572f66909251413de300064c\",\n        \"department\": \"Art\",\n        \"gender\": 0,\n        \"id\": 7951,\n        \"job\": \"Art Direction\",\n        \"name\": \"Jason Deamer\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc366c3a368444e03108d\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 7954,\n        \"job\": \"Modeling\",\n        \"name\": \"Gary Schultz\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"561a9b079251410c430006c7\",\n        \"department\": \"Production\",\n        \"gender\": 0,\n        \"id\": 7972,\n        \"job\": \"Production Manager\",\n        \"name\": \"Andrea Warren\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5750cc86c3a36801a30004bd\",\n        \"department\": \"Costume & Make-Up\",\n        \"gender\": 0,\n        \"id\": 7980,\n        \"job\": \"Set Dressing Artist\",\n        \"name\": \"Derek Williams\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"52fe43a29251416c7501810d\",\n        \"department\": \"Camera\",\n        \"gender\": 0,\n        \"id\": 7988,\n        \"job\": \"Director of Photography\",\n        \"name\": \"Jeremy Lasky\",\n        \"profile_path\": \"/6jue4yNU3XazP4mTMep7fCuK9VR.jpg\"\n      },\n      {\n        \"credit_id\": \"5723fc6b92514122a90013c6\",\n        \"department\": \"Art\",\n        \"gender\": 1,\n        \"id\": 8003,\n        \"job\": \"Art Direction\",\n        \"name\": \"Ellen Moon Lee\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"572bd597c3a368012c0002bc\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 8012,\n        \"job\": \"Supervising Animator\",\n        \"name\": \"Alan Barillaro\",\n        \"profile_path\": \"/blKbtsPf9yWoiA1cClJ5dGscqls.jpg\"\n      },\n      {\n        \"credit_id\": \"5abfc0ff0e0a264a5a02eefc\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 8026,\n        \"job\": \"Animation\",\n        \"name\": \"Brett Coderre\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc13b925141601502c667\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 8030,\n        \"job\": \"Animation\",\n        \"name\": \"Nancy Kato\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc181925141601502c6a9\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 8040,\n        \"job\": \"Animation\",\n        \"name\": \"Victor Navone\",\n        \"profile_path\": \"/uThaeRVujv9wj7LjL9jTs4jpGn7.jpg\"\n      },\n      {\n        \"credit_id\": \"5abfc1440e0a264a60031a24\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 8043,\n        \"job\": \"Animation\",\n        \"name\": \"Patty Kihm Stevenson\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc25bc3a368443c0311f7\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 8056,\n        \"job\": \"Animation\",\n        \"name\": \"Kureha Yokoo\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc2630e0a264a5a02f116\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 8057,\n        \"job\": \"Animation\",\n        \"name\": \"Ron Zorman\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc179925141601b02dbdf\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 8058,\n        \"job\": \"Animation\",\n        \"name\": \"Paul Mendoza\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbe15925141601e02b578\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 8071,\n        \"job\": \"Second Film Editor\",\n        \"name\": \"Axel Geddes\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"576d696592514141050018e2\",\n        \"department\": \"Sound\",\n        \"gender\": 0,\n        \"id\": 8078,\n        \"job\": \"Sound Designer\",\n        \"name\": \"E.J. Holowicki\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"572bd2c5c3a3687ff700028c\",\n        \"department\": \"Editing\",\n        \"gender\": 0,\n        \"id\": 8080,\n        \"job\": \"Assistant Editor\",\n        \"name\": \"Renee Steen\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"572cc94492514165ec00041d\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 8089,\n        \"job\": \"Modeling\",\n        \"name\": \"Jason Bickerstaff\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbe3e925141602102bcb6\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 8097,\n        \"job\": \"Software Engineer\",\n        \"name\": \"Ben Jordan\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"57769d0192514174d20019ca\",\n        \"department\": \"Lighting\",\n        \"gender\": 2,\n        \"id\": 8109,\n        \"job\": \"Master Lighting Artist\",\n        \"name\": \"Tim Best\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbd960e0a264a6302f694\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 8150,\n        \"job\": \"Information Systems Manager\",\n        \"name\": \"Erik Forman\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"572295c5c3a3682d3f000886\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 8153,\n        \"job\": \"Post Production Supervisor\",\n        \"name\": \"Paul Cichocki\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"573dee489251410c0e000066\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 8155,\n        \"job\": \"Projection\",\n        \"name\": \"John Hazelton\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc02dc3a368443802fe75\",\n        \"department\": \"Sound\",\n        \"gender\": 0,\n        \"id\": 8157,\n        \"job\": \"ADR & Dubbing\",\n        \"name\": \"Doc Kane\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc04a0e0a264a4e02f34a\",\n        \"department\": \"Sound\",\n        \"gender\": 0,\n        \"id\": 8160,\n        \"job\": \"Foley\",\n        \"name\": \"Dennie Thorpe\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc053c3a3684448031115\",\n        \"department\": \"Sound\",\n        \"gender\": 0,\n        \"id\": 8163,\n        \"job\": \"Foley\",\n        \"name\": \"Jana Vance\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc05a0e0a264a5d032967\",\n        \"department\": \"Sound\",\n        \"gender\": 2,\n        \"id\": 8166,\n        \"job\": \"Foley Editor\",\n        \"name\": \"Juan Peralta\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"561a9c3b9251410c430006ec\",\n        \"department\": \"Crew\",\n        \"gender\": 2,\n        \"id\": 10688,\n        \"job\": \"Thanks\",\n        \"name\": \"Harris Savides\",\n        \"profile_path\": \"/7B7o49bFyrfoiUvEujqqXNW8avK.jpg\"\n      },\n      {\n        \"credit_id\": \"561a9ad6c3a3685bfe0014df\",\n        \"department\": \"Costume & Make-Up\",\n        \"gender\": 0,\n        \"id\": 12612,\n        \"job\": \"Makeup Artist\",\n        \"name\": \"Karen Bradley\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"573deab492514172c60002ac\",\n        \"department\": \"Costume & Make-Up\",\n        \"gender\": 0,\n        \"id\": 12613,\n        \"job\": \"Makeup Artist\",\n        \"name\": \"Gretchen Davis\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"578fc194c3a368671a001463\",\n        \"department\": \"Editing\",\n        \"gender\": 0,\n        \"id\": 13223,\n        \"job\": \"Color Timer\",\n        \"name\": \"Jim Passon\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"52fe43a29251416c750180f5\",\n        \"department\": \"Writing\",\n        \"gender\": 2,\n        \"id\": 12890,\n        \"job\": \"Original Story\",\n        \"name\": \"Pete Docter\",\n        \"profile_path\": \"/r6ngPgnReA3RHmKjmSoVsc6Awjp.jpg\"\n      },\n      {\n        \"credit_id\": \"561a9be8c3a368630d000756\",\n        \"department\": \"Crew\",\n        \"gender\": 2,\n        \"id\": 12897,\n        \"job\": \"Thanks\",\n        \"name\": \"Steve Jobs\",\n        \"profile_path\": \"/mOMP3SwD5qWQSR0ldCIByd3guTV.jpg\"\n      },\n      {\n        \"credit_id\": \"5abfc09e0e0a264a5d0329c0\",\n        \"department\": \"Sound\",\n        \"gender\": 1,\n        \"id\": 15893,\n        \"job\": \"Sound Effects Editor\",\n        \"name\": \"Teresa Eckton\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"572bdf8a925141388e000457\",\n        \"department\": \"Sound\",\n        \"gender\": 2,\n        \"id\": 15894,\n        \"job\": \"Sound Re-Recording Mixer\",\n        \"name\": \"Tom Myers\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbf4c925141601802c44b\",\n        \"department\": \"Editing\",\n        \"gender\": 2,\n        \"id\": 28161,\n        \"job\": \"Associate Editor\",\n        \"name\": \"Nicholas C. Smith\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"561a9a7fc3a3686c41002488\",\n        \"department\": \"Production\",\n        \"gender\": 2,\n        \"id\": 57673,\n        \"job\": \"Casting\",\n        \"name\": \"Kevin Reher\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"571e47989251416f3600017a\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 59362,\n        \"job\": \"Visual Effects\",\n        \"name\": \"Andrew Jimenez\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"52fe43a29251416c75018107\",\n        \"department\": \"Editing\",\n        \"gender\": 2,\n        \"id\": 59363,\n        \"job\": \"Editor\",\n        \"name\": \"Stephen Schaffer\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc08ec3a3684448031171\",\n        \"department\": \"Sound\",\n        \"gender\": 2,\n        \"id\": 66941,\n        \"job\": \"Orchestrator\",\n        \"name\": \"J.A.C. Redford\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"52fe43a29251416c750180dd\",\n        \"department\": \"Production\",\n        \"gender\": 0,\n        \"id\": 72752,\n        \"job\": \"Producer\",\n        \"name\": \"Jim Morris\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"52fe43a29251416c750180e3\",\n        \"department\": \"Production\",\n        \"gender\": 0,\n        \"id\": 72753,\n        \"job\": \"Producer\",\n        \"name\": \"Lindsey Collins\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"52fe43a29251416c750180fb\",\n        \"department\": \"Writing\",\n        \"gender\": 0,\n        \"id\": 15020,\n        \"job\": \"Screenplay\",\n        \"name\": \"Jim Reardon\",\n        \"profile_path\": \"/s5dbDBNIHZoYp2SP9SEXobRjqh3.jpg\"\n      },\n      {\n        \"credit_id\": \"5abfc07e0e0a264a4e02f387\",\n        \"department\": \"Sound\",\n        \"gender\": 0,\n        \"id\": 68701,\n        \"job\": \"Orchestrator\",\n        \"name\": \"Carl Johnson\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc0bb0e0a264a5a02ee93\",\n        \"department\": \"Sound\",\n        \"gender\": 2,\n        \"id\": 71536,\n        \"job\": \"Supervising Sound Editor\",\n        \"name\": \"Matthew Wood\",\n        \"profile_path\": \"/oB9wVbEIg8fjY3ulDKjKsGn2A55.jpg\"\n      },\n      {\n        \"credit_id\": \"5772a4f8c3a36846ae000296\",\n        \"department\": \"Directing\",\n        \"gender\": 0,\n        \"id\": 72972,\n        \"job\": \"Layout\",\n        \"name\": \"Andrew Cadelago\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5772a3079251415cb60001c0\",\n        \"department\": \"Production\",\n        \"gender\": 1,\n        \"id\": 84493,\n        \"job\": \"Casting\",\n        \"name\": \"Mickie McGowan\",\n        \"profile_path\": \"/k7TjJBfINsg8vLQxJwos6XObAD6.jpg\"\n      },\n      {\n        \"credit_id\": \"5abfbaae925141601502bda2\",\n        \"department\": \"Camera\",\n        \"gender\": 2,\n        \"id\": 93044,\n        \"job\": \"Director of Photography\",\n        \"name\": \"Martin Rosenberg\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5ba1826a925141108e0007ed\",\n        \"department\": \"Sound\",\n        \"gender\": 0,\n        \"id\": 89426,\n        \"job\": \"Sound Mix Technician\",\n        \"name\": \"Tony Sereno\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"57229c80c3a36875ed000443\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 2,\n        \"id\": 107704,\n        \"job\": \"Animation\",\n        \"name\": \"Rodrigo Blaas\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbf390e0a264a6302f952\",\n        \"department\": \"Editing\",\n        \"gender\": 0,\n        \"id\": 138073,\n        \"job\": \"Assistant Editor\",\n        \"name\": \"Tessa Swigart\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"561a9bfd9251412c9c001204\",\n        \"department\": \"Crew\",\n        \"gender\": 1,\n        \"id\": 144960,\n        \"job\": \"Thanks\",\n        \"name\": \"Leslie Iwerks\",\n        \"profile_path\": \"/apevLP04EWMz0XUAr0iJSq5s6zf.jpg\"\n      },\n      {\n        \"credit_id\": \"5abfb692c3a368443f02bafd\",\n        \"department\": \"Crew\",\n        \"gender\": 2,\n        \"id\": 225979,\n        \"job\": \"In Memory Of\",\n        \"name\": \"Justin Wright\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5ba27d87c3a3687440004330\",\n        \"department\": \"Writing\",\n        \"gender\": 2,\n        \"id\": 225982,\n        \"job\": \"Story Artist\",\n        \"name\": \"Derek Thompson\",\n        \"profile_path\": \"/6KNmkw6tTWYW9FNws7wW9XafCqb.jpg\"\n      },\n      {\n        \"credit_id\": \"5abfbd8f0e0a264a6302f679\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 953331,\n        \"job\": \"Executive Music Producer\",\n        \"name\": \"Chris Montan\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc1bb925141602a02d227\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 2,\n        \"id\": 954958,\n        \"job\": \"Animation\",\n        \"name\": \"Bob Scott\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"561a9a6dc3a3685bfe0014ca\",\n        \"department\": \"Production\",\n        \"gender\": 1,\n        \"id\": 963497,\n        \"job\": \"Casting\",\n        \"name\": \"Natalie Lyon\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5ba57c560e0a262fa10008a9\",\n        \"department\": \"Art\",\n        \"gender\": 2,\n        \"id\": 1219041,\n        \"job\": \"Storyboard Artist\",\n        \"name\": \"Kevin O'Brien\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbb270e0a264a5d031f9e\",\n        \"department\": \"Directing\",\n        \"gender\": 1,\n        \"id\": 1282240,\n        \"job\": \"Script Coordinator\",\n        \"name\": \"Kyle Ranson-Walsh\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbc11925141602102b99d\",\n        \"department\": \"Lighting\",\n        \"gender\": 1,\n        \"id\": 1282240,\n        \"job\": \"Lighting Coordinator\",\n        \"name\": \"Kyle Ranson-Walsh\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc000c3a3684435027953\",\n        \"department\": \"Production\",\n        \"gender\": 0,\n        \"id\": 1282243,\n        \"job\": \"Production Coordinator\",\n        \"name\": \"Zoe Boxer\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfb738c3a368443802f1f7\",\n        \"department\": \"Art\",\n        \"gender\": 0,\n        \"id\": 1290450,\n        \"job\": \"Art Direction\",\n        \"name\": \"Robert Kondo\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"573276fbc3a3686953000566\",\n        \"department\": \"Sound\",\n        \"gender\": 0,\n        \"id\": 1291315,\n        \"job\": \"Music Supervisor\",\n        \"name\": \"Tom MacDougall\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5724df219251411e9f0000b0\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 2,\n        \"id\": 1299484,\n        \"job\": \"Animation\",\n        \"name\": \"Bob Whitehill\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5772a2379251415cb10001ad\",\n        \"department\": \"Production\",\n        \"gender\": 0,\n        \"id\": 1319751,\n        \"job\": \"Line Producer\",\n        \"name\": \"Gillian Libbert\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc3cc0e0a264a6302fff8\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 1335873,\n        \"job\": \"Visual Development\",\n        \"name\": \"George Hull\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"572bd086c3a3687ffd000224\",\n        \"department\": \"Sound\",\n        \"gender\": 2,\n        \"id\": 1368825,\n        \"job\": \"Sound Mixer\",\n        \"name\": \"Larry Hopkins\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbd23c3a3684448030ca5\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 1368872,\n        \"job\": \"VFX Supervisor\",\n        \"name\": \"Richard E. Hollander\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc0ae925141601502c59d\",\n        \"department\": \"Sound\",\n        \"gender\": 0,\n        \"id\": 1378828,\n        \"job\": \"Sound Re-Recording Mixer\",\n        \"name\": \"Michael Semanick\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbce00e0a264a5a02e940\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 2,\n        \"id\": 1378829,\n        \"job\": \"VFX Supervisor\",\n        \"name\": \"Edward Hirsh\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbd2fc3a368443c030a59\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 1,\n        \"id\": 1378830,\n        \"job\": \"Visual Effects Producer\",\n        \"name\": \"Jeanmarie King\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc0f60e0a264a4e02f4c1\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 2,\n        \"id\": 1397397,\n        \"job\": \"Animation\",\n        \"name\": \"Louis Clichy\",\n        \"profile_path\": \"/jc6e7PVJVIYvDft7D37I95kxZVs.jpg\"\n      },\n      {\n        \"credit_id\": \"5abfbe65c3a36844350277ab\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 1406885,\n        \"job\": \"Supervising Animator\",\n        \"name\": \"Steven Clay Hunter\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"57229afb9251417647000406\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 1413096,\n        \"job\": \"Animation\",\n        \"name\": \"Simon Allen\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"561a9c85925141775f002a4a\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 1415500,\n        \"job\": \"Thanks\",\n        \"name\": \"Kim Marks\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc0a7925141602702d143\",\n        \"department\": \"Sound\",\n        \"gender\": 0,\n        \"id\": 1422411,\n        \"job\": \"Sound Effects Editor\",\n        \"name\": \"Al Nelson\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"576d72d2925141410e001cb8\",\n        \"department\": \"Editing\",\n        \"gender\": 0,\n        \"id\": 1435597,\n        \"job\": \"Assistant Editor\",\n        \"name\": \"Kevin Rose-Williams\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc3bf925141602402df15\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 1451236,\n        \"job\": \"Visual Development\",\n        \"name\": \"Bruce Zick\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5772a65a9251415cc20002e9\",\n        \"department\": \"Camera\",\n        \"gender\": 2,\n        \"id\": 1451703,\n        \"job\": \"Camera Operator\",\n        \"name\": \"Mark Dinicola\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbd6a925141602a02cc38\",\n        \"department\": \"Art\",\n        \"gender\": 0,\n        \"id\": 1458006,\n        \"job\": \"Title Designer\",\n        \"name\": \"Susan Bradley\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"572b7efec3a368480d00300e\",\n        \"department\": \"Editing\",\n        \"gender\": 2,\n        \"id\": 1460426,\n        \"job\": \"Editorial Manager\",\n        \"name\": \"Doug Nichols\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc027c3a368445502ff47\",\n        \"department\": \"Sound\",\n        \"gender\": 0,\n        \"id\": 1461369,\n        \"job\": \"ADR & Dubbing\",\n        \"name\": \"Vince Caro\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"572b80eac3a36855a6001114\",\n        \"department\": \"Art\",\n        \"gender\": 0,\n        \"id\": 1463239,\n        \"job\": \"Set Designer\",\n        \"name\": \"Nelson 'Rey' Bohol\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbf12c3a368443c030daa\",\n        \"department\": \"Directing\",\n        \"gender\": 0,\n        \"id\": 1472873,\n        \"job\": \"Assistant Director\",\n        \"name\": \"Janette Nielsen\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"572f69349251412c8900460f\",\n        \"department\": \"Sound\",\n        \"gender\": 0,\n        \"id\": 1484178,\n        \"job\": \"Sound Effects Editor\",\n        \"name\": \"Dustin Cawood\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc11a0e0a264a4e02f4e8\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 1498226,\n        \"job\": \"Animation\",\n        \"name\": \"Patrick Delage\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbf2f0e0a264a5a02ec87\",\n        \"department\": \"Editing\",\n        \"gender\": 0,\n        \"id\": 1516156,\n        \"job\": \"Additional Editing\",\n        \"name\": \"Kevin Nolting\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"561a9ab9c3a3685bfe0014d3\",\n        \"department\": \"Art\",\n        \"gender\": 0,\n        \"id\": 1516157,\n        \"job\": \"Art Direction\",\n        \"name\": \"Bert Berry\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbad70e0a264a60031086\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 1536551,\n        \"job\": \"Visual Effects Editor\",\n        \"name\": \"Greg Hyman\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc087c3a368444402fbf6\",\n        \"department\": \"Sound\",\n        \"gender\": 2,\n        \"id\": 1549209,\n        \"job\": \"Orchestrator\",\n        \"name\": \"Thomas Pasatieri\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"571f9d4bc3a368338c003d43\",\n        \"department\": \"Editing\",\n        \"gender\": 0,\n        \"id\": 1552873,\n        \"job\": \"Color Timer\",\n        \"name\": \"Terry Claborn\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc035c3a368444e030c4d\",\n        \"department\": \"Sound\",\n        \"gender\": 0,\n        \"id\": 1556632,\n        \"job\": \"ADR Editor\",\n        \"name\": \"Steve Slanec\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbb6c0e0a264a5d032099\",\n        \"department\": \"Editing\",\n        \"gender\": 0,\n        \"id\": 1556647,\n        \"job\": \"Editorial Manager\",\n        \"name\": \"Noelle P. Case\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbc43c3a368445502f83f\",\n        \"department\": \"Sound\",\n        \"gender\": 2,\n        \"id\": 1558702,\n        \"job\": \"Scoring Mixer\",\n        \"name\": \"Thomas Vicari\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc0420e0a264a5702d48b\",\n        \"department\": \"Sound\",\n        \"gender\": 0,\n        \"id\": 1571058,\n        \"job\": \"Foley\",\n        \"name\": \"Frank Rinella\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbe49925141602402d831\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 1591573,\n        \"job\": \"Software Engineer\",\n        \"name\": \"Ryan Kautzman\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbf54c3a368443f02c723\",\n        \"department\": \"Editing\",\n        \"gender\": 0,\n        \"id\": 1609033,\n        \"job\": \"Editorial Manager\",\n        \"name\": \"Colin Bohrer\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc171925141601b02dbdc\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 2,\n        \"id\": 1609044,\n        \"job\": \"Animation\",\n        \"name\": \"Michal Makarewicz\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc3b7c3a36844440300ac\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 1681178,\n        \"job\": \"VFX Artist\",\n        \"name\": \"Mach Tony Kobayashi\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbfefc3a368445502fef9\",\n        \"department\": \"Lighting\",\n        \"gender\": 0,\n        \"id\": 1694608,\n        \"job\": \"Master Lighting Artist\",\n        \"name\": \"Luke Martorelli\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbff7c3a368443502794a\",\n        \"department\": \"Production\",\n        \"gender\": 0,\n        \"id\": 1703199,\n        \"job\": \"Production Accountant\",\n        \"name\": \"Marc Sondheimer\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc0d80e0a264a5a02eeb8\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 1711836,\n        \"job\": \"Animation\",\n        \"name\": \"Shaun Chacko\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbd7d0e0a264a5a02ea3c\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 1719067,\n        \"job\": \"Craft Service\",\n        \"name\": \"Luigi Passalacqua\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbe6d925141602402d865\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 1719078,\n        \"job\": \"Supervising Technical Director\",\n        \"name\": \"Nigel Hardwidge\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbeea0e0a264a5402f911\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 1719084,\n        \"job\": \"Systems Administrators & Support\",\n        \"name\": \"David Sotnick\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbfdf925141601502c49e\",\n        \"department\": \"Lighting\",\n        \"gender\": 0,\n        \"id\": 1719088,\n        \"job\": \"Master Lighting Artist\",\n        \"name\": \"Lloyd Bernberg\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc01dc3a368443802fe3b\",\n        \"department\": \"Production\",\n        \"gender\": 0,\n        \"id\": 1719096,\n        \"job\": \"Production Manager\",\n        \"name\": \"Joshua Hollander\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc2a50e0a264a5402fdd3\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 1719101,\n        \"job\": \"Modeling\",\n        \"name\": \"Brian Christian\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbc3ac3a368443f02c2f2\",\n        \"department\": \"Production\",\n        \"gender\": 0,\n        \"id\": 1741454,\n        \"job\": \"Unit Manager\",\n        \"name\": \"Richmond Horine\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbd5bc3a368443802fa39\",\n        \"department\": \"Art\",\n        \"gender\": 0,\n        \"id\": 1742707,\n        \"job\": \"Set Designer\",\n        \"name\": \"Noah Klocek\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbda6c3a3684448030d3c\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 1742757,\n        \"job\": \"Post Production Assistant\",\n        \"name\": \"Freesia Pearson\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc075c3a368443c030fae\",\n        \"department\": \"Sound\",\n        \"gender\": 0,\n        \"id\": 1762004,\n        \"job\": \"Musician\",\n        \"name\": \"Kevin Connolly\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc110c3a3684448031216\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 1777871,\n        \"job\": \"Animation\",\n        \"name\": \"Don Crum\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbcca925141601802c070\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 1777872,\n        \"job\": \"Animation\",\n        \"name\": \"Steve Mason\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc1fa925141602702d2ec\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 1777874,\n        \"job\": \"Animation\",\n        \"name\": \"Jean-Claude Tran\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc209c3a36844550301d1\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 1777876,\n        \"job\": \"Animation\",\n        \"name\": \"Ian White\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbcbc0e0a264a5402f5df\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 1777879,\n        \"job\": \"Animation\",\n        \"name\": \"Sarah Mercey-Boose\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc1230e0a264a4e02f4ed\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 1779942,\n        \"job\": \"Animation\",\n        \"name\": \"Everett Downing Jr.\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc16a925141601e02ba0d\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 1806625,\n        \"job\": \"Animation\",\n        \"name\": \"Austin Madison\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc06b925141601802c5f5\",\n        \"department\": \"Sound\",\n        \"gender\": 0,\n        \"id\": 1813303,\n        \"job\": \"Music Editor\",\n        \"name\": \"Charles Paley\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfba6ac3a368444402f339\",\n        \"department\": \"Camera\",\n        \"gender\": 0,\n        \"id\": 1830790,\n        \"job\": \"Director of Photography\",\n        \"name\": \"Danielle Feinberg\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc063925141601b02da8f\",\n        \"department\": \"Sound\",\n        \"gender\": 0,\n        \"id\": 1865070,\n        \"job\": \"Foley Editor\",\n        \"name\": \"Kevin Sellers\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbbc3925141601802bf37\",\n        \"department\": \"Editing\",\n        \"gender\": 2,\n        \"id\": 1924362,\n        \"job\": \"First Assistant Editor\",\n        \"name\": \"Anthony J. Greenberg\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbc2ac3a368445502f803\",\n        \"department\": \"Production\",\n        \"gender\": 0,\n        \"id\": 1948307,\n        \"job\": \"Production Coordinator\",\n        \"name\": \"Stacy Bissell\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc00e925141602a02d019\",\n        \"department\": \"Production\",\n        \"gender\": 0,\n        \"id\": 1989056,\n        \"job\": \"Production Coordinator\",\n        \"name\": \"Susan Frank\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc276925141601502c7e0\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 1993246,\n        \"job\": \"Animation Department Coordinator\",\n        \"name\": \"David Park\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbc030e0a264a6003121f\",\n        \"department\": \"Lighting\",\n        \"gender\": 0,\n        \"id\": 1993274,\n        \"job\": \"Lighting Artist\",\n        \"name\": \"Dale Ruffolo\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc0c6925141602102c093\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 1993326,\n        \"job\": \"Animation\",\n        \"name\": \"Carlos Baena\",\n        \"profile_path\": \"/wpDb5QJ9QpuxSifJ9XAXmYO6wt5.jpg\"\n      },\n      {\n        \"credit_id\": \"5abfc287c3a368444402ff2b\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 1993369,\n        \"job\": \"Fix Animator\",\n        \"name\": \"Chris Chua\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5ba22edf0e0a261ec30192ce\",\n        \"department\": \"Art\",\n        \"gender\": 2,\n        \"id\": 1993381,\n        \"job\": \"Graphic Designer\",\n        \"name\": \"Craig Foster\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc1330e0a264a4e02f4fa\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 1993419,\n        \"job\": \"Animation\",\n        \"name\": \"Guilherme Sauerbronn Jacinto\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc159925141601b02dbc3\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 1993479,\n        \"job\": \"Animation\",\n        \"name\": \"Bruce Kuei\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbd71c3a368445502f9d4\",\n        \"department\": \"Costume & Make-Up\",\n        \"gender\": 0,\n        \"id\": 1993484,\n        \"job\": \"Set Dressing Artist\",\n        \"name\": \"Alison Leaf\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc162925141602402dbf0\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 1993489,\n        \"job\": \"Animation\",\n        \"name\": \"Holger Leihe\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbc180e0a264a5d032179\",\n        \"department\": \"Lighting\",\n        \"gender\": 0,\n        \"id\": 1993598,\n        \"job\": \"Master Lighting Artist\",\n        \"name\": \"Andrew Pienaar\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc016925141602102bfd0\",\n        \"department\": \"Production\",\n        \"gender\": 0,\n        \"id\": 1993611,\n        \"job\": \"Production Coordinator\",\n        \"name\": \"Eric Rosales\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc194c3a368443c0310dc\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 1993612,\n        \"job\": \"Animation\",\n        \"name\": \"Nickolas Rosario\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbc51c3a368445502f84c\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 1993614,\n        \"job\": \"Animation\",\n        \"name\": \"Amber Rudolph\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbfbb925141601802c4e4\",\n        \"department\": \"Lighting\",\n        \"gender\": 0,\n        \"id\": 1993620,\n        \"job\": \"Lighting Artist\",\n        \"name\": \"Julien Schreyer\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc19c925141602702d287\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 1993621,\n        \"job\": \"Animation\",\n        \"name\": \"Brett Schulz\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbfc60e0a264a510309b0\",\n        \"department\": \"Lighting\",\n        \"gender\": 0,\n        \"id\": 1993624,\n        \"job\": \"Lighting Artist\",\n        \"name\": \"David Shavers\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc1e4c3a36844550301af\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 1993640,\n        \"job\": \"Animation\",\n        \"name\": \"Raphael Suter\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc29c0e0a264a4e02f662\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 1993667,\n        \"job\": \"Fix Animator\",\n        \"name\": \"Tom Zach\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbe35925141601502c282\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 1994375,\n        \"job\": \"Software Engineer\",\n        \"name\": \"Hayley Iben\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbe5ec3a368443802fb89\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 1994378,\n        \"job\": \"Software Engineer\",\n        \"name\": \"Cory Omand\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbe89c3a3684448030e9d\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 1994395,\n        \"job\": \"Systems Administrators & Support\",\n        \"name\": \"Tyler Fazakerley\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbeb40e0a264a5702d04b\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 1994411,\n        \"job\": \"Systems Administrators & Support\",\n        \"name\": \"Chris Lasell\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbec6c3a3684448030ef8\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 1994416,\n        \"job\": \"Systems Administrators & Support\",\n        \"name\": \"Matthew Lindahl\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbf0ac3a368444402f9c8\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 1994456,\n        \"job\": \"Systems Administrators & Support\",\n        \"name\": \"Ian Westcott\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbfe8c3a368445502fee3\",\n        \"department\": \"Lighting\",\n        \"gender\": 0,\n        \"id\": 1994524,\n        \"job\": \"Master Lighting Artist\",\n        \"name\": \"Brian Boyd\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbe740e0a264a600315d9\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 1994534,\n        \"job\": \"Systems Administrators & Support\",\n        \"name\": \"Lars R. Damerow\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbe580e0a264a5702cfb7\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 1994563,\n        \"job\": \"Software Engineer\",\n        \"name\": \"Josh Minor\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbf44c3a368444e030b03\",\n        \"department\": \"Editing\",\n        \"gender\": 2,\n        \"id\": 1994625,\n        \"job\": \"Associate Editor\",\n        \"name\": \"Jason Hudak\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbe9f0e0a264a5d03260f\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 1994653,\n        \"job\": \"Systems Administrators & Support\",\n        \"name\": \"Ling Hsu\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbea6925141601502c315\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 1994654,\n        \"job\": \"Systems Administrators & Support\",\n        \"name\": \"Jason 'Jayfish' Hull\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc3ab0e0a264a51030f6e\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 1994660,\n        \"job\": \"VFX Artist\",\n        \"name\": \"Chris King\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbee20e0a264a4e02f12e\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 1994679,\n        \"job\": \"Systems Administrators & Support\",\n        \"name\": \"Nelson Siu\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbefc925141602402d917\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 1994684,\n        \"job\": \"Systems Administrators & Support\",\n        \"name\": \"Andy Thomas\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbf03925141601e02b737\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 1994690,\n        \"job\": \"Systems Administrators & Support\",\n        \"name\": \"Jay Weiland\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc396925141601802c9e6\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 1995537,\n        \"job\": \"VFX Artist\",\n        \"name\": \"Juan J. Buhler\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc18c0e0a264a60031a6d\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 1996859,\n        \"job\": \"Animation\",\n        \"name\": \"Dan Nguyen\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbc20c3a368443f02c2cd\",\n        \"department\": \"Production\",\n        \"gender\": 1,\n        \"id\": 1997757,\n        \"job\": \"Production Coordinator\",\n        \"name\": \"Becky Neiman\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbfd8c3a368444402fb03\",\n        \"department\": \"Lighting\",\n        \"gender\": 0,\n        \"id\": 1997814,\n        \"job\": \"Lighting Artist\",\n        \"name\": \"Jeremy Vickery\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfb968c3a368444e030329\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 1997877,\n        \"job\": \"Systems Administrators & Support\",\n        \"name\": \"Jonathan Hadden\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbecd925141602102bd6c\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 1997878,\n        \"job\": \"Systems Administrators & Support\",\n        \"name\": \"BoB 'Naked BoB' Morgan\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbead0e0a264a5402f8a4\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 1997880,\n        \"job\": \"Systems Administrators & Support\",\n        \"name\": \"Jose Ignacio\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbef20e0a264a5702d09a\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 1997883,\n        \"job\": \"Systems Administrators & Support\",\n        \"name\": \"Mike Sundy\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbe7bc3a368443802fc1a\",\n        \"department\": \"Crew\",\n        \"gender\": 2,\n        \"id\": 1997888,\n        \"job\": \"Systems Administrators & Support\",\n        \"name\": \"James G. Dashe\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbfab925141601e02b7eb\",\n        \"department\": \"Lighting\",\n        \"gender\": 0,\n        \"id\": 1997916,\n        \"job\": \"Lighting Artist\",\n        \"name\": \"Charu Clark\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbfb4c3a368443c030e7a\",\n        \"department\": \"Lighting\",\n        \"gender\": 0,\n        \"id\": 1999709,\n        \"job\": \"Lighting Artist\",\n        \"name\": \"Afonso Salcedo\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc0d00e0a264a5402fb6c\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 2000112,\n        \"job\": \"Animation\",\n        \"name\": \"Adam Burke\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc12b925141601e02b9ad\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 2000114,\n        \"job\": \"Animation\",\n        \"name\": \"Doug Frankel\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc1500e0a264a5a02ef58\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 2000116,\n        \"job\": \"Animation\",\n        \"name\": \"Ken Kim\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc1ec0e0a264a6302fd4a\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 2000133,\n        \"job\": \"Animation\",\n        \"name\": \"Rob Duquette Thompson\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbca9925141602702cc1c\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 2000141,\n        \"job\": \"Animation\",\n        \"name\": \"Jaime Landes Roe\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbac60e0a264a5702ca8b\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 2000380,\n        \"job\": \"Post Production Supervisor\",\n        \"name\": \"Cynthia Slavens\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc36f925141602a02d42b\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 2000431,\n        \"job\": \"Shading\",\n        \"name\": \"Marc Cooper\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbe270e0a264a5402f7eb\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 2000450,\n        \"job\": \"Software Engineer\",\n        \"name\": \"Michael Chann\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbe50925141601502c2a5\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 2000453,\n        \"job\": \"Software Engineer\",\n        \"name\": \"Jason Kim\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbe1f0e0a264a51030762\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 2000457,\n        \"job\": \"Software Engineer\",\n        \"name\": \"Kiril Vidimce\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbe82c3a368443802fc38\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 2000494,\n        \"job\": \"Systems Administrators & Support\",\n        \"name\": \"Ross Dickinson\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbe90c3a368445502fc97\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 2000495,\n        \"job\": \"Systems Administrators & Support\",\n        \"name\": \"Remy Galang\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbe97925141602a02cde0\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 2000496,\n        \"job\": \"Systems Administrators & Support\",\n        \"name\": \"James Handelin\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbebc0e0a264a5a02ebd2\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 2000497,\n        \"job\": \"Systems Administrators & Support\",\n        \"name\": \"Marty Lew\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbed5925141602a02ce29\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 2000498,\n        \"job\": \"Systems Administrators & Support\",\n        \"name\": \"Will Phan\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbedc0e0a264a5702d083\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 2000499,\n        \"job\": \"Systems Administrators & Support\",\n        \"name\": \"Auburn C. 'Aubie' Schmidt\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc28f925141602a02d305\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 2002733,\n        \"job\": \"Fix Animator\",\n        \"name\": \"Curran W. Giddens\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbcb4925141601802c05e\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 2002739,\n        \"job\": \"Animation\",\n        \"name\": \"Kristoff Vergne\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbe2ec3a368444e03096d\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 2003687,\n        \"job\": \"Software Engineer\",\n        \"name\": \"Alden Chew\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc1070e0a264a600319e6\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 2003697,\n        \"job\": \"Animation\",\n        \"name\": \"Jonathen Collins\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc39e0e0a264a5a02f334\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 2003716,\n        \"job\": \"VFX Artist\",\n        \"name\": \"Tolga Goktekin\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbe0cc3a368443802fb20\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 2005079,\n        \"job\": \"Production Artist\",\n        \"name\": \"Daniel Holland\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbf27925141601b02d867\",\n        \"department\": \"Directing\",\n        \"gender\": 0,\n        \"id\": 2005424,\n        \"job\": \"Script Supervisor\",\n        \"name\": \"Diego Garzon\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbd85925141601802c1e7\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 2011957,\n        \"job\": \"Craft Service\",\n        \"name\": \"Samantha Wilson\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfb5be0e0a264a5402eb32\",\n        \"department\": \"Crew\",\n        \"gender\": 2,\n        \"id\": 2012393,\n        \"job\": \"Thanks\",\n        \"name\": \"Mark Anderson\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfba1ec3a368444e0303f3\",\n        \"department\": \"Art\",\n        \"gender\": 1,\n        \"id\": 2012409,\n        \"job\": \"Title Designer\",\n        \"name\": \"Catherine Kelly\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbab6c3a368445502f60c\",\n        \"department\": \"Camera\",\n        \"gender\": 0,\n        \"id\": 2012410,\n        \"job\": \"Dolly Grip\",\n        \"name\": \"Orlando Orona\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbabf0e0a264a5d031f2d\",\n        \"department\": \"Camera\",\n        \"gender\": 0,\n        \"id\": 2012411,\n        \"job\": \"Key Grip\",\n        \"name\": \"Steve Cardellini\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbacec3a368443f02c114\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 2012412,\n        \"job\": \"Software Engineer\",\n        \"name\": \"Silvia Palara\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbbd0925141601502bec7\",\n        \"department\": \"Lighting\",\n        \"gender\": 2,\n        \"id\": 2012414,\n        \"job\": \"Gaffer\",\n        \"name\": \"Frank Strzalkowski\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbc310e0a264a5702cc5b\",\n        \"department\": \"Production\",\n        \"gender\": 2,\n        \"id\": 2012415,\n        \"job\": \"Production Manager\",\n        \"name\": \"Kevin Wallace\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbcd10e0a264a5402f5f9\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 2012416,\n        \"job\": \"Roto Supervisor\",\n        \"name\": \"Michael Van Eps\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbcd9c3a368443c0309d0\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 2012417,\n        \"job\": \"VFX Supervisor\",\n        \"name\": \"Christopher James Hall\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbf67925141601802c46c\",\n        \"department\": \"Editing\",\n        \"gender\": 0,\n        \"id\": 2012418,\n        \"job\": \"Editorial Production Assistant\",\n        \"name\": \"Jess Fulton\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbfd0c3a368443f02c7e1\",\n        \"department\": \"Lighting\",\n        \"gender\": 0,\n        \"id\": 2012419,\n        \"job\": \"Lighting Artist\",\n        \"name\": \"Eunkyoung Lee Swearingen\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc096c3a368445502ffe1\",\n        \"department\": \"Sound\",\n        \"gender\": 0,\n        \"id\": 2012421,\n        \"job\": \"Orchestrator\",\n        \"name\": \"Gary K. Thomas\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc27e0e0a264a4e02f644\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 2012422,\n        \"job\": \"Animation Department Coordinator\",\n        \"name\": \"Sarita White\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc31b0e0a264a6302ff1a\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 2,\n        \"id\": 2012423,\n        \"job\": \"Modeling\",\n        \"name\": \"John Duncan\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc359c3a368444403003b\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 2012424,\n        \"job\": \"Modeling\",\n        \"name\": \"Evan Pontoriero\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc3d5925141601502c9ce\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 2012425,\n        \"job\": \"Visual Effects\",\n        \"name\": \"Nathan Matsuda\",\n        \"profile_path\": null\n      }\n    ]\n  },\n  \"external_ids\": {\n    \"imdb_id\": \"tt0910970\",\n    \"facebook_id\": \"PixarWallE\",\n    \"instagram_id\": null,\n    \"twitter_id\": null\n  },\n  \"recommendations\": {\n    \"page\": 1,\n    \"results\": [\n      {\n        \"id\": 14160,\n        \"video\": false,\n        \"vote_count\": 13137,\n        \"vote_average\": 7.9,\n        \"title\": \"Up\",\n        \"release_date\": \"2009-05-28\",\n        \"original_language\": \"en\",\n        \"original_title\": \"Up\",\n        \"genre_ids\": [\n          12,\n          16,\n          35,\n          10751\n        ],\n        \"backdrop_path\": \"/6fX7NF6IUJCTVssei7Shgl9J6LL.jpg\",\n        \"adult\": false,\n        \"overview\": \"Carl Fredricksen spent his entire life dreaming of exploring the globe and experiencing life to its fullest. But at age 78, life seems to have passed him by, until a twist of fate (and a persistent 8-year old Wilderness Explorer named Russell) gives him a new lease on life.\",\n        \"poster_path\": \"/nk11pvocdb5zbFhX5oq5YiLPYMo.jpg\",\n        \"popularity\": 22.506\n      },\n      {\n        \"id\": 585,\n        \"video\": false,\n        \"vote_count\": 11577,\n        \"vote_average\": 7.8,\n        \"title\": \"Monsters, Inc.\",\n        \"release_date\": \"2001-11-01\",\n        \"original_language\": \"en\",\n        \"original_title\": \"Monsters, Inc.\",\n        \"genre_ids\": [\n          16,\n          35,\n          10751\n        ],\n        \"backdrop_path\": \"/wJOHzjTDhnEUyP0Q8gyp6ggvL4A.jpg\",\n        \"adult\": false,\n        \"overview\": \"James Sullivan and Mike Wazowski are monsters, they earn their living scaring children and are the best in the business... even though they're more afraid of the children than they are of them. When a child accidentally enters their world, James and Mike suddenly find that kids are not to be afraid of and they uncover a conspiracy that could threaten all children across the world.\",\n        \"poster_path\": \"/93Y9BGx8blzmZOPSoivkFfaifqU.jpg\",\n        \"popularity\": 26.555\n      },\n      {\n        \"id\": 2062,\n        \"video\": false,\n        \"vote_count\": 9780,\n        \"vote_average\": 7.7,\n        \"title\": \"Ratatouille\",\n        \"release_date\": \"2007-06-22\",\n        \"original_language\": \"en\",\n        \"original_title\": \"Ratatouille\",\n        \"genre_ids\": [\n          16,\n          35,\n          14,\n          10751\n        ],\n        \"backdrop_path\": \"/sFpGI08aeHIRKlLi9SxLyYrRyZ8.jpg\",\n        \"adult\": false,\n        \"overview\": \"A rat named Remy dreams of becoming a great French chef despite his family's wishes and the obvious problem of being a rat in a decidedly rodent-phobic profession. When fate places Remy in the sewers of Paris, he finds himself ideally situated beneath a restaurant made famous by his culinary hero, Auguste Gusteau. Despite the apparent dangers of being an unlikely - and certainly unwanted - visitor in the kitchen of a fine French restaurant, Remy's passion for cooking soon sets into motion a hilarious and exciting rat race that turns the culinary world of Paris upside down.\",\n        \"poster_path\": \"/xVxxSYHAfrEbllyWFQG5df5nwH4.jpg\",\n        \"popularity\": 29.054\n      },\n      {\n        \"id\": 10193,\n        \"video\": false,\n        \"vote_count\": 9248,\n        \"vote_average\": 7.8,\n        \"title\": \"Toy Story 3\",\n        \"release_date\": \"2010-06-16\",\n        \"original_language\": \"en\",\n        \"original_title\": \"Toy Story 3\",\n        \"genre_ids\": [\n          16,\n          35,\n          10751\n        ],\n        \"backdrop_path\": \"/y2qAjM37QgatWeG84DDtwsZuMW.jpg\",\n        \"adult\": false,\n        \"overview\": \"Woody, Buzz, and the rest of Andy's toys haven't been played with in years. With Andy about to go to college, the gang find themselves accidentally left at a nefarious day care center. The toys must band together to escape and return home to Andy.\",\n        \"poster_path\": \"/mMltbSxwEdNE4Cv8QYLpzkHWTDo.jpg\",\n        \"popularity\": 19.225\n      },\n      {\n        \"id\": 12,\n        \"video\": false,\n        \"vote_count\": 12464,\n        \"vote_average\": 7.8,\n        \"title\": \"Finding Nemo\",\n        \"release_date\": \"2003-05-30\",\n        \"original_language\": \"en\",\n        \"original_title\": \"Finding Nemo\",\n        \"genre_ids\": [\n          16,\n          10751\n        ],\n        \"backdrop_path\": \"/2Vv4suw1ja7RpnR6FaXAOihI68g.jpg\",\n        \"adult\": false,\n        \"overview\": \"Nemo, an adventurous young clownfish, is unexpectedly taken from his Great Barrier Reef home to a dentist's office aquarium. It's up to his worrisome father Marlin and a friendly but forgetful fish Dory to bring Nemo home -- meeting vegetarian sharks, surfer dude turtles, hypnotic jellyfish, hungry seagulls, and more along the way.\",\n        \"poster_path\": \"/syPWyeeqzTQIxjIUaIFI7d0TyEY.jpg\",\n        \"popularity\": 28.994\n      },\n      {\n        \"id\": 862,\n        \"video\": false,\n        \"vote_count\": 11238,\n        \"vote_average\": 7.9,\n        \"title\": \"Toy Story\",\n        \"release_date\": \"1995-10-30\",\n        \"original_language\": \"en\",\n        \"original_title\": \"Toy Story\",\n        \"genre_ids\": [\n          16,\n          35,\n          10751\n        ],\n        \"backdrop_path\": \"/dji4Fm0gCDVb9DQQMRvAI8YNnTz.jpg\",\n        \"adult\": false,\n        \"overview\": \"Led by Woody, Andy's toys live happily in his room until Andy's birthday brings Buzz Lightyear onto the scene. Afraid of losing his place in Andy's heart, Woody plots against Buzz. But when circumstances separate Buzz and Woody from their owner, the duo eventually learns to put aside their differences.\",\n        \"poster_path\": \"/rhIRbceoE9lR4veEXuwCC2wARtG.jpg\",\n        \"popularity\": 25.211\n      },\n      {\n        \"id\": 9806,\n        \"video\": false,\n        \"vote_count\": 11367,\n        \"vote_average\": 7.7,\n        \"title\": \"The Incredibles\",\n        \"release_date\": \"2004-11-05\",\n        \"original_language\": \"en\",\n        \"original_title\": \"The Incredibles\",\n        \"genre_ids\": [\n          28,\n          12,\n          16,\n          10751\n        ],\n        \"backdrop_path\": \"/wiDGnsn9RtNglgKQy4J1jZQBG5v.jpg\",\n        \"adult\": false,\n        \"overview\": \"Bob Parr has given up his superhero days to log in time as an insurance adjuster and raise his three children with his formerly heroic wife in suburbia. But when he receives a mysterious assignment, it's time to get back into costume.\",\n        \"poster_path\": \"/2LqaLgk4Z226KkgPJuiOQ58wvrm.jpg\",\n        \"popularity\": 18.463\n      },\n      {\n        \"id\": 863,\n        \"video\": false,\n        \"vote_count\": 8417,\n        \"vote_average\": 7.5,\n        \"title\": \"Toy Story 2\",\n        \"release_date\": \"1999-10-30\",\n        \"original_language\": \"en\",\n        \"original_title\": \"Toy Story 2\",\n        \"genre_ids\": [\n          16,\n          35,\n          10751\n        ],\n        \"backdrop_path\": \"/9Kjxr4VCU0Y4DAuXkzR2moAy7DK.jpg\",\n        \"adult\": false,\n        \"overview\": \"Andy heads off to Cowboy Camp, leaving his toys to their own devices. Things shift into high gear when an obsessive toy collector named Al McWhiggen, owner of Al's Toy Barn kidnaps Woody. Andy's toys mount a daring rescue mission, Buzz Lightyear meets his match and Woody has to decide where he and his heart truly belong.\",\n        \"poster_path\": \"/3CmK3XurcLeUyMifCR28ibzupbB.jpg\",\n        \"popularity\": 21.761\n      },\n      {\n        \"id\": 920,\n        \"video\": false,\n        \"vote_count\": 8330,\n        \"vote_average\": 6.7,\n        \"title\": \"Cars\",\n        \"release_date\": \"2006-06-08\",\n        \"original_language\": \"en\",\n        \"original_title\": \"Cars\",\n        \"genre_ids\": [\n          12,\n          16,\n          35,\n          10751\n        ],\n        \"backdrop_path\": \"/a1MlbLBk5Sy6YvMbSuKfwGlDVlb.jpg\",\n        \"adult\": false,\n        \"overview\": \"Lightning McQueen, a hotshot rookie race car driven to succeed, discovers that life is about the journey, not the finish line, when he finds himself unexpectedly detoured in the sleepy Route 66 town of Radiator Springs. On route across the country to the big Piston Cup Championship in California to compete against two seasoned pros, McQueen gets to know the town's offbeat characters.\",\n        \"poster_path\": \"/jpfkzbIXgKZqCZAkEkFH2VYF63s.jpg\",\n        \"popularity\": 127.498\n      },\n      {\n        \"id\": 9502,\n        \"video\": false,\n        \"vote_count\": 6596,\n        \"vote_average\": 7.1,\n        \"title\": \"Kung Fu Panda\",\n        \"release_date\": \"2008-06-04\",\n        \"original_language\": \"en\",\n        \"original_title\": \"Kung Fu Panda\",\n        \"genre_ids\": [\n          12,\n          16,\n          35,\n          10751\n        ],\n        \"backdrop_path\": \"/pmLEmMLYCreFAxfdCt5uO1wDgSi.jpg\",\n        \"adult\": false,\n        \"overview\": \"When the Valley of Peace is threatened, lazy Po the panda discovers his destiny as the \\\"chosen one\\\" and trains to become a kung fu hero, but transforming the unsleek slacker into a brave warrior won't be easy. It's up to Master Shifu and the Furious Five -- Tigress, Crane, Mantis, Viper and Monkey -- to give it a try.\",\n        \"poster_path\": \"/mk3UyyaLyXhgIhmLji25OUPXvGR.jpg\",\n        \"popularity\": 17.684\n      },\n      {\n        \"id\": 10191,\n        \"video\": false,\n        \"vote_count\": 8182,\n        \"vote_average\": 7.7,\n        \"title\": \"How to Train Your Dragon\",\n        \"release_date\": \"2010-03-10\",\n        \"original_language\": \"en\",\n        \"original_title\": \"How to Train Your Dragon\",\n        \"genre_ids\": [\n          12,\n          16,\n          14,\n          10751\n        ],\n        \"backdrop_path\": \"/mxPvA8cj0Eqa1A13DcT5NzFq7Ta.jpg\",\n        \"adult\": false,\n        \"overview\": \"As the son of a Viking leader on the cusp of manhood, shy Hiccup Horrendous Haddock III faces a rite of passage: he must kill a dragon to prove his warrior mettle. But after downing a feared dragon, he realizes that he no longer wants to destroy it, and instead befriends the beast – which he names Toothless – much to the chagrin of his warrior father\",\n        \"poster_path\": \"/hIXX3IRFy0InUOmYeWjvhCAgQNj.jpg\",\n        \"popularity\": 19.188\n      },\n      {\n        \"id\": 950,\n        \"video\": false,\n        \"vote_count\": 6236,\n        \"vote_average\": 6.6,\n        \"title\": \"Ice Age: The Meltdown\",\n        \"release_date\": \"2006-03-29\",\n        \"original_language\": \"en\",\n        \"original_title\": \"Ice Age: The Meltdown\",\n        \"genre_ids\": [\n          12,\n          16,\n          35,\n          10751\n        ],\n        \"backdrop_path\": \"/lxNCa4FifUuLeUkWUQl2yuf9JnJ.jpg\",\n        \"adult\": false,\n        \"overview\": \"Diego, Manny and Sid return in this sequel to the hit animated movie Ice Age. This time around, the deep freeze is over, and the ice-covered earth is starting to melt, which will destroy the trio's cherished valley. The impending disaster prompts them to reunite and warn all the other beasts about the desperate situation.\",\n        \"poster_path\": \"/oQhkGeoVcHuRBsEvxnzd62tIeB6.jpg\",\n        \"popularity\": 17.283\n      },\n      {\n        \"id\": 9487,\n        \"video\": false,\n        \"vote_count\": 5401,\n        \"vote_average\": 6.9,\n        \"title\": \"A Bug's Life\",\n        \"release_date\": \"1998-11-25\",\n        \"original_language\": \"en\",\n        \"original_title\": \"A Bug's Life\",\n        \"genre_ids\": [\n          12,\n          16,\n          35,\n          10751\n        ],\n        \"backdrop_path\": \"/bHMHpXNjeKRxcjWcpbIAD5f0aIK.jpg\",\n        \"adult\": false,\n        \"overview\": \"On behalf of \\\"oppressed bugs everywhere,\\\" an inventive ant named Flik hires a troupe of warrior bugs to defend his bustling colony from a horde of freeloading grasshoppers led by the evil-minded Hopper.\",\n        \"poster_path\": \"/u9qGMRwcPwP0WETxulS5hKUsEum.jpg\",\n        \"popularity\": 22.688\n      },\n      {\n        \"id\": 808,\n        \"video\": false,\n        \"vote_count\": 9424,\n        \"vote_average\": 7.6,\n        \"title\": \"Shrek\",\n        \"release_date\": \"2001-05-16\",\n        \"original_language\": \"en\",\n        \"original_title\": \"Shrek\",\n        \"genre_ids\": [\n          12,\n          16,\n          35,\n          14,\n          10751\n        ],\n        \"backdrop_path\": \"/2l5UHZBcp9cx1PwKLdisJ0gV9jB.jpg\",\n        \"adult\": false,\n        \"overview\": \"It ain't easy bein' green -- especially if you're a likable (albeit smelly) ogre named Shrek. On a mission to retrieve a gorgeous princess from the clutches of a fire-breathing dragon, Shrek teams up with an unlikely compatriot -- a wisecracking donkey.\",\n        \"poster_path\": \"/140ewbWv8qHStD3mlBDvvGd0Zvu.jpg\",\n        \"popularity\": 26.533\n      },\n      {\n        \"id\": 425,\n        \"video\": false,\n        \"vote_count\": 8077,\n        \"vote_average\": 7.3,\n        \"title\": \"Ice Age\",\n        \"release_date\": \"2002-03-10\",\n        \"original_language\": \"en\",\n        \"original_title\": \"Ice Age\",\n        \"genre_ids\": [\n          12,\n          16,\n          35,\n          10751\n        ],\n        \"backdrop_path\": \"/oDqbewoFuIEWA7UWurole6MzDGn.jpg\",\n        \"adult\": false,\n        \"overview\": \"With the impending ice age almost upon them, a mismatched trio of prehistoric critters – Manny the woolly mammoth, Diego the saber-toothed tiger and Sid the giant sloth – find an orphaned infant and decide to return it to its human parents. Along the way, the unlikely allies become friends but, when enemies attack, their quest takes on far nobler aims.\",\n        \"poster_path\": \"/zpaQwR0YViPd83bx1e559QyZ35i.jpg\",\n        \"popularity\": 20.523\n      },\n      {\n        \"id\": 953,\n        \"video\": false,\n        \"vote_count\": 6713,\n        \"vote_average\": 6.8,\n        \"title\": \"Madagascar\",\n        \"release_date\": \"2005-05-25\",\n        \"original_language\": \"en\",\n        \"original_title\": \"Madagascar\",\n        \"genre_ids\": [\n          16,\n          10751\n        ],\n        \"backdrop_path\": \"/wUetiqu2EFhHW94yTP0pWABfyUG.jpg\",\n        \"adult\": false,\n        \"overview\": \"Alex the lion is the king of the urban jungle, the main attraction at New York’s Central Park Zoo. He and his best friends—Marty the zebra, Melman the giraffe and Gloria the hippo—have spent their whole lives in blissful captivity before an admiring public and with regular meals provided for them. Not content to leave well enough alone, Marty lets his curiosity get the better of him and makes his escape—with the help of some prodigious penguins—to explore the world.\",\n        \"poster_path\": \"/2YiESGB68BGQSAFvfJxBi774sc4.jpg\",\n        \"popularity\": 23.486\n      },\n      {\n        \"id\": 62177,\n        \"video\": false,\n        \"vote_count\": 8709,\n        \"vote_average\": 6.9,\n        \"title\": \"Brave\",\n        \"release_date\": \"2012-06-21\",\n        \"original_language\": \"en\",\n        \"original_title\": \"Brave\",\n        \"genre_ids\": [\n          28,\n          12,\n          16,\n          35,\n          14,\n          10751\n        ],\n        \"backdrop_path\": \"/sfRCA9g3CunpnZO3QurHSIRcsUq.jpg\",\n        \"adult\": false,\n        \"overview\": \"Brave is set in the mystical Scottish Highlands, where Mérida is the princess of a kingdom ruled by King Fergus and Queen Elinor. An unruly daughter and an accomplished archer, Mérida one day defies a sacred custom of the land and inadvertently brings turmoil to the kingdom. In an attempt to set things right, Mérida seeks out an eccentric old Wise Woman and is granted an ill-fated wish. Also figuring into Mérida’s quest — and serving as comic relief — are the kingdom’s three lords: the enormous Lord MacGuffin, the surly Lord Macintosh, and the disagreeable Lord Dingwall.\",\n        \"poster_path\": \"/qhABv2d4NZLhsOOA4iBFM4rfuJC.jpg\",\n        \"popularity\": 24.68\n      },\n      {\n        \"id\": 8587,\n        \"video\": false,\n        \"vote_count\": 11176,\n        \"vote_average\": 8.2,\n        \"title\": \"The Lion King\",\n        \"release_date\": \"1994-05-07\",\n        \"original_language\": \"en\",\n        \"original_title\": \"The Lion King\",\n        \"genre_ids\": [\n          16,\n          18,\n          10751\n        ],\n        \"backdrop_path\": \"/kZ9CKeZeKMUtrjZ7RuArjVMTDF4.jpg\",\n        \"adult\": false,\n        \"overview\": \"A young lion prince is cast out of his pride by his cruel uncle, who claims he killed his father. While the uncle rules with an iron paw, the prince grows up beyond the Savannah, living by a philosophy: No worries for the rest of your days. But when his past comes to haunt him, the young prince must decide his fate: Will he remain an outcast or face his demons and become what he needs to be?\",\n        \"poster_path\": \"/sKCr78MXSLixwmZ8DyJLrpMsd15.jpg\",\n        \"popularity\": 33.064\n      },\n      {\n        \"id\": 809,\n        \"video\": false,\n        \"vote_count\": 6780,\n        \"vote_average\": 7,\n        \"title\": \"Shrek 2\",\n        \"release_date\": \"2004-05-19\",\n        \"original_language\": \"en\",\n        \"original_title\": \"Shrek 2\",\n        \"genre_ids\": [\n          12,\n          16,\n          35,\n          14,\n          10751\n        ],\n        \"backdrop_path\": \"/gdFAYLb5NR5HqcEKnPloOM6fX4B.jpg\",\n        \"adult\": false,\n        \"overview\": \"Shrek, Fiona and Donkey set off to Far, Far Away to meet Fiona's mother and father. But not everyone is happy. Shrek and the King find it hard to get along, and there's tension in the marriage. The fairy godmother discovers that Shrek has married Fiona instead of her Son Prince Charming and sets about destroying their marriage.\",\n        \"poster_path\": \"/akWDA0BMVYK4OTM92T5i91DYnsT.jpg\",\n        \"popularity\": 18.436\n      },\n      {\n        \"id\": 62211,\n        \"video\": false,\n        \"vote_count\": 6783,\n        \"vote_average\": 7,\n        \"title\": \"Monsters University\",\n        \"release_date\": \"2013-06-20\",\n        \"original_language\": \"en\",\n        \"original_title\": \"Monsters University\",\n        \"genre_ids\": [\n          16,\n          10751\n        ],\n        \"backdrop_path\": \"/5mDCKKS7M8aUZKdShnCa7lLbzmH.jpg\",\n        \"adult\": false,\n        \"overview\": \"A look at the relationship between Mike and Sulley during their days at Monsters University — when they weren't necessarily the best of friends.\",\n        \"poster_path\": \"/a05xQU9huY3P5uurLcGGHmsf2Vh.jpg\",\n        \"popularity\": 18.16\n      }\n    ],\n    \"total_pages\": 2,\n    \"total_results\": 40\n  }, \"release_dates\": {\n    \"results\": [\n      {\n        \"iso_3166_1\": \"KR\",\n        \"release_dates\": [\n          {\n            \"certification\": \"전체 관람가\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-08-06T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"GB\",\n        \"release_dates\": [\n          {\n            \"certification\": \"U\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-07-18T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"IT\",\n        \"release_dates\": [\n          {\n            \"certification\": \"T\",\n            \"iso_639_1\": \"it\",\n            \"note\": \"\",\n            \"release_date\": \"2008-10-17T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"BR\",\n        \"release_dates\": [\n          {\n            \"certification\": \"L\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-06-27T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"CA\",\n        \"release_dates\": [\n          {\n            \"certification\": \"G\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2013-11-15T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"GR\",\n        \"release_dates\": [\n          {\n            \"certification\": \"G\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-09-18T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"AU\",\n        \"release_dates\": [\n          {\n            \"certification\": \"G\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-09-18T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"US\",\n        \"release_dates\": [\n          {\n            \"certification\": \"G\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-06-22T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"SE\",\n        \"release_dates\": [\n          {\n            \"certification\": \"Btl\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-09-05T00:00:00.000Z\",\n            \"type\": 3\n          },\n          {\n            \"certification\": \"Btl\",\n            \"iso_639_1\": \"\",\n            \"note\": \"DVD & Blu-ray release\",\n            \"release_date\": \"2008-12-12T00:00:00.000Z\",\n            \"type\": 5\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"NL\",\n        \"release_dates\": [\n          {\n            \"certification\": \"AL\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-07-30T00:00:00.000Z\",\n            \"type\": 3\n          },\n          {\n            \"certification\": \"AL\",\n            \"iso_639_1\": \"\",\n            \"note\": \"DVD\",\n            \"release_date\": \"2008-11-19T00:00:00.000Z\",\n            \"type\": 5\n          },\n          {\n            \"certification\": \"AL\",\n            \"iso_639_1\": \"\",\n            \"note\": \"Blu-ray\",\n            \"release_date\": \"2011-09-16T00:00:00.000Z\",\n            \"type\": 5\n          },\n          {\n            \"certification\": \"AL\",\n            \"iso_639_1\": \"\",\n            \"note\": \"SBS6\",\n            \"release_date\": \"2010-09-18T00:00:00.000Z\",\n            \"type\": 6\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"DK\",\n        \"release_dates\": [\n          {\n            \"certification\": \"7\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-08-29T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"ES\",\n        \"release_dates\": [\n          {\n            \"certification\": \"7\",\n            \"iso_639_1\": \"es\",\n            \"note\": \"\",\n            \"release_date\": \"2008-08-06T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"HK\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-07-24T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"LT\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-07-18T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"UY\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-06-27T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"AR\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-07-09T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"BE\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-07-30T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"FI\",\n        \"release_dates\": [\n          {\n            \"certification\": \"S\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-09-05T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"UA\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-07-03T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"PE\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-07-24T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"HR\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-08-07T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"IL\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-07-11T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"HU\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-07-24T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"BG\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-09-05T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"TR\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-09-26T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"BO\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-06-26T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"CO\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-06-27T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"TH\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-08-12T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"PL\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-07-18T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"EE\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-08-15T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"CZ\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-08-14T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"CR\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-06-27T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"HN\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-06-27T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"IE\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-07-18T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"KZ\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-07-03T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"FR\",\n        \"release_dates\": [\n          {\n            \"certification\": \"U\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-07-30T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"IN\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-08-29T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"SV\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-06-27T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"SK\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-08-14T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"VE\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-08-08T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"PA\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-06-27T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"MY\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-08-14T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"MX\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-07-04T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"KW\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-07-03T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"TW\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-07-25T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"AT\",\n        \"release_dates\": [\n          {\n            \"certification\": \"0\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-09-25T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"IS\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-07-30T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"CH\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"de\",\n            \"note\": \"\",\n            \"release_date\": \"2008-09-25T00:00:00.000Z\",\n            \"type\": 3\n          },\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"fr\",\n            \"release_date\": \"2008-07-30T00:00:00.000Z\",\n            \"type\": 3\n          },\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"it\",\n            \"release_date\": \"2008-10-17T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"LV\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-08-08T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"RU\",\n        \"release_dates\": [\n          {\n            \"certification\": \"0+\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-07-03T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"ID\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-08-13T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"PH\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-08-13T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"CL\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-06-26T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"SG\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-08-28T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"SI\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-08-28T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"NO\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-08-29T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"PT\",\n        \"release_dates\": [\n          {\n            \"certification\": \"M/6\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-08-14T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"EG\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-08-06T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"RO\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-09-05T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"NZ\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-09-18T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"JP\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-12-05T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"DE\",\n        \"release_dates\": [\n          {\n            \"certification\": \"0\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-09-24T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      }\n    ]\n  }\n}",
                "rawdescription": "videos,images,credits,external_ids,recommendations",
                "description": "<p>videos,images,credits,external_ids,recommendations</p>\n"
            },
            {
                "name": "TMDB_IMAGE_BASE_URL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'http://image.tmdb.org/t/p/'"
            },
            {
                "name": "TMDB_IMAGE_SECURE_BASE_URL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'https://image.tmdb.org/t/p/'"
            },
            {
                "name": "TMDB_LOGO_SIZES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "['w45', 'w92', 'w154', 'w185', 'w300', 'w500', 'original']"
            },
            {
                "name": "TMDB_MOVIE_VIDEO_LIST",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/services/mock-data.factory.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  \"id\": 454626,\n  \"results\": [\n    {\n      \"id\": \"5dcac05a6e44bf000fef48e7\",\n      \"iso_639_1\": \"en\",\n      \"iso_3166_1\": \"US\",\n      \"key\": \"szby7ZHLnkA\",\n      \"name\": \"New Official Trailer\",\n      \"site\": \"YouTube\",\n      \"size\": 1080,\n      \"type\": \"Trailer\"\n    },\n    {\n      \"id\": \"5e318333326c1900121e540d\",\n      \"iso_639_1\": \"en\",\n      \"iso_3166_1\": \"US\",\n      \"key\": \"MDgs6JRSJvg\",\n      \"name\": \"Sonic The Hedgehog (2020) - \\\"Classic\\\" - Paramount Pictures\",\n      \"site\": \"YouTube\",\n      \"size\": 1080,\n      \"type\": \"Featurette\"\n    },\n    {\n      \"id\": \"5e343aa6ac8e6b0018c25fa5\",\n      \"iso_639_1\": \"en\",\n      \"iso_3166_1\": \"US\",\n      \"key\": \"hshTmTjI1Vs\",\n      \"name\": \"Sonic The Hedgehog (2020) - Big Game Spot - Paramount Pictures\",\n      \"site\": \"YouTube\",\n      \"size\": 1080,\n      \"type\": \"Featurette\"\n    },\n    {\n      \"id\": \"5e344b9c43250f0015bf8df7\",\n      \"iso_639_1\": \"en\",\n      \"iso_3166_1\": \"US\",\n      \"key\": \"t-mee176CNk\",\n      \"name\": \"Sonic The Hedgehog (2020) - \\\"Super\\\" - Paramount Pictures\",\n      \"site\": \"YouTube\",\n      \"size\": 1080,\n      \"type\": \"Featurette\"\n    },\n    {\n      \"id\": \"5e344b714ca67600144f11d1\",\n      \"iso_639_1\": \"en\",\n      \"iso_3166_1\": \"US\",\n      \"key\": \"hoRLCr5NG3Y\",\n      \"name\": \"Sonic The Hedgehog (2020) - \\\"Drive\\\" - Paramount Pictures\",\n      \"site\": \"YouTube\",\n      \"size\": 1080,\n      \"type\": \"Featurette\"\n    },\n    {\n      \"id\": \"5e4507830c271000138457dd\",\n      \"iso_639_1\": \"en\",\n      \"iso_3166_1\": \"US\",\n      \"key\": \"EwgM3sKaO54\",\n      \"name\": \"Sonic The Hedgehog - Featurettes - Becoming Robotnik - Texted 1080p\",\n      \"site\": \"YouTube\",\n      \"size\": 1080,\n      \"type\": \"Featurette\"\n    }\n  ]\n}"
            },
            {
                "name": "TMDB_POSTER_SIZES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "['w92', 'w154', 'w185', 'w342', 'w500', 'w780', 'original']"
            },
            {
                "name": "TMDB_PROFILE_SIZES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "['w45', 'w185', 'h632', 'original']"
            },
            {
                "name": "TMDB_SEARCH_RESULTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/mock-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ITmdbResultObject",
                "defaultValue": "{\n  page: 1,\n  total_results: 3810,\n  total_pages: 191,\n  results: [\n    {\n      popularity: 47.572,\n      vote_count: 13899,\n      video: false,\n      poster_path: '/hbhFnRzzg6ZDmm8YAmxBnQpQIPh.jpg',\n      id: 278,\n      adult: false,\n      backdrop_path: '/x7O7oJO7BeXWvqXpLa5YoJd8ZD5.jpg',\n      original_language: 'en',\n      original_title: 'The Shawshank Redemption',\n      genre_ids: [80, 18],\n      title: 'The Shawshank Redemption',\n      vote_average: 8.7,\n      overview:\n        'Framed in the 1940s for the double murder of his wife and her lover, upstanding banker Andy Dufresne begins a new life at the Shawshank prison, where he puts his accounting skills to work for an amoral warden. During his long stretch in prison, Dufresne comes to be admired by the other inmates -- including an older prisoner named Red -- for his integrity and unquenchable sense of hope.',\n      release_date: '1994-09-23'\n    },\n    {\n      popularity: 30.437,\n      vote_count: 16212,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 680,\n      adult: false,\n      backdrop_path: '/4cDFJr4HnXN5AdPw4AKrmLlMWdO.jpg',\n      original_language: 'en',\n      original_title: 'Pulp Fiction',\n      genre_ids: [80, 53],\n      title: 'Pulp Fiction',\n      vote_average: 8.4,\n      overview:\n        `A burger-loving hit man, his philosophical partner, a drug-addled gangster's moll and a washed-up boxer converge in this sprawling, comedic crime caper. Their adventures unfurl in three stories that ingeniously trip back and forth in time.`,\n      release_date: '1994-10-14'\n    },\n    {\n      popularity: 30.008,\n      vote_count: 10939,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 8587,\n      adult: false,\n      backdrop_path: '/kZ9CKeZeKMUtrjZ7RuArjVMTDF4.jpg',\n      original_language: 'en',\n      original_title: 'The Lion King',\n      genre_ids: [16, 18, 10751],\n      title: 'The Lion King',\n      vote_average: 8.2,\n      overview:\n        'A young lion cub named Simba can\\'t wait to be king. But his uncle craves the title for himself and will stop at nothing to get it.',\n      release_date: '1994-06-23'\n    },\n    {\n      popularity: 34.399,\n      id: 101,\n      video: false,\n      vote_count: 8176,\n      vote_average: 8.3,\n      title: 'Léon: The Professional',\n      release_date: '1994-11-18',\n      original_language: 'fr',\n      original_title: 'Léon',\n      genre_ids: [53, 80, 18],\n      backdrop_path: '/dXQ7HILRK1Tg33RT64JwbQI7Osh.jpg',\n      adult: false,\n      overview:\n        'Léon, the top hit man in New York, has earned a rep as an effective \"cleaner\". But when his next-door neighbors are wiped out by a loose-cannon DEA agent, he becomes the unwilling custodian of 12-year-old Mathilda. Before long, Mathilda\\'s thoughts turn to revenge, and she considers following in Léon\\'s footsteps.',\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      isAvailable: true\n    },\n    {\n      popularity: 31.962,\n      vote_count: 15752,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 13,\n      adult: false,\n      backdrop_path: '/wMgbnUVS9wbRGAdki8fqxKU1O0N.jpg',\n      original_language: 'en',\n      original_title: 'Forrest Gump',\n      genre_ids: [35, 18, 10749],\n      title: 'Forrest Gump',\n      vote_average: 8.4,\n      overview:\n        'A man with a low IQ has accomplished great things in his life and been present during significant historic events—in each case, far exceeding what anyone imagined he could do. But despite all he has achieved, his one true love eludes him.',\n      release_date: '1994-07-06'\n    },\n    {\n      popularity: 24.394,\n      vote_count: 5628,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 854,\n      adult: false,\n      backdrop_path: '/oYVf9gqxZduttG6HW2Qo4ZUxLWW.jpg',\n      original_language: 'en',\n      original_title: 'The Mask',\n      genre_ids: [35, 80, 14, 10749],\n      title: 'The Mask',\n      vote_average: 6.8,\n      overview:\n        'When timid bank clerk Stanley Ipkiss discovers a magical mask containing the spirit of the Norse god Loki, his entire life changes. While wearing the mask, Ipkiss becomes a supernatural playboy exuding charm and confidence which allows him to catch the eye of local nightclub singer Tina Carlyle. Unfortunately, under the mask\\'s influence, Ipkiss also robs a bank, which angers junior crime lord Dorian Tyrell, whose goons get blamed for the heist.',\n      release_date: '1994-07-29'\n    },\n    {\n      popularity: 26.233,\n      vote_count: 4409,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 408,\n      adult: false,\n      backdrop_path: '/c66otZnSdri67kR7ps92kRX849o.jpg',\n      original_language: 'en',\n      original_title: 'Snow White and the Seven Dwarfs',\n      genre_ids: [16, 14, 10751],\n      title: 'Snow White and the Seven Dwarfs',\n      vote_average: 7,\n      overview:\n        'A beautiful girl, Snow White, takes refuge in the forest in the house of seven dwarfs to hide from her stepmother, the wicked Queen. The Queen is jealous because she wants to be known as \"the fairest in the land,\" and Snow White\\'s beauty surpasses her own.',\n      release_date: '1937-12-21'\n    },\n    {\n      popularity: 25.24,\n      vote_count: 8547,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 424,\n      adult: false,\n      backdrop_path: '/cTNYRUTXkBgPH3wP3kmPUB5U6dA.jpg',\n      original_language: 'en',\n      original_title: 'Schindler\\'s List',\n      genre_ids: [18, 36, 10752],\n      title: 'Schindler\\'s List',\n      vote_average: 8.6,\n      overview:\n        'The true story of how businessman Oskar Schindler saved over a thousand Jewish lives from the Nazis while they worked as slaves in his factory during World War II.',\n      release_date: '1993-12-15'\n    },\n    {\n      popularity: 20.34,\n      vote_count: 7817,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 500,\n      adult: false,\n      backdrop_path: '/fupyzBwFAn1PoeCXhp54bYVM2ER.jpg',\n      original_language: 'en',\n      original_title: 'Reservoir Dogs',\n      genre_ids: [80, 53],\n      title: 'Reservoir Dogs',\n      vote_average: 8.2,\n      overview:\n        'A botched robbery indicates a police informant, and the pressure mounts in the aftermath at a warehouse. Crime begets violence as the survivors -- veteran Mr. White, newcomer Mr. Orange, psychopathic parolee Mr. Blonde, bickering weasel Mr. Pink and Nice Guy Eddie -- unravel.',\n      release_date: '1992-10-23'\n    },\n    {\n      popularity: 11.398,\n      vote_count: 1295,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 888,\n      adult: false,\n      backdrop_path: '/vbWvWqZJiEiffj8xag0owDExRVg.jpg',\n      original_language: 'en',\n      original_title: 'The Flintstones',\n      genre_ids: [35, 14, 10751],\n      title: 'The Flintstones',\n      vote_average: 5.2,\n      overview:\n        'Modern Stone Age family the Flintstones hit the big screen in this live-action version of the classic cartoon. Fred helps Barney adopt a child. Barney sees an opportunity to repay him when Slate Mining tests its employees to find a new executive. But no good deed goes unpunished.',\n      release_date: '1994-05-26'\n    },\n    {\n      popularity: 13.378,\n      id: 9739,\n      video: false,\n      vote_count: 1801,\n      vote_average: 6.5,\n      title: 'Demolition Man',\n      release_date: '1993-10-08',\n      original_language: 'en',\n      original_title: 'Demolition Man',\n      genre_ids: [80, 28, 878],\n      backdrop_path: '/2p5rA1NRoyyAFfzdHl1Ab1RN3qr.jpg',\n      adult: false,\n      overview:\n        'Simon Phoenix, a violent criminal cryogenically frozen in 1996, escapes during a parole hearing in 2032 in the utopia of San Angeles. Police are incapable of dealing with his violent ways and turn to his captor, who had also been cryogenically frozen after being wrongfully accused of killing 30 innocent people while apprehending Phoenix.',\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg'\n    },\n    {\n      popularity: 13.039,\n      vote_count: 2070,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 36955,\n      adult: false,\n      backdrop_path: '/o2agns0LEqyEUCByMT8ViIOio7r.jpg',\n      original_language: 'en',\n      original_title: 'True Lies',\n      genre_ids: [28, 53],\n      title: 'True Lies',\n      vote_average: 6.9,\n      overview:\n        'Harry Tasker is a secret agent for the United States Government. For years, he has kept his job from his wife, but is forced to reveal his identity and try to stop nuclear terrorists when he and his wife are kidnapped by them.',\n      release_date: '1994-07-15'\n    },\n    {\n      popularity: 16.688,\n      vote_count: 2909,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 10112,\n      adult: false,\n      backdrop_path: '/fojdVtSsZa7fXyJQ6w1Exw7GWum.jpg',\n      original_language: 'en',\n      original_title: 'The Aristocats',\n      genre_ids: [12, 16, 35, 10751],\n      title: 'The Aristocats',\n      vote_average: 7.3,\n      overview:\n        'When Madame Adelaide Bonfamille leaves her fortune to Duchess and her children—Bonfamille’s beloved family of cats—the butler plots to steal the money and kidnaps the legatees, leaving them out on a country road. All seems lost until the wily Thomas O’Malley Cat and his jazz-playing alley cats come to the aristocats’ rescue.',\n      release_date: '1970-12-24'\n    },\n    {\n      popularity: 20.126,\n      vote_count: 4866,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 620,\n      adult: false,\n      backdrop_path: '/qmDy6Rdom8d8UFj9GeAAtVIjTRT.jpg',\n      original_language: 'en',\n      original_title: 'Ghostbusters',\n      genre_ids: [35, 14],\n      title: 'Ghostbusters',\n      vote_average: 7.4,\n      overview:\n        'After losing their academic posts at a prestigious university, a team of parapsychologists goes into business as proton-pack-toting \"ghostbusters\" who exterminate ghouls, hobgoblins and supernatural pests of all stripes. An ad campaign pays off when a knockout cellist hires the squad to purge her swanky digs of demons that appear to be living in her refrigerator.',\n      release_date: '1984-06-08'\n    },\n    {\n      popularity: 15.25,\n      id: 2758,\n      video: false,\n      vote_count: 1312,\n      vote_average: 6.7,\n      title: 'Addams Family Values',\n      release_date: '1993-11-19',\n      original_language: 'en',\n      original_title: 'Addams Family Values',\n      genre_ids: [35, 10751, 14],\n      backdrop_path: '/i84FfYcljpH9FOO26PdvBWzLGRl.jpg',\n      adult: false,\n      overview:\n        'Siblings Wednesday and Pugsley Addams will stop at nothing to get rid of Pubert, the new baby boy adored by parents Gomez and Morticia. Things go from bad to worse when the new \"black widow\" nanny, Debbie Jellinsky, launches her plan to add Fester to her collection of dead husbands.',\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg'\n    },\n    {\n      popularity: 18.017,\n      vote_count: 3184,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 3170,\n      adult: false,\n      backdrop_path: '/zM2Rdsh4kiTEXPkkO9lWBzZpwAH.jpg',\n      original_language: 'en',\n      original_title: 'Bambi',\n      genre_ids: [16, 18, 10751],\n      title: 'Bambi',\n      vote_average: 6.9,\n      overview:\n        `Bambi's tale unfolds from season to season as the young prince of the forest learns about life, love, and friends.`,\n      release_date: '1942-08-21'\n    },\n    {\n      popularity: 13.155,\n      vote_count: 461,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 10438,\n      adult: false,\n      backdrop_path: '/1MaJH9m8TfmwLgS98kcjU4faiMg.jpg',\n      original_language: 'en',\n      original_title: 'Beethoven\\'s 2nd',\n      genre_ids: [35, 10751],\n      title: 'Beethoven\\'s 2nd',\n      vote_average: 5.2,\n      overview:\n        `Beethoven is back -- and this time, he has a whole brood with him now that he's met his canine match, Missy, and fathered a family. The only problem is that Missy's owner, Regina, wants to sell the puppies and tear the clan apart. It's up to Beethoven and the Newton kids to save the day and keep everyone together.`,\n      release_date: '1993-12-16'\n    },\n    {\n      popularity: 13.779,\n      id: 44251,\n      video: false,\n      vote_count: 281,\n      vote_average: 6.5,\n      title: 'Dragon Ball Z: Broly – Second Coming',\n      release_date: '1994-03-12',\n      original_language: 'ja',\n      original_title: 'ドラゴンボールＺ 危険なふたり！超戦士はねむれない',\n      genre_ids: [28, 16, 878],\n      backdrop_path: '/d0A7xd5Qnm6CCH25HXKHmcBDmmm.jpg',\n      adult: false,\n      overview:\n        'A Saiyan Space pod crash-lands on Earth out of which a wounded Saiyan crawls: Broly, the Legendary Super Saiyan. The wounded Broly shouts out in frustration and turns into normal form. The place soon freezes, trapping him in it and he falls into a coma.',\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg'\n    },\n    {\n      popularity: 14.604,\n      vote_count: 3268,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 1637,\n      adult: false,\n      backdrop_path: '/pGVpDc6MgLRtOYdxsA5fhj1SZki.jpg',\n      original_language: 'en',\n      original_title: 'Speed',\n      genre_ids: [28, 12, 80],\n      title: 'Speed',\n      vote_average: 6.9,\n      overview:\n        `Los Angeles SWAT cop Jack Traven is up against bomb expert Howard Payne, who's after major ransom money. First it's a rigged elevator in a very tall building. Then it's a rigged bus--if it slows, it will blow, bad enough any day, but a nightmare in LA traffic. And that's still not the end.`,\n      release_date: '1994-06-09'\n    },\n    {\n      popularity: 21.341,\n      vote_count: 4964,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 9479,\n      adult: false,\n      backdrop_path: '/16lk65YfrDFIr6evkWRjSeOOSws.jpg',\n      original_language: 'en',\n      original_title: 'The Nightmare Before Christmas',\n      genre_ids: [16, 14, 10751],\n      title: 'The Nightmare Before Christmas',\n      vote_average: 7.8,\n      overview:\n        `Tired of scaring humans every October 31 with the same old bag of tricks, Jack Skellington, the spindly king of Halloween Town, kidnaps Santa Claus and plans to deliver shrunken heads and other ghoulish gifts to children on Christmas morning. But as Christmas approaches, Jack's rag-doll girlfriend, Sally, tries to foil his misguided plans.`,\n      release_date: '1993-10-09'\n    }\n  ]\n}"
            },
            {
                "name": "TMDB_STILL_SIZES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "['w92', 'w185', 'w300', 'original']"
            },
            {
                "name": "TMDB_URL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'https://api.themoviedb.org/3'"
            },
            {
                "name": "TORRENTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/mock-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MDBTorrent[]",
                "defaultValue": "[\n  //   {\n  //   id: 1,\n  //   name: 'Valkyrie.DVD-R.NTSC.2008',\n  //   size: 4681064562,\n  //   hash: 'hh9rPLQdJPYDq/dmDuTMogqQYDk='\n  // },\n  // {\n  //   id: 1,\n  //   name: 'Valkyrie.2008.Bluray.1080p.DTS-HD.x264-Grym',\n  //   size: 21702179889,\n  //   hash: '8KBwA9eFjEJgN6/RZSSJP80t91s='\n  // },\n  // {\n  //   id: 1,\n  //   name: 'Valkyrie.2008.BluRay.1080p.x264.AAC.5.1.-.Hon3y',\n  //   size: 2996573771,\n  //   hash: 'HHn7J1vN1Y8nGXJqVz0ZrgwWeJE='\n  // }, {\n  //   id: 1,\n  //   name: 'Valkyrie (2008) 1080p BrRip x264 - 1.70GB - YIFY',\n  //   size: 1827526513,\n  //   hash: 'lop06WdSY2yjNig+yeQrj1wm6jY='\n  // },\n]"
            },
            {
                "name": "TRAK_TV_API_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'b4f1b1e56c6b78ed8970ba48ed2b6d1fcc517d09164af8c10e2be56c45f5f9a7'"
            },
            {
                "name": "TRAK_TV_API_KEY_SECRET",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'76c26a018cc31652644caf51928efedf75d301eed404b51e218edefdb661dc36'"
            },
            {
                "name": "TROUBLE_QUOTES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  { title: `The Sixth Sense`, year: 1999, quote: 'I see dead people.' },\n  { title: `Apollo 13`, year: 1995, quote: 'Houston, we have a problem.' },\n  { title: `Finding Nemo`, year: 2003, quote: 'Just keep swimming.' },\n  { title: `Beyond the Forest`, year: 1949, quote: 'What a dump.' },\n  { title: `Moonstruck`, year: 1987, quote: 'Snap out of it!' },\n  { title: `On Golden Pond`, year: 1981, quote: `Listen to me, mister. You're my knight in shining armor. Don't you forget it. You're going to get back on that horse, and I'm going to be right behind you, holding on tight, and away we're gonna go, go, go!` },\n  { title: `King Kong`, year: 1933, quote: `Oh, no, it wasn't the airplanes. It was Beauty killed the Beast` },\n  { title: `Dirty Harry`, year: 1971, quote: `You've got to ask yourself one question: 'Do I feel lucky?' Well, do ya, punk?` },\n  { title: `The Graduate`, year: 1967, quote: `Plastics.` },\n]"
            },
            {
                "name": "VOTE_COUNT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/advanced-find/advanced-find.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    label: '100',\n    value: 100\n  },\n  {\n    label: '+1,000',\n    value: 1000\n  },\n  {\n    label: '+10,000',\n    value: 10000\n  },\n  {\n    label: '+100,000',\n    value: 100000\n  },\n  {\n    label: '+1,000,000',\n    value: 1000000\n  },\n  {\n    label: '+10,000,000',\n    value: 10000000\n  },\n]"
            },
            {
                "name": "YOUTUBE_API_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'AIzaSyAC1kcZu_DoO7mbrMxMuCpO57iaDByGKV0'"
            },
            {
                "name": "YTS_TORRENT_SINGLE_RESULT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/mock-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "IYTSSingleQuery",
                "defaultValue": "{\n  \"status\": \"ok\",\n  \"status_message\": \"Query was successful\",\n  \"data\": {\n    \"movie_count\": 1,\n    \"limit\": 20,\n    \"page_number\": 1,\n    \"movies\": [\n      {\n        \"id\": 3897,\n        \"url\": \"https:\\/\\/yts.mx\\/movies\\/titanic-1997\",\n        \"imdb_code\": \"tt0120338\",\n        \"title\": \"Titanic\",\n        \"title_english\": \"Titanic\",\n        \"title_long\": \"Titanic (1997)\",\n        \"slug\": \"titanic-1997\",\n        \"year\": 1997,\n        \"rating\": 7.8,\n        \"runtime\": 194,\n        \"genres\": [\n          \"Action\",\n          \"Drama\",\n          \"Romance\"\n        ],\n        \"summary\": \"84 years later, a 100 year-old woman named Rose DeWitt Bukater tells the story to her granddaughter Lizzy Calvert, Brock Lovett, Lewis Bodine, Bobby Buell and Anatoly Mikailavich on the Keldysh about her life set in April 10th 1912, on a ship called Titanic when young Rose boards the departing ship with the upper-class passengers and her mother, Ruth DeWitt Bukater, and her fianc\\u00e9, Caledon Hockley. Meanwhile, a drifter and artist named Jack Dawson and his best friend Fabrizio De Rossi win third-class tickets to the ship in a game. And she explains the whole story from departure until the death of Titanic on its first and last voyage April 15th, 1912 at 2:20 in the morning.\",\n        \"description_full\": \"84 years later, a 100 year-old woman named Rose DeWitt Bukater tells the story to her granddaughter Lizzy Calvert, Brock Lovett, Lewis Bodine, Bobby Buell and Anatoly Mikailavich on the Keldysh about her life set in April 10th 1912, on a ship called Titanic when young Rose boards the departing ship with the upper-class passengers and her mother, Ruth DeWitt Bukater, and her fianc\\u00e9, Caledon Hockley. Meanwhile, a drifter and artist named Jack Dawson and his best friend Fabrizio De Rossi win third-class tickets to the ship in a game. And she explains the whole story from departure until the death of Titanic on its first and last voyage April 15th, 1912 at 2:20 in the morning.\",\n        \"synopsis\": \"84 years later, a 100 year-old woman named Rose DeWitt Bukater tells the story to her granddaughter Lizzy Calvert, Brock Lovett, Lewis Bodine, Bobby Buell and Anatoly Mikailavich on the Keldysh about her life set in April 10th 1912, on a ship called Titanic when young Rose boards the departing ship with the upper-class passengers and her mother, Ruth DeWitt Bukater, and her fianc\\u00e9, Caledon Hockley. Meanwhile, a drifter and artist named Jack Dawson and his best friend Fabrizio De Rossi win third-class tickets to the ship in a game. And she explains the whole story from departure until the death of Titanic on its first and last voyage April 15th, 1912 at 2:20 in the morning.\",\n        \"yt_trailer_code\": \"CHekzSiZjrY\",\n        \"language\": \"English\",\n        \"mpa_rating\": \"PG-13\",\n        \"background_image\": \"https:\\/\\/yts.mx\\/assets\\/images\\/movies\\/Titanic_1997\\/background.jpg\",\n        \"background_image_original\": \"https:\\/\\/yts.mx\\/assets\\/images\\/movies\\/Titanic_1997\\/background.jpg\",\n        \"small_cover_image\": \"https:\\/\\/yts.mx\\/assets\\/images\\/movies\\/Titanic_1997\\/small-cover.jpg\",\n        \"medium_cover_image\": \"https:\\/\\/yts.mx\\/assets\\/images\\/movies\\/Titanic_1997\\/medium-cover.jpg\",\n        \"large_cover_image\": \"https:\\/\\/yts.mx\\/assets\\/images\\/movies\\/Titanic_1997\\/large-cover.jpg\",\n        \"state\": \"ok\",\n        \"torrents\": [\n          {\n            \"url\": \"https:\\/\\/yts.mx\\/torrent\\/download\\/237457BA8029DEF449A0D3EF5B7E508780AC68DB\",\n            \"hash\": \"237457BA8029DEF449A0D3EF5B7E508780AC68DB\",\n            \"quality\": \"3D\",\n            \"type\": \"bluray\",\n            \"seeds\": 75,\n            \"peers\": 13,\n            \"size\": \"2.80 GB\",\n            \"size_bytes\": 3006477107,\n            \"date_uploaded\": \"2015-11-02 04:25:37\",\n            \"date_uploaded_unix\": 1446434737\n          },\n          {\n            \"url\": \"https:\\/\\/yts.mx\\/torrent\\/download\\/A86B4ADB83506BB12CEABAC2F42AE480BA44ECFA\",\n            \"hash\": \"A86B4ADB83506BB12CEABAC2F42AE480BA44ECFA\",\n            \"quality\": \"720p\",\n            \"type\": \"bluray\",\n            \"seeds\": 326,\n            \"peers\": 52,\n            \"size\": \"1.4 GB\",\n            \"size_bytes\": 1503238554,\n            \"date_uploaded\": \"2017-08-11 19:25:11\",\n            \"date_uploaded_unix\": 1502472311\n          },\n          {\n            \"url\": \"https:\\/\\/yts.mx\\/torrent\\/download\\/98CD5D90252265F1C59AB47330FF4C39F48CCC78\",\n            \"hash\": \"98CD5D90252265F1C59AB47330FF4C39F48CCC78\",\n            \"quality\": \"1080p\",\n            \"type\": \"bluray\",\n            \"seeds\": 408,\n            \"peers\": 63,\n            \"size\": \"2.97 GB\",\n            \"size_bytes\": 3189013217,\n            \"date_uploaded\": \"2017-08-12 02:14:57\",\n            \"date_uploaded_unix\": 1502496897\n          }\n        ],\n        \"date_uploaded\": \"2017-08-11 19:25:11\",\n        \"date_uploaded_unix\": 1502472311\n      }\n    ]\n  },\n  \"@meta\": {\n    \"server_time\": 1598788840,\n    \"server_timezone\": \"CET\",\n    \"api_version\": 2,\n    \"execution_time\": \"0 ms\"\n  }\n}"
            },
            {
                "name": "YTS_URL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'https://yts.am/api/v2/list_movies.json'"
            }
        ],
        "functions": [
            {
                "name": "mockDataFactory",
                "file": "src/app/services/mock-data.factory.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "request",
                        "type": "HttpRequest",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "next",
                        "type": "HttpHandler",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Observable | any",
                "jsdoctags": [
                    {
                        "name": "request",
                        "type": "HttpRequest",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "next",
                        "type": "HttpHandler",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [],
        "enumerations": [
            {
                "name": "BookmarkChanges",
                "childs": [
                    {
                        "name": "UPDATE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "update"
                    },
                    {
                        "name": "DELETE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "delete"
                    },
                    {
                        "name": "INSERT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "insert"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/services/ipc.service.ts"
            },
            {
                "name": "BROWSE_TITLES",
                "childs": [
                    {
                        "name": "COMPLETED_WATCHED",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "INCOMPLETE_WATCHED",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "BOOKMARKED",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "FAVORITES",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/components/advanced-find/advanced-find.component.ts"
            },
            {
                "name": "BROWSE_TITLES",
                "childs": [
                    {
                        "name": "COMPLETED_WATCHED",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "INCOMPLETE_WATCHED",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "BOOKMARKED",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "FAVORITES",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/modules/user/browse/browse.component.ts"
            },
            {
                "name": "CollectionName",
                "childs": [
                    {
                        "name": "Bookmark",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "bookmark"
                    },
                    {
                        "name": "UserName",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": ""
                    },
                    {
                        "name": "Watched",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "watched"
                    },
                    {
                        "name": "User",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "user"
                    },
                    {
                        "name": "Config",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "config"
                    },
                    {
                        "name": "Video",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "video"
                    },
                    {
                        "name": "Library",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "library"
                    },
                    {
                        "name": "Favorite",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "favorite"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/services/firebase.service.ts"
            },
            {
                "name": "Department",
                "childs": [
                    {
                        "name": "Art",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Art"
                    },
                    {
                        "name": "Camera",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Camera"
                    },
                    {
                        "name": "CostumeMakeUp",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Costume & Make-Up"
                    },
                    {
                        "name": "Crew",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Crew"
                    },
                    {
                        "name": "Directing",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Directing"
                    },
                    {
                        "name": "Editing",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Editing"
                    },
                    {
                        "name": "Lighting",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Lighting"
                    },
                    {
                        "name": "Production",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Production"
                    },
                    {
                        "name": "Sound",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Sound"
                    },
                    {
                        "name": "VisualEffects",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Visual Effects"
                    },
                    {
                        "name": "Writing",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Writing"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/models/interfaces.ts"
            },
            {
                "name": "FieldName",
                "childs": [
                    {
                        "name": "Bookmark",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "bookmark"
                    },
                    {
                        "name": "Username",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "username"
                    },
                    {
                        "name": "EmailAddress",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "emailAddress"
                    },
                    {
                        "name": "TmdbId",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "tmdbId"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/services/firebase.service.ts"
            },
            {
                "name": "FirebaseOperator",
                "childs": [
                    {
                        "name": "Equal",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "=="
                    },
                    {
                        "name": "LessThan",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "<"
                    },
                    {
                        "name": "LessThanEqual",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "<="
                    },
                    {
                        "name": "GreaterThan",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": ">"
                    },
                    {
                        "name": "GreaterThanEqual",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": ">="
                    },
                    {
                        "name": "ArrayContains",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "array-contains"
                    },
                    {
                        "name": "In",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "in"
                    },
                    {
                        "name": "ArrayContainsAny",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "array-contains-any"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/services/firebase.service.ts"
            },
            {
                "name": "GenreCodes",
                "childs": [
                    {
                        "name": "Action",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 28
                    },
                    {
                        "name": "Adventure",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 12
                    },
                    {
                        "name": "Animation",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 16
                    },
                    {
                        "name": "Comedy",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 35
                    },
                    {
                        "name": "Crime",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 80
                    },
                    {
                        "name": "Documentary",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 99
                    },
                    {
                        "name": "Drama",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 18
                    },
                    {
                        "name": "Family",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 10751
                    },
                    {
                        "name": "Fantasy",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 14
                    },
                    {
                        "name": "History",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 36
                    },
                    {
                        "name": "Horror",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 27
                    },
                    {
                        "name": "Music",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 10402
                    },
                    {
                        "name": "Mystery",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 9648
                    },
                    {
                        "name": "Romance",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 10749
                    },
                    {
                        "name": "ScienceFiction",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 878
                    },
                    {
                        "name": "TVMovie",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 10770
                    },
                    {
                        "name": "Thriller",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 53
                    },
                    {
                        "name": "War",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 10752
                    },
                    {
                        "name": "Western",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 37
                    },
                    {
                        "name": "FilmNoir",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 20000
                    },
                    {
                        "name": "Musical",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 20001
                    },
                    {
                        "name": "News",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 20002
                    },
                    {
                        "name": "RealityTV",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 20003
                    },
                    {
                        "name": "SciFi",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 20004
                    },
                    {
                        "name": "Short",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 20005
                    },
                    {
                        "name": "Sport",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 20006
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/models/interfaces.ts"
            },
            {
                "name": "IpcOperations",
                "childs": [
                    {
                        "name": "FIND",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "find"
                    },
                    {
                        "name": "FIND_ONE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "find-one"
                    },
                    {
                        "name": "FIND_IN_LIST",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "find-in-list"
                    },
                    {
                        "name": "UPDATE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "update"
                    },
                    {
                        "name": "SAVE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "save"
                    },
                    {
                        "name": "REMOVE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "remove"
                    },
                    {
                        "name": "GET_BY_PAGE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "get-by-page"
                    },
                    {
                        "name": "COUNT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "count"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/services/ipc.service.ts"
            },
            {
                "name": "NotificationType",
                "childs": [
                    {
                        "name": "ERROR",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "error"
                    },
                    {
                        "name": "INFO",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "info"
                    },
                    {
                        "name": "WARNING",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "warning"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/services/notification.service.ts"
            },
            {
                "name": "OmdbParameters",
                "childs": [
                    {
                        "name": "ApiKey",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "apikey"
                    },
                    {
                        "name": "ImdbId",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "i"
                    },
                    {
                        "name": "Title",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "t"
                    },
                    {
                        "name": "Type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "type"
                    },
                    {
                        "name": "Year",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "y"
                    },
                    {
                        "name": "Plot",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "plot"
                    },
                    {
                        "name": "Return",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "r"
                    },
                    {
                        "name": "Callback",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "callback"
                    },
                    {
                        "name": "Version",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "v"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/models/interfaces.ts"
            },
            {
                "name": "Quality",
                "childs": [
                    {
                        "name": "SD",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "720p"
                    },
                    {
                        "name": "HD",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "1080p"
                    },
                    {
                        "name": "FHD",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "1440p"
                    },
                    {
                        "name": "FourK",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "4k"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/models/preferences.model.ts"
            },
            {
                "name": "source",
                "childs": [
                    {
                        "name": "TMDB",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "TMDB"
                    },
                    {
                        "name": "IMDB",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "IMDB"
                    },
                    {
                        "name": "MDB",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "MDB"
                    },
                    {
                        "name": "OMDB",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "OMDB"
                    },
                    {
                        "name": "Local",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "local"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/environments/environment.ts"
            },
            {
                "name": "source",
                "childs": [
                    {
                        "name": "TMDB",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "TMDB"
                    },
                    {
                        "name": "IMDB",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "IMDB"
                    },
                    {
                        "name": "MDB",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "MDB"
                    },
                    {
                        "name": "OMDB",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "OMDB"
                    },
                    {
                        "name": "Local",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "local"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/environments/environment.prod.ts"
            },
            {
                "name": "STATUS",
                "childs": [
                    {
                        "name": "login",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "LOGIN"
                    },
                    {
                        "name": "logout",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "LOGOUT"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/core/components/top-navigation/top-navigation.component.ts"
            },
            {
                "name": "TmdbAppendToResponseParameters",
                "childs": [
                    {
                        "name": "AccountStates",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "account_states"
                    },
                    {
                        "name": "Videos",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "videos"
                    },
                    {
                        "name": "Images",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "images"
                    },
                    {
                        "name": "Credits",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "credits"
                    },
                    {
                        "name": "Changes",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "changes"
                    },
                    {
                        "name": "Translations",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "translations"
                    },
                    {
                        "name": "Similar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "similar"
                    },
                    {
                        "name": "ExternalIds",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "external_ids"
                    },
                    {
                        "name": "AlternativeTitles",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "alternative_titles"
                    },
                    {
                        "name": "Keywords",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "keywords"
                    },
                    {
                        "name": "Reviews",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "reviews"
                    },
                    {
                        "name": "Recommendations",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "recommendations"
                    },
                    {
                        "name": "ReleaseDates",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "release_dates"
                    },
                    {
                        "name": "Lists",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "lists"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/models/interfaces.ts"
            },
            {
                "name": "TmdbParameters",
                "childs": [
                    {
                        "name": "ApiKey",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "api_key"
                    },
                    {
                        "name": "AppendToResponse",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "append_to_response"
                    },
                    {
                        "name": "Language",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "language"
                    },
                    {
                        "name": "Region",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "region"
                    },
                    {
                        "name": "SortBy",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "sort_by"
                    },
                    {
                        "name": "CertificationCountry",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "certification_country"
                    },
                    {
                        "name": "Certification",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "certification"
                    },
                    {
                        "name": "CertificationLess",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "certification.lte"
                    },
                    {
                        "name": "CertificationGreater",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "certification.gte"
                    },
                    {
                        "name": "IncludeAdult",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "include_adult"
                    },
                    {
                        "name": "IncludeVideo",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "include_video"
                    },
                    {
                        "name": "Page",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "page"
                    },
                    {
                        "name": "PrimaryReleaseYear",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "primary_release_year"
                    },
                    {
                        "name": "PrimaryReleaseDateGreater",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "primary_release_date.gte"
                    },
                    {
                        "name": "PrimaryReleaseDateLess",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "primary_release_date.lte"
                    },
                    {
                        "name": "ReleaseDateGreater",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "release_date.gte"
                    },
                    {
                        "name": "ReleaseDateLess",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "release_date.lte"
                    },
                    {
                        "name": "WithReleaseType",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "with_release_type"
                    },
                    {
                        "name": "Year",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "year"
                    },
                    {
                        "name": "VoteCountGreater",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "vote_count.gte"
                    },
                    {
                        "name": "VoteCountLess",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "vote_count.lte"
                    },
                    {
                        "name": "VoteAverageGreater",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "vote_average.gte"
                    },
                    {
                        "name": "VoteAverageLess",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "vote_average.lte"
                    },
                    {
                        "name": "WithCast",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "with_cast"
                    },
                    {
                        "name": "WithCrew",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "with_crew"
                    },
                    {
                        "name": "WithPeople",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "with_people"
                    },
                    {
                        "name": "WithCompanies",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "with_companies"
                    },
                    {
                        "name": "WithGenres",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "with_genres"
                    },
                    {
                        "name": "WithoutGenres",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "without_genres"
                    },
                    {
                        "name": "WithKeywords",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "with_keywords"
                    },
                    {
                        "name": "WithoutKeywords",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "without_keywords"
                    },
                    {
                        "name": "WithRuntimeGreater",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "with_runtime.gte"
                    },
                    {
                        "name": "WithRuntimeLess",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "with_runtime.lte"
                    },
                    {
                        "name": "WithOriginalLanguage",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "with_original_language"
                    },
                    {
                        "name": "WithWatchProviders",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "with_watch_providers"
                    },
                    {
                        "name": "WatchRegion",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "watch_region"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/models/interfaces.ts"
            },
            {
                "name": "TmdbReleaseTypes",
                "childs": [
                    {
                        "name": "PREMIERE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Premiere"
                    },
                    {
                        "name": "THEATRICAL_LIMITED",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Theatrical(limited)"
                    },
                    {
                        "name": "THEATRICAL",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Theatrical"
                    },
                    {
                        "name": "DIGITAL",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Digital"
                    },
                    {
                        "name": "PHYSICAL",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Physical"
                    },
                    {
                        "name": "TV",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "TV"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/models/interfaces.ts"
            },
            {
                "name": "TmdbSearchMovieParameters",
                "childs": [
                    {
                        "name": "ApiKey",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "api_key"
                    },
                    {
                        "name": "Language",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "language"
                    },
                    {
                        "name": "Query",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "query"
                    },
                    {
                        "name": "Page",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "page"
                    },
                    {
                        "name": "IncludeAdult",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "include_adult"
                    },
                    {
                        "name": "Region",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "region"
                    },
                    {
                        "name": "Year",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "year"
                    },
                    {
                        "name": "PrimaryReleaseYear",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "primary_release_year"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/models/interfaces.ts"
            }
        ],
        "groupedVariables": {
            "src/app/services/http-interceptor.service.ts": [
                {
                    "name": "backendProvider",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/services/http-interceptor.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  provide: HTTP_INTERCEPTORS,\n  useClass: HttpInterceptorService,\n  multi: true,\n}"
                }
            ],
            "src/app/shared/constants.ts": [
                {
                    "name": "COLOR_LIST",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n    { value: 'white', label: 'White' },\n    { value: 'black', label: 'Black' },\n    { value: 'red', label: 'Red' },\n    { value: 'blue', label: 'Blue' },\n    { value: 'green', label: 'Green' },\n    { value: 'gray', label: 'Gray' },\n  ]"
                },
                {
                    "name": "DECADES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  { display: '1910s', value: 1910 },\n  { display: '1920s', value: 1920 },\n  { display: '1930s', value: 1930 },\n  { display: '1940s', value: 1940 },\n  { display: '1950s', value: 1950 },\n  { display: '1960s', value: 1960 },\n  { display: '1970s', value: 1970 },\n  { display: '1980s', value: 1980 },\n  { display: '1990s', value: 1990 },\n  { display: '2000s', value: 2000 },\n  { display: '2010s', value: 2010 }]"
                },
                {
                    "name": "DEFAULT_PREFERENCES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPreferences",
                    "defaultValue": "{\n  isDarkMode: true,\n  isEnableCache: false,\n  libraryFolders: [],\n  torrentSeedRatio: 0,\n  torrentRatio: 0,\n  subtitle: DEFAULT_SUBTITLES,\n  hotKeys: null,\n  autoPlayTrailer: false,\n  playTrailerBeforeShow: true,\n  playBack: PLAYBACK,\n  library: null,\n  isAutoScan: false,\n  autoScanFrequencyUnit: 'day',\n  autoScanFrequencyValue: 0,\n}"
                },
                {
                    "name": "DEFAULT_SUBTITLES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ISubtitlePreferences",
                    "defaultValue": "{\n  fontColor: '255,255,255',\n  backgroundColor: '0,0,0',\n  backgroundOpacity: '0%',\n  fontOpacity: 1,\n  fontFamily: '',\n  fontSize: '1em',\n  synchronization: 0,\n  textShadow: '3px 3px 5px black'\n}"
                },
                {
                    "name": "FANART_TV_API_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'295c36bf9229fd8369928b7360554c9a'"
                },
                {
                    "name": "FANART_TV_URL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'http://webservice.fanart.tv/v3/movies'"
                },
                {
                    "name": "FONT_SIZE_LIST",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  { value: '1.5vh', label: 'Juts' },\n  { value: '2.5vh', label: 'Medium' },\n  { value: '3.5vh', label: 'Daks' },\n  { value: '5vh', label: 'XL' },\n]"
                },
                {
                    "name": "FREQUENCY_LIST",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  { value: 'min', label: 'minutes' },\n  { value: 'hr', label: 'hours' },\n  { value: 'day', label: 'days' },\n]"
                },
                {
                    "name": "GENRES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IGenre[]",
                    "defaultValue": "[\n  { id: 28, name: 'Action' },\n  { id: 12, name: 'Adventure' },\n  { id: 16, name: 'Animation' },\n  { id: 35, name: 'Comedy' },\n  { id: 80, name: 'Crime' },\n  { id: 99, name: 'Documentary' },\n  { id: 18, name: 'Drama' },\n  { id: 10751, name: 'Family' },\n  { id: 14, name: 'Fantasy' },\n  { id: 36, name: 'History' },\n  { id: 27, name: 'Horror' },\n  { id: 10402, name: 'Music' },\n  { id: 9648, name: 'Mystery' },\n  { id: 10749, name: 'Romance' },\n  { id: 878, name: 'Science Fiction' },\n  { id: 10770, name: 'TV Movie' },\n  { id: 53, name: 'Thriller' },\n  { id: 10752, name: 'War' },\n  { id: 37, name: 'Western' },\n  // mdb reserved\n  { id: 20000, name: 'Film-Noir' },\n  {// similar genre: Music id:10402\n    id: 20001, name: 'Musical'\n  },\n  { id: 20002, name: 'News' },\n  { id: 20003, name: 'Reality-TV' },\n  {\n    // similar genre: Science Fiction id:878\n    id: 20004, name: 'Sci-Fi'\n  },\n  {// another media type\n    id: 20005, name: 'Short'\n  },\n  { id: 20006, name: 'Sport' }\n]"
                },
                {
                    "name": "LANGUAGE_LIST",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  { value: 'en', label: 'English' },\n  { value: 'de', label: 'Deutsch' },\n  { value: 'es', label: 'Spanish' },\n]"
                },
                {
                    "name": "MDB_API_URL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'mdb'"
                },
                {
                    "name": "MONTHS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']"
                },
                {
                    "name": "MOVIE_QUOTES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  { title: `Gone With the Wind`, year: 1939, quote: `Frankly, my dear, I don't give a damn.`, backdrop: '' },\n  { title: 'The Room', year: 2003, quote: `You are tearing me apart, Lisa!`, backdrop: '' },\n  { title: 'Dr. Strangelove', year: 1964, quote: `Gentlemen, you can't fight in here! This is the War Room!`, backdrop: '' },\n  { title: 'Titanic', year: 1997, quote: `I'm king of the world!`, backdrop: '' },\n]"
                },
                {
                    "name": "MY_API_FILMS_API_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'c7e516ed-d9fe-4f3f-b1d9-fde33f63c816'"
                },
                {
                    "name": "MY_API_FILMS_URL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'http://www.myapifilms.com/imdb/'"
                },
                {
                    "name": "OMDB_API_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'3a2fe8bf'"
                },
                {
                    "name": "OMDB_URL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'http://www.omdbapi.com'"
                },
                {
                    "name": "PERCENTAGE_LIST",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  { value: '0%', label: '0%' },\n  { value: '25%', label: '25%' },\n  { value: '50%', label: '50%' },\n  { value: '75%', label: '75%' },\n  { value: '100%', label: '100%' },\n]"
                },
                {
                    "name": "PLAYBACK",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPlaybackPreferences",
                    "defaultValue": "{\n  preferredMode: 'offline',\n  repeat: false,\n  preferredQuality: Quality.HD,\n  volume: 100\n}"
                },
                {
                    "name": "RGB_COLOR_LIST",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n    { value: '255,255,255', label: 'White' },\n    { value: '0,0,0', label: 'Black' },\n    { value: '255,0,0', label: 'Red' },\n    { value: '0,0,255', label: 'Blue' },\n    { value: '0,128,0', label: 'Green' },\n    { value: '128,128,128', label: 'Gray' },\n  ]"
                },
                {
                    "name": "SORT_BY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    label: 'None',\n    value: 'none'\n  },\n  {\n    label: 'Popularity Ascending',\n    value: 'popularity.asc'\n  },\n  {\n    label: 'Popularity Descending',\n    value: 'popularity.desc'\n  },\n  {\n    label: 'Release Date Ascending',\n    value: 'release_date.asc'\n  },\n  {\n    label: 'Release Date Descending',\n    value: 'release_date.desc'\n  },\n  {\n    label: 'Revenue Ascending',\n    value: 'revenue.asc'\n  },\n  {\n    label: 'Revenue Descending',\n    value: 'revenue.desc'\n  },\n  {\n    label: 'Primary Release Date Ascending',\n    value: 'primary_release_date.asc'\n  },\n  {\n    label: 'Primary Release Date Descending',\n    value: 'primary_release_date.desc'\n  },\n  {\n    label: 'Original Title Ascending',\n    value: 'original_title.asc'\n  },\n  {\n    label: 'Original Title Descending',\n    value: 'original_title.desc'\n  },\n  {\n    label: 'Vote Average Ascending',\n    value: 'vote_average.asc'\n  },\n  {\n    label: 'Vote Average Descending',\n    value: 'vote_average.desc'\n  },\n  {\n    label: 'Vote Count Ascending',\n    value: 'vote_count.asc'\n  },\n  {\n    label: 'Vote Count Descending',\n    value: 'vote_count.desc'\n  },\n]"
                },
                {
                    "name": "STRING_REGEX_FILE_SIZE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`^([0-9])\\\\d+$`"
                },
                {
                    "name": "STRING_REGEX_IMAGE_SIZE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`(SX)+([\\\\d])+(.jpg|.jpeg)`"
                },
                {
                    "name": "STRING_REGEX_IMDB_ID",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`(^tt[0-9]{7,8})$`"
                },
                {
                    "name": "STRING_REGEX_OMDB_BOX_OFFICE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`(\\\\$+[\\\\d,]+)`"
                },
                {
                    "name": "STRING_REGEX_OMDB_RELEASE_DATE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`^(\\\\d{2})+\\\\s+([a-z]{3,})+\\\\s+(\\\\d{4})+`"
                },
                {
                    "name": "STRING_REGEX_PREFIX",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`^([a-z]:)`"
                },
                {
                    "name": "STRING_REGEX_TMDB_RELEASE_DATE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`([0-9]{2,4})-([0-9]{2})-([0-9]{2})`"
                },
                {
                    "name": "STRING_REGEX_TMDB_RUNTIME",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`([\\\\d,]+)(\\\\s)(min)`"
                },
                {
                    "name": "STRING_REGEX_YEAR_ONLY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`^([0-9]{4})$`"
                },
                {
                    "name": "testBaseUrl",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'https://jsonplaceholder.typicode.com/todos/1'"
                },
                {
                    "name": "TMDB_API_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'a636ce7bd0c125045f4170644b4d3d25'"
                },
                {
                    "name": "TMDB_BACKGROUND_SIZES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "['w300', 'w780', 'w1280', 'original']"
                },
                {
                    "name": "TMDB_IMAGE_BASE_URL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'http://image.tmdb.org/t/p/'"
                },
                {
                    "name": "TMDB_IMAGE_SECURE_BASE_URL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'https://image.tmdb.org/t/p/'"
                },
                {
                    "name": "TMDB_LOGO_SIZES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "['w45', 'w92', 'w154', 'w185', 'w300', 'w500', 'original']"
                },
                {
                    "name": "TMDB_POSTER_SIZES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "['w92', 'w154', 'w185', 'w342', 'w500', 'w780', 'original']"
                },
                {
                    "name": "TMDB_PROFILE_SIZES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "['w45', 'w185', 'h632', 'original']"
                },
                {
                    "name": "TMDB_STILL_SIZES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "['w92', 'w185', 'w300', 'original']"
                },
                {
                    "name": "TMDB_URL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'https://api.themoviedb.org/3'"
                },
                {
                    "name": "TRAK_TV_API_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'b4f1b1e56c6b78ed8970ba48ed2b6d1fcc517d09164af8c10e2be56c45f5f9a7'"
                },
                {
                    "name": "TRAK_TV_API_KEY_SECRET",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'76c26a018cc31652644caf51928efedf75d301eed404b51e218edefdb661dc36'"
                },
                {
                    "name": "TROUBLE_QUOTES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  { title: `The Sixth Sense`, year: 1999, quote: 'I see dead people.' },\n  { title: `Apollo 13`, year: 1995, quote: 'Houston, we have a problem.' },\n  { title: `Finding Nemo`, year: 2003, quote: 'Just keep swimming.' },\n  { title: `Beyond the Forest`, year: 1949, quote: 'What a dump.' },\n  { title: `Moonstruck`, year: 1987, quote: 'Snap out of it!' },\n  { title: `On Golden Pond`, year: 1981, quote: `Listen to me, mister. You're my knight in shining armor. Don't you forget it. You're going to get back on that horse, and I'm going to be right behind you, holding on tight, and away we're gonna go, go, go!` },\n  { title: `King Kong`, year: 1933, quote: `Oh, no, it wasn't the airplanes. It was Beauty killed the Beast` },\n  { title: `Dirty Harry`, year: 1971, quote: `You've got to ask yourself one question: 'Do I feel lucky?' Well, do ya, punk?` },\n  { title: `The Graduate`, year: 1967, quote: `Plastics.` },\n]"
                },
                {
                    "name": "YOUTUBE_API_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'AIzaSyAC1kcZu_DoO7mbrMxMuCpO57iaDByGKV0'"
                },
                {
                    "name": "YTS_URL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'https://yts.am/api/v2/list_movies.json'"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any"
                }
            ],
            "src/app/mock-data.ts": [
                {
                    "name": "DISPLAYEDMOVIES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/mock-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    title: 'Guardians of the Galaxy',\n    year: 2014,\n    plot:\n      'A group of intergalactic criminals must pull together to stop a fanatical warrior with plans to purge the universe.',\n    imdbId: 'tt2015381',\n    torrents: [],\n    id: 118340\n  },\n  {\n    title: 'The Wailing',\n    year: 2016,\n    plot:\n      'Soon after a stranger arrives in a little village, a mysterious sickness starts spreading. A policeman, drawn into the incident, is forced to solve the mystery in order to save his daughter.',\n    imdbId: 'tt5215952',\n    torrents: [],\n    id: 293670\n  },\n  {\n    title: 'First Man',\n    year: 2018,\n    plot:\n      'A look at the life of the astronaut, Neil Armstrong, and the legendary space mission that led him to become the first man to walk on the Moon on July 20, 1969.',\n    imdbId: 'tt1213641',\n    torrents: [],\n    id: 369972\n  },\n  {\n    title: 'The Karate Kid',\n    year: 1984,\n    plot:\n      'A Japanese martial arts instructor agrees to teach karate to a bullied teenager.',\n    imdbId: 'tt0087538',\n    torrents: [],\n    id: 1885\n  },\n  {\n    title: 'Top Gun',\n    year: 1986,\n    plot: `As students at the United States Navys elite fighter weapons school compete to be best in the class, one daring young pilot learns a few things from a civilian instructor that are not taught in the classroom.\n    `,\n    imdbId: 'tt0092099',\n    torrents: [],\n    id: 744\n  },\n  {\n    title: 'Reservoir Dogs',\n    year: 1992,\n    plot:\n      'When a simple jewelry heist goes horribly wrong, the surviving criminals begin to suspect that one of them is a police informant.',\n    imdbId: 'tt0105236',\n    torrents: [],\n    id: 500\n  },\n  {\n    title: 'Spider-Man',\n    year: 2002,\n    plot:\n      'When bitten by a genetically modified spider, a nerdy, shy, and awkward high school student gains spider-like abilities that he eventually must use to fight evil as a superhero after tragedy befalls his family.',\n    imdbId: 'tt0145487',\n    torrents: [],\n    id: 557\n  },\n  {\n    title: 'Superman Returns',\n    year: 2006,\n    plot:\n      'Superman returns to Earth after spending five years in space examining his homeworld Krypton. But he finds things have changed while he was gone, and he must once again prove himself important to the world.',\n    imdbId: 'tt0348150',\n    torrents: [],\n    id: 1452\n  },\n  {\n    title: 'Home Alone',\n    year: 1990,\n    plot:\n      'An eight-year-old troublemaker must protect his house from a pair of burglars when he is accidentally left home alone by his family during Christmas vacation.',\n    imdbId: 'tt0099785',\n    torrents: [],\n    id: 771\n  }\n]"
                },
                {
                    "name": "MOCK_BULK_DOWNLOAD_TORRENTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/mock-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    id: 1,\n    name: 'Guardians of the Galaxy (2014) 1080p BrRip x264 - YIFY',\n    size: 1988939229,\n    hash: '11A2AC68A11634E980F265CB1433C599D017A759',\n    checked: false\n  },\n  {\n    id: 1,\n    name: 'Guardians of the Galaxy Vol. 2 (2017) 720p BrRip x264 - VPPV',\n    size: 1215947108,\n    hash: '68132C479348C1AA2618D55C8BBEC6EB2597A5BA',\n    checked: false\n  },\n  {\n    id: 1,\n    name: 'The.Wailing.2016.1080p.BluRay.10bit.HEVC-MkvCage [aka Gokseong]',\n    size: 3976321027,\n    hash: '2F157306E5114EA8044302586A89FDC4E0FAC2A1',\n    checked: false\n  },\n  {\n    id: 1,\n    name: 'First.Man.2018.HC.HDRip.XviD.AC3-EVO',\n    size: 1474599225,\n    hash: '885CCCAD7F1942A515DA564FCF62933A105931DB',\n    checked: false\n  },\n  {\n    id: 2,\n    name: 'First.Man.2018.720p.BRRip.x264.MkvCage',\n    size: 1375985558,\n    hash: '712837DCAA3F4275B89E640EB21DAE72D2E0C38B',\n    checked: false\n  },\n  {\n    id: 1,\n    name: 'Home Alone (1990) 1080p BrRip x264 - YIFY',\n    size: 1767740507,\n    hash: '5FEFAC61C0F42FFC43946B3379A540D1A38F6480',\n    checked: false\n  }\n]"
                },
                {
                    "name": "MOCK_MOVIE_DETAIL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/mock-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  id: 1,\n  Title: 'Reservoir Dogs',\n  Year: 1992,\n  Plot:\n    `Eight men eat breakfast at a Los Angeles diner before carrying out a diamond heist. Mob boss Joe Cabot and his son and underboss 'Nice Guy' Eddie Cabot are responsible for planning the job. The rest of the men use aliases issued by Joe Cabot: Mr. Brown, Mr. White, Mr. Blonde, Mr. Blue, Mr. Orange and Mr. Pink.`,\n  genre: '',\n  isAvailable: true,\n  imageDirectory: '',\n  Runtime: '99',\n  Genre: 'Adventure',\n  Director: 'Quentin Tarantino',\n  Writer: 'Quentin Tarantino',\n  Poster: '',\n  torrents: '',\n  backgroundImageDirectory: ''\n}"
                },
                {
                    "name": "MOCK_USER_DATA_LIST",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/mock-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IProfileData[]",
                    "defaultValue": "[\n  {\n    tmdbId: 597, //titanic\n    isFavorite: true,\n    watched: {\n      percentage: 100\n    }\n  },\n  {\n    tmdbId: 857, // svpr\n    isFavorite: true,\n    watched: {\n      percentage: 100\n    }\n  },\n  {\n    tmdbId: 24428, // avengers\n    isBookmark: true,\n  },\n  {\n    tmdbId: 579, // jaws\n    isBookmark: true\n  },\n  {\n    tmdbId: 769, // goodfellas\n    isBookmark: true,\n    watched: {\n      percentage: 51\n    }\n  },\n  {\n    tmdbId: 775996, // goodfellas\n    watched: {\n      percentage: 75\n    },\n    review: {\n      content: 'confusing',\n      rating: 3,\n      id: 213\n    }\n  },\n]"
                },
                {
                    "name": "MOVIEGENRES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/mock-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  { id: 1, code: 'ACT', description: 'Action', isChecked: true },\n  { id: 2, code: 'ADV', description: 'Adventure', isChecked: false },\n  { id: 3, code: 'DOC', description: 'Documentary', isChecked: false },\n  { id: 4, code: 'DRA', description: 'Drama', isChecked: false },\n  { id: 5, code: 'HOR', description: 'Horror', isChecked: false },\n  { id: 6, code: 'SCI', description: 'Sci-Fi', isChecked: true },\n  { id: 7, code: 'THR', description: 'Thriller', isChecked: false }\n]"
                },
                {
                    "name": "MOVIES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/mock-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IOmdbMovieDetail[]",
                    "defaultValue": "[\n  // { id: 1, Title: 'Face Off', Year: 1997, Plot: '', genre: 'Action', isAvailable: false, imageDirectory: './assets/images/1997-face-off-poster1.jpg', Runtime: '156', Genre: '', Director: '', Writer: '', Poster: '', imdbID: '' },\n  // { id: 2, Title: 'Nacho Libre', Year: 2006, Plot: '', genre: 'Comedy', isAvailable: true, imageDirectory: './assets/images/2006-nacho_libre-1.jpg', Runtime: '120', Genre: '', Director: '', Writer: '', Poster: '', imdbID: '' },\n  // { id: 3, Title: 'Salt', Year: 2006, Plot: '', genre: 'Action', isAvailable: false, imageDirectory: './assets/images/2006-salt-1.jpg', Runtime: '110', Genre: '', Director: '', Writer: '', Poster: '', imdbID: '' },\n  // { id: 4, Title: 'Valkyrie', Year: 2008, Plot: '', genre: 'Action', isAvailable: true, imageDirectory: './assets/images/2008-valkyrie-1.jpg', Runtime: '124', Genre: '', Director: '', Writer: '', Poster: '', imdbID: '' },\n  // { id: 5, Title: 'Jaws 2', Year: 1978, Plot: '', genre: 'Thriller', isAvailable: false, imageDirectory: './assets/images/1978-jaws_2.jpg', Runtime: '120', Genre: '', Director: '', Writer: '', Poster: '', imdbID: '' },\n  // { id: 6, Title: 'Paper Towns', Year: 2015, Plot: '', genre: 'Drama', isAvailable: true, imageDirectory: './assets/images/2015-paper_towns.jpg', Runtime: '120', Genre: '', Director: '', Writer: '', Poster: '', imdbID: '' },\n  // { id: 7, Title: 'Good Morning Vietnam', Year: 1987, Plot: '', genre: 'Action', isAvailable: false, imageDirectory: './assets/images/1987-good_morning_vietnam.jpg', Runtime: '120', Genre: '', Director: '', Writer: '', Poster: '', imdbID: '' },\n  // { id: 8, Title: 'Three Musketeers', Year: 2011, Plot: '', genre: 'Action', isAvailable: true, imageDirectory: './assets/images/2011-three_musketeers.jpg', Runtime: '180', Genre: '', Director: '', Writer: '', Poster: '', imdbID: '' }\n]"
                },
                {
                    "name": "TEST_LIBRARY_MOVIES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/mock-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ILibraryMovie[]",
                    "defaultValue": "[\n  {\n    tmdbId: 0,\n    imdbId: 'tt0095956',\n    title: 'Titanic',\n    year: 0,\n    directory: ['D:\\\\media server\\\\movies\\\\titanic.mp4']\n  },\n  {\n    tmdbId: 0,\n    imdbId: 'tt0133093',\n    title: 'Guardians of the Galaxy',\n    year: 0,\n    directory: ['D:\\\\media server\\\\movies\\\\guardians of the galaxy.mp4']\n  },\n  {\n    tmdbId: 680,\n    imdbId: 'tt0110912',\n    title: 'Pulp Fiction',\n    year: 1994,\n    directory: ['D:\\\\media server\\\\movies\\\\pulp fiction.mp4']\n  }\n]"
                },
                {
                    "name": "TEST_OMDB_MOVIE_DETAIL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/mock-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  Title: 'WALL·E',\n  Year: '2008',\n  Rated: 'G',\n  Released: '27 Jun 2008',\n  Runtime: '98 min',\n  Genre: 'Animation, Adventure, Family, Sci-Fi',\n  Director: 'Andrew Stanton',\n  Writer:\n    'Andrew Stantoyzn (original story by), Pete Docter (original story by), Andrew Stanton (screenplay by), Jim Reardon (screenplay by)',\n  Actors: 'Ben Burtt, Elissa Knight, Jeff Garlin, Fred Willard',\n  Plot:\n    'In the distant future, a small waste-collecting robot inadvertently embarks on a space journey that will ultimately decide the fate of mankind.',\n  Language: 'English',\n  Country: 'USA',\n  Awards: 'Won 1 Oscar. Another 89 wins & 90 nominations.',\n  Poster:\n    'https://m.media-amazon.com/images/M/MV5BMjExMTg5OTU0NF5BMl5BanBnXkFtZTcwMjMxMzMzMw@@._V1_SX300.jpg',\n  Ratings: [\n    {\n      Source: 'Internet Movie Database',\n      Value: '8.4/10'\n    },\n    {\n      Source: 'Rotten Tomatoes',\n      Value: '95%'\n    },\n    {\n      Source: 'Metacritic',\n      Value: '95/100'\n    }\n  ],\n  Metascore: '95',\n  imdbRating: '8.4',\n  imdbVotes: '919,942',\n  imdbID: 'tt0910970',\n  Type: 'movie',\n  DVD: '18 Nov 2008',\n  BoxOffice: '$223,749,872',\n  Production: 'Walt Disney Pictures',\n  Website: 'http://www.wall-e.com/',\n  Response: 'True'\n}"
                },
                {
                    "name": "TEST_TMDB_MOVIE_DETAIL2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/mock-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  adult: false,\n  backdrop_path: '/mMZRKb3NVo5ZeSPEIaNW9buLWQ0.jpg',\n  belongs_to_collection: null,\n  budget: 63000000,\n  genres: [\n    {\n      id: 18,\n      name: 'Drama'\n    }\n  ],\n  homepage: 'http://www.foxmovies.com/movies/fight-club',\n  id: 550,\n  imdb_id: 'tt0137523',\n  original_language: 'en',\n  original_title: 'Fight Club',\n  overview: 'A ticking-time-bomb insomniac and a slippery soap salesman channel primal male aggression into a shocking new form of therapy. Their concept catches on, with underground \\'fight clubs\\' forming in every town, until an eccentric gets in the way and ignites an out-of-control spiral toward oblivion.',\n  popularity: 36.556,\n  poster_path: '/adw6Lq9FiC9zjYEpOqfq03ituwp.jpg',\n  production_companies: [\n    {\n      id: 508,\n      logo_path: '/7PzJdsLGlR7oW4J0J5Xcd0pHGRg.png',\n      name: 'Regency Enterprises',\n      origin_country: 'US'\n    },\n    {\n      id: 711,\n      logo_path: '/tEiIH5QesdheJmDAqQwvtN60727.png',\n      name: 'Fox 2000 Pictures',\n      origin_country: 'US'\n    },\n    {\n      id: 20555,\n      logo_path: '/hD8yEGUBlHOcfHYbujp71vD8gZp.png',\n      name: 'Taurus Film',\n      origin_country: 'DE'\n    },\n    {\n      id: 54051,\n      logo_path: null,\n      name: 'Atman Entertainment',\n      origin_country: ''\n    },\n    {\n      id: 54052,\n      logo_path: null,\n      name: 'Knickerbocker Films',\n      origin_country: 'US'\n    },\n    {\n      id: 25,\n      logo_path: '/qZCc1lty5FzX30aOCVRBLzaVmcp.png',\n      name: '20th Century Fox',\n      origin_country: 'US'\n    },\n    {\n      id: 4700,\n      logo_path: '/A32wmjrs9Psf4zw0uaixF0GXfxq.png',\n      name: 'The Linson Company',\n      origin_country: ''\n    }\n  ],\n  production_countries: [\n    {\n      iso_3166_1: 'DE',\n      name: 'Germany'\n    },\n    {\n      iso_3166_1: 'US',\n      name: 'United States of America'\n    }],\n  release_date: '1999-10-15',\n  revenue: 100853753,\n  runtime: 139,\n  spoken_languages: [\n    {\n      iso_639_1: 'en',\n      name: 'English'\n    }\n  ],\n  status: 'Released',\n  tagline: 'Mischief. Mayhem. Soap.',\n  title: 'Fight Club',\n  video: false,\n  vote_average: 8.4,\n  vote_count: 17355\n}"
                },
                {
                    "name": "TEST_TMDB_MOVIE_DETAILS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/mock-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  adult: false,\n  backdrop_path: '/wMgbnUVS9wbRGAdki8fqxKU1O0N.jpg',\n  belongs_to_collection: null,\n  budget: 55000000,\n  genres: [{\n    id: 35,\n    name: 'Comedy'\n  }, {\n    id: 18,\n    name: 'Drama'\n  }, {\n    id: 10749,\n    name: 'Romance'\n  }],\n  homepage: null,\n  id: 13,\n  imdb_id: 'tt0109830',\n  original_language: 'en',\n  original_title: 'Forrest Gump',\n  overview: 'A man with a low IQ has accomplished great things in his life and been present during significant historic events—in each case, far exceeding what anyone imagined he could do. But despite all he has achieved, his one true love eludes him.',\n  popularity: 23.858,\n  poster_path: '/yE5d3BUhE8hCnkMUJOo1QDoOGNz.jpg',\n  production_companies: [{\n    id: 4,\n    logo_path: '/fycMZt242LVjagMByZOLUGbCvv3.png',\n    name: 'Paramount',\n    origin_country: 'US'\n  }],\n  production_countries: [{\n    iso_3166_1: 'US',\n    name: 'United States of America'\n  }],\n  release_date: '1994-07-06',\n  revenue: 677945399,\n  runtime: 142,\n  spoken_languages: [{\n    iso_639_1: 'en',\n    name: 'English'\n  }],\n  status: 'Released',\n  tagline: `Life is like a box of chocolates...you never know what you're gonna get.`,\n  title: 'Forrest Gump',\n  video: false,\n  vote_average: 8.4,\n  vote_count: 15996\n}"
                },
                {
                    "name": "TEST_TMDB_SINGLE_RESULT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/mock-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  popularity: 28.872, vote_count: 13772, video: false, poster_path: '\\/nk11pvocdb5zbFhX5oq5YiLPYMo.jpg', id: 14160, adult: false, backdrop_path: '\\/6fX7NF6IUJCTVssei7Shgl9J6LL.jpg', original_language: 'en', original_title: 'Up', genre_ids: [12, 16, 35, 10751], title: 'Up', vote_average: 7.9, overview: 'Carl Fredricksen spent his entire life dreaming of exploring the globe and experiencing life to its fullest. But at age 78, life seems to have passed him by, until a twist of fate (and a persistent 8-year old Wilderness Explorer named Russell) gives him a new lease on life.', release_date: '2009-05-28'\n}"
                },
                {
                    "name": "TMDB_SEARCH_RESULTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/mock-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ITmdbResultObject",
                    "defaultValue": "{\n  page: 1,\n  total_results: 3810,\n  total_pages: 191,\n  results: [\n    {\n      popularity: 47.572,\n      vote_count: 13899,\n      video: false,\n      poster_path: '/hbhFnRzzg6ZDmm8YAmxBnQpQIPh.jpg',\n      id: 278,\n      adult: false,\n      backdrop_path: '/x7O7oJO7BeXWvqXpLa5YoJd8ZD5.jpg',\n      original_language: 'en',\n      original_title: 'The Shawshank Redemption',\n      genre_ids: [80, 18],\n      title: 'The Shawshank Redemption',\n      vote_average: 8.7,\n      overview:\n        'Framed in the 1940s for the double murder of his wife and her lover, upstanding banker Andy Dufresne begins a new life at the Shawshank prison, where he puts his accounting skills to work for an amoral warden. During his long stretch in prison, Dufresne comes to be admired by the other inmates -- including an older prisoner named Red -- for his integrity and unquenchable sense of hope.',\n      release_date: '1994-09-23'\n    },\n    {\n      popularity: 30.437,\n      vote_count: 16212,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 680,\n      adult: false,\n      backdrop_path: '/4cDFJr4HnXN5AdPw4AKrmLlMWdO.jpg',\n      original_language: 'en',\n      original_title: 'Pulp Fiction',\n      genre_ids: [80, 53],\n      title: 'Pulp Fiction',\n      vote_average: 8.4,\n      overview:\n        `A burger-loving hit man, his philosophical partner, a drug-addled gangster's moll and a washed-up boxer converge in this sprawling, comedic crime caper. Their adventures unfurl in three stories that ingeniously trip back and forth in time.`,\n      release_date: '1994-10-14'\n    },\n    {\n      popularity: 30.008,\n      vote_count: 10939,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 8587,\n      adult: false,\n      backdrop_path: '/kZ9CKeZeKMUtrjZ7RuArjVMTDF4.jpg',\n      original_language: 'en',\n      original_title: 'The Lion King',\n      genre_ids: [16, 18, 10751],\n      title: 'The Lion King',\n      vote_average: 8.2,\n      overview:\n        'A young lion cub named Simba can\\'t wait to be king. But his uncle craves the title for himself and will stop at nothing to get it.',\n      release_date: '1994-06-23'\n    },\n    {\n      popularity: 34.399,\n      id: 101,\n      video: false,\n      vote_count: 8176,\n      vote_average: 8.3,\n      title: 'Léon: The Professional',\n      release_date: '1994-11-18',\n      original_language: 'fr',\n      original_title: 'Léon',\n      genre_ids: [53, 80, 18],\n      backdrop_path: '/dXQ7HILRK1Tg33RT64JwbQI7Osh.jpg',\n      adult: false,\n      overview:\n        'Léon, the top hit man in New York, has earned a rep as an effective \"cleaner\". But when his next-door neighbors are wiped out by a loose-cannon DEA agent, he becomes the unwilling custodian of 12-year-old Mathilda. Before long, Mathilda\\'s thoughts turn to revenge, and she considers following in Léon\\'s footsteps.',\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      isAvailable: true\n    },\n    {\n      popularity: 31.962,\n      vote_count: 15752,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 13,\n      adult: false,\n      backdrop_path: '/wMgbnUVS9wbRGAdki8fqxKU1O0N.jpg',\n      original_language: 'en',\n      original_title: 'Forrest Gump',\n      genre_ids: [35, 18, 10749],\n      title: 'Forrest Gump',\n      vote_average: 8.4,\n      overview:\n        'A man with a low IQ has accomplished great things in his life and been present during significant historic events—in each case, far exceeding what anyone imagined he could do. But despite all he has achieved, his one true love eludes him.',\n      release_date: '1994-07-06'\n    },\n    {\n      popularity: 24.394,\n      vote_count: 5628,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 854,\n      adult: false,\n      backdrop_path: '/oYVf9gqxZduttG6HW2Qo4ZUxLWW.jpg',\n      original_language: 'en',\n      original_title: 'The Mask',\n      genre_ids: [35, 80, 14, 10749],\n      title: 'The Mask',\n      vote_average: 6.8,\n      overview:\n        'When timid bank clerk Stanley Ipkiss discovers a magical mask containing the spirit of the Norse god Loki, his entire life changes. While wearing the mask, Ipkiss becomes a supernatural playboy exuding charm and confidence which allows him to catch the eye of local nightclub singer Tina Carlyle. Unfortunately, under the mask\\'s influence, Ipkiss also robs a bank, which angers junior crime lord Dorian Tyrell, whose goons get blamed for the heist.',\n      release_date: '1994-07-29'\n    },\n    {\n      popularity: 26.233,\n      vote_count: 4409,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 408,\n      adult: false,\n      backdrop_path: '/c66otZnSdri67kR7ps92kRX849o.jpg',\n      original_language: 'en',\n      original_title: 'Snow White and the Seven Dwarfs',\n      genre_ids: [16, 14, 10751],\n      title: 'Snow White and the Seven Dwarfs',\n      vote_average: 7,\n      overview:\n        'A beautiful girl, Snow White, takes refuge in the forest in the house of seven dwarfs to hide from her stepmother, the wicked Queen. The Queen is jealous because she wants to be known as \"the fairest in the land,\" and Snow White\\'s beauty surpasses her own.',\n      release_date: '1937-12-21'\n    },\n    {\n      popularity: 25.24,\n      vote_count: 8547,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 424,\n      adult: false,\n      backdrop_path: '/cTNYRUTXkBgPH3wP3kmPUB5U6dA.jpg',\n      original_language: 'en',\n      original_title: 'Schindler\\'s List',\n      genre_ids: [18, 36, 10752],\n      title: 'Schindler\\'s List',\n      vote_average: 8.6,\n      overview:\n        'The true story of how businessman Oskar Schindler saved over a thousand Jewish lives from the Nazis while they worked as slaves in his factory during World War II.',\n      release_date: '1993-12-15'\n    },\n    {\n      popularity: 20.34,\n      vote_count: 7817,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 500,\n      adult: false,\n      backdrop_path: '/fupyzBwFAn1PoeCXhp54bYVM2ER.jpg',\n      original_language: 'en',\n      original_title: 'Reservoir Dogs',\n      genre_ids: [80, 53],\n      title: 'Reservoir Dogs',\n      vote_average: 8.2,\n      overview:\n        'A botched robbery indicates a police informant, and the pressure mounts in the aftermath at a warehouse. Crime begets violence as the survivors -- veteran Mr. White, newcomer Mr. Orange, psychopathic parolee Mr. Blonde, bickering weasel Mr. Pink and Nice Guy Eddie -- unravel.',\n      release_date: '1992-10-23'\n    },\n    {\n      popularity: 11.398,\n      vote_count: 1295,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 888,\n      adult: false,\n      backdrop_path: '/vbWvWqZJiEiffj8xag0owDExRVg.jpg',\n      original_language: 'en',\n      original_title: 'The Flintstones',\n      genre_ids: [35, 14, 10751],\n      title: 'The Flintstones',\n      vote_average: 5.2,\n      overview:\n        'Modern Stone Age family the Flintstones hit the big screen in this live-action version of the classic cartoon. Fred helps Barney adopt a child. Barney sees an opportunity to repay him when Slate Mining tests its employees to find a new executive. But no good deed goes unpunished.',\n      release_date: '1994-05-26'\n    },\n    {\n      popularity: 13.378,\n      id: 9739,\n      video: false,\n      vote_count: 1801,\n      vote_average: 6.5,\n      title: 'Demolition Man',\n      release_date: '1993-10-08',\n      original_language: 'en',\n      original_title: 'Demolition Man',\n      genre_ids: [80, 28, 878],\n      backdrop_path: '/2p5rA1NRoyyAFfzdHl1Ab1RN3qr.jpg',\n      adult: false,\n      overview:\n        'Simon Phoenix, a violent criminal cryogenically frozen in 1996, escapes during a parole hearing in 2032 in the utopia of San Angeles. Police are incapable of dealing with his violent ways and turn to his captor, who had also been cryogenically frozen after being wrongfully accused of killing 30 innocent people while apprehending Phoenix.',\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg'\n    },\n    {\n      popularity: 13.039,\n      vote_count: 2070,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 36955,\n      adult: false,\n      backdrop_path: '/o2agns0LEqyEUCByMT8ViIOio7r.jpg',\n      original_language: 'en',\n      original_title: 'True Lies',\n      genre_ids: [28, 53],\n      title: 'True Lies',\n      vote_average: 6.9,\n      overview:\n        'Harry Tasker is a secret agent for the United States Government. For years, he has kept his job from his wife, but is forced to reveal his identity and try to stop nuclear terrorists when he and his wife are kidnapped by them.',\n      release_date: '1994-07-15'\n    },\n    {\n      popularity: 16.688,\n      vote_count: 2909,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 10112,\n      adult: false,\n      backdrop_path: '/fojdVtSsZa7fXyJQ6w1Exw7GWum.jpg',\n      original_language: 'en',\n      original_title: 'The Aristocats',\n      genre_ids: [12, 16, 35, 10751],\n      title: 'The Aristocats',\n      vote_average: 7.3,\n      overview:\n        'When Madame Adelaide Bonfamille leaves her fortune to Duchess and her children—Bonfamille’s beloved family of cats—the butler plots to steal the money and kidnaps the legatees, leaving them out on a country road. All seems lost until the wily Thomas O’Malley Cat and his jazz-playing alley cats come to the aristocats’ rescue.',\n      release_date: '1970-12-24'\n    },\n    {\n      popularity: 20.126,\n      vote_count: 4866,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 620,\n      adult: false,\n      backdrop_path: '/qmDy6Rdom8d8UFj9GeAAtVIjTRT.jpg',\n      original_language: 'en',\n      original_title: 'Ghostbusters',\n      genre_ids: [35, 14],\n      title: 'Ghostbusters',\n      vote_average: 7.4,\n      overview:\n        'After losing their academic posts at a prestigious university, a team of parapsychologists goes into business as proton-pack-toting \"ghostbusters\" who exterminate ghouls, hobgoblins and supernatural pests of all stripes. An ad campaign pays off when a knockout cellist hires the squad to purge her swanky digs of demons that appear to be living in her refrigerator.',\n      release_date: '1984-06-08'\n    },\n    {\n      popularity: 15.25,\n      id: 2758,\n      video: false,\n      vote_count: 1312,\n      vote_average: 6.7,\n      title: 'Addams Family Values',\n      release_date: '1993-11-19',\n      original_language: 'en',\n      original_title: 'Addams Family Values',\n      genre_ids: [35, 10751, 14],\n      backdrop_path: '/i84FfYcljpH9FOO26PdvBWzLGRl.jpg',\n      adult: false,\n      overview:\n        'Siblings Wednesday and Pugsley Addams will stop at nothing to get rid of Pubert, the new baby boy adored by parents Gomez and Morticia. Things go from bad to worse when the new \"black widow\" nanny, Debbie Jellinsky, launches her plan to add Fester to her collection of dead husbands.',\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg'\n    },\n    {\n      popularity: 18.017,\n      vote_count: 3184,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 3170,\n      adult: false,\n      backdrop_path: '/zM2Rdsh4kiTEXPkkO9lWBzZpwAH.jpg',\n      original_language: 'en',\n      original_title: 'Bambi',\n      genre_ids: [16, 18, 10751],\n      title: 'Bambi',\n      vote_average: 6.9,\n      overview:\n        `Bambi's tale unfolds from season to season as the young prince of the forest learns about life, love, and friends.`,\n      release_date: '1942-08-21'\n    },\n    {\n      popularity: 13.155,\n      vote_count: 461,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 10438,\n      adult: false,\n      backdrop_path: '/1MaJH9m8TfmwLgS98kcjU4faiMg.jpg',\n      original_language: 'en',\n      original_title: 'Beethoven\\'s 2nd',\n      genre_ids: [35, 10751],\n      title: 'Beethoven\\'s 2nd',\n      vote_average: 5.2,\n      overview:\n        `Beethoven is back -- and this time, he has a whole brood with him now that he's met his canine match, Missy, and fathered a family. The only problem is that Missy's owner, Regina, wants to sell the puppies and tear the clan apart. It's up to Beethoven and the Newton kids to save the day and keep everyone together.`,\n      release_date: '1993-12-16'\n    },\n    {\n      popularity: 13.779,\n      id: 44251,\n      video: false,\n      vote_count: 281,\n      vote_average: 6.5,\n      title: 'Dragon Ball Z: Broly – Second Coming',\n      release_date: '1994-03-12',\n      original_language: 'ja',\n      original_title: 'ドラゴンボールＺ 危険なふたり！超戦士はねむれない',\n      genre_ids: [28, 16, 878],\n      backdrop_path: '/d0A7xd5Qnm6CCH25HXKHmcBDmmm.jpg',\n      adult: false,\n      overview:\n        'A Saiyan Space pod crash-lands on Earth out of which a wounded Saiyan crawls: Broly, the Legendary Super Saiyan. The wounded Broly shouts out in frustration and turns into normal form. The place soon freezes, trapping him in it and he falls into a coma.',\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg'\n    },\n    {\n      popularity: 14.604,\n      vote_count: 3268,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 1637,\n      adult: false,\n      backdrop_path: '/pGVpDc6MgLRtOYdxsA5fhj1SZki.jpg',\n      original_language: 'en',\n      original_title: 'Speed',\n      genre_ids: [28, 12, 80],\n      title: 'Speed',\n      vote_average: 6.9,\n      overview:\n        `Los Angeles SWAT cop Jack Traven is up against bomb expert Howard Payne, who's after major ransom money. First it's a rigged elevator in a very tall building. Then it's a rigged bus--if it slows, it will blow, bad enough any day, but a nightmare in LA traffic. And that's still not the end.`,\n      release_date: '1994-06-09'\n    },\n    {\n      popularity: 21.341,\n      vote_count: 4964,\n      video: false,\n      poster_path: '/uvMjNLot0dG7CX4HZPme2WDkMmE.jpg',\n      id: 9479,\n      adult: false,\n      backdrop_path: '/16lk65YfrDFIr6evkWRjSeOOSws.jpg',\n      original_language: 'en',\n      original_title: 'The Nightmare Before Christmas',\n      genre_ids: [16, 14, 10751],\n      title: 'The Nightmare Before Christmas',\n      vote_average: 7.8,\n      overview:\n        `Tired of scaring humans every October 31 with the same old bag of tricks, Jack Skellington, the spindly king of Halloween Town, kidnaps Santa Claus and plans to deliver shrunken heads and other ghoulish gifts to children on Christmas morning. But as Christmas approaches, Jack's rag-doll girlfriend, Sally, tries to foil his misguided plans.`,\n      release_date: '1993-10-09'\n    }\n  ]\n}"
                },
                {
                    "name": "TORRENTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/mock-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MDBTorrent[]",
                    "defaultValue": "[\n  //   {\n  //   id: 1,\n  //   name: 'Valkyrie.DVD-R.NTSC.2008',\n  //   size: 4681064562,\n  //   hash: 'hh9rPLQdJPYDq/dmDuTMogqQYDk='\n  // },\n  // {\n  //   id: 1,\n  //   name: 'Valkyrie.2008.Bluray.1080p.DTS-HD.x264-Grym',\n  //   size: 21702179889,\n  //   hash: '8KBwA9eFjEJgN6/RZSSJP80t91s='\n  // },\n  // {\n  //   id: 1,\n  //   name: 'Valkyrie.2008.BluRay.1080p.x264.AAC.5.1.-.Hon3y',\n  //   size: 2996573771,\n  //   hash: 'HHn7J1vN1Y8nGXJqVz0ZrgwWeJE='\n  // }, {\n  //   id: 1,\n  //   name: 'Valkyrie (2008) 1080p BrRip x264 - 1.70GB - YIFY',\n  //   size: 1827526513,\n  //   hash: 'lop06WdSY2yjNig+yeQrj1wm6jY='\n  // },\n]"
                },
                {
                    "name": "YTS_TORRENT_SINGLE_RESULT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/mock-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IYTSSingleQuery",
                    "defaultValue": "{\n  \"status\": \"ok\",\n  \"status_message\": \"Query was successful\",\n  \"data\": {\n    \"movie_count\": 1,\n    \"limit\": 20,\n    \"page_number\": 1,\n    \"movies\": [\n      {\n        \"id\": 3897,\n        \"url\": \"https:\\/\\/yts.mx\\/movies\\/titanic-1997\",\n        \"imdb_code\": \"tt0120338\",\n        \"title\": \"Titanic\",\n        \"title_english\": \"Titanic\",\n        \"title_long\": \"Titanic (1997)\",\n        \"slug\": \"titanic-1997\",\n        \"year\": 1997,\n        \"rating\": 7.8,\n        \"runtime\": 194,\n        \"genres\": [\n          \"Action\",\n          \"Drama\",\n          \"Romance\"\n        ],\n        \"summary\": \"84 years later, a 100 year-old woman named Rose DeWitt Bukater tells the story to her granddaughter Lizzy Calvert, Brock Lovett, Lewis Bodine, Bobby Buell and Anatoly Mikailavich on the Keldysh about her life set in April 10th 1912, on a ship called Titanic when young Rose boards the departing ship with the upper-class passengers and her mother, Ruth DeWitt Bukater, and her fianc\\u00e9, Caledon Hockley. Meanwhile, a drifter and artist named Jack Dawson and his best friend Fabrizio De Rossi win third-class tickets to the ship in a game. And she explains the whole story from departure until the death of Titanic on its first and last voyage April 15th, 1912 at 2:20 in the morning.\",\n        \"description_full\": \"84 years later, a 100 year-old woman named Rose DeWitt Bukater tells the story to her granddaughter Lizzy Calvert, Brock Lovett, Lewis Bodine, Bobby Buell and Anatoly Mikailavich on the Keldysh about her life set in April 10th 1912, on a ship called Titanic when young Rose boards the departing ship with the upper-class passengers and her mother, Ruth DeWitt Bukater, and her fianc\\u00e9, Caledon Hockley. Meanwhile, a drifter and artist named Jack Dawson and his best friend Fabrizio De Rossi win third-class tickets to the ship in a game. And she explains the whole story from departure until the death of Titanic on its first and last voyage April 15th, 1912 at 2:20 in the morning.\",\n        \"synopsis\": \"84 years later, a 100 year-old woman named Rose DeWitt Bukater tells the story to her granddaughter Lizzy Calvert, Brock Lovett, Lewis Bodine, Bobby Buell and Anatoly Mikailavich on the Keldysh about her life set in April 10th 1912, on a ship called Titanic when young Rose boards the departing ship with the upper-class passengers and her mother, Ruth DeWitt Bukater, and her fianc\\u00e9, Caledon Hockley. Meanwhile, a drifter and artist named Jack Dawson and his best friend Fabrizio De Rossi win third-class tickets to the ship in a game. And she explains the whole story from departure until the death of Titanic on its first and last voyage April 15th, 1912 at 2:20 in the morning.\",\n        \"yt_trailer_code\": \"CHekzSiZjrY\",\n        \"language\": \"English\",\n        \"mpa_rating\": \"PG-13\",\n        \"background_image\": \"https:\\/\\/yts.mx\\/assets\\/images\\/movies\\/Titanic_1997\\/background.jpg\",\n        \"background_image_original\": \"https:\\/\\/yts.mx\\/assets\\/images\\/movies\\/Titanic_1997\\/background.jpg\",\n        \"small_cover_image\": \"https:\\/\\/yts.mx\\/assets\\/images\\/movies\\/Titanic_1997\\/small-cover.jpg\",\n        \"medium_cover_image\": \"https:\\/\\/yts.mx\\/assets\\/images\\/movies\\/Titanic_1997\\/medium-cover.jpg\",\n        \"large_cover_image\": \"https:\\/\\/yts.mx\\/assets\\/images\\/movies\\/Titanic_1997\\/large-cover.jpg\",\n        \"state\": \"ok\",\n        \"torrents\": [\n          {\n            \"url\": \"https:\\/\\/yts.mx\\/torrent\\/download\\/237457BA8029DEF449A0D3EF5B7E508780AC68DB\",\n            \"hash\": \"237457BA8029DEF449A0D3EF5B7E508780AC68DB\",\n            \"quality\": \"3D\",\n            \"type\": \"bluray\",\n            \"seeds\": 75,\n            \"peers\": 13,\n            \"size\": \"2.80 GB\",\n            \"size_bytes\": 3006477107,\n            \"date_uploaded\": \"2015-11-02 04:25:37\",\n            \"date_uploaded_unix\": 1446434737\n          },\n          {\n            \"url\": \"https:\\/\\/yts.mx\\/torrent\\/download\\/A86B4ADB83506BB12CEABAC2F42AE480BA44ECFA\",\n            \"hash\": \"A86B4ADB83506BB12CEABAC2F42AE480BA44ECFA\",\n            \"quality\": \"720p\",\n            \"type\": \"bluray\",\n            \"seeds\": 326,\n            \"peers\": 52,\n            \"size\": \"1.4 GB\",\n            \"size_bytes\": 1503238554,\n            \"date_uploaded\": \"2017-08-11 19:25:11\",\n            \"date_uploaded_unix\": 1502472311\n          },\n          {\n            \"url\": \"https:\\/\\/yts.mx\\/torrent\\/download\\/98CD5D90252265F1C59AB47330FF4C39F48CCC78\",\n            \"hash\": \"98CD5D90252265F1C59AB47330FF4C39F48CCC78\",\n            \"quality\": \"1080p\",\n            \"type\": \"bluray\",\n            \"seeds\": 408,\n            \"peers\": 63,\n            \"size\": \"2.97 GB\",\n            \"size_bytes\": 3189013217,\n            \"date_uploaded\": \"2017-08-12 02:14:57\",\n            \"date_uploaded_unix\": 1502496897\n          }\n        ],\n        \"date_uploaded\": \"2017-08-11 19:25:11\",\n        \"date_uploaded_unix\": 1502472311\n      }\n    ]\n  },\n  \"@meta\": {\n    \"server_time\": 1598788840,\n    \"server_timezone\": \"CET\",\n    \"api_version\": 2,\n    \"execution_time\": \"0 ms\"\n  }\n}"
                }
            ],
            "src/app/encoding.constant.ts": [
                {
                    "name": "ENCODING_LIST",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/encoding.constant.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    \"encodings\": [\n      {\n        \"labels\": [\n          \"unicode-1-1-utf-8\",\n          \"unicode11utf8\",\n          \"unicode20utf8\",\n          \"utf-8\",\n          \"utf8\",\n          \"x-unicode20utf8\"\n        ],\n        \"name\": \"UTF-8\"\n      }\n    ],\n    \"heading\": \"The Encoding\"\n  },\n  {\n    \"encodings\": [\n      {\n        \"labels\": [\n          \"866\",\n          \"cp866\",\n          \"csibm866\",\n          \"ibm866\"\n        ],\n        \"name\": \"IBM866\"\n      },\n      {\n        \"labels\": [\n          \"csisolatin2\",\n          \"iso-8859-2\",\n          \"iso-ir-101\",\n          \"iso8859-2\",\n          \"iso88592\",\n          \"iso_8859-2\",\n          \"iso_8859-2:1987\",\n          \"l2\",\n          \"latin2\"\n        ],\n        \"name\": \"ISO-8859-2\"\n      },\n      {\n        \"labels\": [\n          \"csisolatin3\",\n          \"iso-8859-3\",\n          \"iso-ir-109\",\n          \"iso8859-3\",\n          \"iso88593\",\n          \"iso_8859-3\",\n          \"iso_8859-3:1988\",\n          \"l3\",\n          \"latin3\"\n        ],\n        \"name\": \"ISO-8859-3\"\n      },\n      {\n        \"labels\": [\n          \"csisolatin4\",\n          \"iso-8859-4\",\n          \"iso-ir-110\",\n          \"iso8859-4\",\n          \"iso88594\",\n          \"iso_8859-4\",\n          \"iso_8859-4:1988\",\n          \"l4\",\n          \"latin4\"\n        ],\n        \"name\": \"ISO-8859-4\"\n      },\n      {\n        \"labels\": [\n          \"csisolatincyrillic\",\n          \"cyrillic\",\n          \"iso-8859-5\",\n          \"iso-ir-144\",\n          \"iso8859-5\",\n          \"iso88595\",\n          \"iso_8859-5\",\n          \"iso_8859-5:1988\"\n        ],\n        \"name\": \"ISO-8859-5\"\n      },\n      {\n        \"labels\": [\n          \"arabic\",\n          \"asmo-708\",\n          \"csiso88596e\",\n          \"csiso88596i\",\n          \"csisolatinarabic\",\n          \"ecma-114\",\n          \"iso-8859-6\",\n          \"iso-8859-6-e\",\n          \"iso-8859-6-i\",\n          \"iso-ir-127\",\n          \"iso8859-6\",\n          \"iso88596\",\n          \"iso_8859-6\",\n          \"iso_8859-6:1987\"\n        ],\n        \"name\": \"ISO-8859-6\"\n      },\n      {\n        \"labels\": [\n          \"csisolatingreek\",\n          \"ecma-118\",\n          \"elot_928\",\n          \"greek\",\n          \"greek8\",\n          \"iso-8859-7\",\n          \"iso-ir-126\",\n          \"iso8859-7\",\n          \"iso88597\",\n          \"iso_8859-7\",\n          \"iso_8859-7:1987\",\n          \"sun_eu_greek\"\n        ],\n        \"name\": \"ISO-8859-7\"\n      },\n      {\n        \"labels\": [\n          \"csiso88598e\",\n          \"csisolatinhebrew\",\n          \"hebrew\",\n          \"iso-8859-8\",\n          \"iso-8859-8-e\",\n          \"iso-ir-138\",\n          \"iso8859-8\",\n          \"iso88598\",\n          \"iso_8859-8\",\n          \"iso_8859-8:1988\",\n          \"visual\"\n        ],\n        \"name\": \"ISO-8859-8\"\n      },\n      {\n        \"labels\": [\n          \"csiso88598i\",\n          \"iso-8859-8-i\",\n          \"logical\"\n        ],\n        \"name\": \"ISO-8859-8-I\"\n      },\n      {\n        \"labels\": [\n          \"csisolatin6\",\n          \"iso-8859-10\",\n          \"iso-ir-157\",\n          \"iso8859-10\",\n          \"iso885910\",\n          \"l6\",\n          \"latin6\"\n        ],\n        \"name\": \"ISO-8859-10\"\n      },\n      {\n        \"labels\": [\n          \"iso-8859-13\",\n          \"iso8859-13\",\n          \"iso885913\"\n        ],\n        \"name\": \"ISO-8859-13\"\n      },\n      {\n        \"labels\": [\n          \"iso-8859-14\",\n          \"iso8859-14\",\n          \"iso885914\"\n        ],\n        \"name\": \"ISO-8859-14\"\n      },\n      {\n        \"labels\": [\n          \"csisolatin9\",\n          \"iso-8859-15\",\n          \"iso8859-15\",\n          \"iso885915\",\n          \"iso_8859-15\",\n          \"l9\"\n        ],\n        \"name\": \"ISO-8859-15\"\n      },\n      {\n        \"labels\": [\n          \"iso-8859-16\"\n        ],\n        \"name\": \"ISO-8859-16\"\n      },\n      {\n        \"labels\": [\n          \"cskoi8r\",\n          \"koi\",\n          \"koi8\",\n          \"koi8-r\",\n          \"koi8_r\"\n        ],\n        \"name\": \"KOI8-R\"\n      },\n      {\n        \"labels\": [\n          \"koi8-ru\",\n          \"koi8-u\"\n        ],\n        \"name\": \"KOI8-U\"\n      },\n      {\n        \"labels\": [\n          \"csmacintosh\",\n          \"mac\",\n          \"macintosh\",\n          \"x-mac-roman\"\n        ],\n        \"name\": \"macintosh\"\n      },\n      {\n        \"labels\": [\n          \"dos-874\",\n          \"iso-8859-11\",\n          \"iso8859-11\",\n          \"iso885911\",\n          \"tis-620\",\n          \"windows-874\"\n        ],\n        \"name\": \"windows-874\"\n      },\n      {\n        \"labels\": [\n          \"cp1250\",\n          \"windows-1250\",\n          \"x-cp1250\"\n        ],\n        \"name\": \"windows-1250\"\n      },\n      {\n        \"labels\": [\n          \"cp1251\",\n          \"windows-1251\",\n          \"x-cp1251\"\n        ],\n        \"name\": \"windows-1251\"\n      },\n      {\n        \"labels\": [\n          \"ansi_x3.4-1968\",\n          \"ascii\",\n          \"cp1252\",\n          \"cp819\",\n          \"csisolatin1\",\n          \"ibm819\",\n          \"iso-8859-1\",\n          \"iso-ir-100\",\n          \"iso8859-1\",\n          \"iso88591\",\n          \"iso_8859-1\",\n          \"iso_8859-1:1987\",\n          \"l1\",\n          \"latin1\",\n          \"us-ascii\",\n          \"windows-1252\",\n          \"x-cp1252\"\n        ],\n        \"name\": \"windows-1252\"\n      },\n      {\n        \"labels\": [\n          \"cp1253\",\n          \"windows-1253\",\n          \"x-cp1253\"\n        ],\n        \"name\": \"windows-1253\"\n      },\n      {\n        \"labels\": [\n          \"cp1254\",\n          \"csisolatin5\",\n          \"iso-8859-9\",\n          \"iso-ir-148\",\n          \"iso8859-9\",\n          \"iso88599\",\n          \"iso_8859-9\",\n          \"iso_8859-9:1989\",\n          \"l5\",\n          \"latin5\",\n          \"windows-1254\",\n          \"x-cp1254\"\n        ],\n        \"name\": \"windows-1254\"\n      },\n      {\n        \"labels\": [\n          \"cp1255\",\n          \"windows-1255\",\n          \"x-cp1255\"\n        ],\n        \"name\": \"windows-1255\"\n      },\n      {\n        \"labels\": [\n          \"cp1256\",\n          \"windows-1256\",\n          \"x-cp1256\"\n        ],\n        \"name\": \"windows-1256\"\n      },\n      {\n        \"labels\": [\n          \"cp1257\",\n          \"windows-1257\",\n          \"x-cp1257\"\n        ],\n        \"name\": \"windows-1257\"\n      },\n      {\n        \"labels\": [\n          \"cp1258\",\n          \"windows-1258\",\n          \"x-cp1258\"\n        ],\n        \"name\": \"windows-1258\"\n      },\n      {\n        \"labels\": [\n          \"x-mac-cyrillic\",\n          \"x-mac-ukrainian\"\n        ],\n        \"name\": \"x-mac-cyrillic\"\n      }\n    ],\n    \"heading\": \"Legacy single-byte encodings\"\n  },\n  {\n    \"encodings\": [\n      {\n        \"labels\": [\n          \"chinese\",\n          \"csgb2312\",\n          \"csiso58gb231280\",\n          \"gb2312\",\n          \"gb_2312\",\n          \"gb_2312-80\",\n          \"gbk\",\n          \"iso-ir-58\",\n          \"x-gbk\"\n        ],\n        \"name\": \"GBK\"\n      },\n      {\n        \"labels\": [\n          \"gb18030\"\n        ],\n        \"name\": \"gb18030\"\n      }\n    ],\n    \"heading\": \"Legacy multi-byte Chinese (simplified) encodings\"\n  },\n  {\n    \"encodings\": [\n      {\n        \"labels\": [\n          \"big5\",\n          \"big5-hkscs\",\n          \"cn-big5\",\n          \"csbig5\",\n          \"x-x-big5\"\n        ],\n        \"name\": \"Big5\"\n      }\n    ],\n    \"heading\": \"Legacy multi-byte Chinese (traditional) encodings\"\n  },\n  {\n    \"encodings\": [\n      {\n        \"labels\": [\n          \"cseucpkdfmtjapanese\",\n          \"euc-jp\",\n          \"x-euc-jp\"\n        ],\n        \"name\": \"EUC-JP\"\n      },\n      {\n        \"labels\": [\n          \"csiso2022jp\",\n          \"iso-2022-jp\"\n        ],\n        \"name\": \"ISO-2022-JP\"\n      },\n      {\n        \"labels\": [\n          \"csshiftjis\",\n          \"ms932\",\n          \"ms_kanji\",\n          \"shift-jis\",\n          \"shift_jis\",\n          \"sjis\",\n          \"windows-31j\",\n          \"x-sjis\"\n        ],\n        \"name\": \"Shift_JIS\"\n      }\n    ],\n    \"heading\": \"Legacy multi-byte Japanese encodings\"\n  },\n  {\n    \"encodings\": [\n      {\n        \"labels\": [\n          \"cseuckr\",\n          \"csksc56011987\",\n          \"euc-kr\",\n          \"iso-ir-149\",\n          \"korean\",\n          \"ks_c_5601-1987\",\n          \"ks_c_5601-1989\",\n          \"ksc5601\",\n          \"ksc_5601\",\n          \"windows-949\"\n        ],\n        \"name\": \"EUC-KR\"\n      }\n    ],\n    \"heading\": \"Legacy multi-byte Korean encodings\"\n  },\n  {\n    \"encodings\": [\n      {\n        \"labels\": [\n          \"csiso2022kr\",\n          \"hz-gb-2312\",\n          \"iso-2022-cn\",\n          \"iso-2022-cn-ext\",\n          \"iso-2022-kr\",\n          \"replacement\"\n        ],\n        \"name\": \"replacement\"\n      },\n      {\n        \"labels\": [\n          \"unicodefffe\",\n          \"utf-16be\"\n        ],\n        \"name\": \"UTF-16BE\"\n      },\n      {\n        \"labels\": [\n          \"csunicode\",\n          \"iso-10646-ucs-2\",\n          \"ucs-2\",\n          \"unicode\",\n          \"unicodefeff\",\n          \"utf-16\",\n          \"utf-16le\"\n        ],\n        \"name\": \"UTF-16LE\"\n      },\n      {\n        \"labels\": [\n          \"x-user-defined\"\n        ],\n        \"name\": \"x-user-defined\"\n      }\n    ],\n    \"heading\": \"Legacy miscellaneous encodings\"\n  }\n]"
                }
            ],
            "src/app/shared/endpoint.const.ts": [
                {
                    "name": "ENDPOINT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/endpoint.const.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  MOVIE_DETAILS: \"/movie/details\",\n  MOVIE_SEARCH: \"/movie/details\",\n  SEARCH: \"/search\",\n  USER_DATA: \"/user/data\",\n  USER_DETAILS: \"/user/details\",\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  version: 1,\n  firebase: {\n    apiKey: 'AIzaSyBPB_9eQbL5ZzYrI-mBqFix96xTXYyFo7U',\n    authDomain: 'mdb-project-id.firebaseapp.com',\n    databaseURL: 'https://mdb-project-id.firebaseio.com',\n    projectId: 'mdb-project-id',\n    storageBucket: 'mdb-project-id.appspot.com',\n    messagingSenderId: '24146436081',\n    appId: '1:24146436081:web:78f0dd1c699e12514eae50'\n  },\n  devApi: 'http://localhost:8080',\n  runConfig: {\n    firebaseMode: false,\n    springMode: false,\n    electron: location.protocol === \"http:\" || location.protocol === \"https:\" ? false : true,\n    useTestData: false,\n    environment: location.protocol\n  },\n  language: 'en',\n  location: 'ph',\n  dataSource: source.TMDB\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n  firebase: {\n    apiKey: 'AIzaSyBPB_9eQbL5ZzYrI-mBqFix96xTXYyFo7U',\n    authDomain: 'mdb-project-id.firebaseapp.com',\n    databaseURL: 'https://mdb-project-id.firebaseio.com',\n    projectId: 'mdb-project-id',\n    storageBucket: 'mdb-project-id.appspot.com',\n    messagingSenderId: '24146436081',\n    appId: '1:24146436081:web:78f0dd1c699e12514eae50'\n  },\n  runConfig: {\n\n    // firebaseMode: false,\n    springMode: true,\n    // electron: location.protocol === \"http:\" || location.protocol === \"https:\" ? false : true,\n    // useTestData: true,\n    environment: location.protocol,\n    firebaseMode: true,\n    electron: false,\n    useTestData: false\n    // firebaseMode: true,\n    // electron: false,\n    // useTestData: false\n\n  },\n  dataSource: source.TMDB\n}"
                }
            ],
            "src/app/services/firebase.service.ts": [
                {
                    "name": "FirebaseListMax",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/services/firebase.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "10"
                }
            ],
            "src/app/modules/settings/keyboard-shortcuts/keyboard-shortcuts.component.ts": [
                {
                    "name": "HOTKEYS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/settings/keyboard-shortcuts/keyboard-shortcuts.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  // ToggleFULL\n  mute: 'm',\n  fullscreen: 'f'\n}"
                }
            ],
            "src/app/services/torrent/torrent.service.ts": [
                {
                    "name": "httpOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/services/torrent/torrent.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n}"
                }
            ],
            "src/app/services/mdb-api.service.ts": [
                {
                    "name": "JSON_CONTENT_TYPE_HEADER",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/services/mdb-api.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new HttpHeaders({ 'Content-Type': 'application/json' })"
                }
            ],
            "src/app/services/movie/movie.service.ts": [
                {
                    "name": "JSON_CONTENT_TYPE_HEADER",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/services/movie/movie.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new HttpHeaders({ 'Content-Type': 'application/json' })"
                }
            ],
            "src/app/services/tmdb/tmdb.service.ts": [
                {
                    "name": "JSON_CONTENT_TYPE_HEADER",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/services/tmdb/tmdb.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new HttpHeaders({ 'Content-Type': 'application/json' })"
                }
            ],
            "src/app/services/person.service.ts": [
                {
                    "name": "jsonContentType",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/services/person.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new HttpHeaders({ 'Content-Type': 'application/json' })"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  props: args,\n})"
                }
            ],
            "src/app/mock-data-person-details.ts": [
                {
                    "name": "PERSON_COMBINED_CREDITS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/mock-data-person-details.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPersonCredits",
                    "defaultValue": "{\n  \"cast\": [\n    {\n      \"id\": 352733,\n      \"character\": \"Lady Seymour Worsley\",\n      \"original_title\": \"The Scandalous Lady W\",\n      \"overview\": \"A gripping 18th century drama details the scandalous life of Lady Seymour Worsley, who dared to leave her husband and elope with his best friend, Captain George Bisset. Lady Seymour Worsley escapes her troubled marriage only to find herself at the centre of a very public trial brought by her powerful husband Sir Richard Worsley.\",\n      \"vote_count\": 45,\n      \"video\": false,\n      \"media_type\": \"movie\",\n      \"release_date\": \"2015-08-17\",\n      \"vote_average\": 6.3,\n      \"title\": \"The Scandalous Lady W\",\n      \"popularity\": 3.938,\n      \"original_language\": \"en\",\n      \"genre_ids\": [\n        18,\n        10770,\n        10749,\n        36\n      ],\n      \"backdrop_path\": \"/1OhAoS7M25MuTmrAMTVnfGXFMpA.jpg\",\n      \"adult\": false,\n      \"poster_path\": \"/rT8oC8mQ6mKEp2ZWOMb87Vn7jq0.jpg\",\n      \"credit_id\": \"55be1fc59251413e5b004596\"\n    },\n    {\n      \"id\": 410671,\n      \"character\": \"A Fan\",\n      \"original_title\": \"The Roof\",\n      \"overview\": \"A brief comedy about a visit from a legendary theatre maker and his legion of fans.\",\n      \"vote_count\": 0,\n      \"video\": false,\n      \"media_type\": \"movie\",\n      \"release_date\": \"2016-03-31\",\n      \"vote_average\": 0,\n      \"title\": \"The Roof\",\n      \"popularity\": 0.941,\n      \"original_language\": \"en\",\n      \"genre_ids\": [],\n      \"backdrop_path\": null,\n      \"adult\": false,\n      \"poster_path\": \"/kA9X5gM4LId88OuK0MoCX3lvzZD.jpg\",\n      \"credit_id\": \"57aa1537c3a3680ec500140d\"\n    },\n    {\n      \"id\": 417643,\n      \"character\": \"Sofia\",\n      \"original_title\": \"In Darkness\",\n      \"overview\": \"A blind musician hears a murder committed in the apartment upstairs from hers that sends her down a dark path into London's gritty criminal underworld.\",\n      \"vote_count\": 256,\n      \"video\": false,\n      \"media_type\": \"movie\",\n      \"release_date\": \"2018-05-25\",\n      \"vote_average\": 6.1,\n      \"title\": \"In Darkness\",\n      \"popularity\": 9.185,\n      \"original_language\": \"en\",\n      \"genre_ids\": [\n        53\n      ],\n      \"backdrop_path\": \"/g1j1TIyYsoPbuLVIfiV86JNhD1P.jpg\",\n      \"adult\": false,\n      \"poster_path\": \"/A4gJEE1zpImXE8MYkeq4sB69mfZ.jpg\",\n      \"credit_id\": \"57e59ee7c3a3681be80021c3\"\n    },\n    {\n      \"id\": 329440,\n      \"character\": \"Sara / Jess Price\",\n      \"original_title\": \"The Forest\",\n      \"overview\": \"Set in the Aokigahara Forest, a real-life place in Japan where people go to end their lives. Against this backdrop, a young American woman comes in search of her twin sister, who has mysteriously disappeared.\",\n      \"vote_count\": 1041,\n      \"video\": false,\n      \"media_type\": \"movie\",\n      \"poster_path\": \"/ox9y8ia8lGqtkmLZD3YghA7sZkU.jpg\",\n      \"backdrop_path\": \"/29dEFrVl49NsamUfE2FQPQyjbKl.jpg\",\n      \"popularity\": 8.08,\n      \"title\": \"The Forest\",\n      \"original_language\": \"en\",\n      \"genre_ids\": [\n        27,\n        9648,\n        53\n      ],\n      \"vote_average\": 5,\n      \"adult\": false,\n      \"release_date\": \"2016-01-07\",\n      \"credit_id\": \"54fbe14cc3a36816380002ed\"\n    },\n    {\n      \"id\": 44529,\n      \"character\": \"Olga\",\n      \"original_title\": \"City of Life\",\n      \"overview\": \"A privileged young male Arab at odds with his cultural identity and his less fortunate street smart friend; a disillusioned Indian taxi driver who bears an uncanny resemblance to a famous Bollywood star; and a former Romanian ballet dancer now working as a flight attendant and searching for love and companionship ... these individuals all live in Dubai and their lives are about to collide for better or for worse in a city where ambition, growth and opportunity are encouraged and dreams can still manifest. \\\"City of Life\\\" is an urban drama that tracks the various intersections of a multi-ethnic cast, examining how random interactions and their consequences can irrevocably impact another's life.\",\n      \"vote_count\": 9,\n      \"video\": false,\n      \"media_type\": \"movie\",\n      \"release_date\": \"2009-12-11\",\n      \"vote_average\": 6.4,\n      \"title\": \"City of Life\",\n      \"popularity\": 0.783,\n      \"original_language\": \"en\",\n      \"genre_ids\": [\n        10749,\n        18\n      ],\n      \"backdrop_path\": \"/2KPr9dBkXMrTr4NIbJSghu76MsC.jpg\",\n      \"adult\": false,\n      \"poster_path\": \"/3TyuTCNQfGj6xhvNfFXtBDtcTnk.jpg\",\n      \"credit_id\": \"52fe468cc3a36847f8105137\"\n    },\n    {\n      \"id\": 201992,\n      \"character\": \"Suzanne\",\n      \"original_title\": \"A Long Way From Home\",\n      \"overview\": \"Joseph and Brenda have done what many only dream of and retired to the South of France to live out the rest of their days as if they were permanently on holiday. But retirement is not what Joseph imagined, and when he meets a young, attractive woman, Suzanne, everything he thought he knew about himself and his world is turned upside down.\",\n      \"vote_count\": 7,\n      \"video\": false,\n      \"media_type\": \"movie\",\n      \"release_date\": \"2013-12-06\",\n      \"vote_average\": 5.6,\n      \"title\": \"A Long Way From Home\",\n      \"popularity\": 1.231,\n      \"original_language\": \"en\",\n      \"genre_ids\": [\n        18,\n        10749\n      ],\n      \"backdrop_path\": \"/2t1dAdgirczqLB4LvXwT0zpMp1u.jpg\",\n      \"adult\": false,\n      \"poster_path\": \"/pWbNDQYa7EGc14WZjQh7ELeq041.jpg\",\n      \"credit_id\": \"52fe4cbac3a368484e1c450b\"\n    },\n    {\n      \"id\": 295011,\n      \"character\": \"Gina\",\n      \"original_title\": \"Patient Zero\",\n      \"overview\": \"After an unprecedented global pandemic has turned the majority of humankind into violent infected beings, Morgan, a man gifted with the ability to speak the infected's new language, leads the last survivors on a hunt for patient zero and a cure.\",\n      \"vote_count\": 140,\n      \"video\": false,\n      \"media_type\": \"movie\",\n      \"poster_path\": \"/5jOqatpfh0aKYhl6fN83RK69UtC.jpg\",\n      \"backdrop_path\": \"/kpjp9Wqj6U4wdv4oSEe9FLkNhaQ.jpg\",\n      \"popularity\": 7.094,\n      \"title\": \"Patient Zero\",\n      \"original_language\": \"en\",\n      \"genre_ids\": [\n        28,\n        18,\n        27,\n        53\n      ],\n      \"vote_average\": 4.7,\n      \"adult\": false,\n      \"release_date\": \"2018-09-14\",\n      \"credit_id\": \"54c248c592514124320038c3\"\n    },\n    {\n      \"id\": 425328,\n      \"character\": \"Ruth Anderson\",\n      \"original_title\": \"The God Four\",\n      \"overview\": \"A former championship rower learns that a former classmate has committed suicide on the eve of their ten-year reunion.\",\n      \"vote_count\": 0,\n      \"video\": false,\n      \"media_type\": \"movie\",\n      \"release_date\": \"\",\n      \"vote_average\": 0,\n      \"title\": \"The God Four\",\n      \"popularity\": 1.126,\n      \"original_language\": \"en\",\n      \"genre_ids\": [\n        18\n      ],\n      \"backdrop_path\": null,\n      \"adult\": false,\n      \"poster_path\": null,\n      \"credit_id\": \"58242f49c3a3684bf7006721\"\n    },\n    {\n      \"id\": 431887,\n      \"character\": \"Millie\",\n      \"original_title\": \"The Ring Cycle\",\n      \"overview\": \"A woman on the last day of her marriage tries to figure out what to do with her wedding ring. Walking through London, she has a series of encounters that propel her toward a new relationship...with herself.\",\n      \"vote_count\": 1,\n      \"video\": false,\n      \"media_type\": \"movie\",\n      \"release_date\": \"2014-07-18\",\n      \"vote_average\": 3,\n      \"title\": \"The Ring Cycle\",\n      \"popularity\": 0.628,\n      \"original_language\": \"en\",\n      \"genre_ids\": [\n        35,\n        18\n      ],\n      \"backdrop_path\": null,\n      \"adult\": false,\n      \"poster_path\": \"/fyup8BXtBP5PaHbqHhG7xvufjyE.jpg\",\n      \"credit_id\": \"58620c3f92514115be03b380\"\n    },\n    {\n      \"id\": 410670,\n      \"character\": \"Her\",\n      \"original_title\": \"The Brunchers\",\n      \"overview\": \"A thirty something couple, concerned that they're out of touch and no longer fashionable, decide to rectify the situation by dragging themselves to the latest hip brunch eatery. As they journey through London, they discuss the idiosyncrasies of their friends and the ups and down of their aberrant relationships. However, when they bump into Tom, an uber-hipster friend of theirs, what he reveals puts their quest into a thoroughly different light.\",\n      \"vote_count\": 0,\n      \"video\": false,\n      \"media_type\": \"movie\",\n      \"release_date\": \"2014-04-12\",\n      \"vote_average\": 0,\n      \"title\": \"The Brunchers\",\n      \"popularity\": 1.182,\n      \"original_language\": \"en\",\n      \"genre_ids\": [],\n      \"backdrop_path\": null,\n      \"adult\": false,\n      \"poster_path\": \"/12zcHTAGDEivWcmoUeYeoJ2mSrg.jpg\",\n      \"credit_id\": \"57aa147fc3a36873d80079c5\"\n    },\n    {\n      \"id\": 411728,\n      \"character\": \"Eliza Merrett\",\n      \"original_title\": \"The Professor and the Madman\",\n      \"overview\": \"Professor James Murray begins work compiling words for the first edition of the Oxford English Dictionary in the mid 19th century, and receives over 10,000 entries from a patient at Broadmoor Criminal Lunatic Asylum, Dr. William Minor.\",\n      \"vote_count\": 308,\n      \"video\": false,\n      \"media_type\": \"movie\",\n      \"poster_path\": \"/gtGCDLhfjW96qVarwctnuTpGOtD.jpg\",\n      \"backdrop_path\": \"/zhNfM1CSQqJtIqelwlK9iKtSd9P.jpg\",\n      \"popularity\": 18.731,\n      \"title\": \"The Professor and the Madman\",\n      \"original_language\": \"en\",\n      \"genre_ids\": [\n        18,\n        36,\n        9648,\n        53\n      ],\n      \"vote_average\": 7.2,\n      \"adult\": false,\n      \"release_date\": \"2019-03-07\",\n      \"credit_id\": \"584baac792514133a80075da\"\n    },\n    {\n      \"id\": 410672,\n      \"character\": \"Lauren Bacall\",\n      \"original_title\": \"Electric Cinema: How to Behave\",\n      \"overview\": \"London's oldest working cinema asks its patrons to observe certain manners of behaviour when enjoying its shows.\",\n      \"vote_count\": 3,\n      \"video\": false,\n      \"media_type\": \"movie\",\n      \"release_date\": \"2012-11-28\",\n      \"vote_average\": 5.7,\n      \"title\": \"Electric Cinema: How to Behave\",\n      \"popularity\": 0.699,\n      \"original_language\": \"en\",\n      \"genre_ids\": [],\n      \"backdrop_path\": null,\n      \"adult\": false,\n      \"poster_path\": \"/nZ9keuVR1m64fEg5voeGVG5qUDb.jpg\",\n      \"credit_id\": \"5a33b261c3a36814ae0272ab\"\n    },\n    {\n      \"id\": 627133,\n      \"character\": \"\",\n      \"original_title\": \"The Crystal Calls - Making The Dark Crystal: Age of Resistance\",\n      \"overview\": \"Go behind the scenes with stars, puppeteers and creators as they bring Jim Henson's magical world of Thra back to life in a sweeping fantasy series.\",\n      \"vote_count\": 6,\n      \"video\": false,\n      \"media_type\": \"movie\",\n      \"poster_path\": \"/d6liOscksEp37koLfdjzdu1BwrK.jpg\",\n      \"backdrop_path\": \"/uGAAv3zIxH5zUNRqMMw9509BTOy.jpg\",\n      \"popularity\": 3.13,\n      \"title\": \"The Crystal Calls - Making The Dark Crystal: Age of Resistance\",\n      \"original_language\": \"en\",\n      \"genre_ids\": [\n        99\n      ],\n      \"vote_average\": 8.8,\n      \"adult\": false,\n      \"release_date\": \"2019-08-30\",\n      \"credit_id\": \"5d68e1eaca83545e55f6eac7\"\n    },\n    {\n      \"id\": 270302,\n      \"character\": \"Charlie\",\n      \"original_title\": \"The Riot Club\",\n      \"overview\": \"Two first-year students at Oxford University join the infamous Riot Club, where reputations can be made or destroyed over the course of a single evening.\",\n      \"vote_count\": 745,\n      \"video\": false,\n      \"media_type\": \"movie\",\n      \"poster_path\": \"/zWc20gRd6pxmpEgrmJp9efDzj2j.jpg\",\n      \"backdrop_path\": \"/n4151SPSW0HypZNyPeVSfF7EE0V.jpg\",\n      \"popularity\": 7.164,\n      \"title\": \"The Riot Club\",\n      \"original_language\": \"en\",\n      \"genre_ids\": [\n        18,\n        53\n      ],\n      \"vote_average\": 6,\n      \"adult\": false,\n      \"release_date\": \"2014-09-19\",\n      \"credit_id\": \"53776bc2c3a368552c001837\"\n    },\n    {\n      \"id\": 96721,\n      \"character\": \"Nurse Gemma\",\n      \"original_title\": \"Rush\",\n      \"overview\": \"A biographical drama centered on the rivalry between Formula 1 drivers James Hunt and Niki Lauda during the 1976 Formula One motor-racing season.\",\n      \"vote_count\": 4162,\n      \"video\": false,\n      \"media_type\": \"movie\",\n      \"release_date\": \"2013-09-02\",\n      \"vote_average\": 7.7,\n      \"title\": \"Rush\",\n      \"popularity\": 15.985,\n      \"original_language\": \"en\",\n      \"genre_ids\": [\n        18,\n        28\n      ],\n      \"backdrop_path\": \"/w41zFKYTsq4wf5QnQJWMXuzWl2F.jpg\",\n      \"adult\": false,\n      \"poster_path\": \"/cjEepHZOZAwmK6nAj5jis6HV75E.jpg\",\n      \"credit_id\": \"52fe49bf9251416c750d20b7\"\n    },\n    {\n      \"id\": 80591,\n      \"character\": \"Elizabeth\",\n      \"original_title\": \"W.E.\",\n      \"overview\": \"In 1998, an auction of the estate of the Duke and Duchess of Windsor causes great excitement. For one woman, Wally Winthrop, it has much more meaning. Wally becomes obsessed by their historic love story. As she learns more about the sacrifices involved, Wally gains her own courage to find happiness.\",\n      \"vote_count\": 102,\n      \"video\": false,\n      \"media_type\": \"movie\",\n      \"poster_path\": \"/tsU6YVOrEKLimDpOnLO2yuhP1le.jpg\",\n      \"backdrop_path\": \"/9cwTQhgTmt0sBBaXewHAaTU9ei9.jpg\",\n      \"popularity\": 8.742,\n      \"title\": \"W.E.\",\n      \"original_language\": \"en\",\n      \"genre_ids\": [\n        18,\n        10749\n      ],\n      \"vote_average\": 5.9,\n      \"adult\": false,\n      \"release_date\": \"2011-09-01\",\n      \"credit_id\": \"52fe47ca9251416c91075d99\"\n    },\n    {\n      \"id\": 392840,\n      \"character\": \"Herself\",\n      \"original_title\": \"Pawns, No More: The Making of The Hunger Games: Mockingjay, Part 2\",\n      \"overview\": \"Two and twenty minute documentary about the making of The Hunger Games: Mockingjay, Part 2.\",\n      \"vote_count\": 2,\n      \"video\": false,\n      \"media_type\": \"movie\",\n      \"release_date\": \"\",\n      \"vote_average\": 10,\n      \"title\": \"Pawns, No More: The Making of The Hunger Games: Mockingjay, Part 2\",\n      \"popularity\": 0.827,\n      \"original_language\": \"en\",\n      \"genre_ids\": [],\n      \"backdrop_path\": null,\n      \"adult\": false,\n      \"poster_path\": null,\n      \"credit_id\": \"5da86473b7b69d0013e8ccd8\"\n    },\n    {\n      \"id\": 9681,\n      \"character\": \"Victoria\",\n      \"original_title\": \"Casanova\",\n      \"overview\": \"With a reputation for seducing members of the opposite sex, regardless of their marital status, a notorious womanizer discovers a beauty who seems impervious to his charms. However, as he continues to pursue the indifferent lady, he finds himself falling in love.\",\n      \"vote_count\": 457,\n      \"video\": false,\n      \"media_type\": \"movie\",\n      \"release_date\": \"2005-12-25\",\n      \"vote_average\": 6.3,\n      \"title\": \"Casanova\",\n      \"popularity\": 9.5,\n      \"original_language\": \"en\",\n      \"genre_ids\": [\n        35,\n        10749\n      ],\n      \"backdrop_path\": \"/Q4XKnmSBP54jiawMBcGU0sgVcD.jpg\",\n      \"adult\": false,\n      \"poster_path\": \"/tX9QmK232VUgnTtOHJXgnqhpDl9.jpg\",\n      \"credit_id\": \"52fe451ac3a36847f80bcb15\"\n    },\n    {\n      \"id\": 483821,\n      \"character\": \"Herself\",\n      \"original_title\": \"And the Winner Isn't\",\n      \"overview\": \"A satirical documentary charting Geoffrey Moore and his daughter Ambra’s journey through Hollywood, as the pair track down celebrities and industry insiders in their bid to find out what it takes to become an Academy Award winner.\",\n      \"vote_count\": 0,\n      \"video\": false,\n      \"media_type\": \"movie\",\n      \"release_date\": \"2017-12-08\",\n      \"vote_average\": 0,\n      \"title\": \"And the Winner Isn't\",\n      \"popularity\": 1.248,\n      \"original_language\": \"en\",\n      \"genre_ids\": [\n        99\n      ],\n      \"backdrop_path\": \"/pZOQzRJXxQxg5TSu5byJ8YeLZbg.jpg\",\n      \"adult\": false,\n      \"poster_path\": \"/nMBjFDLVGZEX6giNERE4r5qYxQI.jpg\",\n      \"credit_id\": \"5a4c065b0e0a26107a0017f3\"\n    },\n    {\n      \"id\": 514231,\n      \"character\": \"Herself\",\n      \"original_title\": \"The Mockingjay Lives: The Making of the Hunger Games: Mockingjay Part 1\",\n      \"overview\": \"Documentary film about the making of The Hunger Games: Mockingjay Part 1\",\n      \"vote_count\": 1,\n      \"video\": false,\n      \"media_type\": \"movie\",\n      \"poster_path\": null,\n      \"backdrop_path\": null,\n      \"popularity\": 0.708,\n      \"title\": \"The Mockingjay Lives: The Making of the Hunger Games: Mockingjay Part 1\",\n      \"original_language\": \"en\",\n      \"genre_ids\": [],\n      \"vote_average\": 10,\n      \"adult\": false,\n      \"release_date\": \"2015-02-01\",\n      \"credit_id\": \"5da8633b944a57001925f8a6\"\n    },\n    {\n      \"id\": 131634,\n      \"character\": \"Cressida\",\n      \"original_title\": \"The Hunger Games: Mockingjay - Part 2\",\n      \"overview\": \"With the nation of Panem in a full scale war, Katniss confronts President Snow in the final showdown. Teamed with a group of her closest friends – including Gale, Finnick, and Peeta – Katniss goes off on a mission with the unit from District 13 as they risk their lives to stage an assassination attempt on President Snow who has become increasingly obsessed with destroying her. The mortal traps, enemies, and moral choices that await Katniss will challenge her more than any arena she faced in The Hunger Games.\",\n      \"vote_count\": 8036,\n      \"video\": false,\n      \"media_type\": \"movie\",\n      \"poster_path\": \"/w93GAiq860UjmgR6tU9h2T24vaV.jpg\",\n      \"backdrop_path\": \"/qjn3fzCAHGfl0CzeUlFbjrsmu4c.jpg\",\n      \"popularity\": 19.818,\n      \"title\": \"The Hunger Games: Mockingjay - Part 2\",\n      \"original_language\": \"en\",\n      \"genre_ids\": [\n        28,\n        12,\n        878\n      ],\n      \"vote_average\": 6.8,\n      \"adult\": false,\n      \"release_date\": \"2015-11-18\",\n      \"credit_id\": \"52fe4b7bc3a368484e18b0d9\"\n    },\n    {\n      \"id\": 131631,\n      \"character\": \"Cressida\",\n      \"original_title\": \"The Hunger Games: Mockingjay - Part 1\",\n      \"overview\": \"Katniss Everdeen reluctantly becomes the symbol of a mass rebellion against the autocratic Capitol.\",\n      \"vote_count\": 10697,\n      \"video\": false,\n      \"media_type\": \"movie\",\n      \"release_date\": \"2014-11-18\",\n      \"vote_average\": 6.8,\n      \"title\": \"The Hunger Games: Mockingjay - Part 1\",\n      \"popularity\": 32.185,\n      \"original_language\": \"en\",\n      \"genre_ids\": [\n        878,\n        12,\n        53\n      ],\n      \"backdrop_path\": \"/4PwyB0ErucIANzW24Kori71J6gU.jpg\",\n      \"adult\": false,\n      \"poster_path\": \"/gj282Pniaa78ZJfbaixyLXnXEDI.jpg\",\n      \"credit_id\": \"545f750b0e0a261fb9009122\"\n    },\n    {\n      \"id\": 13195,\n      \"character\": \"Cassie\",\n      \"original_title\": \"Flawless\",\n      \"overview\": \"A female executive and a night janitor conspire to commit a daring diamond heist from their mutual employer, The London Diamond Corporation.\",\n      \"vote_count\": 240,\n      \"video\": false,\n      \"media_type\": \"movie\",\n      \"poster_path\": \"/4VxDg0P8eGhPpplvSwpz2hARIig.jpg\",\n      \"backdrop_path\": \"/fKU6XKfmyEuoXjmhkQ8IOIMvpUk.jpg\",\n      \"popularity\": 9.445,\n      \"title\": \"Flawless\",\n      \"original_language\": \"en\",\n      \"genre_ids\": [\n        80,\n        18,\n        53\n      ],\n      \"vote_average\": 6.6,\n      \"adult\": false,\n      \"release_date\": \"2007-09-01\",\n      \"credit_id\": \"52fe454d9251416c75051d83\"\n    },\n    {\n      \"id\": 1771,\n      \"character\": \"Private Lorraine\",\n      \"original_title\": \"Captain America: The First Avenger\",\n      \"overview\": \"During World War II, Steve Rogers is a sickly man from Brooklyn who's transformed into super-soldier Captain America to aid in the war effort. Rogers must stop the Red Skull – Adolf Hitler's ruthless head of weaponry, and the leader of an organization that intends to use a mysterious device of untold powers for world domination.\",\n      \"vote_count\": 13769,\n      \"video\": false,\n      \"media_type\": \"movie\",\n      \"poster_path\": \"/vSNxAJTlD0r02V9sPYpOjqDZXUK.jpg\",\n      \"backdrop_path\": \"/pmZtj1FKvQqISS6iQbkiLg5TAsr.jpg\",\n      \"popularity\": 17.016,\n      \"title\": \"Captain America: The First Avenger\",\n      \"original_language\": \"en\",\n      \"genre_ids\": [\n        28,\n        12,\n        878\n      ],\n      \"vote_average\": 6.9,\n      \"adult\": false,\n      \"release_date\": \"2011-07-22\",\n      \"credit_id\": \"52fe4313c3a36847f803886d\"\n    },\n    {\n      \"id\": 109091,\n      \"character\": \"Blonde\",\n      \"original_title\": \"The Counselor\",\n      \"overview\": \"A lawyer finds himself in far over his head when he attempts to get involved in drug trafficking.\",\n      \"vote_count\": 1144,\n      \"video\": false,\n      \"media_type\": \"movie\",\n      \"release_date\": \"2013-10-25\",\n      \"vote_average\": 5.1,\n      \"title\": \"The Counselor\",\n      \"popularity\": 17.007,\n      \"original_language\": \"en\",\n      \"genre_ids\": [\n        53,\n        80,\n        18\n      ],\n      \"backdrop_path\": \"/aWqyoI3u1PigWrXAMyeX568vTXW.jpg\",\n      \"adult\": false,\n      \"poster_path\": \"/uxp6rHVBzUqZCyTaUI8xzUP5sOf.jpg\",\n      \"credit_id\": \"52fe4aaac3a36847f81db4ff\"\n    },\n    {\n      \"id\": 1399,\n      \"character\": \"Margaery Tyrell\",\n      \"episode_count\": 50,\n      \"overview\": \"Seven noble families fight for control of the mythical land of Westeros. Friction between the houses leads to full-scale war. All while a very ancient evil awakens in the farthest north. Amidst the war, a neglected military order of misfits, the Night's Watch, is all that stands between the realms of men and icy horrors beyond.\",\n      \"origin_country\": [\n        \"US\"\n      ],\n      \"original_name\": \"Game of Thrones\",\n      \"genre_ids\": [\n        18,\n        10759,\n        10765\n      ],\n      \"name\": \"Game of Thrones\",\n      \"media_type\": \"tv\",\n      \"backdrop_path\": \"/suopoADq0k8YZr4dQXcU6pToj6s.jpg\",\n      \"popularity\": 99.13,\n      \"first_air_date\": \"2011-04-17\",\n      \"original_language\": \"en\",\n      \"vote_count\": 6503,\n      \"vote_average\": 8.1,\n      \"poster_path\": \"/u3bZgnGQ9T01sWNhyveQz0wH0Hl.jpg\",\n      \"credit_id\": \"5256c8b519c2956ff6048078\"\n    },\n    {\n      \"id\": 1761,\n      \"original_language\": \"en\",\n      \"episode_count\": 1,\n      \"overview\": \"Distant Shores is a dramedy first shown in the United Kingdom on ITV in January 2005. Like the similar fish out of water dramedies, Northern Exposure and Doc Martin, it focuses on the difficulties of an unwillingly-transplanted metropolitan doctor who is forced to adjust to a rural environment.\\n\\nThe show's recurring cast is unusual for featuring major actors from three significant British franchises — Doctor Who, Blake's 7 and the James Bond film series. The programme itself is notable for being a rare example of a show to have an entire series shelved in its country of origin following the completion of post-production.\",\n      \"origin_country\": [\n        \"GB\"\n      ],\n      \"original_name\": \"Distant Shores\",\n      \"vote_count\": 1,\n      \"name\": \"Distant Shores\",\n      \"media_type\": \"tv\",\n      \"poster_path\": null,\n      \"popularity\": 0.865,\n      \"vote_average\": 6,\n      \"first_air_date\": \"2005-01-05\",\n      \"genre_ids\": [\n        18,\n        35\n      ],\n      \"backdrop_path\": null,\n      \"character\": \"\",\n      \"credit_id\": \"525713f619c295711406b9b1\"\n    },\n    {\n      \"id\": 2942,\n      \"original_language\": \"en\",\n      \"episode_count\": 21,\n      \"overview\": \"The Tudors is a history-based drama series following the young, vibrant King Henry VIII, a competitive and lustful monarch who navigates the intrigues of the English court and the human heart with equal vigor and justifiable suspicion.\",\n      \"origin_country\": [\n        \"US\"\n      ],\n      \"original_name\": \"The Tudors\",\n      \"vote_count\": 168,\n      \"name\": \"The Tudors\",\n      \"media_type\": \"tv\",\n      \"poster_path\": \"/96IFXF6eeMpFU1MDlXnaVtMBsaE.jpg\",\n      \"popularity\": 18.383,\n      \"vote_average\": 7.7,\n      \"first_air_date\": \"2007-04-01\",\n      \"genre_ids\": [\n        18,\n        36,\n        10749\n      ],\n      \"backdrop_path\": \"/zDY5fG4WpD1OwnVA0sIxGwGD0X5.jpg\",\n      \"character\": \"Anne Boleyn\",\n      \"credit_id\": \"52574a7219c29531db0a1789\"\n    },\n    {\n      \"id\": 41211,\n      \"character\": \"Sarah Etches\",\n      \"episode_count\": 6,\n      \"overview\": \"Seventeen-year old Paul can see the spirits of the dead. When one of these restless spirits crosses back into the living world, he is forced into a fight to prevent the apocalypse.\",\n      \"origin_country\": [\n        \"GB\"\n      ],\n      \"original_name\": \"The Fades\",\n      \"genre_ids\": [\n        18,\n        10765\n      ],\n      \"name\": \"The Fades\",\n      \"media_type\": \"tv\",\n      \"backdrop_path\": \"/tSnfNLRPngBv8gJU0QJnouwkl3r.jpg\",\n      \"popularity\": 4.663,\n      \"first_air_date\": \"2011-09-21\",\n      \"original_language\": \"en\",\n      \"vote_count\": 35,\n      \"vote_average\": 7.3,\n      \"poster_path\": \"/7WQAVJMjD3Gf5lvHmofsaCGRUm6.jpg\",\n      \"credit_id\": \"52595e28760ee34661942b26\"\n    },\n    {\n      \"id\": 37780,\n      \"original_language\": \"en\",\n      \"episode_count\": 12,\n      \"overview\": \"Silk is a British television drama series produced by the BBC and first shown in 2011. Written by Peter Moffat, the series follows a set of barristers, and what they do to attain the rank of Queen's Counsel, known as \\\"taking silk.\\\"\",\n      \"origin_country\": [\n        \"GB\"\n      ],\n      \"original_name\": \"Silk\",\n      \"vote_count\": 16,\n      \"name\": \"Silk\",\n      \"media_type\": \"tv\",\n      \"poster_path\": \"/8qxsdAHBjtMLw4iaPgKXnAojgsM.jpg\",\n      \"popularity\": 3.433,\n      \"vote_average\": 7.7,\n      \"first_air_date\": \"2011-02-22\",\n      \"genre_ids\": [\n        18\n      ],\n      \"backdrop_path\": \"/bxdgGKuJPp2VaHUp2F4tAgioicv.jpg\",\n      \"character\": \"Niamh Cranitch\",\n      \"credit_id\": \"5258eaee760ee346618902f0\"\n    },\n    {\n      \"id\": 1415,\n      \"character\": \"Irene Adler\",\n      \"episode_count\": 4,\n      \"overview\": \"A modern-day drama about a crime-solving duo that cracks the NYPD's most impossible cases. Following his fall from grace in London and a stint in rehab, eccentric Sherlock escapes to Manhattan where his wealthy father forces him to live with his worst nightmare - a sober companion, Dr. Watson.\",\n      \"origin_country\": [\n        \"US\"\n      ],\n      \"original_name\": \"Elementary\",\n      \"genre_ids\": [\n        80,\n        18,\n        9648\n      ],\n      \"name\": \"Elementary\",\n      \"media_type\": \"tv\",\n      \"backdrop_path\": \"/7sJrNKwzyJWnFPFpDL9wnZ859LZ.jpg\",\n      \"popularity\": 63.202,\n      \"first_air_date\": \"2012-09-27\",\n      \"original_language\": \"en\",\n      \"vote_count\": 701,\n      \"vote_average\": 7,\n      \"poster_path\": \"/q9dObe29W4bDpgzUfOOH3ZnzDbR.jpg\",\n      \"credit_id\": \"52ed89d219c29558ef01e706\"\n    },\n    {\n      \"id\": 78881,\n      \"original_language\": \"en\",\n      \"episode_count\": 6,\n      \"overview\": \"Valentine's Day, 1900. Three schoolgirls and their governess mysteriously disappear in Hanging Rock, Australia, without a trace.\",\n      \"origin_country\": [\n        \"AU\"\n      ],\n      \"original_name\": \"Picnic at Hanging Rock\",\n      \"vote_count\": 17,\n      \"name\": \"Picnic at Hanging Rock\",\n      \"media_type\": \"tv\",\n      \"poster_path\": \"/rf5hJuHoZKKpJp6ckv9r1njzdZ.jpg\",\n      \"popularity\": 3.368,\n      \"vote_average\": 6.5,\n      \"first_air_date\": \"2018-05-06\",\n      \"genre_ids\": [\n        18,\n        9648\n      ],\n      \"backdrop_path\": \"/5ao8UwOQs0vNmvVRTedCPl3T5EY.jpg\",\n      \"character\": \"Mrs. Hester Appleyard\",\n      \"credit_id\": \"5ad872fb0e0a26433000fa9f\"\n    },\n    {\n      \"id\": 1220,\n      \"character\": \"Herself\",\n      \"episode_count\": 1,\n      \"overview\": \"Each week celebrity guests join Irish comedian Graham Norton to discuss what's being going on around the world that week. The guests poke fun and share their opinions on the main news stories. Graham is often joined by a band or artist to play the show out.\",\n      \"origin_country\": [\n        \"GB\"\n      ],\n      \"original_name\": \"The Graham Norton Show\",\n      \"genre_ids\": [\n        35,\n        10767\n      ],\n      \"name\": \"The Graham Norton Show\",\n      \"media_type\": \"tv\",\n      \"backdrop_path\": \"/2pJYis3LUEgFC3UErTQVgmUV1hN.jpg\",\n      \"popularity\": 41.138,\n      \"first_air_date\": \"2007-02-22\",\n      \"original_language\": \"en\",\n      \"vote_count\": 106,\n      \"vote_average\": 7,\n      \"poster_path\": \"/vrbqaBXB8AALynQzpWz6JdCPEJS.jpg\",\n      \"credit_id\": \"5b33cf560e0a26401c01b295\"\n    },\n    {\n      \"id\": 6127,\n      \"character\": \"Moira Nicholson\",\n      \"episode_count\": 1,\n      \"overview\": \"The adventures of Miss Jane Marple, an elderly spinster living in the quiet little village of St Mary Mead. During her many visits to friends and relatives in other villages, Miss Marple often stumbles upon mysterious murders which she helps solve. Although the police are sometimes reluctant to accept Miss Marple's help, her reputation and unparalleled powers of observation eventually win them over.\",\n      \"origin_country\": [\n        \"GB\"\n      ],\n      \"original_name\": \"Agatha Christie's Marple\",\n      \"genre_ids\": [\n        80,\n        18,\n        9648\n      ],\n      \"name\": \"Agatha Christie's Marple\",\n      \"media_type\": \"tv\",\n      \"backdrop_path\": \"/hW42mQZ5On2xfBoFxxERK2zOwTo.jpg\",\n      \"popularity\": 9.648,\n      \"first_air_date\": \"2004-12-12\",\n      \"original_language\": \"en\",\n      \"vote_count\": 26,\n      \"vote_average\": 7.7,\n      \"poster_path\": \"/iFeUYD7FGKG5b9ZK2qAlTaWcZZM.jpg\",\n      \"credit_id\": \"5c0dcfee92514147aa0a6f57\"\n    },\n    {\n      \"id\": 71809,\n      \"character\": \"Onica (voice)\",\n      \"episode_count\": 10,\n      \"overview\": \"Return to the world of Thra, where three Gelfling discover the horrifying secret behind the Skeksis' power and set out to ignite the fires of rebellion and save their world.\",\n      \"origin_country\": [\n        \"GB\",\n        \"US\"\n      ],\n      \"original_name\": \"The Dark Crystal: Age of Resistance\",\n      \"genre_ids\": [\n        18,\n        10762,\n        10765\n      ],\n      \"name\": \"The Dark Crystal: Age of Resistance\",\n      \"media_type\": \"tv\",\n      \"backdrop_path\": \"/lPDOoarb7JMv2uIzRmuUKWp8YIR.jpg\",\n      \"popularity\": 8.958,\n      \"first_air_date\": \"2019-08-30\",\n      \"original_language\": \"en\",\n      \"vote_count\": 48,\n      \"vote_average\": 8,\n      \"poster_path\": \"/rG6bC26xi10i8Mx0ZTyJ7nBkeWv.jpg\",\n      \"credit_id\": \"5c17d3e8c3a36866c0387927\"\n    },\n    {\n      \"id\": 83685,\n      \"original_language\": \"en\",\n      \"episode_count\": 1,\n      \"overview\": \"Rooted in the conflict between characters connected to the deity Santa Muerte and others allied with the Devil, this new saga explores an exciting mix of the supernatural and the combustible reality of 1938 Los Angeles, a time and place deeply infused with Mexican-American folklore and social tension.\",\n      \"origin_country\": [\n        \"US\"\n      ],\n      \"original_name\": \"Penny Dreadful: City of Angels\",\n      \"vote_count\": 0,\n      \"name\": \"Penny Dreadful: City of Angels\",\n      \"media_type\": \"tv\",\n      \"poster_path\": \"/lqvmSO1pgD94B5cdX1xBHsKj6XY.jpg\",\n      \"popularity\": 0.6,\n      \"vote_average\": 0,\n      \"first_air_date\": \"\",\n      \"genre_ids\": [\n        18\n      ],\n      \"backdrop_path\": \"/g0CXfvf8wPWlrWIr9g6zaQHDhxC.jpg\",\n      \"character\": \"Magda\",\n      \"credit_id\": \"5c7081329251415ee2af1378\"\n    }\n  ],\n  \"crew\": [\n    {\n      \"id\": 417643,\n      \"department\": \"Production\",\n      \"original_language\": \"en\",\n      \"original_title\": \"In Darkness\",\n      \"job\": \"Producer\",\n      \"overview\": \"A blind musician hears a murder committed in the apartment upstairs from hers that sends her down a dark path into London's gritty criminal underworld.\",\n      \"vote_count\": 256,\n      \"video\": false,\n      \"media_type\": \"movie\",\n      \"release_date\": \"2018-05-25\",\n      \"vote_average\": 6.1,\n      \"title\": \"In Darkness\",\n      \"popularity\": 9.185,\n      \"genre_ids\": [\n        53\n      ],\n      \"backdrop_path\": \"/g1j1TIyYsoPbuLVIfiV86JNhD1P.jpg\",\n      \"adult\": false,\n      \"poster_path\": \"/A4gJEE1zpImXE8MYkeq4sB69mfZ.jpg\",\n      \"credit_id\": \"5aed0e630e0a2635a900343f\"\n    },\n    {\n      \"id\": 417643,\n      \"department\": \"Writing\",\n      \"original_language\": \"en\",\n      \"original_title\": \"In Darkness\",\n      \"job\": \"Writer\",\n      \"overview\": \"A blind musician hears a murder committed in the apartment upstairs from hers that sends her down a dark path into London's gritty criminal underworld.\",\n      \"vote_count\": 256,\n      \"video\": false,\n      \"media_type\": \"movie\",\n      \"release_date\": \"2018-05-25\",\n      \"vote_average\": 6.1,\n      \"title\": \"In Darkness\",\n      \"popularity\": 9.185,\n      \"genre_ids\": [\n        53\n      ],\n      \"backdrop_path\": \"/g1j1TIyYsoPbuLVIfiV86JNhD1P.jpg\",\n      \"adult\": false,\n      \"poster_path\": \"/A4gJEE1zpImXE8MYkeq4sB69mfZ.jpg\",\n      \"credit_id\": \"57e59f9c925141413f0024ec\"\n    }\n  ],\n  \"id\": 58502\n}"
                },
                {
                    "name": "PERSON_DETAILS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/mock-data-person-details.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPersonDetails",
                    "defaultValue": "{\n  \"birthday\": \"1982-02-11\",\n  \"known_for_department\": \"Acting\",\n  \"deathday\": null,\n  \"id\": 58502,\n  \"name\": \"Natalie Dormer\",\n  \"also_known_as\": [\n    \"나탈리 도머\",\n    \"Наталі Дормер\",\n    \"Νάταλι Ντόρμερ\"\n  ],\n  \"gender\": 1,\n  \"biography\": \"An English actress. She is best known for her roles as Anne Boleyn in the Showtime series The Tudors and as Margaery Tyrell in the HBO series Game of Thrones. Dormer was born in Reading, Berkshire. She attended Chiltern Edge Secondary School before moving to Reading Blue Coat School, an independent boys' school that admits girls in the sixth form. She grew up with her stepfather, mother, sister Samantha, and brother Mark.She has said that she was the victim of bullying while at school.At school, Dormer was head girl, a straight-A student, vice-captain of the school netball team, and she also got to travel the world with her school's public speaking team. During her school years, Dormer trained in dance at the Allenova School of Dancing. She describes herself as the \\\"academic hopeful\\\" of the family and was offered a place to study history at Cambridge; but, in her A-level History exam, she did not achieve the A grade she needed to attend. Dormer decided she would audition for drama schools and decided to train at the Webber Douglas Academy of Dramatic Art in London.\",\n  \"popularity\": 5.642,\n  \"place_of_birth\": \"Reading, Berkshire, England, UK\",\n  \"profile_path\": \"/8piDfs6oyRKSvrRv4RfUWEs3I0n.jpg\",\n  \"adult\": false,\n  \"imdb_id\": \"nm1754059\",\n  \"homepage\": null\n}"
                },
                {
                    "name": "PERSON_DETAILS_FULL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/mock-data-person-details.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPersonDetails",
                    "defaultValue": "{\n  \"birthday\": \"1982-02-11\",\n  \"known_for_department\": \"Acting\",\n  \"deathday\": null,\n  \"id\": 58502,\n  \"name\": \"Natalie Dormer\",\n  \"also_known_as\": [\n    \"나탈리 도머\",\n    \"Наталі Дормер\",\n    \"Νάταλι Ντόρμερ\"\n  ],\n  \"gender\": 1,\n  \"biography\": \"An English actress. She is best known for her roles as Anne Boleyn in the Showtime series The Tudors and as Margaery Tyrell in the HBO series Game of Thrones. Dormer was born in Reading, Berkshire. She attended Chiltern Edge Secondary School before moving to Reading Blue Coat School, an independent boys' school that admits girls in the sixth form. She grew up with her stepfather, mother, sister Samantha, and brother Mark.She has said that she was the victim of bullying while at school.At school, Dormer was head girl, a straight-A student, vice-captain of the school netball team, and she also got to travel the world with her school's public speaking team. During her school years, Dormer trained in dance at the Allenova School of Dancing. She describes herself as the \\\"academic hopeful\\\" of the family and was offered a place to study history at Cambridge; but, in her A-level History exam, she did not achieve the A grade she needed to attend. Dormer decided she would audition for drama schools and decided to train at the Webber Douglas Academy of Dramatic Art in London.\",\n  \"popularity\": 5.642,\n  \"place_of_birth\": \"Reading, Berkshire, England, UK\",\n  \"profile_path\": \"/8piDfs6oyRKSvrRv4RfUWEs3I0n.jpg\",\n  \"adult\": false,\n  \"imdb_id\": \"nm1754059\",\n  \"homepage\": null,\n  \"external_ids\": PERSON_EXTERNAL_IDS,\n  \"images\": PERSON_IMAGES,\n  \"combined_credits\": PERSON_COMBINED_CREDITS\n}"
                },
                {
                    "name": "PERSON_EXTERNAL_IDS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/mock-data-person-details.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IExternalids",
                    "defaultValue": "{\n  \"id\": 58502,\n  \"twitter_id\": null,\n  \"facebook_id\": \"nataliedormerintheforest\",\n  \"tvrage_id\": 173448,\n  \"instagram_id\": null,\n  \"freebase_mid\": \"/m/02qfkfh\",\n  \"imdb_id\": \"nm1754059\",\n  \"freebase_id\": \"/en/natalie_dormer\"\n}"
                },
                {
                    "name": "PERSON_IMAGES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/mock-data-person-details.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IImages",
                    "defaultValue": "{\n  \"profiles\": [\n    {\n      \"iso_639_1\": null,\n      \"width\": 1400,\n      \"height\": 2100,\n      \"vote_count\": 3,\n      \"vote_average\": 5.152,\n      \"file_path\": \"/2683pY6jXyR8KUmr5DK4ZY7Kryn.jpg\",\n      \"aspect_ratio\": 0.66666666666667\n    },\n    {\n      \"iso_639_1\": null,\n      \"width\": 600,\n      \"height\": 900,\n      \"vote_count\": 13,\n      \"vote_average\": 5.314,\n      \"file_path\": \"/8piDfs6oyRKSvrRv4RfUWEs3I0n.jpg\",\n      \"aspect_ratio\": 0.66666666666667\n    },\n    {\n      \"iso_639_1\": null,\n      \"width\": 1000,\n      \"height\": 1500,\n      \"vote_count\": 5,\n      \"vote_average\": 5.064,\n      \"file_path\": \"/4gimEAQ4pVM5LA9NzNNKNquae2X.jpg\",\n      \"aspect_ratio\": 0.66666666666667\n    },\n    {\n      \"iso_639_1\": null,\n      \"width\": 1000,\n      \"height\": 1500,\n      \"vote_count\": 3,\n      \"vote_average\": 5.04329004329,\n      \"file_path\": \"/o0LY3wKKlIv9tFCGVWLlrHS4rmR.jpg\",\n      \"aspect_ratio\": 0.66666666666667\n    },\n    {\n      \"iso_639_1\": null,\n      \"width\": 900,\n      \"height\": 1350,\n      \"vote_count\": 4,\n      \"vote_average\": 5.224,\n      \"file_path\": \"/qZDxS0fEeMQ380kKx9kULeYlpLp.jpg\",\n      \"aspect_ratio\": 0.66666666666667\n    },\n    {\n      \"iso_639_1\": null,\n      \"width\": 1600,\n      \"height\": 2400,\n      \"vote_count\": 3,\n      \"vote_average\": 5.166,\n      \"file_path\": \"/6sj7fkTgxD6ephXmof3hhLLtlrD.jpg\",\n      \"aspect_ratio\": 0.66666666666667\n    },\n    {\n      \"iso_639_1\": null,\n      \"width\": 800,\n      \"height\": 1200,\n      \"vote_count\": 6,\n      \"vote_average\": 5.252,\n      \"file_path\": \"/1zOGQvA7cNqPBcsjyRW5433fK98.jpg\",\n      \"aspect_ratio\": 0.66666666666667\n    },\n    {\n      \"iso_639_1\": null,\n      \"width\": 1400,\n      \"height\": 2100,\n      \"vote_count\": 11,\n      \"vote_average\": 5.27,\n      \"file_path\": \"/mw8L1luheBg3YjijdGWtjT2f2Zp.jpg\",\n      \"aspect_ratio\": 0.66666666666667\n    },\n    {\n      \"iso_639_1\": null,\n      \"width\": 300,\n      \"height\": 450,\n      \"vote_count\": 4,\n      \"vote_average\": 5.252,\n      \"file_path\": \"/kh0wH4N7VvoyXyop4KNtAcnxk05.jpg\",\n      \"aspect_ratio\": 0.66666666666667\n    },\n    {\n      \"iso_639_1\": null,\n      \"width\": 774,\n      \"height\": 1161,\n      \"vote_count\": 2,\n      \"vote_average\": 5.106,\n      \"file_path\": \"/oj7KAJBcpIZqbqMQsYOtouHGIbz.jpg\",\n      \"aspect_ratio\": 0.66666666666667\n    },\n    {\n      \"iso_639_1\": null,\n      \"width\": 929,\n      \"height\": 1394,\n      \"vote_count\": 2,\n      \"vote_average\": 5.246,\n      \"file_path\": \"/vGxi5zDojeaFsZ12bgvKnIjAmuY.jpg\",\n      \"aspect_ratio\": 0.66642754662841\n    },\n    {\n      \"iso_639_1\": null,\n      \"width\": 648,\n      \"height\": 973,\n      \"vote_count\": 0,\n      \"vote_average\": 0,\n      \"file_path\": \"/fOOdVrBgqHcVnT0VEcJyX1VoM5t.jpg\",\n      \"aspect_ratio\": 0.66598150051387\n    },\n    {\n      \"iso_639_1\": null,\n      \"width\": 656,\n      \"height\": 984,\n      \"vote_count\": 4,\n      \"vote_average\": 5.252,\n      \"file_path\": \"/8HIKlLSQHCnPnnI9XpxiRkd8YdO.jpg\",\n      \"aspect_ratio\": 0.66666666666667\n    },\n    {\n      \"iso_639_1\": null,\n      \"width\": 996,\n      \"height\": 1494,\n      \"vote_count\": 2,\n      \"vote_average\": 5.246,\n      \"file_path\": \"/zDWhTD7zUyKn4c0t8ENxbSHLIw.jpg\",\n      \"aspect_ratio\": 0.66666666666667\n    },\n    {\n      \"iso_639_1\": null,\n      \"width\": 1236,\n      \"height\": 1854,\n      \"vote_count\": 0,\n      \"vote_average\": 0,\n      \"file_path\": \"/kYjMxoEWpQRjo9A6VK0KFVpN51c.jpg\",\n      \"aspect_ratio\": 0.66666666666667\n    },\n    {\n      \"iso_639_1\": null,\n      \"width\": 848,\n      \"height\": 1271,\n      \"vote_count\": 8,\n      \"vote_average\": 5.264,\n      \"file_path\": \"/xFmOEtfO75XFUXdN2PrOfVcUALF.jpg\",\n      \"aspect_ratio\": 0.66719118804091\n    },\n    {\n      \"iso_639_1\": null,\n      \"width\": 1600,\n      \"height\": 2400,\n      \"vote_count\": 2,\n      \"vote_average\": 5.106,\n      \"file_path\": \"/fw0WsZroHiYRVaDbnnxBvrIMs9e.jpg\",\n      \"aspect_ratio\": 0.66666666666667\n    },\n    {\n      \"iso_639_1\": null,\n      \"width\": 2000,\n      \"height\": 3000,\n      \"vote_count\": 1,\n      \"vote_average\": 5.312,\n      \"file_path\": \"/fML6fJnmEZgN7ca0tB2qwqWn5zO.jpg\",\n      \"aspect_ratio\": 0.66666666666667\n    },\n    {\n      \"iso_639_1\": null,\n      \"width\": 1600,\n      \"height\": 2400,\n      \"vote_count\": 1,\n      \"vote_average\": 5.312,\n      \"file_path\": \"/3OlkHjDKDj9NKkFWXfLk7gcb2C.jpg\",\n      \"aspect_ratio\": 0.66666666666667\n    },\n    {\n      \"iso_639_1\": null,\n      \"width\": 1600,\n      \"height\": 2400,\n      \"vote_count\": 0,\n      \"vote_average\": 0,\n      \"file_path\": \"/sbYSlVPsNny0EpFJYkIVDxuv7ol.jpg\",\n      \"aspect_ratio\": 0.66666666666667\n    },\n    {\n      \"iso_639_1\": null,\n      \"width\": 444,\n      \"height\": 666,\n      \"vote_count\": 0,\n      \"vote_average\": 0,\n      \"file_path\": \"/n7GKBBAMcaGirzWptf8lOI8xalL.jpg\",\n      \"aspect_ratio\": 0.66666666666667\n    }\n  ],\n  \"id\": 58502\n}"
                }
            ],
            "src/app/directives/repeat-password.directive.ts": [
                {
                    "name": "repeatPasswordValidator",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/directives/repeat-password.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ValidatorFn",
                    "defaultValue": "(control: FormGroup): ValidationErrors | null => {\n  const password = control.get('password')\n  const repeatPassword = control.get('repeatPassword')\n  const toReturn = password.value && repeatPassword.value && password.value !== repeatPassword.value ? { isRepeatPassword: true } : null\n  return toReturn\n}",
                    "rawdescription": "Validator for repeat password. It sets false if password and repeat password are not equal.",
                    "description": "<p>Validator for repeat password. It sets false if password and repeat password are not equal.</p>\n"
                }
            ],
            "src/app/mock-data-movie-details.ts": [
                {
                    "name": "TMDB_FULL_MOVIE_DETAILS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/mock-data-movie-details.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  \"adult\": false,\n  \"backdrop_path\": \"/x7O7oJO7BeXWvqXpLa5YoJd8ZD5.jpg\",\n  \"belongs_to_collection\": null,\n  \"budget\": 180000000,\n  \"genres\": [\n    {\n      \"id\": 16,\n      \"name\": \"Animation\"\n    },\n    {\n      \"id\": 10751,\n      \"name\": \"Family\"\n    },\n    {\n      \"id\": 878,\n      \"name\": \"Science Fiction\"\n    }\n  ],\n  \"homepage\": \"https://www.pixar.com/feature-films/walle/\",\n  \"id\": 10681,\n  \"imdb_id\": \"tt0910970\",\n  \"original_language\": \"en\",\n  \"original_title\": \"WALL·E\",\n  \"overview\": \"WALL·E is the last robot left on an Earth that has been overrun with garbage and all humans have fled to outer space. For 700 years he has continued to try and clean up the mess, but has developed some rather interesting human-like qualities. When a ship arrives with a sleek new type of robot, WALL·E thinks he's finally found a friend and stows away on the ship when it leaves.\",\n  \"popularity\": 25.606,\n  \"poster_path\": \"/hbhFnRzzg6ZDmm8YAmxBnQpQIPh.jpg\",\n  \"production_companies\": [\n    {\n      \"id\": 3,\n      \"logo_path\": \"/1TjvGVDMYsj6JBxOAkUHpPEwLf7.png\",\n      \"name\": \"Pixar\",\n      \"origin_country\": \"US\"\n    },\n    {\n      \"id\": 2,\n      \"logo_path\": \"/wdrCwmRnLFJhEoH8GSfymY85KHT.png\",\n      \"name\": \"Walt Disney Pictures\",\n      \"origin_country\": \"US\"\n    }\n  ],\n  \"production_countries\": [\n    {\n      \"iso_3166_1\": \"US\",\n      \"name\": \"United States of America\"\n    }\n  ],\n  \"release_date\": \"2008-06-22\",\n  \"revenue\": 521311860,\n  \"runtime\": 98,\n  \"spoken_languages\": [\n    {\n      \"iso_639_1\": \"en\",\n      \"name\": \"English\"\n    }\n  ],\n  \"status\": \"Released\",\n  \"tagline\": \"After 700 years of doing what he was built for, he'll discover what he was meant for.\",\n  \"title\": \"WALL·E\",\n  \"video\": false,\n  \"vote_average\": 8,\n  \"vote_count\": 11546,\n  \"videos\": {\n    \"results\": [\n      {\n        \"id\": \"533ec66cc3a3685448001c28\",\n        \"iso_639_1\": \"en\",\n        \"iso_3166_1\": \"US\",\n        \"key\": \"8-_9n5DtKOc\",\n        \"name\": \"WALL-E HD 1080p Trailer\",\n        \"site\": \"YouTube\",\n        \"size\": 720,\n        \"type\": \"Trailer\"\n      }\n    ]\n  },\n  \"images\": {\n    \"backdrops\": [],\n    \"posters\": []\n  },\n  \"credits\": {\n    \"cast\": [\n      {\n        \"cast_id\": 12,\n        \"character\": \"WALL·E / M-O (voice)\",\n        \"credit_id\": \"52fe43a29251416c75018111\",\n        \"gender\": 2,\n        \"id\": 670,\n        \"name\": \"Ben Burtt\",\n        \"order\": 0,\n        \"profile_path\": \"/nfkHcZkAIGEyJ0m2jtOKaPyqNxu.jpg\"\n      },\n      {\n        \"cast_id\": 13,\n        \"character\": \"EVE (voice)\",\n        \"credit_id\": \"52fe43a29251416c75018115\",\n        \"gender\": 0,\n        \"id\": 72754,\n        \"name\": \"Elissa Knight\",\n        \"order\": 1,\n        \"profile_path\": \"/21JKhZc6bTAoHcwSjQhZcdhhx5d.jpg\"\n      },\n      {\n        \"cast_id\": 14,\n        \"character\": \"Captain (voice)\",\n        \"credit_id\": \"52fe43a29251416c75018119\",\n        \"gender\": 2,\n        \"id\": 60074,\n        \"name\": \"Jeff Garlin\",\n        \"order\": 2,\n        \"profile_path\": \"/cBs7u7rBTvDFp5MFCnvrPeF7SI2.jpg\"\n      },\n      {\n        \"cast_id\": 21,\n        \"character\": \"Shelby Forthright, BnL CEO\",\n        \"credit_id\": \"52fe43a29251416c7501811d\",\n        \"gender\": 2,\n        \"id\": 20753,\n        \"name\": \"Fred Willard\",\n        \"order\": 3,\n        \"profile_path\": \"/j1jWdqmklfIH4hpAbw1DK0gPMX0.jpg\"\n      },\n      {\n        \"cast_id\": 22,\n        \"character\": \"John (voice)\",\n        \"credit_id\": \"53c61bc6c3a3686251001af8\",\n        \"gender\": 2,\n        \"id\": 7907,\n        \"name\": \"John Ratzenberger\",\n        \"order\": 5,\n        \"profile_path\": \"/oRtDEOuIO1yDhTz5dORBdxXuLMO.jpg\"\n      },\n      {\n        \"cast_id\": 24,\n        \"character\": \"Mary (voice)\",\n        \"credit_id\": \"5587d7c49251415aa900050f\",\n        \"gender\": 1,\n        \"id\": 11074,\n        \"name\": \"Kathy Najimy\",\n        \"order\": 6,\n        \"profile_path\": \"/eFFh5QU9ErNKls7WfyG8VHEc2MY.jpg\"\n      },\n      {\n        \"cast_id\": 88,\n        \"character\": \"Ship's Computer (voice)\",\n        \"credit_id\": \"59bf4a4bc3a368307500cb35\",\n        \"gender\": 1,\n        \"id\": 10205,\n        \"name\": \"Sigourney Weaver\",\n        \"order\": 7,\n        \"profile_path\": \"/ukaLqyGZlMUDcvrhj6jkV16Zgsx.jpg\"\n      },\n      {\n        \"cast_id\": 40,\n        \"character\": \"Steward Bots (voice)\",\n        \"credit_id\": \"561be2ad9251415a67001bd1\",\n        \"gender\": 2,\n        \"id\": 59357,\n        \"name\": \"Teddy Newton\",\n        \"order\": 8,\n        \"profile_path\": \"/mftwTs5lza95kOyAZsrfNaqSFtv.jpg\"\n      },\n      {\n        \"cast_id\": 41,\n        \"character\": \"Axiom Passenger (voice)\",\n        \"credit_id\": \"561be2c59251415a640016d0\",\n        \"gender\": 2,\n        \"id\": 78317,\n        \"name\": \"Bob Bergen\",\n        \"order\": 9,\n        \"profile_path\": \"/nWFte3YPKGKEmj7n9embVttrxJ9.jpg\"\n      },\n      {\n        \"cast_id\": 42,\n        \"character\": \"Axiom Passenger (voice)\",\n        \"credit_id\": \"561be2d5c3a368225e0016fe\",\n        \"gender\": 0,\n        \"id\": 167295,\n        \"name\": \"John Cygan\",\n        \"order\": 10,\n        \"profile_path\": \"/peq0EjfKWVDQ8Gr83v0UO1wuFn6.jpg\"\n      },\n      {\n        \"cast_id\": 43,\n        \"character\": \"Axiom Passenger (voice)\",\n        \"credit_id\": \"561be2e49251415a67001bdc\",\n        \"gender\": 2,\n        \"id\": 12890,\n        \"name\": \"Pete Docter\",\n        \"order\": 11,\n        \"profile_path\": \"/r6ngPgnReA3RHmKjmSoVsc6Awjp.jpg\"\n      },\n      {\n        \"cast_id\": 44,\n        \"character\": \"Axiom Passenger (voice)\",\n        \"credit_id\": \"561be2ff9251415a5c001949\",\n        \"gender\": 2,\n        \"id\": 86006,\n        \"name\": \"Paul Eiding\",\n        \"order\": 12,\n        \"profile_path\": \"/73yCY9QBAKqFilmVLXATsrIzL2Q.jpg\"\n      },\n      {\n        \"cast_id\": 45,\n        \"character\": \"Axiom Passenger (voice)\",\n        \"credit_id\": \"561be31bc3a368225b0014cc\",\n        \"gender\": 0,\n        \"id\": 84494,\n        \"name\": \"Donald Fullilove\",\n        \"order\": 13,\n        \"profile_path\": \"/dInPIKh7AfGLR1LT3aZnL8jPKwQ.jpg\"\n      },\n      {\n        \"cast_id\": 25,\n        \"character\": \"(voice)\",\n        \"credit_id\": \"5587d7dc9251411e8d0063cc\",\n        \"gender\": 1,\n        \"id\": 117081,\n        \"name\": \"Teresa Ganzel\",\n        \"order\": 14,\n        \"profile_path\": \"/4cIwealxv1bizPJks34Gfk7okBF.jpg\"\n      },\n      {\n        \"cast_id\": 46,\n        \"character\": \"Axiom Passenger (voice)\",\n        \"credit_id\": \"561be32f9251415a5c001953\",\n        \"gender\": 2,\n        \"id\": 84495,\n        \"name\": \"Jess Harnell\",\n        \"order\": 15,\n        \"profile_path\": \"/zQ2zg7PL3ut4JhfXMKSRV4FMnxR.jpg\"\n      },\n      {\n        \"cast_id\": 48,\n        \"character\": \"Axiom Passenger (voice)\",\n        \"credit_id\": \"561be35e9251415a6200172d\",\n        \"gender\": 1,\n        \"id\": 84493,\n        \"name\": \"Mickie McGowan\",\n        \"order\": 17,\n        \"profile_path\": \"/k7TjJBfINsg8vLQxJwos6XObAD6.jpg\"\n      },\n      {\n        \"cast_id\": 26,\n        \"character\": \"Axiom Passenger (voice)\",\n        \"credit_id\": \"5587d7f0c3a368274c006b36\",\n        \"gender\": 1,\n        \"id\": 35159,\n        \"name\": \"Laraine Newman\",\n        \"order\": 18,\n        \"profile_path\": \"/ApYftBOqDMBnVColOQwXIodOt5s.jpg\"\n      },\n      {\n        \"cast_id\": 49,\n        \"character\": \"Axiom Passenger (voice)\",\n        \"credit_id\": \"561be379c3a3682258001976\",\n        \"gender\": 1,\n        \"id\": 24358,\n        \"name\": \"Lori Alan\",\n        \"order\": 19,\n        \"profile_path\": \"/mNfJWzuaKgkIaK7CuirXOMosd2h.jpg\"\n      },\n      {\n        \"cast_id\": 52,\n        \"character\": \"Forthright's Advisor (voice)\",\n        \"credit_id\": \"561be3d29251415a67001bfe\",\n        \"gender\": 2,\n        \"id\": 7882,\n        \"name\": \"Jeff Pidgeon\",\n        \"order\": 20,\n        \"profile_path\": \"/yLddkg5HcgbJg00cS13GVBnP0HY.jpg\"\n      },\n      {\n        \"cast_id\": 51,\n        \"character\": \"Axiom Passenger (voice)\",\n        \"credit_id\": \"561be3bcc3a368225b0014df\",\n        \"gender\": 2,\n        \"id\": 157626,\n        \"name\": \"Jan Rabson\",\n        \"order\": 21,\n        \"profile_path\": \"/6mfE6PFzOlKb2Qf4dURbKzLrTTC.jpg\"\n      },\n      {\n        \"cast_id\": 53,\n        \"character\": \"PR-T (voice)\",\n        \"credit_id\": \"561be3f4c3a3682264001964\",\n        \"gender\": 1,\n        \"id\": 225986,\n        \"name\": \"Lori Richardson\",\n        \"order\": 22,\n        \"profile_path\": \"/o0I2nhMHyN0QxoolRqs08yhZozu.jpg\"\n      },\n      {\n        \"cast_id\": 54,\n        \"character\": \"Lifeguard Bot (voice)\",\n        \"credit_id\": \"561be40b9251415a6b00179b\",\n        \"gender\": 2,\n        \"id\": 7,\n        \"name\": \"Andrew Stanton\",\n        \"order\": 23,\n        \"profile_path\": \"/gasNitCwepbqNcYBmDHpsCgZH0I.jpg\"\n      },\n      {\n        \"cast_id\": 55,\n        \"character\": \"Billboard Announcer (voice)\",\n        \"credit_id\": \"561be439c3a3682251001a2d\",\n        \"gender\": 0,\n        \"id\": 86007,\n        \"name\": \"Jim Ward\",\n        \"order\": 24,\n        \"profile_path\": \"/xFQCDJCqDFnmwmIz1l9x5wNzJ2u.jpg\"\n      },\n      {\n        \"cast_id\": 50,\n        \"character\": \"Axiom Passenger (voice)\",\n        \"credit_id\": \"561be3939251415a5c001963\",\n        \"gender\": 0,\n        \"id\": 1443485,\n        \"name\": \"Colette Whitaker\",\n        \"order\": 25,\n        \"profile_path\": \"/4bA2MMAy8MpHiqKMxMOuwdKHzOO.jpg\"\n      },\n      {\n        \"cast_id\": 56,\n        \"character\": \"Hoverchair Mother (uncredited)\",\n        \"credit_id\": \"561be4669251415a6b0017ab\",\n        \"gender\": 0,\n        \"id\": 99639,\n        \"name\": \"Kim Kopf\",\n        \"order\": 26,\n        \"profile_path\": \"/wlxLBDfyNxBgW5o9jEVEJq4wZjk.jpg\"\n      },\n      {\n        \"cast_id\": 57,\n        \"character\": \"BURN-E (voice) (uncredited)\",\n        \"credit_id\": \"561be4869251415a6b0017b0\",\n        \"gender\": 0,\n        \"id\": 7929,\n        \"name\": \"Angus MacLane\",\n        \"order\": 27,\n        \"profile_path\": \"/7U1mEvzHGNJiC07EOhKIKSl3Qiy.jpg\"\n      },\n      {\n        \"cast_id\": 89,\n        \"character\": \"Pool Mother (uncredited)\",\n        \"credit_id\": \"59d0ab8392514113eb016547\",\n        \"gender\": 1,\n        \"id\": 1580169,\n        \"name\": \"Niki McElroy\",\n        \"order\": 28,\n        \"profile_path\": \"/1oIOq6B6LAlUgiiIBkEEyDl7TO.jpg\"\n      },\n      {\n        \"cast_id\": 58,\n        \"character\": \"Blond Boy in Commercial (uncredited)\",\n        \"credit_id\": \"561be4d49251415a64001719\",\n        \"gender\": 2,\n        \"id\": 1174938,\n        \"name\": \"Garrett Palmer\",\n        \"order\": 29,\n        \"profile_path\": \"/mSQQ7anFefpGMCfD7K1wjQqg1xL.jpg\"\n      },\n      {\n        \"cast_id\": 259,\n        \"character\": \"Axiom Passenger #5 (voice)\",\n        \"credit_id\": \"5abfc3f4c3a368443c031455\",\n        \"gender\": 1,\n        \"id\": 214701,\n        \"name\": \"Sherry Lynn\",\n        \"order\": 31,\n        \"profile_path\": \"/kQDSC2z7sb6S5HcpOH6cmeJokKE.jpg\"\n      }\n    ],\n    \"crew\": [\n      {\n        \"credit_id\": \"52fe43a29251416c75018101\",\n        \"department\": \"Writing\",\n        \"gender\": 2,\n        \"id\": 7,\n        \"job\": \"Screenplay\",\n        \"name\": \"Andrew Stanton\",\n        \"profile_path\": \"/gasNitCwepbqNcYBmDHpsCgZH0I.jpg\"\n      },\n      {\n        \"credit_id\": \"52fe43a29251416c750180d1\",\n        \"department\": \"Directing\",\n        \"gender\": 2,\n        \"id\": 7,\n        \"job\": \"Director\",\n        \"name\": \"Andrew Stanton\",\n        \"profile_path\": \"/gasNitCwepbqNcYBmDHpsCgZH0I.jpg\"\n      },\n      {\n        \"credit_id\": \"52fe43a29251416c750180ef\",\n        \"department\": \"Writing\",\n        \"gender\": 2,\n        \"id\": 7,\n        \"job\": \"Original Story\",\n        \"name\": \"Andrew Stanton\",\n        \"profile_path\": \"/gasNitCwepbqNcYBmDHpsCgZH0I.jpg\"\n      },\n      {\n        \"credit_id\": \"561a9a2ac3a36851010012ed\",\n        \"department\": \"Production\",\n        \"gender\": 2,\n        \"id\": 7879,\n        \"job\": \"Executive Producer\",\n        \"name\": \"John Lasseter\",\n        \"profile_path\": \"/7EdqiNbr4FRjIhKHyPPdFfEEEFG.jpg\"\n      },\n      {\n        \"credit_id\": \"52fe43a29251416c750180d7\",\n        \"department\": \"Sound\",\n        \"gender\": 2,\n        \"id\": 153,\n        \"job\": \"Original Music Composer\",\n        \"name\": \"Thomas Newman\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5aa9c3e90e0a2664ff0035f9\",\n        \"department\": \"Sound\",\n        \"gender\": 2,\n        \"id\": 670,\n        \"job\": \"Supervising Sound Editor\",\n        \"name\": \"Ben Burtt\",\n        \"profile_path\": \"/nfkHcZkAIGEyJ0m2jtOKaPyqNxu.jpg\"\n      },\n      {\n        \"credit_id\": \"5aa9c3e2925141056d00317c\",\n        \"department\": \"Sound\",\n        \"gender\": 2,\n        \"id\": 670,\n        \"job\": \"Sound Re-Recording Mixer\",\n        \"name\": \"Ben Burtt\",\n        \"profile_path\": \"/nfkHcZkAIGEyJ0m2jtOKaPyqNxu.jpg\"\n      },\n      {\n        \"credit_id\": \"561a9bc7925141775f002a1a\",\n        \"department\": \"Crew\",\n        \"gender\": 2,\n        \"id\": 7467,\n        \"job\": \"Thanks\",\n        \"name\": \"David Fincher\",\n        \"profile_path\": \"/dcBHejOsKvzVZVozWJAPzYthb8X.jpg\"\n      },\n      {\n        \"credit_id\": \"561a9aa69251415747001075\",\n        \"department\": \"Art\",\n        \"gender\": 2,\n        \"id\": 7883,\n        \"job\": \"Production Design\",\n        \"name\": \"Ralph Eggleston\",\n        \"profile_path\": \"/uUfcGKDsKO1aROMpXRs67Hn6RvR.jpg\"\n      },\n      {\n        \"credit_id\": \"52fe43a29251416c750180e9\",\n        \"department\": \"Production\",\n        \"gender\": 0,\n        \"id\": 7887,\n        \"job\": \"Executive Producer\",\n        \"name\": \"Thomas Porter\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbd630e0a264a5702ce04\",\n        \"department\": \"Art\",\n        \"gender\": 0,\n        \"id\": 7898,\n        \"job\": \"Set Dresser\",\n        \"name\": \"Sophie Vincelette\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc379925141602702d4b0\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 1,\n        \"id\": 7944,\n        \"job\": \"Shading\",\n        \"name\": \"Laura Phillips\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"572f66909251413de300064c\",\n        \"department\": \"Art\",\n        \"gender\": 0,\n        \"id\": 7951,\n        \"job\": \"Art Direction\",\n        \"name\": \"Jason Deamer\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc366c3a368444e03108d\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 7954,\n        \"job\": \"Modeling\",\n        \"name\": \"Gary Schultz\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"561a9b079251410c430006c7\",\n        \"department\": \"Production\",\n        \"gender\": 0,\n        \"id\": 7972,\n        \"job\": \"Production Manager\",\n        \"name\": \"Andrea Warren\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5750cc86c3a36801a30004bd\",\n        \"department\": \"Costume & Make-Up\",\n        \"gender\": 0,\n        \"id\": 7980,\n        \"job\": \"Set Dressing Artist\",\n        \"name\": \"Derek Williams\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"52fe43a29251416c7501810d\",\n        \"department\": \"Camera\",\n        \"gender\": 0,\n        \"id\": 7988,\n        \"job\": \"Director of Photography\",\n        \"name\": \"Jeremy Lasky\",\n        \"profile_path\": \"/6jue4yNU3XazP4mTMep7fCuK9VR.jpg\"\n      },\n      {\n        \"credit_id\": \"5723fc6b92514122a90013c6\",\n        \"department\": \"Art\",\n        \"gender\": 1,\n        \"id\": 8003,\n        \"job\": \"Art Direction\",\n        \"name\": \"Ellen Moon Lee\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"572bd597c3a368012c0002bc\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 8012,\n        \"job\": \"Supervising Animator\",\n        \"name\": \"Alan Barillaro\",\n        \"profile_path\": \"/blKbtsPf9yWoiA1cClJ5dGscqls.jpg\"\n      },\n      {\n        \"credit_id\": \"5abfc0ff0e0a264a5a02eefc\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 8026,\n        \"job\": \"Animation\",\n        \"name\": \"Brett Coderre\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc13b925141601502c667\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 8030,\n        \"job\": \"Animation\",\n        \"name\": \"Nancy Kato\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc181925141601502c6a9\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 8040,\n        \"job\": \"Animation\",\n        \"name\": \"Victor Navone\",\n        \"profile_path\": \"/uThaeRVujv9wj7LjL9jTs4jpGn7.jpg\"\n      },\n      {\n        \"credit_id\": \"5abfc1440e0a264a60031a24\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 8043,\n        \"job\": \"Animation\",\n        \"name\": \"Patty Kihm Stevenson\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc25bc3a368443c0311f7\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 8056,\n        \"job\": \"Animation\",\n        \"name\": \"Kureha Yokoo\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc2630e0a264a5a02f116\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 8057,\n        \"job\": \"Animation\",\n        \"name\": \"Ron Zorman\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc179925141601b02dbdf\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 8058,\n        \"job\": \"Animation\",\n        \"name\": \"Paul Mendoza\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbe15925141601e02b578\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 8071,\n        \"job\": \"Second Film Editor\",\n        \"name\": \"Axel Geddes\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"576d696592514141050018e2\",\n        \"department\": \"Sound\",\n        \"gender\": 0,\n        \"id\": 8078,\n        \"job\": \"Sound Designer\",\n        \"name\": \"E.J. Holowicki\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"572bd2c5c3a3687ff700028c\",\n        \"department\": \"Editing\",\n        \"gender\": 0,\n        \"id\": 8080,\n        \"job\": \"Assistant Editor\",\n        \"name\": \"Renee Steen\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"572cc94492514165ec00041d\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 8089,\n        \"job\": \"Modeling\",\n        \"name\": \"Jason Bickerstaff\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbe3e925141602102bcb6\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 8097,\n        \"job\": \"Software Engineer\",\n        \"name\": \"Ben Jordan\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"57769d0192514174d20019ca\",\n        \"department\": \"Lighting\",\n        \"gender\": 2,\n        \"id\": 8109,\n        \"job\": \"Master Lighting Artist\",\n        \"name\": \"Tim Best\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbd960e0a264a6302f694\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 8150,\n        \"job\": \"Information Systems Manager\",\n        \"name\": \"Erik Forman\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"572295c5c3a3682d3f000886\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 8153,\n        \"job\": \"Post Production Supervisor\",\n        \"name\": \"Paul Cichocki\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"573dee489251410c0e000066\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 8155,\n        \"job\": \"Projection\",\n        \"name\": \"John Hazelton\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc02dc3a368443802fe75\",\n        \"department\": \"Sound\",\n        \"gender\": 0,\n        \"id\": 8157,\n        \"job\": \"ADR & Dubbing\",\n        \"name\": \"Doc Kane\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc04a0e0a264a4e02f34a\",\n        \"department\": \"Sound\",\n        \"gender\": 0,\n        \"id\": 8160,\n        \"job\": \"Foley\",\n        \"name\": \"Dennie Thorpe\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc053c3a3684448031115\",\n        \"department\": \"Sound\",\n        \"gender\": 0,\n        \"id\": 8163,\n        \"job\": \"Foley\",\n        \"name\": \"Jana Vance\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc05a0e0a264a5d032967\",\n        \"department\": \"Sound\",\n        \"gender\": 2,\n        \"id\": 8166,\n        \"job\": \"Foley Editor\",\n        \"name\": \"Juan Peralta\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"561a9c3b9251410c430006ec\",\n        \"department\": \"Crew\",\n        \"gender\": 2,\n        \"id\": 10688,\n        \"job\": \"Thanks\",\n        \"name\": \"Harris Savides\",\n        \"profile_path\": \"/7B7o49bFyrfoiUvEujqqXNW8avK.jpg\"\n      },\n      {\n        \"credit_id\": \"561a9ad6c3a3685bfe0014df\",\n        \"department\": \"Costume & Make-Up\",\n        \"gender\": 0,\n        \"id\": 12612,\n        \"job\": \"Makeup Artist\",\n        \"name\": \"Karen Bradley\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"573deab492514172c60002ac\",\n        \"department\": \"Costume & Make-Up\",\n        \"gender\": 0,\n        \"id\": 12613,\n        \"job\": \"Makeup Artist\",\n        \"name\": \"Gretchen Davis\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"578fc194c3a368671a001463\",\n        \"department\": \"Editing\",\n        \"gender\": 0,\n        \"id\": 13223,\n        \"job\": \"Color Timer\",\n        \"name\": \"Jim Passon\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"52fe43a29251416c750180f5\",\n        \"department\": \"Writing\",\n        \"gender\": 2,\n        \"id\": 12890,\n        \"job\": \"Original Story\",\n        \"name\": \"Pete Docter\",\n        \"profile_path\": \"/r6ngPgnReA3RHmKjmSoVsc6Awjp.jpg\"\n      },\n      {\n        \"credit_id\": \"561a9be8c3a368630d000756\",\n        \"department\": \"Crew\",\n        \"gender\": 2,\n        \"id\": 12897,\n        \"job\": \"Thanks\",\n        \"name\": \"Steve Jobs\",\n        \"profile_path\": \"/mOMP3SwD5qWQSR0ldCIByd3guTV.jpg\"\n      },\n      {\n        \"credit_id\": \"5abfc09e0e0a264a5d0329c0\",\n        \"department\": \"Sound\",\n        \"gender\": 1,\n        \"id\": 15893,\n        \"job\": \"Sound Effects Editor\",\n        \"name\": \"Teresa Eckton\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"572bdf8a925141388e000457\",\n        \"department\": \"Sound\",\n        \"gender\": 2,\n        \"id\": 15894,\n        \"job\": \"Sound Re-Recording Mixer\",\n        \"name\": \"Tom Myers\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbf4c925141601802c44b\",\n        \"department\": \"Editing\",\n        \"gender\": 2,\n        \"id\": 28161,\n        \"job\": \"Associate Editor\",\n        \"name\": \"Nicholas C. Smith\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"561a9a7fc3a3686c41002488\",\n        \"department\": \"Production\",\n        \"gender\": 2,\n        \"id\": 57673,\n        \"job\": \"Casting\",\n        \"name\": \"Kevin Reher\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"571e47989251416f3600017a\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 59362,\n        \"job\": \"Visual Effects\",\n        \"name\": \"Andrew Jimenez\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"52fe43a29251416c75018107\",\n        \"department\": \"Editing\",\n        \"gender\": 2,\n        \"id\": 59363,\n        \"job\": \"Editor\",\n        \"name\": \"Stephen Schaffer\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc08ec3a3684448031171\",\n        \"department\": \"Sound\",\n        \"gender\": 2,\n        \"id\": 66941,\n        \"job\": \"Orchestrator\",\n        \"name\": \"J.A.C. Redford\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"52fe43a29251416c750180dd\",\n        \"department\": \"Production\",\n        \"gender\": 0,\n        \"id\": 72752,\n        \"job\": \"Producer\",\n        \"name\": \"Jim Morris\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"52fe43a29251416c750180e3\",\n        \"department\": \"Production\",\n        \"gender\": 0,\n        \"id\": 72753,\n        \"job\": \"Producer\",\n        \"name\": \"Lindsey Collins\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"52fe43a29251416c750180fb\",\n        \"department\": \"Writing\",\n        \"gender\": 0,\n        \"id\": 15020,\n        \"job\": \"Screenplay\",\n        \"name\": \"Jim Reardon\",\n        \"profile_path\": \"/s5dbDBNIHZoYp2SP9SEXobRjqh3.jpg\"\n      },\n      {\n        \"credit_id\": \"5abfc07e0e0a264a4e02f387\",\n        \"department\": \"Sound\",\n        \"gender\": 0,\n        \"id\": 68701,\n        \"job\": \"Orchestrator\",\n        \"name\": \"Carl Johnson\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc0bb0e0a264a5a02ee93\",\n        \"department\": \"Sound\",\n        \"gender\": 2,\n        \"id\": 71536,\n        \"job\": \"Supervising Sound Editor\",\n        \"name\": \"Matthew Wood\",\n        \"profile_path\": \"/oB9wVbEIg8fjY3ulDKjKsGn2A55.jpg\"\n      },\n      {\n        \"credit_id\": \"5772a4f8c3a36846ae000296\",\n        \"department\": \"Directing\",\n        \"gender\": 0,\n        \"id\": 72972,\n        \"job\": \"Layout\",\n        \"name\": \"Andrew Cadelago\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5772a3079251415cb60001c0\",\n        \"department\": \"Production\",\n        \"gender\": 1,\n        \"id\": 84493,\n        \"job\": \"Casting\",\n        \"name\": \"Mickie McGowan\",\n        \"profile_path\": \"/k7TjJBfINsg8vLQxJwos6XObAD6.jpg\"\n      },\n      {\n        \"credit_id\": \"5abfbaae925141601502bda2\",\n        \"department\": \"Camera\",\n        \"gender\": 2,\n        \"id\": 93044,\n        \"job\": \"Director of Photography\",\n        \"name\": \"Martin Rosenberg\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5ba1826a925141108e0007ed\",\n        \"department\": \"Sound\",\n        \"gender\": 0,\n        \"id\": 89426,\n        \"job\": \"Sound Mix Technician\",\n        \"name\": \"Tony Sereno\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"57229c80c3a36875ed000443\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 2,\n        \"id\": 107704,\n        \"job\": \"Animation\",\n        \"name\": \"Rodrigo Blaas\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbf390e0a264a6302f952\",\n        \"department\": \"Editing\",\n        \"gender\": 0,\n        \"id\": 138073,\n        \"job\": \"Assistant Editor\",\n        \"name\": \"Tessa Swigart\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"561a9bfd9251412c9c001204\",\n        \"department\": \"Crew\",\n        \"gender\": 1,\n        \"id\": 144960,\n        \"job\": \"Thanks\",\n        \"name\": \"Leslie Iwerks\",\n        \"profile_path\": \"/apevLP04EWMz0XUAr0iJSq5s6zf.jpg\"\n      },\n      {\n        \"credit_id\": \"5abfb692c3a368443f02bafd\",\n        \"department\": \"Crew\",\n        \"gender\": 2,\n        \"id\": 225979,\n        \"job\": \"In Memory Of\",\n        \"name\": \"Justin Wright\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5ba27d87c3a3687440004330\",\n        \"department\": \"Writing\",\n        \"gender\": 2,\n        \"id\": 225982,\n        \"job\": \"Story Artist\",\n        \"name\": \"Derek Thompson\",\n        \"profile_path\": \"/6KNmkw6tTWYW9FNws7wW9XafCqb.jpg\"\n      },\n      {\n        \"credit_id\": \"5abfbd8f0e0a264a6302f679\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 953331,\n        \"job\": \"Executive Music Producer\",\n        \"name\": \"Chris Montan\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc1bb925141602a02d227\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 2,\n        \"id\": 954958,\n        \"job\": \"Animation\",\n        \"name\": \"Bob Scott\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"561a9a6dc3a3685bfe0014ca\",\n        \"department\": \"Production\",\n        \"gender\": 1,\n        \"id\": 963497,\n        \"job\": \"Casting\",\n        \"name\": \"Natalie Lyon\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5ba57c560e0a262fa10008a9\",\n        \"department\": \"Art\",\n        \"gender\": 2,\n        \"id\": 1219041,\n        \"job\": \"Storyboard Artist\",\n        \"name\": \"Kevin O'Brien\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbb270e0a264a5d031f9e\",\n        \"department\": \"Directing\",\n        \"gender\": 1,\n        \"id\": 1282240,\n        \"job\": \"Script Coordinator\",\n        \"name\": \"Kyle Ranson-Walsh\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbc11925141602102b99d\",\n        \"department\": \"Lighting\",\n        \"gender\": 1,\n        \"id\": 1282240,\n        \"job\": \"Lighting Coordinator\",\n        \"name\": \"Kyle Ranson-Walsh\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc000c3a3684435027953\",\n        \"department\": \"Production\",\n        \"gender\": 0,\n        \"id\": 1282243,\n        \"job\": \"Production Coordinator\",\n        \"name\": \"Zoe Boxer\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfb738c3a368443802f1f7\",\n        \"department\": \"Art\",\n        \"gender\": 0,\n        \"id\": 1290450,\n        \"job\": \"Art Direction\",\n        \"name\": \"Robert Kondo\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"573276fbc3a3686953000566\",\n        \"department\": \"Sound\",\n        \"gender\": 0,\n        \"id\": 1291315,\n        \"job\": \"Music Supervisor\",\n        \"name\": \"Tom MacDougall\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5724df219251411e9f0000b0\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 2,\n        \"id\": 1299484,\n        \"job\": \"Animation\",\n        \"name\": \"Bob Whitehill\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5772a2379251415cb10001ad\",\n        \"department\": \"Production\",\n        \"gender\": 0,\n        \"id\": 1319751,\n        \"job\": \"Line Producer\",\n        \"name\": \"Gillian Libbert\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc3cc0e0a264a6302fff8\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 1335873,\n        \"job\": \"Visual Development\",\n        \"name\": \"George Hull\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"572bd086c3a3687ffd000224\",\n        \"department\": \"Sound\",\n        \"gender\": 2,\n        \"id\": 1368825,\n        \"job\": \"Sound Mixer\",\n        \"name\": \"Larry Hopkins\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbd23c3a3684448030ca5\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 1368872,\n        \"job\": \"VFX Supervisor\",\n        \"name\": \"Richard E. Hollander\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc0ae925141601502c59d\",\n        \"department\": \"Sound\",\n        \"gender\": 0,\n        \"id\": 1378828,\n        \"job\": \"Sound Re-Recording Mixer\",\n        \"name\": \"Michael Semanick\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbce00e0a264a5a02e940\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 2,\n        \"id\": 1378829,\n        \"job\": \"VFX Supervisor\",\n        \"name\": \"Edward Hirsh\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbd2fc3a368443c030a59\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 1,\n        \"id\": 1378830,\n        \"job\": \"Visual Effects Producer\",\n        \"name\": \"Jeanmarie King\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc0f60e0a264a4e02f4c1\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 2,\n        \"id\": 1397397,\n        \"job\": \"Animation\",\n        \"name\": \"Louis Clichy\",\n        \"profile_path\": \"/jc6e7PVJVIYvDft7D37I95kxZVs.jpg\"\n      },\n      {\n        \"credit_id\": \"5abfbe65c3a36844350277ab\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 1406885,\n        \"job\": \"Supervising Animator\",\n        \"name\": \"Steven Clay Hunter\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"57229afb9251417647000406\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 1413096,\n        \"job\": \"Animation\",\n        \"name\": \"Simon Allen\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"561a9c85925141775f002a4a\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 1415500,\n        \"job\": \"Thanks\",\n        \"name\": \"Kim Marks\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc0a7925141602702d143\",\n        \"department\": \"Sound\",\n        \"gender\": 0,\n        \"id\": 1422411,\n        \"job\": \"Sound Effects Editor\",\n        \"name\": \"Al Nelson\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"576d72d2925141410e001cb8\",\n        \"department\": \"Editing\",\n        \"gender\": 0,\n        \"id\": 1435597,\n        \"job\": \"Assistant Editor\",\n        \"name\": \"Kevin Rose-Williams\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc3bf925141602402df15\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 1451236,\n        \"job\": \"Visual Development\",\n        \"name\": \"Bruce Zick\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5772a65a9251415cc20002e9\",\n        \"department\": \"Camera\",\n        \"gender\": 2,\n        \"id\": 1451703,\n        \"job\": \"Camera Operator\",\n        \"name\": \"Mark Dinicola\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbd6a925141602a02cc38\",\n        \"department\": \"Art\",\n        \"gender\": 0,\n        \"id\": 1458006,\n        \"job\": \"Title Designer\",\n        \"name\": \"Susan Bradley\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"572b7efec3a368480d00300e\",\n        \"department\": \"Editing\",\n        \"gender\": 2,\n        \"id\": 1460426,\n        \"job\": \"Editorial Manager\",\n        \"name\": \"Doug Nichols\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc027c3a368445502ff47\",\n        \"department\": \"Sound\",\n        \"gender\": 0,\n        \"id\": 1461369,\n        \"job\": \"ADR & Dubbing\",\n        \"name\": \"Vince Caro\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"572b80eac3a36855a6001114\",\n        \"department\": \"Art\",\n        \"gender\": 0,\n        \"id\": 1463239,\n        \"job\": \"Set Designer\",\n        \"name\": \"Nelson 'Rey' Bohol\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbf12c3a368443c030daa\",\n        \"department\": \"Directing\",\n        \"gender\": 0,\n        \"id\": 1472873,\n        \"job\": \"Assistant Director\",\n        \"name\": \"Janette Nielsen\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"572f69349251412c8900460f\",\n        \"department\": \"Sound\",\n        \"gender\": 0,\n        \"id\": 1484178,\n        \"job\": \"Sound Effects Editor\",\n        \"name\": \"Dustin Cawood\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc11a0e0a264a4e02f4e8\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 1498226,\n        \"job\": \"Animation\",\n        \"name\": \"Patrick Delage\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbf2f0e0a264a5a02ec87\",\n        \"department\": \"Editing\",\n        \"gender\": 0,\n        \"id\": 1516156,\n        \"job\": \"Additional Editing\",\n        \"name\": \"Kevin Nolting\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"561a9ab9c3a3685bfe0014d3\",\n        \"department\": \"Art\",\n        \"gender\": 0,\n        \"id\": 1516157,\n        \"job\": \"Art Direction\",\n        \"name\": \"Bert Berry\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbad70e0a264a60031086\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 1536551,\n        \"job\": \"Visual Effects Editor\",\n        \"name\": \"Greg Hyman\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc087c3a368444402fbf6\",\n        \"department\": \"Sound\",\n        \"gender\": 2,\n        \"id\": 1549209,\n        \"job\": \"Orchestrator\",\n        \"name\": \"Thomas Pasatieri\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"571f9d4bc3a368338c003d43\",\n        \"department\": \"Editing\",\n        \"gender\": 0,\n        \"id\": 1552873,\n        \"job\": \"Color Timer\",\n        \"name\": \"Terry Claborn\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc035c3a368444e030c4d\",\n        \"department\": \"Sound\",\n        \"gender\": 0,\n        \"id\": 1556632,\n        \"job\": \"ADR Editor\",\n        \"name\": \"Steve Slanec\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbb6c0e0a264a5d032099\",\n        \"department\": \"Editing\",\n        \"gender\": 0,\n        \"id\": 1556647,\n        \"job\": \"Editorial Manager\",\n        \"name\": \"Noelle P. Case\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbc43c3a368445502f83f\",\n        \"department\": \"Sound\",\n        \"gender\": 2,\n        \"id\": 1558702,\n        \"job\": \"Scoring Mixer\",\n        \"name\": \"Thomas Vicari\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc0420e0a264a5702d48b\",\n        \"department\": \"Sound\",\n        \"gender\": 0,\n        \"id\": 1571058,\n        \"job\": \"Foley\",\n        \"name\": \"Frank Rinella\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbe49925141602402d831\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 1591573,\n        \"job\": \"Software Engineer\",\n        \"name\": \"Ryan Kautzman\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbf54c3a368443f02c723\",\n        \"department\": \"Editing\",\n        \"gender\": 0,\n        \"id\": 1609033,\n        \"job\": \"Editorial Manager\",\n        \"name\": \"Colin Bohrer\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc171925141601b02dbdc\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 2,\n        \"id\": 1609044,\n        \"job\": \"Animation\",\n        \"name\": \"Michal Makarewicz\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc3b7c3a36844440300ac\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 1681178,\n        \"job\": \"VFX Artist\",\n        \"name\": \"Mach Tony Kobayashi\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbfefc3a368445502fef9\",\n        \"department\": \"Lighting\",\n        \"gender\": 0,\n        \"id\": 1694608,\n        \"job\": \"Master Lighting Artist\",\n        \"name\": \"Luke Martorelli\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbff7c3a368443502794a\",\n        \"department\": \"Production\",\n        \"gender\": 0,\n        \"id\": 1703199,\n        \"job\": \"Production Accountant\",\n        \"name\": \"Marc Sondheimer\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc0d80e0a264a5a02eeb8\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 1711836,\n        \"job\": \"Animation\",\n        \"name\": \"Shaun Chacko\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbd7d0e0a264a5a02ea3c\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 1719067,\n        \"job\": \"Craft Service\",\n        \"name\": \"Luigi Passalacqua\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbe6d925141602402d865\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 1719078,\n        \"job\": \"Supervising Technical Director\",\n        \"name\": \"Nigel Hardwidge\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbeea0e0a264a5402f911\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 1719084,\n        \"job\": \"Systems Administrators & Support\",\n        \"name\": \"David Sotnick\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbfdf925141601502c49e\",\n        \"department\": \"Lighting\",\n        \"gender\": 0,\n        \"id\": 1719088,\n        \"job\": \"Master Lighting Artist\",\n        \"name\": \"Lloyd Bernberg\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc01dc3a368443802fe3b\",\n        \"department\": \"Production\",\n        \"gender\": 0,\n        \"id\": 1719096,\n        \"job\": \"Production Manager\",\n        \"name\": \"Joshua Hollander\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc2a50e0a264a5402fdd3\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 1719101,\n        \"job\": \"Modeling\",\n        \"name\": \"Brian Christian\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbc3ac3a368443f02c2f2\",\n        \"department\": \"Production\",\n        \"gender\": 0,\n        \"id\": 1741454,\n        \"job\": \"Unit Manager\",\n        \"name\": \"Richmond Horine\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbd5bc3a368443802fa39\",\n        \"department\": \"Art\",\n        \"gender\": 0,\n        \"id\": 1742707,\n        \"job\": \"Set Designer\",\n        \"name\": \"Noah Klocek\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbda6c3a3684448030d3c\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 1742757,\n        \"job\": \"Post Production Assistant\",\n        \"name\": \"Freesia Pearson\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc075c3a368443c030fae\",\n        \"department\": \"Sound\",\n        \"gender\": 0,\n        \"id\": 1762004,\n        \"job\": \"Musician\",\n        \"name\": \"Kevin Connolly\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc110c3a3684448031216\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 1777871,\n        \"job\": \"Animation\",\n        \"name\": \"Don Crum\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbcca925141601802c070\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 1777872,\n        \"job\": \"Animation\",\n        \"name\": \"Steve Mason\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc1fa925141602702d2ec\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 1777874,\n        \"job\": \"Animation\",\n        \"name\": \"Jean-Claude Tran\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc209c3a36844550301d1\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 1777876,\n        \"job\": \"Animation\",\n        \"name\": \"Ian White\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbcbc0e0a264a5402f5df\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 1777879,\n        \"job\": \"Animation\",\n        \"name\": \"Sarah Mercey-Boose\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc1230e0a264a4e02f4ed\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 1779942,\n        \"job\": \"Animation\",\n        \"name\": \"Everett Downing Jr.\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc16a925141601e02ba0d\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 1806625,\n        \"job\": \"Animation\",\n        \"name\": \"Austin Madison\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc06b925141601802c5f5\",\n        \"department\": \"Sound\",\n        \"gender\": 0,\n        \"id\": 1813303,\n        \"job\": \"Music Editor\",\n        \"name\": \"Charles Paley\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfba6ac3a368444402f339\",\n        \"department\": \"Camera\",\n        \"gender\": 0,\n        \"id\": 1830790,\n        \"job\": \"Director of Photography\",\n        \"name\": \"Danielle Feinberg\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc063925141601b02da8f\",\n        \"department\": \"Sound\",\n        \"gender\": 0,\n        \"id\": 1865070,\n        \"job\": \"Foley Editor\",\n        \"name\": \"Kevin Sellers\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbbc3925141601802bf37\",\n        \"department\": \"Editing\",\n        \"gender\": 2,\n        \"id\": 1924362,\n        \"job\": \"First Assistant Editor\",\n        \"name\": \"Anthony J. Greenberg\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbc2ac3a368445502f803\",\n        \"department\": \"Production\",\n        \"gender\": 0,\n        \"id\": 1948307,\n        \"job\": \"Production Coordinator\",\n        \"name\": \"Stacy Bissell\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc00e925141602a02d019\",\n        \"department\": \"Production\",\n        \"gender\": 0,\n        \"id\": 1989056,\n        \"job\": \"Production Coordinator\",\n        \"name\": \"Susan Frank\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc276925141601502c7e0\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 1993246,\n        \"job\": \"Animation Department Coordinator\",\n        \"name\": \"David Park\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbc030e0a264a6003121f\",\n        \"department\": \"Lighting\",\n        \"gender\": 0,\n        \"id\": 1993274,\n        \"job\": \"Lighting Artist\",\n        \"name\": \"Dale Ruffolo\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc0c6925141602102c093\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 1993326,\n        \"job\": \"Animation\",\n        \"name\": \"Carlos Baena\",\n        \"profile_path\": \"/wpDb5QJ9QpuxSifJ9XAXmYO6wt5.jpg\"\n      },\n      {\n        \"credit_id\": \"5abfc287c3a368444402ff2b\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 1993369,\n        \"job\": \"Fix Animator\",\n        \"name\": \"Chris Chua\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5ba22edf0e0a261ec30192ce\",\n        \"department\": \"Art\",\n        \"gender\": 2,\n        \"id\": 1993381,\n        \"job\": \"Graphic Designer\",\n        \"name\": \"Craig Foster\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc1330e0a264a4e02f4fa\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 1993419,\n        \"job\": \"Animation\",\n        \"name\": \"Guilherme Sauerbronn Jacinto\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc159925141601b02dbc3\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 1993479,\n        \"job\": \"Animation\",\n        \"name\": \"Bruce Kuei\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbd71c3a368445502f9d4\",\n        \"department\": \"Costume & Make-Up\",\n        \"gender\": 0,\n        \"id\": 1993484,\n        \"job\": \"Set Dressing Artist\",\n        \"name\": \"Alison Leaf\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc162925141602402dbf0\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 1993489,\n        \"job\": \"Animation\",\n        \"name\": \"Holger Leihe\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbc180e0a264a5d032179\",\n        \"department\": \"Lighting\",\n        \"gender\": 0,\n        \"id\": 1993598,\n        \"job\": \"Master Lighting Artist\",\n        \"name\": \"Andrew Pienaar\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc016925141602102bfd0\",\n        \"department\": \"Production\",\n        \"gender\": 0,\n        \"id\": 1993611,\n        \"job\": \"Production Coordinator\",\n        \"name\": \"Eric Rosales\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc194c3a368443c0310dc\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 1993612,\n        \"job\": \"Animation\",\n        \"name\": \"Nickolas Rosario\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbc51c3a368445502f84c\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 1993614,\n        \"job\": \"Animation\",\n        \"name\": \"Amber Rudolph\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbfbb925141601802c4e4\",\n        \"department\": \"Lighting\",\n        \"gender\": 0,\n        \"id\": 1993620,\n        \"job\": \"Lighting Artist\",\n        \"name\": \"Julien Schreyer\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc19c925141602702d287\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 1993621,\n        \"job\": \"Animation\",\n        \"name\": \"Brett Schulz\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbfc60e0a264a510309b0\",\n        \"department\": \"Lighting\",\n        \"gender\": 0,\n        \"id\": 1993624,\n        \"job\": \"Lighting Artist\",\n        \"name\": \"David Shavers\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc1e4c3a36844550301af\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 1993640,\n        \"job\": \"Animation\",\n        \"name\": \"Raphael Suter\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc29c0e0a264a4e02f662\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 1993667,\n        \"job\": \"Fix Animator\",\n        \"name\": \"Tom Zach\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbe35925141601502c282\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 1994375,\n        \"job\": \"Software Engineer\",\n        \"name\": \"Hayley Iben\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbe5ec3a368443802fb89\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 1994378,\n        \"job\": \"Software Engineer\",\n        \"name\": \"Cory Omand\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbe89c3a3684448030e9d\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 1994395,\n        \"job\": \"Systems Administrators & Support\",\n        \"name\": \"Tyler Fazakerley\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbeb40e0a264a5702d04b\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 1994411,\n        \"job\": \"Systems Administrators & Support\",\n        \"name\": \"Chris Lasell\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbec6c3a3684448030ef8\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 1994416,\n        \"job\": \"Systems Administrators & Support\",\n        \"name\": \"Matthew Lindahl\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbf0ac3a368444402f9c8\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 1994456,\n        \"job\": \"Systems Administrators & Support\",\n        \"name\": \"Ian Westcott\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbfe8c3a368445502fee3\",\n        \"department\": \"Lighting\",\n        \"gender\": 0,\n        \"id\": 1994524,\n        \"job\": \"Master Lighting Artist\",\n        \"name\": \"Brian Boyd\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbe740e0a264a600315d9\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 1994534,\n        \"job\": \"Systems Administrators & Support\",\n        \"name\": \"Lars R. Damerow\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbe580e0a264a5702cfb7\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 1994563,\n        \"job\": \"Software Engineer\",\n        \"name\": \"Josh Minor\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbf44c3a368444e030b03\",\n        \"department\": \"Editing\",\n        \"gender\": 2,\n        \"id\": 1994625,\n        \"job\": \"Associate Editor\",\n        \"name\": \"Jason Hudak\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbe9f0e0a264a5d03260f\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 1994653,\n        \"job\": \"Systems Administrators & Support\",\n        \"name\": \"Ling Hsu\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbea6925141601502c315\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 1994654,\n        \"job\": \"Systems Administrators & Support\",\n        \"name\": \"Jason 'Jayfish' Hull\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc3ab0e0a264a51030f6e\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 1994660,\n        \"job\": \"VFX Artist\",\n        \"name\": \"Chris King\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbee20e0a264a4e02f12e\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 1994679,\n        \"job\": \"Systems Administrators & Support\",\n        \"name\": \"Nelson Siu\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbefc925141602402d917\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 1994684,\n        \"job\": \"Systems Administrators & Support\",\n        \"name\": \"Andy Thomas\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbf03925141601e02b737\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 1994690,\n        \"job\": \"Systems Administrators & Support\",\n        \"name\": \"Jay Weiland\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc396925141601802c9e6\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 1995537,\n        \"job\": \"VFX Artist\",\n        \"name\": \"Juan J. Buhler\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc18c0e0a264a60031a6d\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 1996859,\n        \"job\": \"Animation\",\n        \"name\": \"Dan Nguyen\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbc20c3a368443f02c2cd\",\n        \"department\": \"Production\",\n        \"gender\": 1,\n        \"id\": 1997757,\n        \"job\": \"Production Coordinator\",\n        \"name\": \"Becky Neiman\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbfd8c3a368444402fb03\",\n        \"department\": \"Lighting\",\n        \"gender\": 0,\n        \"id\": 1997814,\n        \"job\": \"Lighting Artist\",\n        \"name\": \"Jeremy Vickery\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfb968c3a368444e030329\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 1997877,\n        \"job\": \"Systems Administrators & Support\",\n        \"name\": \"Jonathan Hadden\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbecd925141602102bd6c\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 1997878,\n        \"job\": \"Systems Administrators & Support\",\n        \"name\": \"BoB 'Naked BoB' Morgan\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbead0e0a264a5402f8a4\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 1997880,\n        \"job\": \"Systems Administrators & Support\",\n        \"name\": \"Jose Ignacio\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbef20e0a264a5702d09a\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 1997883,\n        \"job\": \"Systems Administrators & Support\",\n        \"name\": \"Mike Sundy\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbe7bc3a368443802fc1a\",\n        \"department\": \"Crew\",\n        \"gender\": 2,\n        \"id\": 1997888,\n        \"job\": \"Systems Administrators & Support\",\n        \"name\": \"James G. Dashe\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbfab925141601e02b7eb\",\n        \"department\": \"Lighting\",\n        \"gender\": 0,\n        \"id\": 1997916,\n        \"job\": \"Lighting Artist\",\n        \"name\": \"Charu Clark\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbfb4c3a368443c030e7a\",\n        \"department\": \"Lighting\",\n        \"gender\": 0,\n        \"id\": 1999709,\n        \"job\": \"Lighting Artist\",\n        \"name\": \"Afonso Salcedo\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc0d00e0a264a5402fb6c\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 2000112,\n        \"job\": \"Animation\",\n        \"name\": \"Adam Burke\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc12b925141601e02b9ad\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 2000114,\n        \"job\": \"Animation\",\n        \"name\": \"Doug Frankel\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc1500e0a264a5a02ef58\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 2000116,\n        \"job\": \"Animation\",\n        \"name\": \"Ken Kim\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc1ec0e0a264a6302fd4a\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 2000133,\n        \"job\": \"Animation\",\n        \"name\": \"Rob Duquette Thompson\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbca9925141602702cc1c\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 2000141,\n        \"job\": \"Animation\",\n        \"name\": \"Jaime Landes Roe\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbac60e0a264a5702ca8b\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 2000380,\n        \"job\": \"Post Production Supervisor\",\n        \"name\": \"Cynthia Slavens\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc36f925141602a02d42b\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 2000431,\n        \"job\": \"Shading\",\n        \"name\": \"Marc Cooper\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbe270e0a264a5402f7eb\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 2000450,\n        \"job\": \"Software Engineer\",\n        \"name\": \"Michael Chann\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbe50925141601502c2a5\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 2000453,\n        \"job\": \"Software Engineer\",\n        \"name\": \"Jason Kim\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbe1f0e0a264a51030762\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 2000457,\n        \"job\": \"Software Engineer\",\n        \"name\": \"Kiril Vidimce\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbe82c3a368443802fc38\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 2000494,\n        \"job\": \"Systems Administrators & Support\",\n        \"name\": \"Ross Dickinson\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbe90c3a368445502fc97\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 2000495,\n        \"job\": \"Systems Administrators & Support\",\n        \"name\": \"Remy Galang\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbe97925141602a02cde0\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 2000496,\n        \"job\": \"Systems Administrators & Support\",\n        \"name\": \"James Handelin\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbebc0e0a264a5a02ebd2\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 2000497,\n        \"job\": \"Systems Administrators & Support\",\n        \"name\": \"Marty Lew\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbed5925141602a02ce29\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 2000498,\n        \"job\": \"Systems Administrators & Support\",\n        \"name\": \"Will Phan\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbedc0e0a264a5702d083\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 2000499,\n        \"job\": \"Systems Administrators & Support\",\n        \"name\": \"Auburn C. 'Aubie' Schmidt\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc28f925141602a02d305\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 2002733,\n        \"job\": \"Fix Animator\",\n        \"name\": \"Curran W. Giddens\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbcb4925141601802c05e\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 2002739,\n        \"job\": \"Animation\",\n        \"name\": \"Kristoff Vergne\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbe2ec3a368444e03096d\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 2003687,\n        \"job\": \"Software Engineer\",\n        \"name\": \"Alden Chew\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc1070e0a264a600319e6\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 2003697,\n        \"job\": \"Animation\",\n        \"name\": \"Jonathen Collins\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc39e0e0a264a5a02f334\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 2003716,\n        \"job\": \"VFX Artist\",\n        \"name\": \"Tolga Goktekin\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbe0cc3a368443802fb20\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 2005079,\n        \"job\": \"Production Artist\",\n        \"name\": \"Daniel Holland\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbf27925141601b02d867\",\n        \"department\": \"Directing\",\n        \"gender\": 0,\n        \"id\": 2005424,\n        \"job\": \"Script Supervisor\",\n        \"name\": \"Diego Garzon\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbd85925141601802c1e7\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 2011957,\n        \"job\": \"Craft Service\",\n        \"name\": \"Samantha Wilson\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfb5be0e0a264a5402eb32\",\n        \"department\": \"Crew\",\n        \"gender\": 2,\n        \"id\": 2012393,\n        \"job\": \"Thanks\",\n        \"name\": \"Mark Anderson\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfba1ec3a368444e0303f3\",\n        \"department\": \"Art\",\n        \"gender\": 1,\n        \"id\": 2012409,\n        \"job\": \"Title Designer\",\n        \"name\": \"Catherine Kelly\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbab6c3a368445502f60c\",\n        \"department\": \"Camera\",\n        \"gender\": 0,\n        \"id\": 2012410,\n        \"job\": \"Dolly Grip\",\n        \"name\": \"Orlando Orona\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbabf0e0a264a5d031f2d\",\n        \"department\": \"Camera\",\n        \"gender\": 0,\n        \"id\": 2012411,\n        \"job\": \"Key Grip\",\n        \"name\": \"Steve Cardellini\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbacec3a368443f02c114\",\n        \"department\": \"Crew\",\n        \"gender\": 0,\n        \"id\": 2012412,\n        \"job\": \"Software Engineer\",\n        \"name\": \"Silvia Palara\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbbd0925141601502bec7\",\n        \"department\": \"Lighting\",\n        \"gender\": 2,\n        \"id\": 2012414,\n        \"job\": \"Gaffer\",\n        \"name\": \"Frank Strzalkowski\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbc310e0a264a5702cc5b\",\n        \"department\": \"Production\",\n        \"gender\": 2,\n        \"id\": 2012415,\n        \"job\": \"Production Manager\",\n        \"name\": \"Kevin Wallace\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbcd10e0a264a5402f5f9\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 2012416,\n        \"job\": \"Roto Supervisor\",\n        \"name\": \"Michael Van Eps\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbcd9c3a368443c0309d0\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 2012417,\n        \"job\": \"VFX Supervisor\",\n        \"name\": \"Christopher James Hall\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbf67925141601802c46c\",\n        \"department\": \"Editing\",\n        \"gender\": 0,\n        \"id\": 2012418,\n        \"job\": \"Editorial Production Assistant\",\n        \"name\": \"Jess Fulton\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfbfd0c3a368443f02c7e1\",\n        \"department\": \"Lighting\",\n        \"gender\": 0,\n        \"id\": 2012419,\n        \"job\": \"Lighting Artist\",\n        \"name\": \"Eunkyoung Lee Swearingen\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc096c3a368445502ffe1\",\n        \"department\": \"Sound\",\n        \"gender\": 0,\n        \"id\": 2012421,\n        \"job\": \"Orchestrator\",\n        \"name\": \"Gary K. Thomas\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc27e0e0a264a4e02f644\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 2012422,\n        \"job\": \"Animation Department Coordinator\",\n        \"name\": \"Sarita White\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc31b0e0a264a6302ff1a\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 2,\n        \"id\": 2012423,\n        \"job\": \"Modeling\",\n        \"name\": \"John Duncan\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc359c3a368444403003b\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 2012424,\n        \"job\": \"Modeling\",\n        \"name\": \"Evan Pontoriero\",\n        \"profile_path\": null\n      },\n      {\n        \"credit_id\": \"5abfc3d5925141601502c9ce\",\n        \"department\": \"Visual Effects\",\n        \"gender\": 0,\n        \"id\": 2012425,\n        \"job\": \"Visual Effects\",\n        \"name\": \"Nathan Matsuda\",\n        \"profile_path\": null\n      }\n    ]\n  },\n  \"external_ids\": {\n    \"imdb_id\": \"tt0910970\",\n    \"facebook_id\": \"PixarWallE\",\n    \"instagram_id\": null,\n    \"twitter_id\": null\n  },\n  \"recommendations\": {\n    \"page\": 1,\n    \"results\": [\n      {\n        \"id\": 14160,\n        \"video\": false,\n        \"vote_count\": 13137,\n        \"vote_average\": 7.9,\n        \"title\": \"Up\",\n        \"release_date\": \"2009-05-28\",\n        \"original_language\": \"en\",\n        \"original_title\": \"Up\",\n        \"genre_ids\": [\n          12,\n          16,\n          35,\n          10751\n        ],\n        \"backdrop_path\": \"/6fX7NF6IUJCTVssei7Shgl9J6LL.jpg\",\n        \"adult\": false,\n        \"overview\": \"Carl Fredricksen spent his entire life dreaming of exploring the globe and experiencing life to its fullest. But at age 78, life seems to have passed him by, until a twist of fate (and a persistent 8-year old Wilderness Explorer named Russell) gives him a new lease on life.\",\n        \"poster_path\": \"/nk11pvocdb5zbFhX5oq5YiLPYMo.jpg\",\n        \"popularity\": 22.506\n      },\n      {\n        \"id\": 585,\n        \"video\": false,\n        \"vote_count\": 11577,\n        \"vote_average\": 7.8,\n        \"title\": \"Monsters, Inc.\",\n        \"release_date\": \"2001-11-01\",\n        \"original_language\": \"en\",\n        \"original_title\": \"Monsters, Inc.\",\n        \"genre_ids\": [\n          16,\n          35,\n          10751\n        ],\n        \"backdrop_path\": \"/wJOHzjTDhnEUyP0Q8gyp6ggvL4A.jpg\",\n        \"adult\": false,\n        \"overview\": \"James Sullivan and Mike Wazowski are monsters, they earn their living scaring children and are the best in the business... even though they're more afraid of the children than they are of them. When a child accidentally enters their world, James and Mike suddenly find that kids are not to be afraid of and they uncover a conspiracy that could threaten all children across the world.\",\n        \"poster_path\": \"/93Y9BGx8blzmZOPSoivkFfaifqU.jpg\",\n        \"popularity\": 26.555\n      },\n      {\n        \"id\": 2062,\n        \"video\": false,\n        \"vote_count\": 9780,\n        \"vote_average\": 7.7,\n        \"title\": \"Ratatouille\",\n        \"release_date\": \"2007-06-22\",\n        \"original_language\": \"en\",\n        \"original_title\": \"Ratatouille\",\n        \"genre_ids\": [\n          16,\n          35,\n          14,\n          10751\n        ],\n        \"backdrop_path\": \"/sFpGI08aeHIRKlLi9SxLyYrRyZ8.jpg\",\n        \"adult\": false,\n        \"overview\": \"A rat named Remy dreams of becoming a great French chef despite his family's wishes and the obvious problem of being a rat in a decidedly rodent-phobic profession. When fate places Remy in the sewers of Paris, he finds himself ideally situated beneath a restaurant made famous by his culinary hero, Auguste Gusteau. Despite the apparent dangers of being an unlikely - and certainly unwanted - visitor in the kitchen of a fine French restaurant, Remy's passion for cooking soon sets into motion a hilarious and exciting rat race that turns the culinary world of Paris upside down.\",\n        \"poster_path\": \"/xVxxSYHAfrEbllyWFQG5df5nwH4.jpg\",\n        \"popularity\": 29.054\n      },\n      {\n        \"id\": 10193,\n        \"video\": false,\n        \"vote_count\": 9248,\n        \"vote_average\": 7.8,\n        \"title\": \"Toy Story 3\",\n        \"release_date\": \"2010-06-16\",\n        \"original_language\": \"en\",\n        \"original_title\": \"Toy Story 3\",\n        \"genre_ids\": [\n          16,\n          35,\n          10751\n        ],\n        \"backdrop_path\": \"/y2qAjM37QgatWeG84DDtwsZuMW.jpg\",\n        \"adult\": false,\n        \"overview\": \"Woody, Buzz, and the rest of Andy's toys haven't been played with in years. With Andy about to go to college, the gang find themselves accidentally left at a nefarious day care center. The toys must band together to escape and return home to Andy.\",\n        \"poster_path\": \"/mMltbSxwEdNE4Cv8QYLpzkHWTDo.jpg\",\n        \"popularity\": 19.225\n      },\n      {\n        \"id\": 12,\n        \"video\": false,\n        \"vote_count\": 12464,\n        \"vote_average\": 7.8,\n        \"title\": \"Finding Nemo\",\n        \"release_date\": \"2003-05-30\",\n        \"original_language\": \"en\",\n        \"original_title\": \"Finding Nemo\",\n        \"genre_ids\": [\n          16,\n          10751\n        ],\n        \"backdrop_path\": \"/2Vv4suw1ja7RpnR6FaXAOihI68g.jpg\",\n        \"adult\": false,\n        \"overview\": \"Nemo, an adventurous young clownfish, is unexpectedly taken from his Great Barrier Reef home to a dentist's office aquarium. It's up to his worrisome father Marlin and a friendly but forgetful fish Dory to bring Nemo home -- meeting vegetarian sharks, surfer dude turtles, hypnotic jellyfish, hungry seagulls, and more along the way.\",\n        \"poster_path\": \"/syPWyeeqzTQIxjIUaIFI7d0TyEY.jpg\",\n        \"popularity\": 28.994\n      },\n      {\n        \"id\": 862,\n        \"video\": false,\n        \"vote_count\": 11238,\n        \"vote_average\": 7.9,\n        \"title\": \"Toy Story\",\n        \"release_date\": \"1995-10-30\",\n        \"original_language\": \"en\",\n        \"original_title\": \"Toy Story\",\n        \"genre_ids\": [\n          16,\n          35,\n          10751\n        ],\n        \"backdrop_path\": \"/dji4Fm0gCDVb9DQQMRvAI8YNnTz.jpg\",\n        \"adult\": false,\n        \"overview\": \"Led by Woody, Andy's toys live happily in his room until Andy's birthday brings Buzz Lightyear onto the scene. Afraid of losing his place in Andy's heart, Woody plots against Buzz. But when circumstances separate Buzz and Woody from their owner, the duo eventually learns to put aside their differences.\",\n        \"poster_path\": \"/rhIRbceoE9lR4veEXuwCC2wARtG.jpg\",\n        \"popularity\": 25.211\n      },\n      {\n        \"id\": 9806,\n        \"video\": false,\n        \"vote_count\": 11367,\n        \"vote_average\": 7.7,\n        \"title\": \"The Incredibles\",\n        \"release_date\": \"2004-11-05\",\n        \"original_language\": \"en\",\n        \"original_title\": \"The Incredibles\",\n        \"genre_ids\": [\n          28,\n          12,\n          16,\n          10751\n        ],\n        \"backdrop_path\": \"/wiDGnsn9RtNglgKQy4J1jZQBG5v.jpg\",\n        \"adult\": false,\n        \"overview\": \"Bob Parr has given up his superhero days to log in time as an insurance adjuster and raise his three children with his formerly heroic wife in suburbia. But when he receives a mysterious assignment, it's time to get back into costume.\",\n        \"poster_path\": \"/2LqaLgk4Z226KkgPJuiOQ58wvrm.jpg\",\n        \"popularity\": 18.463\n      },\n      {\n        \"id\": 863,\n        \"video\": false,\n        \"vote_count\": 8417,\n        \"vote_average\": 7.5,\n        \"title\": \"Toy Story 2\",\n        \"release_date\": \"1999-10-30\",\n        \"original_language\": \"en\",\n        \"original_title\": \"Toy Story 2\",\n        \"genre_ids\": [\n          16,\n          35,\n          10751\n        ],\n        \"backdrop_path\": \"/9Kjxr4VCU0Y4DAuXkzR2moAy7DK.jpg\",\n        \"adult\": false,\n        \"overview\": \"Andy heads off to Cowboy Camp, leaving his toys to their own devices. Things shift into high gear when an obsessive toy collector named Al McWhiggen, owner of Al's Toy Barn kidnaps Woody. Andy's toys mount a daring rescue mission, Buzz Lightyear meets his match and Woody has to decide where he and his heart truly belong.\",\n        \"poster_path\": \"/3CmK3XurcLeUyMifCR28ibzupbB.jpg\",\n        \"popularity\": 21.761\n      },\n      {\n        \"id\": 920,\n        \"video\": false,\n        \"vote_count\": 8330,\n        \"vote_average\": 6.7,\n        \"title\": \"Cars\",\n        \"release_date\": \"2006-06-08\",\n        \"original_language\": \"en\",\n        \"original_title\": \"Cars\",\n        \"genre_ids\": [\n          12,\n          16,\n          35,\n          10751\n        ],\n        \"backdrop_path\": \"/a1MlbLBk5Sy6YvMbSuKfwGlDVlb.jpg\",\n        \"adult\": false,\n        \"overview\": \"Lightning McQueen, a hotshot rookie race car driven to succeed, discovers that life is about the journey, not the finish line, when he finds himself unexpectedly detoured in the sleepy Route 66 town of Radiator Springs. On route across the country to the big Piston Cup Championship in California to compete against two seasoned pros, McQueen gets to know the town's offbeat characters.\",\n        \"poster_path\": \"/jpfkzbIXgKZqCZAkEkFH2VYF63s.jpg\",\n        \"popularity\": 127.498\n      },\n      {\n        \"id\": 9502,\n        \"video\": false,\n        \"vote_count\": 6596,\n        \"vote_average\": 7.1,\n        \"title\": \"Kung Fu Panda\",\n        \"release_date\": \"2008-06-04\",\n        \"original_language\": \"en\",\n        \"original_title\": \"Kung Fu Panda\",\n        \"genre_ids\": [\n          12,\n          16,\n          35,\n          10751\n        ],\n        \"backdrop_path\": \"/pmLEmMLYCreFAxfdCt5uO1wDgSi.jpg\",\n        \"adult\": false,\n        \"overview\": \"When the Valley of Peace is threatened, lazy Po the panda discovers his destiny as the \\\"chosen one\\\" and trains to become a kung fu hero, but transforming the unsleek slacker into a brave warrior won't be easy. It's up to Master Shifu and the Furious Five -- Tigress, Crane, Mantis, Viper and Monkey -- to give it a try.\",\n        \"poster_path\": \"/mk3UyyaLyXhgIhmLji25OUPXvGR.jpg\",\n        \"popularity\": 17.684\n      },\n      {\n        \"id\": 10191,\n        \"video\": false,\n        \"vote_count\": 8182,\n        \"vote_average\": 7.7,\n        \"title\": \"How to Train Your Dragon\",\n        \"release_date\": \"2010-03-10\",\n        \"original_language\": \"en\",\n        \"original_title\": \"How to Train Your Dragon\",\n        \"genre_ids\": [\n          12,\n          16,\n          14,\n          10751\n        ],\n        \"backdrop_path\": \"/mxPvA8cj0Eqa1A13DcT5NzFq7Ta.jpg\",\n        \"adult\": false,\n        \"overview\": \"As the son of a Viking leader on the cusp of manhood, shy Hiccup Horrendous Haddock III faces a rite of passage: he must kill a dragon to prove his warrior mettle. But after downing a feared dragon, he realizes that he no longer wants to destroy it, and instead befriends the beast – which he names Toothless – much to the chagrin of his warrior father\",\n        \"poster_path\": \"/hIXX3IRFy0InUOmYeWjvhCAgQNj.jpg\",\n        \"popularity\": 19.188\n      },\n      {\n        \"id\": 950,\n        \"video\": false,\n        \"vote_count\": 6236,\n        \"vote_average\": 6.6,\n        \"title\": \"Ice Age: The Meltdown\",\n        \"release_date\": \"2006-03-29\",\n        \"original_language\": \"en\",\n        \"original_title\": \"Ice Age: The Meltdown\",\n        \"genre_ids\": [\n          12,\n          16,\n          35,\n          10751\n        ],\n        \"backdrop_path\": \"/lxNCa4FifUuLeUkWUQl2yuf9JnJ.jpg\",\n        \"adult\": false,\n        \"overview\": \"Diego, Manny and Sid return in this sequel to the hit animated movie Ice Age. This time around, the deep freeze is over, and the ice-covered earth is starting to melt, which will destroy the trio's cherished valley. The impending disaster prompts them to reunite and warn all the other beasts about the desperate situation.\",\n        \"poster_path\": \"/oQhkGeoVcHuRBsEvxnzd62tIeB6.jpg\",\n        \"popularity\": 17.283\n      },\n      {\n        \"id\": 9487,\n        \"video\": false,\n        \"vote_count\": 5401,\n        \"vote_average\": 6.9,\n        \"title\": \"A Bug's Life\",\n        \"release_date\": \"1998-11-25\",\n        \"original_language\": \"en\",\n        \"original_title\": \"A Bug's Life\",\n        \"genre_ids\": [\n          12,\n          16,\n          35,\n          10751\n        ],\n        \"backdrop_path\": \"/bHMHpXNjeKRxcjWcpbIAD5f0aIK.jpg\",\n        \"adult\": false,\n        \"overview\": \"On behalf of \\\"oppressed bugs everywhere,\\\" an inventive ant named Flik hires a troupe of warrior bugs to defend his bustling colony from a horde of freeloading grasshoppers led by the evil-minded Hopper.\",\n        \"poster_path\": \"/u9qGMRwcPwP0WETxulS5hKUsEum.jpg\",\n        \"popularity\": 22.688\n      },\n      {\n        \"id\": 808,\n        \"video\": false,\n        \"vote_count\": 9424,\n        \"vote_average\": 7.6,\n        \"title\": \"Shrek\",\n        \"release_date\": \"2001-05-16\",\n        \"original_language\": \"en\",\n        \"original_title\": \"Shrek\",\n        \"genre_ids\": [\n          12,\n          16,\n          35,\n          14,\n          10751\n        ],\n        \"backdrop_path\": \"/2l5UHZBcp9cx1PwKLdisJ0gV9jB.jpg\",\n        \"adult\": false,\n        \"overview\": \"It ain't easy bein' green -- especially if you're a likable (albeit smelly) ogre named Shrek. On a mission to retrieve a gorgeous princess from the clutches of a fire-breathing dragon, Shrek teams up with an unlikely compatriot -- a wisecracking donkey.\",\n        \"poster_path\": \"/140ewbWv8qHStD3mlBDvvGd0Zvu.jpg\",\n        \"popularity\": 26.533\n      },\n      {\n        \"id\": 425,\n        \"video\": false,\n        \"vote_count\": 8077,\n        \"vote_average\": 7.3,\n        \"title\": \"Ice Age\",\n        \"release_date\": \"2002-03-10\",\n        \"original_language\": \"en\",\n        \"original_title\": \"Ice Age\",\n        \"genre_ids\": [\n          12,\n          16,\n          35,\n          10751\n        ],\n        \"backdrop_path\": \"/oDqbewoFuIEWA7UWurole6MzDGn.jpg\",\n        \"adult\": false,\n        \"overview\": \"With the impending ice age almost upon them, a mismatched trio of prehistoric critters – Manny the woolly mammoth, Diego the saber-toothed tiger and Sid the giant sloth – find an orphaned infant and decide to return it to its human parents. Along the way, the unlikely allies become friends but, when enemies attack, their quest takes on far nobler aims.\",\n        \"poster_path\": \"/zpaQwR0YViPd83bx1e559QyZ35i.jpg\",\n        \"popularity\": 20.523\n      },\n      {\n        \"id\": 953,\n        \"video\": false,\n        \"vote_count\": 6713,\n        \"vote_average\": 6.8,\n        \"title\": \"Madagascar\",\n        \"release_date\": \"2005-05-25\",\n        \"original_language\": \"en\",\n        \"original_title\": \"Madagascar\",\n        \"genre_ids\": [\n          16,\n          10751\n        ],\n        \"backdrop_path\": \"/wUetiqu2EFhHW94yTP0pWABfyUG.jpg\",\n        \"adult\": false,\n        \"overview\": \"Alex the lion is the king of the urban jungle, the main attraction at New York’s Central Park Zoo. He and his best friends—Marty the zebra, Melman the giraffe and Gloria the hippo—have spent their whole lives in blissful captivity before an admiring public and with regular meals provided for them. Not content to leave well enough alone, Marty lets his curiosity get the better of him and makes his escape—with the help of some prodigious penguins—to explore the world.\",\n        \"poster_path\": \"/2YiESGB68BGQSAFvfJxBi774sc4.jpg\",\n        \"popularity\": 23.486\n      },\n      {\n        \"id\": 62177,\n        \"video\": false,\n        \"vote_count\": 8709,\n        \"vote_average\": 6.9,\n        \"title\": \"Brave\",\n        \"release_date\": \"2012-06-21\",\n        \"original_language\": \"en\",\n        \"original_title\": \"Brave\",\n        \"genre_ids\": [\n          28,\n          12,\n          16,\n          35,\n          14,\n          10751\n        ],\n        \"backdrop_path\": \"/sfRCA9g3CunpnZO3QurHSIRcsUq.jpg\",\n        \"adult\": false,\n        \"overview\": \"Brave is set in the mystical Scottish Highlands, where Mérida is the princess of a kingdom ruled by King Fergus and Queen Elinor. An unruly daughter and an accomplished archer, Mérida one day defies a sacred custom of the land and inadvertently brings turmoil to the kingdom. In an attempt to set things right, Mérida seeks out an eccentric old Wise Woman and is granted an ill-fated wish. Also figuring into Mérida’s quest — and serving as comic relief — are the kingdom’s three lords: the enormous Lord MacGuffin, the surly Lord Macintosh, and the disagreeable Lord Dingwall.\",\n        \"poster_path\": \"/qhABv2d4NZLhsOOA4iBFM4rfuJC.jpg\",\n        \"popularity\": 24.68\n      },\n      {\n        \"id\": 8587,\n        \"video\": false,\n        \"vote_count\": 11176,\n        \"vote_average\": 8.2,\n        \"title\": \"The Lion King\",\n        \"release_date\": \"1994-05-07\",\n        \"original_language\": \"en\",\n        \"original_title\": \"The Lion King\",\n        \"genre_ids\": [\n          16,\n          18,\n          10751\n        ],\n        \"backdrop_path\": \"/kZ9CKeZeKMUtrjZ7RuArjVMTDF4.jpg\",\n        \"adult\": false,\n        \"overview\": \"A young lion prince is cast out of his pride by his cruel uncle, who claims he killed his father. While the uncle rules with an iron paw, the prince grows up beyond the Savannah, living by a philosophy: No worries for the rest of your days. But when his past comes to haunt him, the young prince must decide his fate: Will he remain an outcast or face his demons and become what he needs to be?\",\n        \"poster_path\": \"/sKCr78MXSLixwmZ8DyJLrpMsd15.jpg\",\n        \"popularity\": 33.064\n      },\n      {\n        \"id\": 809,\n        \"video\": false,\n        \"vote_count\": 6780,\n        \"vote_average\": 7,\n        \"title\": \"Shrek 2\",\n        \"release_date\": \"2004-05-19\",\n        \"original_language\": \"en\",\n        \"original_title\": \"Shrek 2\",\n        \"genre_ids\": [\n          12,\n          16,\n          35,\n          14,\n          10751\n        ],\n        \"backdrop_path\": \"/gdFAYLb5NR5HqcEKnPloOM6fX4B.jpg\",\n        \"adult\": false,\n        \"overview\": \"Shrek, Fiona and Donkey set off to Far, Far Away to meet Fiona's mother and father. But not everyone is happy. Shrek and the King find it hard to get along, and there's tension in the marriage. The fairy godmother discovers that Shrek has married Fiona instead of her Son Prince Charming and sets about destroying their marriage.\",\n        \"poster_path\": \"/akWDA0BMVYK4OTM92T5i91DYnsT.jpg\",\n        \"popularity\": 18.436\n      },\n      {\n        \"id\": 62211,\n        \"video\": false,\n        \"vote_count\": 6783,\n        \"vote_average\": 7,\n        \"title\": \"Monsters University\",\n        \"release_date\": \"2013-06-20\",\n        \"original_language\": \"en\",\n        \"original_title\": \"Monsters University\",\n        \"genre_ids\": [\n          16,\n          10751\n        ],\n        \"backdrop_path\": \"/5mDCKKS7M8aUZKdShnCa7lLbzmH.jpg\",\n        \"adult\": false,\n        \"overview\": \"A look at the relationship between Mike and Sulley during their days at Monsters University — when they weren't necessarily the best of friends.\",\n        \"poster_path\": \"/a05xQU9huY3P5uurLcGGHmsf2Vh.jpg\",\n        \"popularity\": 18.16\n      }\n    ],\n    \"total_pages\": 2,\n    \"total_results\": 40\n  }, \"release_dates\": {\n    \"results\": [\n      {\n        \"iso_3166_1\": \"KR\",\n        \"release_dates\": [\n          {\n            \"certification\": \"전체 관람가\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-08-06T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"GB\",\n        \"release_dates\": [\n          {\n            \"certification\": \"U\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-07-18T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"IT\",\n        \"release_dates\": [\n          {\n            \"certification\": \"T\",\n            \"iso_639_1\": \"it\",\n            \"note\": \"\",\n            \"release_date\": \"2008-10-17T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"BR\",\n        \"release_dates\": [\n          {\n            \"certification\": \"L\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-06-27T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"CA\",\n        \"release_dates\": [\n          {\n            \"certification\": \"G\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2013-11-15T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"GR\",\n        \"release_dates\": [\n          {\n            \"certification\": \"G\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-09-18T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"AU\",\n        \"release_dates\": [\n          {\n            \"certification\": \"G\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-09-18T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"US\",\n        \"release_dates\": [\n          {\n            \"certification\": \"G\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-06-22T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"SE\",\n        \"release_dates\": [\n          {\n            \"certification\": \"Btl\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-09-05T00:00:00.000Z\",\n            \"type\": 3\n          },\n          {\n            \"certification\": \"Btl\",\n            \"iso_639_1\": \"\",\n            \"note\": \"DVD & Blu-ray release\",\n            \"release_date\": \"2008-12-12T00:00:00.000Z\",\n            \"type\": 5\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"NL\",\n        \"release_dates\": [\n          {\n            \"certification\": \"AL\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-07-30T00:00:00.000Z\",\n            \"type\": 3\n          },\n          {\n            \"certification\": \"AL\",\n            \"iso_639_1\": \"\",\n            \"note\": \"DVD\",\n            \"release_date\": \"2008-11-19T00:00:00.000Z\",\n            \"type\": 5\n          },\n          {\n            \"certification\": \"AL\",\n            \"iso_639_1\": \"\",\n            \"note\": \"Blu-ray\",\n            \"release_date\": \"2011-09-16T00:00:00.000Z\",\n            \"type\": 5\n          },\n          {\n            \"certification\": \"AL\",\n            \"iso_639_1\": \"\",\n            \"note\": \"SBS6\",\n            \"release_date\": \"2010-09-18T00:00:00.000Z\",\n            \"type\": 6\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"DK\",\n        \"release_dates\": [\n          {\n            \"certification\": \"7\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-08-29T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"ES\",\n        \"release_dates\": [\n          {\n            \"certification\": \"7\",\n            \"iso_639_1\": \"es\",\n            \"note\": \"\",\n            \"release_date\": \"2008-08-06T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"HK\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-07-24T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"LT\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-07-18T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"UY\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-06-27T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"AR\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-07-09T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"BE\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-07-30T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"FI\",\n        \"release_dates\": [\n          {\n            \"certification\": \"S\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-09-05T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"UA\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-07-03T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"PE\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-07-24T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"HR\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-08-07T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"IL\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-07-11T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"HU\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-07-24T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"BG\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-09-05T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"TR\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-09-26T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"BO\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-06-26T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"CO\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-06-27T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"TH\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-08-12T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"PL\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-07-18T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"EE\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-08-15T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"CZ\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-08-14T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"CR\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-06-27T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"HN\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-06-27T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"IE\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-07-18T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"KZ\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-07-03T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"FR\",\n        \"release_dates\": [\n          {\n            \"certification\": \"U\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-07-30T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"IN\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-08-29T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"SV\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-06-27T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"SK\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-08-14T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"VE\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-08-08T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"PA\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-06-27T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"MY\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-08-14T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"MX\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-07-04T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"KW\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-07-03T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"TW\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-07-25T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"AT\",\n        \"release_dates\": [\n          {\n            \"certification\": \"0\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-09-25T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"IS\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-07-30T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"CH\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"de\",\n            \"note\": \"\",\n            \"release_date\": \"2008-09-25T00:00:00.000Z\",\n            \"type\": 3\n          },\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"fr\",\n            \"release_date\": \"2008-07-30T00:00:00.000Z\",\n            \"type\": 3\n          },\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"it\",\n            \"release_date\": \"2008-10-17T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"LV\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-08-08T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"RU\",\n        \"release_dates\": [\n          {\n            \"certification\": \"0+\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-07-03T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"ID\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-08-13T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"PH\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-08-13T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"CL\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-06-26T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"SG\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-08-28T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"SI\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-08-28T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"NO\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-08-29T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"PT\",\n        \"release_dates\": [\n          {\n            \"certification\": \"M/6\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-08-14T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"EG\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-08-06T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"RO\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-09-05T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"NZ\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-09-18T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"JP\",\n        \"release_dates\": [\n          {\n            \"certification\": \"\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-12-05T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      },\n      {\n        \"iso_3166_1\": \"DE\",\n        \"release_dates\": [\n          {\n            \"certification\": \"0\",\n            \"iso_639_1\": \"\",\n            \"note\": \"\",\n            \"release_date\": \"2008-09-24T00:00:00.000Z\",\n            \"type\": 3\n          }\n        ]\n      }\n    ]\n  }\n}",
                    "rawdescription": "videos,images,credits,external_ids,recommendations",
                    "description": "<p>videos,images,credits,external_ids,recommendations</p>\n"
                }
            ],
            "src/app/services/mock-data.factory.ts": [
                {
                    "name": "TMDB_MOVIE_VIDEO_LIST",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/services/mock-data.factory.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  \"id\": 454626,\n  \"results\": [\n    {\n      \"id\": \"5dcac05a6e44bf000fef48e7\",\n      \"iso_639_1\": \"en\",\n      \"iso_3166_1\": \"US\",\n      \"key\": \"szby7ZHLnkA\",\n      \"name\": \"New Official Trailer\",\n      \"site\": \"YouTube\",\n      \"size\": 1080,\n      \"type\": \"Trailer\"\n    },\n    {\n      \"id\": \"5e318333326c1900121e540d\",\n      \"iso_639_1\": \"en\",\n      \"iso_3166_1\": \"US\",\n      \"key\": \"MDgs6JRSJvg\",\n      \"name\": \"Sonic The Hedgehog (2020) - \\\"Classic\\\" - Paramount Pictures\",\n      \"site\": \"YouTube\",\n      \"size\": 1080,\n      \"type\": \"Featurette\"\n    },\n    {\n      \"id\": \"5e343aa6ac8e6b0018c25fa5\",\n      \"iso_639_1\": \"en\",\n      \"iso_3166_1\": \"US\",\n      \"key\": \"hshTmTjI1Vs\",\n      \"name\": \"Sonic The Hedgehog (2020) - Big Game Spot - Paramount Pictures\",\n      \"site\": \"YouTube\",\n      \"size\": 1080,\n      \"type\": \"Featurette\"\n    },\n    {\n      \"id\": \"5e344b9c43250f0015bf8df7\",\n      \"iso_639_1\": \"en\",\n      \"iso_3166_1\": \"US\",\n      \"key\": \"t-mee176CNk\",\n      \"name\": \"Sonic The Hedgehog (2020) - \\\"Super\\\" - Paramount Pictures\",\n      \"site\": \"YouTube\",\n      \"size\": 1080,\n      \"type\": \"Featurette\"\n    },\n    {\n      \"id\": \"5e344b714ca67600144f11d1\",\n      \"iso_639_1\": \"en\",\n      \"iso_3166_1\": \"US\",\n      \"key\": \"hoRLCr5NG3Y\",\n      \"name\": \"Sonic The Hedgehog (2020) - \\\"Drive\\\" - Paramount Pictures\",\n      \"site\": \"YouTube\",\n      \"size\": 1080,\n      \"type\": \"Featurette\"\n    },\n    {\n      \"id\": \"5e4507830c271000138457dd\",\n      \"iso_639_1\": \"en\",\n      \"iso_3166_1\": \"US\",\n      \"key\": \"EwgM3sKaO54\",\n      \"name\": \"Sonic The Hedgehog - Featurettes - Becoming Robotnik - Texted 1080p\",\n      \"site\": \"YouTube\",\n      \"size\": 1080,\n      \"type\": \"Featurette\"\n    }\n  ]\n}"
                }
            ],
            "src/app/components/advanced-find/advanced-find.component.ts": [
                {
                    "name": "VOTE_COUNT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/advanced-find/advanced-find.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    label: '100',\n    value: 100\n  },\n  {\n    label: '+1,000',\n    value: 1000\n  },\n  {\n    label: '+10,000',\n    value: 10000\n  },\n  {\n    label: '+100,000',\n    value: 100000\n  },\n  {\n    label: '+1,000,000',\n    value: 1000000\n  },\n  {\n    label: '+10,000,000',\n    value: 10000000\n  },\n]"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/services/mock-data.factory.ts": [
                {
                    "name": "mockDataFactory",
                    "file": "src/app/services/mock-data.factory.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "request",
                            "type": "HttpRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Observable | any",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "HttpRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/services/ipc.service.ts": [
                {
                    "name": "BookmarkChanges",
                    "childs": [
                        {
                            "name": "UPDATE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "update"
                        },
                        {
                            "name": "DELETE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "delete"
                        },
                        {
                            "name": "INSERT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "insert"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/services/ipc.service.ts"
                },
                {
                    "name": "IpcOperations",
                    "childs": [
                        {
                            "name": "FIND",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "find"
                        },
                        {
                            "name": "FIND_ONE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "find-one"
                        },
                        {
                            "name": "FIND_IN_LIST",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "find-in-list"
                        },
                        {
                            "name": "UPDATE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "update"
                        },
                        {
                            "name": "SAVE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "save"
                        },
                        {
                            "name": "REMOVE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "remove"
                        },
                        {
                            "name": "GET_BY_PAGE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "get-by-page"
                        },
                        {
                            "name": "COUNT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "count"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/services/ipc.service.ts"
                }
            ],
            "src/app/components/advanced-find/advanced-find.component.ts": [
                {
                    "name": "BROWSE_TITLES",
                    "childs": [
                        {
                            "name": "COMPLETED_WATCHED",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "INCOMPLETE_WATCHED",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "BOOKMARKED",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "FAVORITES",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/components/advanced-find/advanced-find.component.ts"
                }
            ],
            "src/app/modules/user/browse/browse.component.ts": [
                {
                    "name": "BROWSE_TITLES",
                    "childs": [
                        {
                            "name": "COMPLETED_WATCHED",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "INCOMPLETE_WATCHED",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "BOOKMARKED",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "FAVORITES",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/modules/user/browse/browse.component.ts"
                }
            ],
            "src/app/services/firebase.service.ts": [
                {
                    "name": "CollectionName",
                    "childs": [
                        {
                            "name": "Bookmark",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "bookmark"
                        },
                        {
                            "name": "UserName",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": ""
                        },
                        {
                            "name": "Watched",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "watched"
                        },
                        {
                            "name": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "user"
                        },
                        {
                            "name": "Config",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "config"
                        },
                        {
                            "name": "Video",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "video"
                        },
                        {
                            "name": "Library",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "library"
                        },
                        {
                            "name": "Favorite",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "favorite"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/services/firebase.service.ts"
                },
                {
                    "name": "FieldName",
                    "childs": [
                        {
                            "name": "Bookmark",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "bookmark"
                        },
                        {
                            "name": "Username",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "username"
                        },
                        {
                            "name": "EmailAddress",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "emailAddress"
                        },
                        {
                            "name": "TmdbId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "tmdbId"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/services/firebase.service.ts"
                },
                {
                    "name": "FirebaseOperator",
                    "childs": [
                        {
                            "name": "Equal",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "=="
                        },
                        {
                            "name": "LessThan",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "<"
                        },
                        {
                            "name": "LessThanEqual",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "<="
                        },
                        {
                            "name": "GreaterThan",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": ">"
                        },
                        {
                            "name": "GreaterThanEqual",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": ">="
                        },
                        {
                            "name": "ArrayContains",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "array-contains"
                        },
                        {
                            "name": "In",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "in"
                        },
                        {
                            "name": "ArrayContainsAny",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "array-contains-any"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/services/firebase.service.ts"
                }
            ],
            "src/app/models/interfaces.ts": [
                {
                    "name": "Department",
                    "childs": [
                        {
                            "name": "Art",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Art"
                        },
                        {
                            "name": "Camera",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Camera"
                        },
                        {
                            "name": "CostumeMakeUp",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Costume & Make-Up"
                        },
                        {
                            "name": "Crew",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Crew"
                        },
                        {
                            "name": "Directing",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Directing"
                        },
                        {
                            "name": "Editing",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Editing"
                        },
                        {
                            "name": "Lighting",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Lighting"
                        },
                        {
                            "name": "Production",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Production"
                        },
                        {
                            "name": "Sound",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Sound"
                        },
                        {
                            "name": "VisualEffects",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Visual Effects"
                        },
                        {
                            "name": "Writing",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Writing"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/models/interfaces.ts"
                },
                {
                    "name": "GenreCodes",
                    "childs": [
                        {
                            "name": "Action",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 28
                        },
                        {
                            "name": "Adventure",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 12
                        },
                        {
                            "name": "Animation",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 16
                        },
                        {
                            "name": "Comedy",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 35
                        },
                        {
                            "name": "Crime",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 80
                        },
                        {
                            "name": "Documentary",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 99
                        },
                        {
                            "name": "Drama",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 18
                        },
                        {
                            "name": "Family",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 10751
                        },
                        {
                            "name": "Fantasy",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 14
                        },
                        {
                            "name": "History",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 36
                        },
                        {
                            "name": "Horror",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 27
                        },
                        {
                            "name": "Music",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 10402
                        },
                        {
                            "name": "Mystery",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 9648
                        },
                        {
                            "name": "Romance",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 10749
                        },
                        {
                            "name": "ScienceFiction",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 878
                        },
                        {
                            "name": "TVMovie",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 10770
                        },
                        {
                            "name": "Thriller",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 53
                        },
                        {
                            "name": "War",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 10752
                        },
                        {
                            "name": "Western",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 37
                        },
                        {
                            "name": "FilmNoir",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 20000
                        },
                        {
                            "name": "Musical",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 20001
                        },
                        {
                            "name": "News",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 20002
                        },
                        {
                            "name": "RealityTV",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 20003
                        },
                        {
                            "name": "SciFi",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 20004
                        },
                        {
                            "name": "Short",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 20005
                        },
                        {
                            "name": "Sport",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 20006
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/models/interfaces.ts"
                },
                {
                    "name": "OmdbParameters",
                    "childs": [
                        {
                            "name": "ApiKey",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "apikey"
                        },
                        {
                            "name": "ImdbId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "i"
                        },
                        {
                            "name": "Title",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "t"
                        },
                        {
                            "name": "Type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "type"
                        },
                        {
                            "name": "Year",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "y"
                        },
                        {
                            "name": "Plot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "plot"
                        },
                        {
                            "name": "Return",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "r"
                        },
                        {
                            "name": "Callback",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "callback"
                        },
                        {
                            "name": "Version",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "v"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/models/interfaces.ts"
                },
                {
                    "name": "TmdbAppendToResponseParameters",
                    "childs": [
                        {
                            "name": "AccountStates",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "account_states"
                        },
                        {
                            "name": "Videos",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "videos"
                        },
                        {
                            "name": "Images",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "images"
                        },
                        {
                            "name": "Credits",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "credits"
                        },
                        {
                            "name": "Changes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "changes"
                        },
                        {
                            "name": "Translations",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "translations"
                        },
                        {
                            "name": "Similar",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "similar"
                        },
                        {
                            "name": "ExternalIds",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "external_ids"
                        },
                        {
                            "name": "AlternativeTitles",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "alternative_titles"
                        },
                        {
                            "name": "Keywords",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "keywords"
                        },
                        {
                            "name": "Reviews",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "reviews"
                        },
                        {
                            "name": "Recommendations",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "recommendations"
                        },
                        {
                            "name": "ReleaseDates",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "release_dates"
                        },
                        {
                            "name": "Lists",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "lists"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/models/interfaces.ts"
                },
                {
                    "name": "TmdbParameters",
                    "childs": [
                        {
                            "name": "ApiKey",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "api_key"
                        },
                        {
                            "name": "AppendToResponse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "append_to_response"
                        },
                        {
                            "name": "Language",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "language"
                        },
                        {
                            "name": "Region",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "region"
                        },
                        {
                            "name": "SortBy",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "sort_by"
                        },
                        {
                            "name": "CertificationCountry",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "certification_country"
                        },
                        {
                            "name": "Certification",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "certification"
                        },
                        {
                            "name": "CertificationLess",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "certification.lte"
                        },
                        {
                            "name": "CertificationGreater",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "certification.gte"
                        },
                        {
                            "name": "IncludeAdult",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "include_adult"
                        },
                        {
                            "name": "IncludeVideo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "include_video"
                        },
                        {
                            "name": "Page",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "page"
                        },
                        {
                            "name": "PrimaryReleaseYear",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "primary_release_year"
                        },
                        {
                            "name": "PrimaryReleaseDateGreater",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "primary_release_date.gte"
                        },
                        {
                            "name": "PrimaryReleaseDateLess",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "primary_release_date.lte"
                        },
                        {
                            "name": "ReleaseDateGreater",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "release_date.gte"
                        },
                        {
                            "name": "ReleaseDateLess",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "release_date.lte"
                        },
                        {
                            "name": "WithReleaseType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "with_release_type"
                        },
                        {
                            "name": "Year",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "year"
                        },
                        {
                            "name": "VoteCountGreater",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "vote_count.gte"
                        },
                        {
                            "name": "VoteCountLess",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "vote_count.lte"
                        },
                        {
                            "name": "VoteAverageGreater",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "vote_average.gte"
                        },
                        {
                            "name": "VoteAverageLess",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "vote_average.lte"
                        },
                        {
                            "name": "WithCast",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "with_cast"
                        },
                        {
                            "name": "WithCrew",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "with_crew"
                        },
                        {
                            "name": "WithPeople",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "with_people"
                        },
                        {
                            "name": "WithCompanies",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "with_companies"
                        },
                        {
                            "name": "WithGenres",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "with_genres"
                        },
                        {
                            "name": "WithoutGenres",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "without_genres"
                        },
                        {
                            "name": "WithKeywords",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "with_keywords"
                        },
                        {
                            "name": "WithoutKeywords",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "without_keywords"
                        },
                        {
                            "name": "WithRuntimeGreater",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "with_runtime.gte"
                        },
                        {
                            "name": "WithRuntimeLess",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "with_runtime.lte"
                        },
                        {
                            "name": "WithOriginalLanguage",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "with_original_language"
                        },
                        {
                            "name": "WithWatchProviders",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "with_watch_providers"
                        },
                        {
                            "name": "WatchRegion",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "watch_region"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/models/interfaces.ts"
                },
                {
                    "name": "TmdbReleaseTypes",
                    "childs": [
                        {
                            "name": "PREMIERE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Premiere"
                        },
                        {
                            "name": "THEATRICAL_LIMITED",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Theatrical(limited)"
                        },
                        {
                            "name": "THEATRICAL",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Theatrical"
                        },
                        {
                            "name": "DIGITAL",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Digital"
                        },
                        {
                            "name": "PHYSICAL",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Physical"
                        },
                        {
                            "name": "TV",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "TV"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/models/interfaces.ts"
                },
                {
                    "name": "TmdbSearchMovieParameters",
                    "childs": [
                        {
                            "name": "ApiKey",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "api_key"
                        },
                        {
                            "name": "Language",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "language"
                        },
                        {
                            "name": "Query",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "query"
                        },
                        {
                            "name": "Page",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "page"
                        },
                        {
                            "name": "IncludeAdult",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "include_adult"
                        },
                        {
                            "name": "Region",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "region"
                        },
                        {
                            "name": "Year",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "year"
                        },
                        {
                            "name": "PrimaryReleaseYear",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "primary_release_year"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/models/interfaces.ts"
                }
            ],
            "src/app/services/notification.service.ts": [
                {
                    "name": "NotificationType",
                    "childs": [
                        {
                            "name": "ERROR",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "error"
                        },
                        {
                            "name": "INFO",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "info"
                        },
                        {
                            "name": "WARNING",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "warning"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/services/notification.service.ts"
                }
            ],
            "src/app/models/preferences.model.ts": [
                {
                    "name": "Quality",
                    "childs": [
                        {
                            "name": "SD",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "720p"
                        },
                        {
                            "name": "HD",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "1080p"
                        },
                        {
                            "name": "FHD",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "1440p"
                        },
                        {
                            "name": "FourK",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "4k"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/models/preferences.model.ts"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "source",
                    "childs": [
                        {
                            "name": "TMDB",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "TMDB"
                        },
                        {
                            "name": "IMDB",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "IMDB"
                        },
                        {
                            "name": "MDB",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "MDB"
                        },
                        {
                            "name": "OMDB",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "OMDB"
                        },
                        {
                            "name": "Local",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "local"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/environments/environment.ts"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "source",
                    "childs": [
                        {
                            "name": "TMDB",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "TMDB"
                        },
                        {
                            "name": "IMDB",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "IMDB"
                        },
                        {
                            "name": "MDB",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "MDB"
                        },
                        {
                            "name": "OMDB",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "OMDB"
                        },
                        {
                            "name": "Local",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "local"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/environments/environment.prod.ts"
                }
            ],
            "src/app/core/components/top-navigation/top-navigation.component.ts": [
                {
                    "name": "STATUS",
                    "childs": [
                        {
                            "name": "login",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "LOGIN"
                        },
                        {
                            "name": "logout",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "LOGOUT"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/core/components/top-navigation/top-navigation.component.ts"
                }
            ]
        },
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "video",
                        "loadChildren": "@modules/watch/video-player.module#VideoPlayerModule"
                    },
                    {
                        "path": "",
                        "redirectTo": "/preferences",
                        "pathMatch": "full"
                    },
                    {
                        "path": "browse",
                        "component": "BrowseComponent"
                    },
                    {
                        "path": "preferences",
                        "loadChildren": "app/modules/settings/preferences/preferences.module#PreferencesModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/modules/settings/preferences/preferences.routing.module.ts",
                                        "module": "PreferencesRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "PreferencesComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "PreferencesModule"
                            }
                        ]
                    },
                    {
                        "path": "preferences/bulk-download",
                        "component": "BulkDownloadComponent"
                    },
                    {
                        "path": "person-details/:id",
                        "component": "PersonDetailsComponent"
                    },
                    {
                        "path": "person-details",
                        "component": "PersonDetailsComponent"
                    },
                    {
                        "path": "preview",
                        "component": "PreviewComponent"
                    },
                    {
                        "path": "bookmarks",
                        "loadChildren": "@modules/user/bookmarks/bookmarks.module#BookmarksModule",
                        "canLoad": [
                            "MdbGuardGuard"
                        ],
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/modules/user/bookmarks/bookmarks.routing.module.ts",
                                        "module": "BookmarksRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "BookmarksComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "BookmarksModule"
                            }
                        ]
                    },
                    {
                        "path": "watched",
                        "loadChildren": "@modules/user/watched/watched.module#WatchedModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/modules/user/watched/watched.routing.module.ts",
                                        "module": "WatchedRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "WatchedComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "WatchedModule"
                            }
                        ]
                    },
                    {
                        "path": "dashboard",
                        "loadChildren": "@components/dashboard/dashboard.module#DashboardModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/components/dashboard/dashboard.routing.module.ts",
                                        "module": "DashboardRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "DashboardComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "DashboardModule"
                            }
                        ]
                    },
                    {
                        "path": "discover",
                        "loadChildren": "@modules/movie/discover/discover.module#DiscoverModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/modules/movie/discover/discover.routing.module.ts",
                                        "module": "DiscoverRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "DiscoverComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "DiscoverModule"
                            }
                        ]
                    },
                    {
                        "path": "library",
                        "loadChildren": "@modules/person/library/library.module#LibraryModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/modules/person/library/library.routing.module.ts",
                                        "module": "LibraryRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "LibraryComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "LibraryModule"
                            }
                        ]
                    },
                    {
                        "path": "results",
                        "loadChildren": "@components/results/results.module#ResultsModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/components/results/results.routing.module.ts",
                                        "module": "ResultsRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "ResultsComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "ResultsModule"
                            }
                        ]
                    },
                    {
                        "path": "details/:id",
                        "loadChildren": "@modules/movie/details/details.module#DetailsModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/modules/movie/details/details.routing.module.ts",
                                        "module": "DetailsRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "DetailsComponent"
                                            },
                                            {
                                                "path": "credits",
                                                "component": "CreditsComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "DetailsModule"
                            }
                        ]
                    },
                    {
                        "path": "user",
                        "loadChildren": "@modules/user/user.module#UserModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/modules/user/user.routing.module.ts",
                                        "module": "UserRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "redirectTo": "signin",
                                                "pathMatch": "full"
                                            },
                                            {
                                                "path": "signin",
                                                "component": "SigninComponent"
                                            },
                                            {
                                                "path": "profile",
                                                "component": "ProfileComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "UserModule"
                            }
                        ]
                    },
                    {
                        "path": "advanced-find",
                        "component": "AdvancedFindComponent"
                    },
                    {
                        "path": "**",
                        "redirectTo": "/dashboard",
                        "pathMatch": "full"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 5,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "RemoveUser",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/app.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SetUser",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/classes.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MdbMovieDetails",
                "coveragePercent": 4,
                "coverageCount": "2/45",
                "status": "low"
            },
            {
                "filePath": "src/app/components/advanced-find/advanced-find.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AdvancedFindComponent",
                "coveragePercent": 3,
                "coverageCount": "1/28",
                "status": "low"
            },
            {
                "filePath": "src/app/components/advanced-find/advanced-find.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "VOTE_COUNT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dashboard/view/dashboard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashboardComponent",
                "coveragePercent": 50,
                "coverageCount": "8/16",
                "status": "medium"
            },
            {
                "filePath": "src/app/components/navigation/navigation.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavigationComponent",
                "coveragePercent": 20,
                "coverageCount": "2/10",
                "status": "low"
            },
            {
                "filePath": "src/app/components/results/view/results.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ResultsComponent",
                "coveragePercent": 10,
                "coverageCount": "2/20",
                "status": "low"
            },
            {
                "filePath": "src/app/components/search/search.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SearchComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/components/top-navigation/top-navigation.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TopNavigationComponent",
                "coveragePercent": 11,
                "coverageCount": "5/44",
                "status": "low"
            },
            {
                "filePath": "src/app/core/components/top-navigation/top-navigation.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ISearchQuery",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/core/components/top-navigation/top-navigation.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITmdbSearchQuery",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/logger.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LoggerService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/directives/credentials.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "CredentialsDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/directives/credentials.directive.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CredentialsValidator",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/directives/emailAddress-exist.directive.ts",
                "type": "class",
                "linktype": "classe",
                "name": "EmailAddressExistValidator",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/directives/repeat-password.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "RepeatPasswordValidatorDirective",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/directives/repeat-password.directive.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "repeatPasswordValidator",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/directives/username-exist.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "UsernameExistValidatorDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/directives/username-exist.directive.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UsernameExistingValidator",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/directives/username-exist.directive.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UsernameExistValidator",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/encoding.constant.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ENCODING_LIST",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/mdb-guard.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "MdbGuardGuard",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/mock-data-movie-details.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TMDB_FULL_MOVIE_DETAILS",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/mock-data-person-details.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PERSON_COMBINED_CREDITS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/mock-data-person-details.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PERSON_DETAILS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/mock-data-person-details.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PERSON_DETAILS_FULL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/mock-data-person-details.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PERSON_EXTERNAL_IDS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/mock-data-person-details.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PERSON_IMAGES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/mock-data.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DisplayedTorrent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/mock-data.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DisplayedTorrents",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/mock-data.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StartTimeStamp",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/mock-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DISPLAYEDMOVIES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/mock-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MOCK_BULK_DOWNLOAD_TORRENTS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/mock-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MOCK_MOVIE_DETAIL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/mock-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MOCK_USER_DATA_LIST",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/mock-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MOVIEGENRES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/mock-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MOVIES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/mock-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TEST_LIBRARY_MOVIES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/mock-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TEST_OMDB_MOVIE_DETAIL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/mock-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TEST_TMDB_MOVIE_DETAIL2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/mock-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TEST_TMDB_MOVIE_DETAILS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/mock-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TEST_TMDB_SINGLE_RESULT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/mock-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TMDB_SEARCH_RESULTS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/mock-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TORRENTS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/mock-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "YTS_TORRENT_SINGLE_RESULT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/interfaces.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ITPBTorrent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/models/interfaces.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MDBTorrent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/models/interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CastElement",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/models/interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Credits",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/models/interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Crew",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/models/interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICast",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/models/interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICollection",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICredits",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICrew",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/models/interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IExternalids",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/models/interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IGenre",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IImages",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILibraryInfo",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/models/interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILibraryMovie",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/models/interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IMdbMovieDetails",
                "coveragePercent": 0,
                "coverageCount": "0/39",
                "status": "low"
            },
            {
                "filePath": "src/app/models/interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IOmdbMovieDetail",
                "coveragePercent": 0,
                "coverageCount": "0/26",
                "status": "low"
            },
            {
                "filePath": "src/app/models/interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPersonCastCrew",
                "coveragePercent": 0,
                "coverageCount": "0/25",
                "status": "low"
            },
            {
                "filePath": "src/app/models/interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPersonCredits",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/models/interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPersonDetails",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/models/interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IProductionCompany",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/models/interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IProductionCountry",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IProfile",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/models/interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IRating",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ISearch",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/models/interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ISpokenLanguage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITmdbMovieDetail",
                "coveragePercent": 0,
                "coverageCount": "0/26",
                "status": "low"
            },
            {
                "filePath": "src/app/models/interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITmdbResult",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/models/interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITmdbResultObject",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/models/interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IUserSavedData",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/models/interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LibraryInfo",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/models/interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MdbMovieDetails",
                "coveragePercent": 0,
                "coverageCount": "0/29",
                "status": "low"
            },
            {
                "filePath": "src/app/models/interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MovieGenre",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/models/interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "WatchList",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/mdb-movie.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MDBMovie",
                "coveragePercent": 2,
                "coverageCount": "1/39",
                "status": "low"
            },
            {
                "filePath": "src/app/models/mdb-movie.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICast",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/models/mdb-movie.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICredits",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/models/mdb-movie.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICrew",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/models/mdb-movie.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IVote",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/preferences.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IHotkeys",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/models/preferences.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILibraryPreferences",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/preferences.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPlaybackPreferences",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/models/preferences.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPreferences",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/models/preferences.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IScanFrequency",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/models/preferences.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IStreamPreferences",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/models/preferences.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ISubtitlePreferences",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/models/profile-data.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "IProfileData",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/models/profile-data.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Bookmark",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/models/profile-data.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Favorite",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/models/profile-data.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ListLinkMovie",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/profile-data.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Watched",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/review.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Review",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/models/subtitle.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Subtitle",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/models/tmdb-external-id.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TMDB_External_Id",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/models/yts-torrent.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Data",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/models/yts-torrent.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "IYTSSingleQuery",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/models/yts-torrent.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Meta",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/models/yts-torrent.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Movie",
                "coveragePercent": 0,
                "coverageCount": "0/27",
                "status": "low"
            },
            {
                "filePath": "src/app/models/yts-torrent.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "YTSTorrent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/admin/bulk-download/bulk-download.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BulkDownloadComponent",
                "coveragePercent": 20,
                "coverageCount": "3/15",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/admin/bulk-download/bulk-download.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SelectedMovie",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/admin/bulk-download/bulk-download.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SerializationHelper",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/admin/bulk-download/bulk-download.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Test1",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/admin/bulk-download/bulk-download.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TorrentResult",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/events/notification/notification.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NotificationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/movie/credits/credits.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreditsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/movie/details/details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DetailsComponent",
                "coveragePercent": 23,
                "coverageCount": "17/73",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/movie/details/details.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PlayLink",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/movie/discover/discover.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DiscoverComponent",
                "coveragePercent": 5,
                "coverageCount": "1/19",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/person/library/view/library.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LibraryComponent",
                "coveragePercent": 11,
                "coverageCount": "2/17",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/person/person-details/person-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PersonDetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/settings/keyboard-shortcuts/keyboard-shortcuts.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "KeyboardShortcutsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/settings/keyboard-shortcuts/keyboard-shortcuts.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HOTKEYS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/settings/preferences/preferences.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PreferencesComponent",
                "coveragePercent": 25,
                "coverageCount": "11/43",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/user/bookmarks/bookmarks.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BookmarksComponent",
                "coveragePercent": 6,
                "coverageCount": "1/16",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/user/browse/browse.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BrowseComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/user/profile/profile.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProfileComponent",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/user/profile/profile.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IProfile",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/user/signin/signin.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SigninComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/user/signin/signin.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CustomValidator",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/user/signin/signin.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SignIn",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/user/watched/watched.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WatchedComponent",
                "coveragePercent": 6,
                "coverageCount": "1/15",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/watch/video-player-controls/video-player-controls.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "VideoPlayerControlsComponent",
                "coveragePercent": 2,
                "coverageCount": "1/43",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/watch/video-player-controls/video-player-controls.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IProgressBar",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/watch/video-player-controls/video-player-controls.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IVideoTime",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/watch/video-player-stats/video-player-stats.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "VideoPlayerStatsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/watch/video-player.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "VideoPlayerComponent",
                "coveragePercent": 5,
                "coverageCount": "3/56",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/watch/video-player.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Stats",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/services/bookmark.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BookmarkService",
                "coveragePercent": 30,
                "coverageCount": "3/10",
                "status": "medium"
            },
            {
                "filePath": "src/app/services/bookmark.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IBookmark",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/services/cache.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CacheService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/services/cache.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICacheContent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/data.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DataService",
                "coveragePercent": 0,
                "coverageCount": "0/28",
                "status": "low"
            },
            {
                "filePath": "src/app/services/favorite.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FavoriteService",
                "coveragePercent": 33,
                "coverageCount": "2/6",
                "status": "medium"
            },
            {
                "filePath": "src/app/services/firebase.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FirebaseService",
                "coveragePercent": 25,
                "coverageCount": "8/32",
                "status": "low"
            },
            {
                "filePath": "src/app/services/firebase.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FirebaseData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/firebase.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IBookmark",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/services/firebase.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FirebaseListMax",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/http-interceptor.service.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "HttpInterceptorService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/http-interceptor.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "backendProvider",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/ipc.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "IpcService",
                "coveragePercent": 16,
                "coverageCount": "8/48",
                "status": "low"
            },
            {
                "filePath": "src/app/services/ipc.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Body",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/ipc.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Headers",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/ipc.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IBookmark",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/ipc.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IBookmarkChanges",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/services/ipc.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILibrary",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/services/ipc.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILibraryData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/ipc.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IUserDataPaginated",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/ipc.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SortObject",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/library.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LibraryService",
                "coveragePercent": 71,
                "coverageCount": "5/7",
                "status": "good"
            },
            {
                "filePath": "src/app/services/library.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IRawLibrary",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/services/library.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IVideo",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/services/library.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Library",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/mdb-api.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MdbApiService",
                "coveragePercent": 5,
                "coverageCount": "1/20",
                "status": "low"
            },
            {
                "filePath": "src/app/services/mdb-api.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LoginUser",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/mdb-api.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RegisterUser",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/services/mdb-api.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "JSON_CONTENT_TYPE_HEADER",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/mock-data.factory.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "mockDataFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/mock-data.factory.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TMDB_MOVIE_VIDEO_LIST",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/mock/services/mock-movie.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MockMovieService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/movie/interface/movie.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MDBMovieListModel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/movie/interface/movie.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MDBMovieModel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/movie/interface/movie.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TmdbMovieListModel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/movie/interface/movie.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TmdbMovieModel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/movie/movie.query.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MDBMovieQuery",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/services/movie/movie.query.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SearchMovieQuery",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/services/movie/movie.query.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TMDBMovieQuery",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/services/movie/movie.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MovieService",
                "coveragePercent": 46,
                "coverageCount": "13/28",
                "status": "medium"
            },
            {
                "filePath": "src/app/services/movie/movie.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "JSON_CONTENT_TYPE_HEADER",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/movie/movie.store.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MDBMovieSearchStore",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/services/movie/movie.store.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MDBMovieStore",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/services/movie/movie.store.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TMDBMovieStore",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/services/movie/movie.store.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MDBMovieSearchState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/movie/movie.store.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MDBMovieState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/movie/movie.store.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TmdbMovieState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/navigation.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Navigation",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/services/navigation.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NavigationService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/services/navigation.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "INavigation",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/services/notification.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NotificationService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/notification.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "INotification",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/person.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PersonService",
                "coveragePercent": 12,
                "coverageCount": "1/8",
                "status": "low"
            },
            {
                "filePath": "src/app/services/person.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "jsonContentType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/preferences.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PreferencesService",
                "coveragePercent": 12,
                "coverageCount": "1/8",
                "status": "low"
            },
            {
                "filePath": "src/app/services/socket.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "WebSocketService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/services/tmdb/tmdb.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TmdbService",
                "coveragePercent": 50,
                "coverageCount": "6/12",
                "status": "medium"
            },
            {
                "filePath": "src/app/services/tmdb/tmdb.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "JSON_CONTENT_TYPE_HEADER",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/torrent/torrent.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TorrentService",
                "coveragePercent": 26,
                "coverageCount": "7/26",
                "status": "medium"
            },
            {
                "filePath": "src/app/services/torrent/torrent.service.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "MagnetPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/torrent/torrent.service.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "SimplifySizePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/torrent/torrent.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "httpOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/user-data/user-data.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserDataService",
                "coveragePercent": 41,
                "coverageCount": "5/12",
                "status": "medium"
            },
            {
                "filePath": "src/app/services/utils.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UtilsService",
                "coveragePercent": 50,
                "coverageCount": "2/4",
                "status": "medium"
            },
            {
                "filePath": "src/app/services/watched.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "WatchedService",
                "coveragePercent": 40,
                "coverageCount": "4/10",
                "status": "medium"
            },
            {
                "filePath": "src/app/services/watched.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IWatched",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/card-list/card-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardListComponent",
                "coveragePercent": 20,
                "coverageCount": "3/15",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/card-list/card-list.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IMovieAndUserData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/floating-player/floating-player.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FloatingPlayerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/horizontal-card-list/horizontal-card-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HorizontalCardListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/image-preview/image-preview.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ImagePreviewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/input-cont/input-cont.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputContComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/input-container/input-container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/input-container/input-container.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IOptionSelections",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/movie-card/movie-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MovieCardComponent",
                "coveragePercent": 12,
                "coverageCount": "4/32",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/preview/preview.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PreviewComponent",
                "coveragePercent": 14,
                "coverageCount": "6/41",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/preview/preview.component.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "GenrePipe",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/shared/components/selected-list/selected-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectedListComponent",
                "coveragePercent": 33,
                "coverageCount": "4/12",
                "status": "medium"
            },
            {
                "filePath": "src/app/shared/components/youtube-player/youtube-player.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "YoutubePlayerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "COLOR_LIST",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DECADES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_PREFERENCES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_SUBTITLES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FANART_TV_API_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FANART_TV_URL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FONT_SIZE_LIST",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FREQUENCY_LIST",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GENRES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LANGUAGE_LIST",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MDB_API_URL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MONTHS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MOVIE_QUOTES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MY_API_FILMS_API_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MY_API_FILMS_URL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OMDB_API_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OMDB_URL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PERCENTAGE_LIST",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PLAYBACK",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RGB_COLOR_LIST",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SORT_BY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "STRING_REGEX_FILE_SIZE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "STRING_REGEX_IMAGE_SIZE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "STRING_REGEX_IMDB_ID",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "STRING_REGEX_OMDB_BOX_OFFICE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "STRING_REGEX_OMDB_RELEASE_DATE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "STRING_REGEX_PREFIX",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "STRING_REGEX_TMDB_RELEASE_DATE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "STRING_REGEX_TMDB_RUNTIME",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "STRING_REGEX_YEAR_ONLY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "testBaseUrl",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TMDB_API_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TMDB_BACKGROUND_SIZES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TMDB_IMAGE_BASE_URL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TMDB_IMAGE_SECURE_BASE_URL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TMDB_LOGO_SIZES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TMDB_POSTER_SIZES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TMDB_PROFILE_SIZES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TMDB_STILL_SIZES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TMDB_URL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TRAK_TV_API_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TRAK_TV_API_KEY_SECRET",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TROUBLE_QUOTES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "YOUTUBE_API_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "YTS_URL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/endpoint.const.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ENDPOINT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/mdb-pipes.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "CommaSpacePipe",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/shared/pipes/mdb-pipes.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "HHMMSSPipe",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/shared/pipes/mdb-pipes.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "ReleaseYearPipe",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/shared/pipes/mdb-pipes.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "RuntimeDisplayPipe",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/utils/general.util.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GeneralUtil",
                "coveragePercent": 71,
                "coverageCount": "5/7",
                "status": "good"
            },
            {
                "filePath": "src/app/utils/object.utils.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ObjectUtil",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/utils/subtitles.utils.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SubtitlesUtil",
                "coveragePercent": 25,
                "coverageCount": "1/4",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/User.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}